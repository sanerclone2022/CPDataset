[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testUpdateWithUnknownAndSettings() {\n        \r\n        final int numberOfDynamicSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> dynamicSettings = new ArrayList<>(numberOfDynamicSettings);\n        for (int i = 0; i < numberOfDynamicSettings; i++) {\n            final Setting<String> dynamicSetting = Setting.simpleString(\"dynamic.setting\" + i, Property.Dynamic, Property.NodeScope);\n            dynamicSettings.add(dynamicSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = new ArrayList<>(numberOfInvalidSettings);\n        for (int i = 0; i < numberOfInvalidSettings; i++) {\n            final Setting<String> invalidSetting = Setting.simpleString(\n                    \"invalid.setting\" + i,\n                    (value, settings) -> {\n                        throw new IllegalArgumentException(\"invalid\");\n                    },\n                    Property.NodeScope);\n            invalidSettings.add(invalidSetting);\n        }\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = new ArrayList<>(numberOfUnknownSettings);\n        for (int i = 0; i < numberOfUnknownSettings; i++) {\n            final Setting<String> unknownSetting = Setting.simpleString(\"unknown.setting\" + i, Property.NodeScope);\n            unknownSettings.add(unknownSetting);\n        }\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    existingPersistentSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 1:\n                    existingTransientSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(dynamicSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            clusterSettings.addSettingsUpdateConsumer(dynamicSetting, s -> {});\n        }\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        \r\n        final Settings.Builder persistentToApply = Settings.builder();\n        final Settings.Builder transientToApply = Settings.builder();\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    persistentToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 1:\n                    transientToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        if (transientToApply.keys().isEmpty() && persistentToApply.keys().isEmpty()) {\n            \r\n            if (randomBoolean()) {\n                persistentToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            } else {\n                transientToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            }\n        }\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            if (persistentToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else if (transientToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else {\n                if (existingPersistentSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else if (existingTransientSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                }\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":345,"groupId":"49822","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateWithUnknownAndSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d5/82141898684311fdc7c49f0edc14bdc6eec4f7.src","preCode":"    public void testUpdateWithUnknownAndSettings() {\n        \r\n        final int numberOfDynamicSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> dynamicSettings = new ArrayList<>(numberOfDynamicSettings);\n        for (int i = 0; i < numberOfDynamicSettings; i++) {\n            final Setting<String> dynamicSetting = Setting.simpleString(\"dynamic.setting\" + i, Property.Dynamic, Property.NodeScope);\n            dynamicSettings.add(dynamicSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = new ArrayList<>(numberOfInvalidSettings);\n        for (int i = 0; i < numberOfInvalidSettings; i++) {\n            final Setting<String> invalidSetting = Setting.simpleString(\n                    \"invalid.setting\" + i,\n                    (value, settings) -> {\n                        throw new IllegalArgumentException(\"invalid\");\n                    },\n                    Property.NodeScope);\n            invalidSettings.add(invalidSetting);\n        }\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = new ArrayList<>(numberOfUnknownSettings);\n        for (int i = 0; i < numberOfUnknownSettings; i++) {\n            final Setting<String> unknownSetting = Setting.simpleString(\"unknown.setting\" + i, Property.NodeScope);\n            unknownSettings.add(unknownSetting);\n        }\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    existingPersistentSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 1:\n                    existingTransientSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(dynamicSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            clusterSettings.addSettingsUpdateConsumer(dynamicSetting, s -> {});\n        }\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        \r\n        final Settings.Builder persistentToApply = Settings.builder();\n        final Settings.Builder transientToApply = Settings.builder();\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    persistentToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 1:\n                    transientToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        if (transientToApply.keys().isEmpty() && persistentToApply.keys().isEmpty()) {\n            \r\n            if (randomBoolean()) {\n                persistentToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            } else {\n                transientToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            }\n        }\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            if (persistentToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else if (transientToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else {\n                if (existingPersistentSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else if (existingTransientSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdaterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRemovingArchivedSettingsDoesNotRemoveNonArchivedInvalidOrUnknownSettings() {\n        \r\n        final int numberOfArchivedSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> archivedSettings = new ArrayList<>(numberOfArchivedSettings);\n        for (int i = 0; i < numberOfArchivedSettings; i++) {\n            final Setting<String> archivedSetting = Setting.simpleString(\"setting\", Property.NodeScope);\n            archivedSettings.add(archivedSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = new ArrayList<>(numberOfInvalidSettings);\n        for (int i = 0; i < numberOfInvalidSettings; i++) {\n            final Setting<String> invalidSetting = Setting.simpleString(\n                    \"invalid.setting\" + i,\n                    (value, settings) -> {\n                        throw new IllegalArgumentException(\"invalid\");\n                    },\n                    Property.NodeScope);\n            invalidSettings.add(invalidSetting);\n        }\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = new ArrayList<>(numberOfUnknownSettings);\n        for (int i = 0; i < numberOfUnknownSettings; i++) {\n            final Setting<String> unknownSetting = Setting.simpleString(\"unknown.setting\" + i, Property.NodeScope);\n            unknownSettings.add(unknownSetting);\n        }\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(archivedSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        final Settings.Builder persistentToApply = Settings.builder().put(\"archived.*\", (String)null);\n        final Settings.Builder transientToApply = Settings.builder().put(\"archived.*\", (String)null);\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (existingPersistentSettings.keys().contains(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            }\n        }\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":474,"groupId":"25323","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovingArchivedSettingsDoesNotRemoveNonArchivedInvalidOrUnknownSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d5/82141898684311fdc7c49f0edc14bdc6eec4f7.src","preCode":"    public void testRemovingArchivedSettingsDoesNotRemoveNonArchivedInvalidOrUnknownSettings() {\n        \r\n        final int numberOfArchivedSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> archivedSettings = new ArrayList<>(numberOfArchivedSettings);\n        for (int i = 0; i < numberOfArchivedSettings; i++) {\n            final Setting<String> archivedSetting = Setting.simpleString(\"setting\", Property.NodeScope);\n            archivedSettings.add(archivedSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = new ArrayList<>(numberOfInvalidSettings);\n        for (int i = 0; i < numberOfInvalidSettings; i++) {\n            final Setting<String> invalidSetting = Setting.simpleString(\n                    \"invalid.setting\" + i,\n                    (value, settings) -> {\n                        throw new IllegalArgumentException(\"invalid\");\n                    },\n                    Property.NodeScope);\n            invalidSettings.add(invalidSetting);\n        }\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = new ArrayList<>(numberOfUnknownSettings);\n        for (int i = 0; i < numberOfUnknownSettings; i++) {\n            final Setting<String> unknownSetting = Setting.simpleString(\"unknown.setting\" + i, Property.NodeScope);\n            unknownSettings.add(unknownSetting);\n        }\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(archivedSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        final Settings.Builder persistentToApply = Settings.builder().put(\"archived.*\", (String)null);\n        final Settings.Builder transientToApply = Settings.builder().put(\"archived.*\", (String)null);\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (existingPersistentSettings.keys().contains(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            }\n        }\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdaterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-01-08 00:12:58","codes":[{"authorDate":"2019-01-08 00:12:58","commitOrder":2,"curCode":"    public void testUpdateWithUnknownAndSettings() {\n        \r\n        final int numberOfDynamicSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> dynamicSettings = new ArrayList<>(numberOfDynamicSettings);\n        for (int i = 0; i < numberOfDynamicSettings; i++) {\n            final Setting<String> dynamicSetting = Setting.simpleString(\"dynamic.setting\" + i, Property.Dynamic, Property.NodeScope);\n            dynamicSettings.add(dynamicSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = invalidSettings(numberOfInvalidSettings);\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = unknownSettings(numberOfUnknownSettings);\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    existingPersistentSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 1:\n                    existingTransientSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(dynamicSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            clusterSettings.addSettingsUpdateConsumer(dynamicSetting, s -> {});\n        }\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        \r\n        final Settings.Builder persistentToApply = Settings.builder();\n        final Settings.Builder transientToApply = Settings.builder();\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    persistentToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 1:\n                    transientToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        if (transientToApply.keys().isEmpty() && persistentToApply.keys().isEmpty()) {\n            \r\n            if (randomBoolean()) {\n                persistentToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            } else {\n                transientToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            }\n        }\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            if (persistentToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else if (transientToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else {\n                if (existingPersistentSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else if (existingTransientSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                }\n            }\n        }\n    }\n","date":"2019-01-08 00:12:58","endLine":374,"groupId":"49822","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateWithUnknownAndSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/86a630d86ab23763e5d1a027d9333c63cf23e5.src","preCode":"    public void testUpdateWithUnknownAndSettings() {\n        \r\n        final int numberOfDynamicSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> dynamicSettings = new ArrayList<>(numberOfDynamicSettings);\n        for (int i = 0; i < numberOfDynamicSettings; i++) {\n            final Setting<String> dynamicSetting = Setting.simpleString(\"dynamic.setting\" + i, Property.Dynamic, Property.NodeScope);\n            dynamicSettings.add(dynamicSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = new ArrayList<>(numberOfInvalidSettings);\n        for (int i = 0; i < numberOfInvalidSettings; i++) {\n            final Setting<String> invalidSetting = Setting.simpleString(\n                    \"invalid.setting\" + i,\n                    (value, settings) -> {\n                        throw new IllegalArgumentException(\"invalid\");\n                    },\n                    Property.NodeScope);\n            invalidSettings.add(invalidSetting);\n        }\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = new ArrayList<>(numberOfUnknownSettings);\n        for (int i = 0; i < numberOfUnknownSettings; i++) {\n            final Setting<String> unknownSetting = Setting.simpleString(\"unknown.setting\" + i, Property.NodeScope);\n            unknownSettings.add(unknownSetting);\n        }\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    existingPersistentSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 1:\n                    existingTransientSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(dynamicSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            clusterSettings.addSettingsUpdateConsumer(dynamicSetting, s -> {});\n        }\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        \r\n        final Settings.Builder persistentToApply = Settings.builder();\n        final Settings.Builder transientToApply = Settings.builder();\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    persistentToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 1:\n                    transientToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        if (transientToApply.keys().isEmpty() && persistentToApply.keys().isEmpty()) {\n            \r\n            if (randomBoolean()) {\n                persistentToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            } else {\n                transientToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            }\n        }\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            if (persistentToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else if (transientToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else {\n                if (existingPersistentSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else if (existingTransientSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdaterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2019-01-08 00:12:58","commitOrder":2,"curCode":"    public void testRemovingArchivedSettingsDoesNotRemoveNonArchivedInvalidOrUnknownSettings() {\n        \r\n        final int numberOfArchivedSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> archivedSettings = new ArrayList<>(numberOfArchivedSettings);\n        for (int i = 0; i < numberOfArchivedSettings; i++) {\n            final Setting<String> archivedSetting = Setting.simpleString(\"setting\", Property.NodeScope);\n            archivedSettings.add(archivedSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = invalidSettings(numberOfInvalidSettings);\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = unknownSettings(numberOfUnknownSettings);\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(archivedSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        final Settings.Builder persistentToApply = Settings.builder().put(\"archived.*\", (String)null);\n        final Settings.Builder transientToApply = Settings.builder().put(\"archived.*\", (String)null);\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (existingPersistentSettings.keys().contains(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            }\n        }\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n    }\n","date":"2019-01-08 00:12:58","endLine":490,"groupId":"25323","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovingArchivedSettingsDoesNotRemoveNonArchivedInvalidOrUnknownSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/86a630d86ab23763e5d1a027d9333c63cf23e5.src","preCode":"    public void testRemovingArchivedSettingsDoesNotRemoveNonArchivedInvalidOrUnknownSettings() {\n        \r\n        final int numberOfArchivedSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> archivedSettings = new ArrayList<>(numberOfArchivedSettings);\n        for (int i = 0; i < numberOfArchivedSettings; i++) {\n            final Setting<String> archivedSetting = Setting.simpleString(\"setting\", Property.NodeScope);\n            archivedSettings.add(archivedSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = new ArrayList<>(numberOfInvalidSettings);\n        for (int i = 0; i < numberOfInvalidSettings; i++) {\n            final Setting<String> invalidSetting = Setting.simpleString(\n                    \"invalid.setting\" + i,\n                    (value, settings) -> {\n                        throw new IllegalArgumentException(\"invalid\");\n                    },\n                    Property.NodeScope);\n            invalidSettings.add(invalidSetting);\n        }\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = new ArrayList<>(numberOfUnknownSettings);\n        for (int i = 0; i < numberOfUnknownSettings; i++) {\n            final Setting<String> unknownSetting = Setting.simpleString(\"unknown.setting\" + i, Property.NodeScope);\n            unknownSettings.add(unknownSetting);\n        }\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(archivedSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        final Settings.Builder persistentToApply = Settings.builder().put(\"archived.*\", (String)null);\n        final Settings.Builder transientToApply = Settings.builder().put(\"archived.*\", (String)null);\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (existingPersistentSettings.keys().contains(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            }\n        }\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdaterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"9602d794c62ea526ef2ab5f610e746763d78bdd1","commitMessage":"@@@Separate out validation of groups of settings (#34184)\n\nToday.  a setting can declare that its validity depends on the values of other\nrelated settings. However.  the validity of a setting is not always checked\nagainst the correct values of its dependent settings because those settings'\ncorrect values may not be available when the validator runs.\n\nThis commit separates the validation of a settings updates into two phases. \nwith separate methods on the `Setting.Validator` interface. In the first phase\nthe setting's validity is checked in isolation.  and in the second phase it is\nchecked again against the values of its related settings. Most settings only\nuse the first phase.  and only the few settings with dependencies make use of\nthe second phase.","date":"2019-01-08 00:12:58","modifiedFileCount":"15","status":"M","submitter":"Christophe Bismuth"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testUpdateWithUnknownAndSettings() {\n        \r\n        final int numberOfDynamicSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> dynamicSettings = new ArrayList<>(numberOfDynamicSettings);\n        for (int i = 0; i < numberOfDynamicSettings; i++) {\n            final Setting<String> dynamicSetting = Setting.simpleString(\"dynamic.setting\" + i, Property.Dynamic, Property.NodeScope);\n            dynamicSettings.add(dynamicSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = invalidSettings(numberOfInvalidSettings);\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = unknownSettings(numberOfUnknownSettings);\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    existingPersistentSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 1:\n                    existingTransientSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(dynamicSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            clusterSettings.addSettingsUpdateConsumer(dynamicSetting, s -> {});\n        }\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final Metadata.Builder metadataBuilder =\n                Metadata.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metadata(metadataBuilder).build();\n\n        \r\n        final Settings.Builder persistentToApply = Settings.builder();\n        final Settings.Builder transientToApply = Settings.builder();\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    persistentToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 1:\n                    transientToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        if (transientToApply.keys().isEmpty() && persistentToApply.keys().isEmpty()) {\n            \r\n            if (randomBoolean()) {\n                persistentToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            } else {\n                transientToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            }\n        }\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metadata().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metadata().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metadata().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metadata().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            if (persistentToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metadata().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metadata().persistentSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else if (transientToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metadata().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metadata().transientSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else {\n                if (existingPersistentSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metadata().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metadata().persistentSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else if (existingTransientSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metadata().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metadata().transientSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else {\n                    assertThat(clusterStateAfterUpdate.metadata().persistentSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                    assertThat(clusterStateAfterUpdate.metadata().transientSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                }\n            }\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":374,"groupId":"105850","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateWithUnknownAndSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/87be635deada41f8eb58d7c78639e18685619b.src","preCode":"    public void testUpdateWithUnknownAndSettings() {\n        \r\n        final int numberOfDynamicSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> dynamicSettings = new ArrayList<>(numberOfDynamicSettings);\n        for (int i = 0; i < numberOfDynamicSettings; i++) {\n            final Setting<String> dynamicSetting = Setting.simpleString(\"dynamic.setting\" + i, Property.Dynamic, Property.NodeScope);\n            dynamicSettings.add(dynamicSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = invalidSettings(numberOfInvalidSettings);\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = unknownSettings(numberOfUnknownSettings);\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    existingPersistentSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 1:\n                    existingTransientSettings.put(dynamicSetting.getKey(), \"existing_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(dynamicSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            clusterSettings.addSettingsUpdateConsumer(dynamicSetting, s -> {});\n        }\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        \r\n        final Settings.Builder persistentToApply = Settings.builder();\n        final Settings.Builder transientToApply = Settings.builder();\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            switch (randomIntBetween(0, 2)) {\n                case 0:\n                    persistentToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 1:\n                    transientToApply.put(dynamicSetting.getKey(), \"new_value\");\n                    break;\n                case 2:\n                    break;\n            }\n        }\n\n        if (transientToApply.keys().isEmpty() && persistentToApply.keys().isEmpty()) {\n            \r\n            if (randomBoolean()) {\n                persistentToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            } else {\n                transientToApply.put(dynamicSettings.get(0).getKey(), \"new_value\");\n            }\n        }\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> dynamicSetting : dynamicSettings) {\n            if (persistentToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else if (transientToApply.keys().contains(dynamicSetting.getKey())) {\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                assertThat(clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()), equalTo(\"new_value\"));\n            } else {\n                if (existingPersistentSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().persistentSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else if (existingTransientSettings.keys().contains(dynamicSetting.getKey())) {\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), hasItem(dynamicSetting.getKey()));\n                    assertThat(\n                            clusterStateAfterUpdate.metaData().transientSettings().get(dynamicSetting.getKey()),\n                            equalTo(\"existing_value\"));\n                } else {\n                    assertThat(clusterStateAfterUpdate.metaData().persistentSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                    assertThat(clusterStateAfterUpdate.metaData().transientSettings().keySet(), not(hasItem(dynamicSetting.getKey())));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdaterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testRemovingArchivedSettingsDoesNotRemoveNonArchivedInvalidOrUnknownSettings() {\n        \r\n        final int numberOfArchivedSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> archivedSettings = new ArrayList<>(numberOfArchivedSettings);\n        for (int i = 0; i < numberOfArchivedSettings; i++) {\n            final Setting<String> archivedSetting = Setting.simpleString(\"setting\", Property.NodeScope);\n            archivedSettings.add(archivedSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = invalidSettings(numberOfInvalidSettings);\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = unknownSettings(numberOfUnknownSettings);\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(archivedSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final Metadata.Builder metadataBuilder =\n                Metadata.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metadata(metadataBuilder).build();\n\n        final Settings.Builder persistentToApply = Settings.builder().put(\"archived.*\", (String)null);\n        final Settings.Builder transientToApply = Settings.builder().put(\"archived.*\", (String)null);\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (existingPersistentSettings.keys().contains(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().persistentSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().transientSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            }\n        }\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metadata().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metadata().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metadata().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metadata().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metadata().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":490,"groupId":"105850","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovingArchivedSettingsDoesNotRemoveNonArchivedInvalidOrUnknownSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/87be635deada41f8eb58d7c78639e18685619b.src","preCode":"    public void testRemovingArchivedSettingsDoesNotRemoveNonArchivedInvalidOrUnknownSettings() {\n        \r\n        final int numberOfArchivedSettings = randomIntBetween(1, 8);\n        final List<Setting<String>> archivedSettings = new ArrayList<>(numberOfArchivedSettings);\n        for (int i = 0; i < numberOfArchivedSettings; i++) {\n            final Setting<String> archivedSetting = Setting.simpleString(\"setting\", Property.NodeScope);\n            archivedSettings.add(archivedSetting);\n        }\n\n        \r\n        final int numberOfInvalidSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> invalidSettings = invalidSettings(numberOfInvalidSettings);\n\n        \r\n        final int numberOfUnknownSettings = randomIntBetween(0, 7);\n        final List<Setting<String>> unknownSettings = unknownSettings(numberOfUnknownSettings);\n\n        final Settings.Builder existingPersistentSettings = Settings.builder();\n        final Settings.Builder existingTransientSettings = Settings.builder();\n\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(invalidSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(invalidSetting.getKey(), \"value\");\n            }\n        }\n\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (randomBoolean()) {\n                existingPersistentSettings.put(unknownSetting.getKey(), \"value\");\n            } else {\n                existingTransientSettings.put(unknownSetting.getKey(), \"value\");\n            }\n        }\n\n        \r\n        final Set<Setting<?>> knownSettings =\n                Stream.concat(\n                        ClusterSettings.BUILT_IN_CLUSTER_SETTINGS.stream(),\n                        Stream.concat(archivedSettings.stream(), invalidSettings.stream()))\n                        .collect(Collectors.toSet());\n        final ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, knownSettings);\n        final SettingsUpdater settingsUpdater = new SettingsUpdater(clusterSettings);\n        final MetaData.Builder metaDataBuilder =\n                MetaData.builder()\n                        .persistentSettings(existingPersistentSettings.build())\n                        .transientSettings(existingTransientSettings.build());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(\"cluster\")).metaData(metaDataBuilder).build();\n\n        final Settings.Builder persistentToApply = Settings.builder().put(\"archived.*\", (String)null);\n        final Settings.Builder transientToApply = Settings.builder().put(\"archived.*\", (String)null);\n\n        final ClusterState clusterStateAfterUpdate =\n                settingsUpdater.updateSettings(clusterState, transientToApply.build(), persistentToApply.build(), logger);\n\n        \r\n        for (final Setting<String> archivedSetting : archivedSettings) {\n            if (existingPersistentSettings.keys().contains(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        not(hasItem(ARCHIVED_SETTINGS_PREFIX + archivedSetting.getKey())));\n            }\n        }\n\n        \r\n        for (final Setting<String> invalidSetting : invalidSettings) {\n            if (existingPersistentSettings.keys().contains(invalidSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + invalidSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(invalidSetting.getKey())));\n        }\n\n        \r\n        for (final Setting<String> unknownSetting : unknownSettings) {\n            if (existingPersistentSettings.keys().contains(unknownSetting.getKey())) {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            } else {\n                assertThat(\n                        clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                        hasItem(ARCHIVED_SETTINGS_PREFIX + unknownSetting.getKey()));\n            }\n            assertThat(\n                    clusterStateAfterUpdate.metaData().persistentSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n            assertThat(\n                    clusterStateAfterUpdate.metaData().transientSettings().keySet(),\n                    not(hasItem(unknownSetting.getKey())));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdaterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
