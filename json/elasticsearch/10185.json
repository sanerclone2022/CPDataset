[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType();\n        ft.setName(\"scaled_float\");\n        ft.setScalingFactor(0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, null);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2018-04-26 03:22:53","endLine":125,"groupId":"9230","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/88022b3e0e0d3005c7c56d98172044c8b305ac.src","preCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType();\n        ft.setName(\"scaled_float\");\n        ft.setScalingFactor(0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, null);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberFieldMapper.NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false);\n            Query halfFloatQ = NumberFieldMapper.NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2018-04-26 03:22:53","endLine":357,"groupId":"25729","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHalfFloatRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/fe48fe70af6e72491511534608b5d5048f2259.src","preCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberFieldMapper.NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false);\n            Query halfFloatQ = NumberFieldMapper.NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-05-14 02:34:54","codes":[{"authorDate":"2020-05-14 02:34:54","commitOrder":2,"curCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType();\n        ft.setName(\"scaled_float\");\n        ft.setScalingFactor(0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-05-14 02:34:54","endLine":125,"groupId":"9230","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/e44a01ed610f7d4ad026e78e3295b0f2e9754d.src","preCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType();\n        ft.setName(\"scaled_float\");\n        ft.setScalingFactor(0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, null);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2020-05-14 02:34:54","commitOrder":2,"curCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-05-14 02:34:54","endLine":384,"groupId":"25729","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHalfFloatRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/4c7ddc2931389e5caed12c4b74c35b30da0a8d.src","preCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberFieldMapper.NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false);\n            Query halfFloatQ = NumberFieldMapper.NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"}],"commitId":"7b34e22890e15b7480689b216c48487c87385978","commitMessage":"@@@Use index sort range query when possible. (#56657)\n\nThis PR proposes to use `IndexSortSortedNumericDocValuesRangeQuery` when possible to speed up certain range queries. Points-based queries are already very efficient.  the only time this query makes a difference is when the range matches a large number of documents.\n\nSome notes:\n* The optimization is only applied for fields of type `date`.  `integer`.  and `long`. I found that the query implementation isn't yet suited for `double` or `float` types (I will follow up with a Lucene issue).\n* Before applying the query.  we check that the index is sorted on the query field. This isn't strictly necessary.  since the query itself checks this as part of its execution. But it seemed nice to avoid wrapping the query unnecessarily -- it makes debugging easier.  like when reading search profile results.\n\nBelow are benchmark results on the http-logs dataset. The following ranges were run against the `logs-241998` index:\n\nrange-small (897633930.  897655999]: ~2M docs\nrange-medium (897623930.  897655999]: ~5M docs\nrange-large (897259801.  897503930]: ~21M docs\n\n```\n| 50th percentile service time |  range-small |     11.0228 |     8.19478 | -2.82797 |     ms |\n| 95th percentile service time |  range-small |     11.8153 |     9.06257 | -2.75274 |     ms |\n| 50th percentile service time | range-medium |     22.8912 |     7.23264 | -15.6585 |     ms |\n| 95th percentile service time | range-medium |     25.0957 |     7.93246 | -17.1632 |     ms |\n| 50th percentile service time |  range-large |     39.7224 |     6.34589 | -33.3765 |     ms |\n| 95th percentile service time |  range-large |     43.9104 |     7.06604 | -36.8444 |     ms |\n```\n\nRelates to #48665.","date":"2020-05-14 02:34:54","modifiedFileCount":"12","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2020-05-14 02:34:54","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft\n            = new ScaledFloatFieldMapper.ScaledFloatFieldType(\"scaled_float\", 0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-06-16 00:47:15","endLine":104,"groupId":"9230","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/517cf4e35a252cb03aa9827f31762368949e65.src","preCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType();\n        ft.setName(\"scaled_float\");\n        ft.setScalingFactor(0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-05-14 02:34:54","commitOrder":3,"curCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-05-14 02:34:54","endLine":384,"groupId":"25729","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHalfFloatRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/4c7ddc2931389e5caed12c4b74c35b30da0a8d.src","preCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"N"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-05-14 02:34:54","codes":[{"authorDate":"2020-09-15 20:19:42","commitOrder":4,"curCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType(\n                    \"scaled_float\", true, false, Collections.emptyMap(), 0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-09-15 20:19:42","endLine":96,"groupId":"9230","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/01/8827fed7f67f039fa54e8bff354946bf86d3e5.src","preCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft\n            = new ScaledFloatFieldMapper.ScaledFloatFieldType(\"scaled_float\", 0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2020-05-14 02:34:54","commitOrder":4,"curCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-05-14 02:34:54","endLine":384,"groupId":"25729","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHalfFloatRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/4c7ddc2931389e5caed12c4b74c35b30da0a8d.src","preCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"N"}],"commitId":"39bde05040acb72dd0455c3c1431c0765c63a7c0","commitMessage":"@@@Upgrade to lucene-8.7.0-snapshot-cdfdc1e0851. (#62334)\n\nUpgrade to a new Lucene snapshot that (at least partially) addresses the\nindexing rate regression when index sorting is enabled.","date":"2020-09-15 20:19:42","modifiedFileCount":"1","status":"M","submitter":"Adrien Grand"},{"authorTime":"2020-05-14 02:34:54","codes":[{"authorDate":"2020-09-22 21:41:24","commitOrder":5,"curCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType(\n                    \"scaled_float\", true, false, false, Collections.emptyMap(), 0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-09-22 21:41:24","endLine":95,"groupId":"9230","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f3/24d71d7f576115e998b1c459ba56df4b061f07.src","preCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType(\n                    \"scaled_float\", true, false, Collections.emptyMap(), 0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-05-14 02:34:54","commitOrder":5,"curCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-05-14 02:34:54","endLine":384,"groupId":"25729","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testHalfFloatRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/4c7ddc2931389e5caed12c4b74c35b30da0a8d.src","preCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"N"}],"commitId":"3a9b65733c50e36182c2906a692297ef80720466","commitMessage":"@@@Move stored flag from TextSearchInfo to MappedFieldType (#62717)\n\n","date":"2020-09-22 21:41:24","modifiedFileCount":"84","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-05-14 02:34:54","codes":[{"authorDate":"2020-10-04 17:47:04","commitOrder":6,"curCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType(\n                    \"scaled_float\", true, false, false, Collections.emptyMap(), 0.1 + randomDouble() * 100, null);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-10-04 17:47:04","endLine":99,"groupId":"9230","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/97/6c0582c9c7ff7b9e980bb83ba78141a697e41d.src","preCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType(\n                    \"scaled_float\", true, false, false, Collections.emptyMap(), 0.1 + randomDouble() * 100);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-05-14 02:34:54","commitOrder":6,"curCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2020-05-14 02:34:54","endLine":384,"groupId":"25729","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testHalfFloatRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/4c7ddc2931389e5caed12c4b74c35b30da0a8d.src","preCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"N"}],"commitId":"ce649d07d772a17d5b5b3506044a408f6bef72c6","commitMessage":"@@@Move FieldMapper#valueFetcher to MappedFieldType (#62974)\n\nFor runtime fields.  we will want to do all search-time interaction with\na field definition via a MappedFieldType.  rather than a FieldMapper.  to\navoid interfering with the logic of document parsing. Currently.  fetching\nvalues for runtime scripts and for building top hits responses need to\ncall a method on FieldMapper. This commit moves this method to\nMappedFieldType.  incidentally simplifying the current call sites and freeing\nus up to implement runtime fields as pure MappedFieldType objects.","date":"2020-10-04 17:47:04","modifiedFileCount":"110","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":7,"curCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType(\n                    \"scaled_float\", true, false, false, Collections.emptyMap(), 0.1 + randomDouble() * 100, null);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_CONTEXT);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_CONTEXT);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2021-01-15 01:11:59","endLine":96,"groupId":"10185","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/3629818a5c79012922e1b4bca20c6a094072e1.src","preCode":"    public void testRangeQuery() throws IOException {\n        \r\n        \r\n        \r\n        ScaledFloatFieldMapper.ScaledFloatFieldType ft = new ScaledFloatFieldMapper.ScaledFloatFieldType(\n                    \"scaled_float\", true, false, false, Collections.emptyMap(), 0.1 + randomDouble() * 100, null);\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 1000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            double value = (randomDouble() * 2 - 1) * 10000;\n            long scaledValue = Math.round(value * ft.getScalingFactor());\n            double rounded = scaledValue / ft.getScalingFactor();\n            doc.add(new LongPoint(\"scaled_float\", scaledValue));\n            doc.add(new DoublePoint(\"double\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            Double l = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            Double u = randomBoolean() ? null : (randomDouble() * 2 - 1) * 10000;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query doubleQ = NumberFieldMapper.NumberType.DOUBLE.rangeQuery(\"double\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query scaledFloatQ = ft.rangeQuery(l, u, includeLower, includeUpper, MOCK_QSC);\n            assertEquals(searcher.count(doubleQ), searcher.count(scaledFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":7,"curCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_CONTEXT);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_CONTEXT);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","date":"2021-01-15 01:11:59","endLine":359,"groupId":"10185","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testHalfFloatRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/70fade8595ff13783ec700a2a689f39192f3cf.src","preCode":"    public void testHalfFloatRange() throws IOException {\n        \r\n        \r\n        \r\n        Directory dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n        final int numDocs = 10000;\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            \r\n            \r\n            float value = (randomFloat() * 2 - 1) * 70000;\n            float rounded = HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value));\n            doc.add(new HalfFloatPoint(\"half_float\", value));\n            doc.add(new FloatPoint(\"float\", rounded));\n            w.addDocument(doc);\n        }\n        final DirectoryReader reader = DirectoryReader.open(w);\n        w.close();\n\n        IndexSearcher searcher = newSearcher(reader);\n        final int numQueries = 1000;\n        for (int i = 0; i < numQueries; ++i) {\n            float l = (randomFloat() * 2 - 1) * 65504;\n            float u = (randomFloat() * 2 - 1) * 65504;\n            boolean includeLower = randomBoolean();\n            boolean includeUpper = randomBoolean();\n            Query floatQ = NumberType.FLOAT.rangeQuery(\"float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            Query halfFloatQ = NumberType.HALF_FLOAT.rangeQuery(\"half_float\", l, u, includeLower, includeUpper, false, MOCK_QSC);\n            assertEquals(searcher.count(floatQ), searcher.count(halfFloatQ));\n        }\n        IOUtils.close(reader, dir);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
