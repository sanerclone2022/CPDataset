[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMoveShardOnceNewNodeWithAttributeAdded2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'moveShardOnceNewNodeWithAttributeAdded2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).get(0).relocatingNodeId(), equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","date":"2018-04-26 03:22:53","endLine":175,"groupId":"37979","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMoveShardOnceNewNodeWithAttributeAdded2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/1ec07c7fa9b5ffba828cd6861eb3d4806039c2.src","preCode":"    public void testMoveShardOnceNewNodeWithAttributeAdded2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'moveShardOnceNewNodeWithAttributeAdded2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).get(0).relocatingNodeId(), equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testFullAwareness2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.force.rack_id.values\", \"1,2\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'fullAwareness2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> replica will not start because we have only one rack value\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(0));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(), equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","date":"2018-04-26 03:22:53","endLine":615,"groupId":"37541","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFullAwareness2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/1ec07c7fa9b5ffba828cd6861eb3d4806039c2.src","preCode":"    public void testFullAwareness2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.force.rack_id.values\", \"1,2\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'fullAwareness2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> replica will not start because we have only one rack value\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(0));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(), equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":554,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-07-18 13:39:24","codes":[{"authorDate":"2019-07-18 13:39:24","commitOrder":2,"curCode":"    public void testMoveShardOnceNewNodeWithAttributeAdded2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'moveShardOnceNewNodeWithAttributeAdded2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).get(0).relocatingNodeId(),\n            equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","date":"2019-07-18 13:39:24","endLine":179,"groupId":"37979","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMoveShardOnceNewNodeWithAttributeAdded2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/61/74323ca69e88250cdbedf009c2143604232dab.src","preCode":"    public void testMoveShardOnceNewNodeWithAttributeAdded2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'moveShardOnceNewNodeWithAttributeAdded2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).get(0).relocatingNodeId(),\n            equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2019-07-18 13:39:24","commitOrder":2,"curCode":"    public void testFullAwareness2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.force.rack_id.values\", \"1,2\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'fullAwareness2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> replica will not start because we have only one rack value\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(0));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),\n            equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","date":"2019-07-18 13:39:24","endLine":633,"groupId":"37541","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFullAwareness2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/61/74323ca69e88250cdbedf009c2143604232dab.src","preCode":"    public void testFullAwareness2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.force.rack_id.values\", \"1,2\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'fullAwareness2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> replica will not start because we have only one rack value\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(0));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),\n            equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"}],"commitId":"51fb95ef83f7a1aa6cbc5207e504b03ccee724ee","commitMessage":"@@@Defer reroute when starting shards (#44433)\n\n* Defer reroute when starting shards\n\nToday we reroute the cluster as part of the process of starting a shard.  which\nruns at `URGENT` priority. In large clusters.  rerouting may take some time to\ncomplete.  and this means that a mere trickle of shard-started events can cause\nstarvation for other.  lower-priority.  tasks that are pending on the master.\n\nHowever.  it isn't really necessary to perform a reroute when starting a shard. \nas long as one occurs eventually. This commit removes the inline reroute from\nthe process of starting a shard and replaces it with a deferred one that runs\nat `NORMAL` priority.  avoiding starvation of higher-priority tasks.\n\nThis may improve some of the situations related to #42738 and #42105.\n\n* Specific test case for followup priority setting\n\nWe cannot set the priority in all InternalTestClusters because the deprecation\nwarning makes some tests unhappy. This commit adds a specific test instead.\n\n* Checkstyle\n\n* Cluster state always changed here\n\n* Assert consistency of routing nodes\n\n* Restrict setting only to reasonable priorities\n","date":"2019-07-18 13:39:24","modifiedFileCount":"60","status":"M","submitter":"David Turner"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testMoveShardOnceNewNodeWithAttributeAdded2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'moveShardOnceNewNodeWithAttributeAdded2'\");\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metadata.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metadata(metadata).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).get(0).relocatingNodeId(),\n            equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","date":"2020-04-01 03:52:01","endLine":179,"groupId":"102221","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMoveShardOnceNewNodeWithAttributeAdded2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/43/708017d1009a6d39caf3d60a496149b839c048.src","preCode":"    public void testMoveShardOnceNewNodeWithAttributeAdded2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'moveShardOnceNewNodeWithAttributeAdded2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).get(0).relocatingNodeId(),\n            equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testFullAwareness2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.force.rack_id.values\", \"1,2\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'fullAwareness2'\");\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metadata(metadata).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> replica will not start because we have only one rack value\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(0));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),\n            equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","date":"2020-04-01 03:52:01","endLine":633,"groupId":"102221","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFullAwareness2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/43/708017d1009a6d39caf3d60a496149b839c048.src","preCode":"    public void testFullAwareness2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.awareness.force.rack_id.values\", \"1,2\")\n                .put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\")\n                .build());\n\n        logger.info(\"Building initial routing table for 'fullAwareness2'\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node2\", singletonMap(\"rack_id\", \"1\")))\n                .add(newNode(\"node3\", singletonMap(\"rack_id\", \"1\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> replica will not start because we have only one rack value\");\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(0));\n\n        logger.info(\"--> add a new node with a new rack and reroute\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\", singletonMap(\"rack_id\", \"2\")))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),\n            equalTo(\"node4\"));\n\n        logger.info(\"--> complete relocation\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n\n        logger.info(\"--> do another reroute, make sure nothing moves\");\n        assertThat(strategy.reroute(clusterState, \"reroute\").routingTable(), sameInstance(clusterState.routingTable()));\n\n        logger.info(\"--> add another node with a new rack, make sure nothing moves\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\", singletonMap(\"rack_id\", \"3\")))\n        ).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/AwarenessAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
