[{"authorTime":"2020-11-05 21:16:31","codes":[{"authorDate":"2020-11-05 20:08:39","commitOrder":2,"curCode":"    public void testNestedExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"search_as_you_type\");\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        QueryShardContext qsc = createQueryShardContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(qsc, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._3gram\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._2gram\"), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"_field_names\", \"foo.bar._index_prefix\")), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","date":"2020-11-05 20:08:39","endLine":564,"groupId":"61830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedExistsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/331fee2efffc03f5d135442a5dc83e21d25be1.src","preCode":"    public void testNestedExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"search_as_you_type\");\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        QueryShardContext qsc = createQueryShardContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(qsc, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._3gram\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._2gram\"), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"_field_names\", \"foo.bar._index_prefix\")), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":538,"status":"NB"},{"authorDate":"2020-11-05 21:16:31","commitOrder":2,"curCode":"    public void testObjectExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"text\");\n                        b.field(\"index_phrases\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        QueryShardContext qsc = createQueryShardContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(qsc, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","date":"2020-11-05 21:16:31","endLine":792,"groupId":"3864","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testObjectExistsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/d2ed432f8b6fe3dfc05514e18c1997a670afc8.src","preCode":"    public void testObjectExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"text\");\n                        b.field(\"index_phrases\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        QueryShardContext qsc = createQueryShardContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(qsc, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":768,"status":"B"}],"commitId":"cea93d1c65b014ac02abf546bdb3a27150088bd2","commitMessage":"@@@Don't expose TextFieldMapper subfields (#64597)\n\nTextFieldMapper can optionally index data into subfields for accelerated\nprefix and phrase queries. Currently.  these subfields are implemented\nas FieldMappers in their own right.  made available via TextFieldMapper's\niterator() method and with their own standalone MappedFieldType objects.\n\nThis has the disadvantage that these subfields are directly available for\nsearching.  and appear in APIs such as field caps. In addition.  because\nexists queries are not implemented on them.  an exists query against an\nobject which contains a text field with one of the subfields enabled can\nthrow an error (see #63585).\n\nThis commit reworks the subfields so that they are no longer implemented\nas FieldMappers.  and are no longer exposed to classes outside\nTextFieldMapper either as MappedFieldTypes or as FieldMappers. The\nparent TextFieldMapper handles indexing and analyzer registration. \nPhraseFieldType is removed entirely.  and PrefixFieldType is retained as\na private implementation for fast prefix queries but is unavailable for\nquerying directly.\n\nFixes #63585\nCloses #63446","date":"2020-11-05 21:16:31","modifiedFileCount":"4","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    public void testNestedExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"search_as_you_type\");\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        SearchExecutionContext context = createSearchExecutionContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(context, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._3gram\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._2gram\"), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"_field_names\", \"foo.bar._index_prefix\")), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","date":"2021-01-15 01:11:59","endLine":596,"groupId":"30022","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedExistsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/45f6760d688cf17f26f9559f38b7a608386ac3.src","preCode":"    public void testNestedExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"search_as_you_type\");\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        QueryShardContext qsc = createQueryShardContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(qsc, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._3gram\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._2gram\"), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"_field_names\", \"foo.bar._index_prefix\")), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    public void testObjectExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"text\");\n                        b.field(\"index_phrases\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        SearchExecutionContext context = createSearchExecutionContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(context, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","date":"2021-01-15 01:11:59","endLine":792,"groupId":"3864","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testObjectExistsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/9cd24e89b4df4219e0c27df69904d241ad522e.src","preCode":"    public void testObjectExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"text\");\n                        b.field(\"index_phrases\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        QueryShardContext qsc = createQueryShardContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(qsc, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":768,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-05-26 14:46:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testNestedExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"search_as_you_type\");\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        SearchExecutionContext context = createSearchExecutionContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(context, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._3gram\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._2gram\"), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"_field_names\", \"foo.bar._index_prefix\")), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","date":"2021-01-15 01:11:59","endLine":596,"groupId":"10183","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedExistsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/45f6760d688cf17f26f9559f38b7a608386ac3.src","preCode":"    public void testNestedExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"search_as_you_type\");\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        SearchExecutionContext context = createSearchExecutionContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(context, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._3gram\"), BooleanClause.Occur.SHOULD)\n            .add(new NormsFieldExistsQuery(\"foo.bar._2gram\"), BooleanClause.Occur.SHOULD)\n            .add(new TermQuery(new Term(\"_field_names\", \"foo.bar._index_prefix\")), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"N"},{"authorDate":"2021-05-26 14:46:59","commitOrder":4,"curCode":"    public void testObjectExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"text\");\n                        b.field(\"index_phrases\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        SearchExecutionContext context = createSearchExecutionContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(context, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new NormsFieldExistsQuery(\"foo.bar\")), q);\n    }\n","date":"2021-05-26 14:46:59","endLine":835,"groupId":"10183","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testObjectExistsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1b/41a5bea136c5a7da3c59e1fdc6a8048850bac8.src","preCode":"    public void testObjectExistsQuery() throws IOException, ParseException {\n        MapperService ms = createMapperService(mapping(b -> {\n            b.startObject(\"foo\");\n            {\n                b.field(\"type\", \"object\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"bar\");\n                    {\n                        b.field(\"type\", \"text\");\n                        b.field(\"index_phrases\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        SearchExecutionContext context = createSearchExecutionContext(ms);\n        QueryStringQueryParser parser = new QueryStringQueryParser(context, \"f\");\n        Query q = parser.parse(\"foo:*\");\n        assertEquals(new ConstantScoreQuery(new BooleanQuery.Builder()\n            .add(new NormsFieldExistsQuery(\"foo.bar\"), BooleanClause.Occur.SHOULD)\n            .build()), q);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":813,"status":"M"}],"commitId":"18e30d98bbd2c5825f40e8aa659217bbaab8eb00","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-05-26 14:46:59","modifiedFileCount":"317","status":"M","submitter":"iverase"}]
