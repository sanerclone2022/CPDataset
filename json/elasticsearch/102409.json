[{"authorTime":"2018-09-03 17:01:16","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n\n            int numStatsPerPipeline = randomIntBetween(0, 10);\n            Map<String, IngestStats.Stats> statsPerPipeline = new HashMap<>();\n            for (int i = 0; i < numStatsPerPipeline; i++) {\n                statsPerPipeline.put(randomAlphaOfLengthBetween(3, 10), new IngestStats.Stats(randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            ingestStats = new IngestStats(totalStats, statsPerPipeline);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2018-04-26 03:22:53","endLine":468,"groupId":"52490","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/f43b828c05acc43572ff4c8e12c4490defb14e.src","preCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n\n            int numStatsPerPipeline = randomIntBetween(0, 10);\n            Map<String, IngestStats.Stats> statsPerPipeline = new HashMap<>();\n            for (int i = 0; i < numStatsPerPipeline; i++) {\n                statsPerPipeline.put(randomAlphaOfLengthBetween(3, 10), new IngestStats.Stats(randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            ingestStats = new IngestStats(totalStats, statsPerPipeline);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"NB"},{"authorDate":"2018-09-03 17:01:16","commitOrder":2,"curCode":"    protected ShardFollowNodeTask.Status createTestInstance() {\n        \r\n        return new ShardFollowNodeTask.Status(\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong());\n    }\n","date":"2018-09-03 17:01:16","endLine":57,"groupId":"39233","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/83/68a818e006eacaa89d3c788c9ca9eabc608827.src","preCode":"    protected ShardFollowNodeTask.Status createTestInstance() {\n        \r\n        return new ShardFollowNodeTask.Status(\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong());\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"B"}],"commitId":"e2c1beb1be5b47d124903883bc31be8a648c8c03","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-03 17:01:16","modifiedFileCount":"71","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-13 16:46:14","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n\n            int numStatsPerPipeline = randomIntBetween(0, 10);\n            Map<String, IngestStats.Stats> statsPerPipeline = new HashMap<>();\n            for (int i = 0; i < numStatsPerPipeline; i++) {\n                statsPerPipeline.put(randomAlphaOfLengthBetween(3, 10), new IngestStats.Stats(randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            ingestStats = new IngestStats(totalStats, statsPerPipeline);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2018-04-26 03:22:53","endLine":468,"groupId":"52490","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/f43b828c05acc43572ff4c8e12c4490defb14e.src","preCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n\n            int numStatsPerPipeline = randomIntBetween(0, 10);\n            Map<String, IngestStats.Stats> statsPerPipeline = new HashMap<>();\n            for (int i = 0; i < numStatsPerPipeline; i++) {\n                statsPerPipeline.put(randomAlphaOfLengthBetween(3, 10), new IngestStats.Stats(randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            ingestStats = new IngestStats(totalStats, statsPerPipeline);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"},{"authorDate":"2018-09-13 16:46:14","commitOrder":3,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong());\n    }\n","date":"2018-09-13 16:46:14","endLine":59,"groupId":"39233","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d5/f2ab7ea08d7a80d404ca9cd0ab30f26801bcbd.src","preCode":"    protected ShardFollowNodeTask.Status createTestInstance() {\n        \r\n        return new ShardFollowNodeTask.Status(\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong());\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"8e59de3eb2df9915e4878702fbd3edd55d019ffa","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-13 16:46:14","modifiedFileCount":"189","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-10-17 04:58:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":4,"curCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n\n            int numStatsPerPipeline = randomIntBetween(0, 10);\n            Map<String, IngestStats.Stats> statsPerPipeline = new HashMap<>();\n            for (int i = 0; i < numStatsPerPipeline; i++) {\n                statsPerPipeline.put(randomAlphaOfLengthBetween(3, 10), new IngestStats.Stats(randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            ingestStats = new IngestStats(totalStats, statsPerPipeline);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2018-04-26 03:22:53","endLine":468,"groupId":"52490","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/f43b828c05acc43572ff4c8e12c4490defb14e.src","preCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n\n            int numStatsPerPipeline = randomIntBetween(0, 10);\n            Map<String, IngestStats.Stats> statsPerPipeline = new HashMap<>();\n            for (int i = 0; i < numStatsPerPipeline; i++) {\n                statsPerPipeline.put(randomAlphaOfLengthBetween(3, 10), new IngestStats.Stats(randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            ingestStats = new IngestStats(totalStats, statsPerPipeline);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"},{"authorDate":"2018-10-17 04:58:53","commitOrder":4,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2018-10-17 04:58:53","endLine":61,"groupId":"39233","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/8c13dda8824ca0fb567edf3102cf7024ba2def.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong());\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"fbe8dc014c73b833fb5eb5f95215b4286af05644","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-17 04:58:53","modifiedFileCount":"144","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-10-19 20:24:04","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":5,"curCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n\n            int numStatsPerPipeline = randomIntBetween(0, 10);\n            Map<String, IngestStats.Stats> statsPerPipeline = new HashMap<>();\n            for (int i = 0; i < numStatsPerPipeline; i++) {\n                statsPerPipeline.put(randomAlphaOfLengthBetween(3, 10), new IngestStats.Stats(randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            ingestStats = new IngestStats(totalStats, statsPerPipeline);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2018-04-26 03:22:53","endLine":468,"groupId":"52490","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/f43b828c05acc43572ff4c8e12c4490defb14e.src","preCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n\n            int numStatsPerPipeline = randomIntBetween(0, 10);\n            Map<String, IngestStats.Stats> statsPerPipeline = new HashMap<>();\n            for (int i = 0; i < numStatsPerPipeline; i++) {\n                statsPerPipeline.put(randomAlphaOfLengthBetween(3, 10), new IngestStats.Stats(randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            ingestStats = new IngestStats(totalStats, statsPerPipeline);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"},{"authorDate":"2018-10-19 20:24:04","commitOrder":5,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2018-10-19 20:24:04","endLine":62,"groupId":"39233","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9d/6112350e4c4e2e1425d3b1ead3cdbd453963a5.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"84ef91529cf7dd9ec8c78f299d8c89dfd64a2106","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-19 20:24:04","modifiedFileCount":"154","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-10-24 00:43:46","codes":[{"authorDate":"2018-10-24 00:43:46","commitOrder":6,"curCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2018-10-24 00:43:46","endLine":491,"groupId":"52490","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8f/51fb08dd23f1faf91afe558fc4568501eea9fd.src","preCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n\n            int numStatsPerPipeline = randomIntBetween(0, 10);\n            Map<String, IngestStats.Stats> statsPerPipeline = new HashMap<>();\n            for (int i = 0; i < numStatsPerPipeline; i++) {\n                statsPerPipeline.put(randomAlphaOfLengthBetween(3, 10), new IngestStats.Stats(randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            ingestStats = new IngestStats(totalStats, statsPerPipeline);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2018-10-24 00:43:46","commitOrder":6,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2018-10-24 00:43:46","endLine":63,"groupId":"39233","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/d5136e4be56eeea7fcda4597661625e3799237.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"62ac2fa5ec57a4701323d1c2a0077e2179a7d422","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-24 00:43:46","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-10-26 01:00:36","codes":[{"authorDate":"2018-10-24 00:43:46","commitOrder":7,"curCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2018-10-24 00:43:46","endLine":491,"groupId":"52490","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8f/51fb08dd23f1faf91afe558fc4568501eea9fd.src","preCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"N"},{"authorDate":"2018-10-26 01:00:36","commitOrder":7,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2018-10-26 01:00:36","endLine":64,"groupId":"39233","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/95/f8e86e09657f6ab8b3ca59216a0f52142c9705.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"3e7042832acfffad4de4214ad6491b147f5157b0","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-10-26 01:00:36","modifiedFileCount":"350","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-11-08 10:20:51","codes":[{"authorDate":"2018-10-24 00:43:46","commitOrder":8,"curCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2018-10-24 00:43:46","endLine":491,"groupId":"52490","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8f/51fb08dd23f1faf91afe558fc4568501eea9fd.src","preCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"N"},{"authorDate":"2018-11-08 10:20:51","commitOrder":8,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2018-11-08 10:20:51","endLine":65,"groupId":"39233","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9c/ac01d278e74900239b016d8d604787bc3adb6e.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"4f4fc3b8f85d2af05e3106b4a9d2115aa00f3199","commitMessage":"@@@Replicate index settings to followers (#35089)\n\nThis commit uses the index settings version so that a follower can\nreplicate index settings changes as needed from the leader.\n\nCo-authored-by: Martijn van Groningen <martijn.v.groningen@gmail.com>","date":"2018-11-08 10:20:51","modifiedFileCount":"20","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-06-05 04:44:14","codes":[{"authorDate":"2018-10-24 00:43:46","commitOrder":9,"curCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2018-10-24 00:43:46","endLine":491,"groupId":"52490","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8f/51fb08dd23f1faf91afe558fc4568501eea9fd.src","preCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"N"},{"authorDate":"2019-06-05 04:44:14","commitOrder":9,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2019-06-05 04:44:14","endLine":66,"groupId":"39233","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/3960b69c834d15703ac82b9730d1556ce37029.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"6a98eebeefa8c1d95c049e00d3677e7b0df6f89b","commitMessage":"@@@Replicate aliases in cross-cluster replication (#41815)\n\nThis commit adds functionality so that aliases that are manipulated on\nleader indices are replicated by the shard follow tasks to the follower\nindices. Note that we ignore write indices. This is due to the fact that\nfollower indices do not receive direct writes so the concept is not\nuseful.","date":"2019-06-05 04:44:14","modifiedFileCount":"18","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-06-05 04:44:14","codes":[{"authorDate":"2019-10-30 02:51:16","commitOrder":10,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2019-10-30 02:51:16","endLine":492,"groupId":"52490","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/d71ba98b4957155483f134eca555f8dc8771b8.src","preCode":"    private static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2019-06-05 04:44:14","commitOrder":10,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2019-06-05 04:44:14","endLine":66,"groupId":"39233","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/3960b69c834d15703ac82b9730d1556ce37029.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"523cb23e02f1db3470fcbd725645e99fd21f2589","commitMessage":"@@@Add ingest info to Cluster Stats (#48485)\n\nThis commit enhances the ClusterStatsNodes response to include global \nprocessor usage stats on a per-processor basis.\n\nexample output:\n\n```\n...\n    \"processor_stats\": {\n      \"gsub\": {\n        \"count\": 0. \n        \"failed\": 0\n        \"current\": 0\n        \"time_in_millis\": 0\n      }. \n      \"script\": {\n        \"count\": 0. \n        \"failed\": 0\n        \"current\": 0. \n        \"time_in_millis\": 0\n      }\n    }\n...\n```\n\nThe purpose for this enhancement is to make it easier to collect stats on how specific processors are being used across the cluster beyond the current per-node usage statistics that currently exist in node stats.\n\nCloses #46146.","date":"2019-10-30 02:51:16","modifiedFileCount":"8","status":"M","submitter":"Tal Levy"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2019-10-30 02:51:16","commitOrder":11,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2019-10-30 02:51:16","endLine":492,"groupId":"52490","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/d71ba98b4957155483f134eca555f8dc8771b8.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"N"},{"authorDate":"2020-03-26 23:22:07","commitOrder":11,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"e9bc3e8234b4f1a3785101481a46e01541f8fdaf","commitMessage":"@@@Disallow negative TimeValues (#53913)\n\nThis commit causes negative TimeValues.  other than -1 which is sometimes used as\na sentinel value.  to be rejected during parsing.\n\nAlso introduces a hack to allow ILM to load policies which were written to the\ncluster state with a negative min_age.  treating those values as 0.  which should\nmatch the behavior of prior versions.","date":"2020-03-26 23:22:07","modifiedFileCount":"24","status":"M","submitter":"Gordon Brown"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2020-03-27 06:53:16","commitOrder":12,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        ScriptCacheStats scriptCacheStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            Map<String,ScriptStats> stats = new HashMap<>(numContents);\n            for (int i = 0; i < numContents; i++) {\n                String context = randomValueOtherThanMany(stats::containsKey, () -> randomAlphaOfLength(12));\n                stats.put(context, new ScriptStats(randomLongBetween(0, 1024), randomLongBetween(0, 1024), randomLongBetween(0, 1024)));\n            }\n            scriptCacheStats = new ScriptCacheStats(stats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, scriptCacheStats);\n    }\n","date":"2020-03-27 06:53:16","endLine":531,"groupId":"52490","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/f9e764502f785a204af377a5580e20126e832f.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":12,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"32f46f2214808c0b2c2271bf977f2f08fe6d6fbc","commitMessage":"@@@Scripting: stats per context in nodes stats (#54008)\n\nAdds script cache stats to `_node/stats`.\nIf using the general cache:\n```\n      \"script_cache\": {\n        \"sum\": {\n          \"compilations\": 12. \n          \"cache_evictions\": 9. \n          \"compilation_limit_triggered\": 5\n        }\n      }\n\n```\nIf using context caches:\n```\n      \"script_cache\": {       \n        \"sum\": {                 \n          \"compilations\": 13.                 \n          \"cache_evictions\": 9. \n          \"compilation_limit_triggered\": 5\n        }.                                 \n        \"contexts\": [         \n          {                      \n            \"context\": \"aggregation_selector\". \n            \"compilations\": 8. \n            \"cache_evictions\": 6. \n            \"compilation_limit_triggered\": 3\n          }.                   \n          {                      \n            \"context\": \"aggs\".               \n            \"compilations\": 5. \n            \"cache_evictions\": 3. \n            \"compilation_limit_triggered\": 2\n          }.                   \n```\nRefs: #50152","date":"2020-03-27 06:53:16","modifiedFileCount":"17","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2020-07-10 21:44:56","commitOrder":13,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","date":"2020-07-10 21:44:56","endLine":532,"groupId":"52490","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/a7cf3b3b70202ebcb636b23b0b8691b88495a2.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = frequently() ?\n                new ScriptStats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        ScriptCacheStats scriptCacheStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            Map<String,ScriptStats> stats = new HashMap<>(numContents);\n            for (int i = 0; i < numContents; i++) {\n                String context = randomValueOtherThanMany(stats::containsKey, () -> randomAlphaOfLength(12));\n                stats.put(context, new ScriptStats(randomLongBetween(0, 1024), randomLongBetween(0, 1024), randomLongBetween(0, 1024)));\n            }\n            scriptCacheStats = new ScriptCacheStats(stats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, scriptCacheStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":13,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"366ca378a8644d6654417988820c67f4feb714fe","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-10 21:44:56","modifiedFileCount":"565","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2020-07-14 20:47:57","commitOrder":14,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","date":"2020-07-14 20:47:57","endLine":532,"groupId":"52490","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/6c13b8a8fb92656eafa04168083d94527d3b1d.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":14,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"f426916b01a3aea836dddd4a820f640ed322f94d","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-14 20:47:57","modifiedFileCount":"165","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2020-07-29 01:14:40","commitOrder":15,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","date":"2020-07-29 01:42:59","endLine":532,"groupId":"29179","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/244b335e594a122fa5566e9299efd4ea8c9171.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":15,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"e3bbb3bed4ed9430ab43eb4a3e8276ae503c13ab","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-29 01:42:59","modifiedFileCount":"261","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2021-03-17 20:51:54","commitOrder":16,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","date":"2021-03-17 20:51:54","endLine":542,"groupId":"29179","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/ac061d3a02da9a10f69162d5d345f129af75c6.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = frequently() ? new HttpStats(randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":16,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"14cee55c88c7ec52d32a45178f51b1a50d6c0ce6","commitMessage":"@@@Add info on each HTTP client to HTTP stats (#64561)\n\n","date":"2021-03-17 20:51:54","modifiedFileCount":"3","status":"M","submitter":"Dan Hermann"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2021-03-18 14:21:26","commitOrder":17,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            long maxStatValue = Long.MAX_VALUE / numPipelines / numProcessors;\n            IngestStats.Stats totalStats = new IngestStats.Stats(\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue)\n            );\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats(\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue))\n                ));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats(\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue)\n                    );\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","date":"2021-03-18 14:21:26","endLine":555,"groupId":"29179","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3c/e3f9a7e1625b269c02751fb5491d27bd7d57d2.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            IngestStats.Stats totalStats = new IngestStats.Stats(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                    randomNonNegativeLong());\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats\n                    (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong())));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats\n                        (randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":17,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"bf564fadc657e10620325f5610586c3631783569","commitMessage":"@@@Limit stats values in tests to prevent long overflow (#70312)\n\n","date":"2021-03-18 14:21:26","modifiedFileCount":"1","status":"M","submitter":"Dan Hermann"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2021-03-18 18:02:02","commitOrder":18,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            long maxStatValue = Long.MAX_VALUE / Math.max(1, numPipelines) / Math.max(1, numProcessors);\n            IngestStats.Stats totalStats = new IngestStats.Stats(\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue)\n            );\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats(\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue))\n                ));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats(\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue)\n                    );\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","date":"2021-03-18 18:02:02","endLine":555,"groupId":"29179","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3e/acca6e786d607661f65bc92afb2a180da98435.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            long maxStatValue = Long.MAX_VALUE / numPipelines / numProcessors;\n            IngestStats.Stats totalStats = new IngestStats.Stats(\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue)\n            );\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats(\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue))\n                ));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats(\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue)\n                    );\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":18,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"06bc7ac0ea0300d4b777a9a35251892b06c439fa","commitMessage":"@@@Fix division by zero failure in NodeStatsTests.testSerialization (#70538)\n\n","date":"2021-03-18 18:02:02","modifiedFileCount":"1","status":"M","submitter":"Dan Hermann"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2021-05-12 20:50:26","commitOrder":19,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                            randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                        previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            long maxStatValue = Long.MAX_VALUE / Math.max(1, numPipelines) / Math.max(1, numProcessors);\n            IngestStats.Stats totalStats = new IngestStats.Stats(\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue)\n            );\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats(\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue))\n                ));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats(\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue)\n                    );\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","date":"2021-05-12 20:50:26","endLine":559,"groupId":"39233","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/75382f68c9835eac02f11dbfc8426b2586b0b8.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            long maxStatValue = Long.MAX_VALUE / Math.max(1, numPipelines) / Math.max(1, numProcessors);\n            IngestStats.Stats totalStats = new IngestStats.Stats(\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue)\n            );\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats(\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue))\n                ));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats(\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue)\n                    );\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":19,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"4528e780c48ada91fd452b9c51dc1a37772c5f07","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n\n# Conflicts:\n#\tx-pack/plugin/spatial/build.gradle\n#\tx-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java\n","date":"2021-05-12 20:50:26","modifiedFileCount":"564","status":"M","submitter":"iverase"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2021-08-24 00:38:32","commitOrder":20,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                            randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                        previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n            randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n            randomBoolean()\n                ? new PublishClusterStateStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong())\n                : null,\n            randomBoolean()\n                ? new ClusterStateUpdateStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            long maxStatValue = Long.MAX_VALUE / Math.max(1, numPipelines) / Math.max(1, numProcessors);\n            IngestStats.Stats totalStats = new IngestStats.Stats(\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue)\n            );\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats(\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue))\n                ));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats(\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue)\n                    );\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","date":"2021-08-24 00:38:32","endLine":663,"groupId":"39233","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/a1fc1b5ed8b36bb3ead9d5295aa7626846ae14.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                            randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                        previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n                randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n                randomBoolean()\n                ? new PublishClusterStateStats(\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong(),\n                    randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            long maxStatValue = Long.MAX_VALUE / Math.max(1, numPipelines) / Math.max(1, numProcessors);\n            IngestStats.Stats totalStats = new IngestStats.Stats(\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue)\n            );\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats(\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue))\n                ));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats(\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue)\n                    );\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":20,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"39233","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"4a17847b853b132531956ab01408e7360f1f428e","commitMessage":"@@@Add timing stats to publication process (#76771)\n\nThis commit introduces into the node stats API various statistics to\ntrack the time that the elected master spends in various phases of the\ncluster state publication process.\n\nRelates #76625","date":"2021-08-24 00:38:32","modifiedFileCount":"16","status":"M","submitter":"David Turner"},{"authorTime":"2020-03-26 23:22:07","codes":[{"authorDate":"2021-09-08 14:25:57","commitOrder":21,"curCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                            randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                        previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomInt(),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n            randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n            randomBoolean()\n                ? new PublishClusterStateStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong())\n                : null,\n            randomBoolean()\n                ? new ClusterStateUpdateStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            long maxStatValue = Long.MAX_VALUE / Math.max(1, numPipelines) / Math.max(1, numProcessors);\n            IngestStats.Stats totalStats = new IngestStats.Stats(\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue)\n            );\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats(\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue))\n                ));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats(\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue)\n                    );\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","date":"2021-09-08 14:25:57","endLine":664,"groupId":"102409","id":39,"instanceNumber":1,"isCurCommit":1,"methodName":"createNodeStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/87/ff0faa0937a0259691dfac8cd1e092789269f2.src","preCode":"    public static NodeStats createNodeStats() {\n        DiscoveryNode node = new DiscoveryNode(\"test_node\", buildNewFakeTransportAddress(),\n                emptyMap(), emptySet(), VersionUtils.randomVersion(random()));\n        OsStats osStats = null;\n        if (frequently()) {\n            double loadAverages[] = new double[3];\n            for (int i = 0; i < 3; i++) {\n                loadAverages[i] = randomBoolean() ? randomDouble() : -1;\n            }\n            long memTotal = randomNonNegativeLong();\n            long swapTotal = randomNonNegativeLong();\n            osStats = new OsStats(System.currentTimeMillis(), new OsStats.Cpu(randomShort(), loadAverages),\n                    new OsStats.Mem(memTotal, randomLongBetween(0, memTotal)),\n                    new OsStats.Swap(swapTotal, randomLongBetween(0, swapTotal)),\n                    new OsStats.Cgroup(\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomAlphaOfLength(8),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        new OsStats.Cgroup.CpuStat(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()),\n                        randomAlphaOfLength(8),\n                        Long.toString(randomNonNegativeLong()),\n                        Long.toString(randomNonNegativeLong())));\n        }\n        ProcessStats processStats = frequently() ?\n            new ProcessStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                new ProcessStats.Cpu(randomShort(), randomNonNegativeLong()),\n                new ProcessStats.Mem(randomNonNegativeLong())) :\n            null;\n        JvmStats jvmStats = null;\n        if (frequently()) {\n            int numMemoryPools = randomIntBetween(0, 10);\n            List<JvmStats.MemoryPool> memoryPools = new ArrayList<>(numMemoryPools);\n            for (int i = 0; i < numMemoryPools; i++) {\n                memoryPools.add(new JvmStats.MemoryPool(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n            }\n            JvmStats.Threads threads = new JvmStats.Threads(randomIntBetween(1, 1000), randomIntBetween(1, 1000));\n            int numGarbageCollectors = randomIntBetween(0, 10);\n            JvmStats.GarbageCollector[] garbageCollectorsArray = new JvmStats.GarbageCollector[numGarbageCollectors];\n            for (int i = 0; i < numGarbageCollectors; i++) {\n                garbageCollectorsArray[i] = new JvmStats.GarbageCollector(randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            JvmStats.GarbageCollectors garbageCollectors = new JvmStats.GarbageCollectors(garbageCollectorsArray);\n            int numBufferPools = randomIntBetween(0, 10);\n            List<JvmStats.BufferPool> bufferPoolList = new ArrayList<>();\n            for (int i = 0; i < numBufferPools; i++) {\n                bufferPoolList.add(\n                    new JvmStats.BufferPool(\n                        randomAlphaOfLengthBetween(3, 10),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong(),\n                        randomNonNegativeLong()));\n            }\n            JvmStats.Classes classes = new JvmStats.Classes(randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            jvmStats =\n                frequently() ? new JvmStats(randomNonNegativeLong(), randomNonNegativeLong(), new JvmStats.Mem(randomNonNegativeLong(),\n                    randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), memoryPools),\n                    threads, garbageCollectors, randomBoolean() ? Collections.emptyList() : bufferPoolList, classes) : null;\n        }\n        ThreadPoolStats threadPoolStats = null;\n        if (frequently()) {\n            int numThreadPoolStats = randomIntBetween(0, 10);\n            List<ThreadPoolStats.Stats> threadPoolStatsList = new ArrayList<>();\n            for (int i = 0; i < numThreadPoolStats; i++) {\n                threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAlphaOfLengthBetween(3, 10), randomIntBetween(1, 1000),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000), randomNonNegativeLong(),\n                        randomIntBetween(1, 1000), randomIntBetween(1, 1000)));\n            }\n            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);\n        }\n        FsInfo fsInfo = null;\n        if (frequently()) {\n            int numDeviceStats = randomIntBetween(0, 10);\n            FsInfo.DeviceStats[] deviceStatsArray = new FsInfo.DeviceStats[numDeviceStats];\n            for (int i = 0; i < numDeviceStats; i++) {\n                FsInfo.DeviceStats previousDeviceStats = randomBoolean() ? null :\n                        new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                            randomNonNegativeLong(), null);\n                deviceStatsArray[i] =\n                    new FsInfo.DeviceStats(randomInt(), randomInt(), randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(),\n                        previousDeviceStats);\n            }\n            FsInfo.IoStats ioStats = new FsInfo.IoStats(deviceStatsArray);\n            int numPaths = randomIntBetween(0, 10);\n            FsInfo.Path[] paths = new FsInfo.Path[numPaths];\n            for (int i = 0; i < numPaths; i++) {\n                paths[i] = new FsInfo.Path(randomAlphaOfLengthBetween(3, 10), randomBoolean() ? randomAlphaOfLengthBetween(3, 10) : null,\n                        randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong());\n            }\n            fsInfo = new FsInfo(randomNonNegativeLong(), ioStats, paths);\n        }\n        TransportStats transportStats = frequently() ? new TransportStats(randomNonNegativeLong(), randomNonNegativeLong(),\n                randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()) : null;\n        HttpStats httpStats = null;\n        if (frequently()) {\n            int numClients = randomIntBetween(0, 50);\n            List<HttpStats.ClientStats> clientStats = new ArrayList<>(numClients);\n            for (int k = 0; k < numClients; k++) {\n                var cs = new HttpStats.ClientStats(\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomAlphaOfLength(6),\n                    randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomBoolean() ? -1 : randomNonNegativeLong(),\n                    randomLongBetween(0, 100),\n                    randomLongBetween(0, 99999999)\n                );\n                clientStats.add(cs);\n            }\n            httpStats = new HttpStats(clientStats, randomNonNegativeLong(), randomNonNegativeLong());\n        }\n        AllCircuitBreakerStats allCircuitBreakerStats = null;\n        if (frequently()) {\n            int numCircuitBreakerStats = randomIntBetween(0, 10);\n            CircuitBreakerStats[] circuitBreakerStatsArray = new CircuitBreakerStats[numCircuitBreakerStats];\n            for (int i = 0; i < numCircuitBreakerStats; i++) {\n                circuitBreakerStatsArray[i] = new CircuitBreakerStats(randomAlphaOfLengthBetween(3, 10), randomNonNegativeLong(),\n                        randomNonNegativeLong(), randomDouble(), randomNonNegativeLong());\n            }\n            allCircuitBreakerStats = new AllCircuitBreakerStats(circuitBreakerStatsArray);\n        }\n        ScriptStats scriptStats = null;\n        if (frequently()) {\n            int numContents = randomIntBetween(0, 20);\n            List<ScriptContextStats> stats = new ArrayList<>(numContents);\n            HashSet<String> contexts = new HashSet<>();\n            for (int i = 0; i < numContents; i++) {\n                stats.add(new ScriptContextStats(\n                    randomValueOtherThanMany(contexts::contains, () -> randomAlphaOfLength(12)),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024),\n                    randomLongBetween(0, 1024))\n                );\n            }\n            scriptStats = new ScriptStats(stats);\n        }\n        DiscoveryStats discoveryStats = frequently()\n            ? new DiscoveryStats(\n            randomBoolean()\n                ? new PendingClusterStateStats(randomInt(), randomInt(), randomInt())\n                : null,\n            randomBoolean()\n                ? new PublishClusterStateStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong())\n                : null,\n            randomBoolean()\n                ? new ClusterStateUpdateStats(\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong())\n                : null)\n            : null;\n        IngestStats ingestStats = null;\n        if (frequently()) {\n            int numPipelines = randomIntBetween(0, 10);\n            int numProcessors = randomIntBetween(0, 10);\n            long maxStatValue = Long.MAX_VALUE / Math.max(1, numPipelines) / Math.max(1, numProcessors);\n            IngestStats.Stats totalStats = new IngestStats.Stats(\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue),\n                randomLongBetween(0, maxStatValue)\n            );\n            List<IngestStats.PipelineStat> ingestPipelineStats = new ArrayList<>(numPipelines);\n            Map<String, List<IngestStats.ProcessorStat>> ingestProcessorStats = new HashMap<>(numPipelines);\n            for (int i = 0; i < numPipelines; i++) {\n                String pipelineId = randomAlphaOfLengthBetween(3, 10);\n                ingestPipelineStats.add(new IngestStats.PipelineStat(pipelineId,  new IngestStats.Stats(\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue),\n                    randomLongBetween(0, maxStatValue))\n                ));\n\n                List<IngestStats.ProcessorStat> processorPerPipeline = new ArrayList<>(numProcessors);\n                for (int j =0; j < numProcessors;j++) {\n                    IngestStats.Stats processorStats = new IngestStats.Stats(\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue),\n                        randomLongBetween(0, maxStatValue)\n                    );\n                    processorPerPipeline.add(new IngestStats.ProcessorStat(randomAlphaOfLengthBetween(3, 10),\n                        randomAlphaOfLengthBetween(3, 10), processorStats));\n                }\n                ingestProcessorStats.put(pipelineId,processorPerPipeline);\n            }\n            ingestStats = new IngestStats(totalStats, ingestPipelineStats, ingestProcessorStats);\n        }\n        AdaptiveSelectionStats adaptiveSelectionStats = null;\n        if (frequently()) {\n            int numNodes = randomIntBetween(0,10);\n            Map<String, Long> nodeConnections = new HashMap<>();\n            Map<String, ResponseCollectorService.ComputedNodeStats> nodeStats = new HashMap<>();\n            for (int i = 0; i < numNodes; i++) {\n                String nodeId = randomAlphaOfLengthBetween(3, 10);\n                \r\n                if (frequently()) {\n                    nodeConnections.put(nodeId, randomLongBetween(0, 100));\n                }\n                \r\n                if (frequently()) {\n                    ResponseCollectorService.ComputedNodeStats stats = new ResponseCollectorService.ComputedNodeStats(nodeId,\n                            randomIntBetween(1,10), randomIntBetween(0, 2000),\n                            randomDoubleBetween(1.0, 10000000.0, true),\n                            randomDoubleBetween(1.0, 10000000.0, true));\n                    nodeStats.put(nodeId, stats);\n                }\n            }\n            adaptiveSelectionStats = new AdaptiveSelectionStats(nodeConnections, nodeStats);\n        }\n        \r\n        return new NodeStats(node, randomNonNegativeLong(), null, osStats, processStats, jvmStats, threadPoolStats,\n                fsInfo, transportStats, httpStats, allCircuitBreakerStats, scriptStats, discoveryStats,\n                ingestStats, adaptiveSelectionStats, null);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"},{"authorDate":"2020-03-26 23:22:07","commitOrder":21,"curCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","date":"2020-03-26 23:22:07","endLine":66,"groupId":"102409","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/56b00cd6260f927719dbe15f0146c59d8534c4.src","preCode":"    protected ShardFollowNodeTaskStatus createTestInstance() {\n        \r\n        return new ShardFollowNodeTaskStatus(\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomAlphaOfLength(4),\n                randomInt(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomIntBetween(0, Integer.MAX_VALUE),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomNonNegativeLong(),\n                randomReadExceptions(),\n                randomNonNegativeLong(),\n                randomBoolean() ? new ElasticsearchException(\"fatal error\") : null);\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTaskStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"1045abe71f4f8565f6b21d712f4075cf401f9237","commitMessage":"@@@Limit count of HTTP channels with tracked stats (#77303)\n\nToday we expire the client stats for HTTP channels 5 minutes after they\nclose. It's possible to open a very large number of HTTP channels in 5\nminutes.  possibly inadvertently.  and the stats for those channels can be\noverwhelming.\n\nThis commit introduces a limit on the number of channels tracked by each\nnode which applies in addition to the age limit.  and makes these limits\nconfigurable via static settings. It drops the pruning of old stats when\nstarting to track a new channel and instead uses a queue to expire the\noldest stats when each channel closes if necessary to respect the count\nlimit; it only performs age-based expiry when retrieving the stats. \nsince the count limit now bounds the memory needed. Finally.  it\ntightents up some missing synchronization and makes sure that we expose\nonly immutable objects to the stats subsystem.","date":"2021-09-08 14:25:57","modifiedFileCount":"8","status":"M","submitter":"David Turner"}]
