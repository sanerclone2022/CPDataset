[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testClusterPrimariesActive1() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test2, replicas will start initializing\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test2\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing happen (for test1) because we set it to primaries_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(routingNodes.node(\"node3\").size(), equalTo(1));\n        assertThat(routingNodes.node(\"node3\").iterator().next().shardId().getIndex().getName(), equalTo(\"test1\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":219,"groupId":"5177","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterPrimariesActive1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/ccdb08fb5e90ddfa107506f0e0f04380f1412c.src","preCode":"    public void testClusterPrimariesActive1() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test2, replicas will start initializing\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test2\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing happen (for test1) because we set it to primaries_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(routingNodes.node(\"node3\").size(), equalTo(1));\n        assertThat(routingNodes.node(\"node3\").iterator().next().shardId().getIndex().getName(), equalTo(\"test1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testClusterAllActive2() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_ALL_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing will not happen (for test1) because we set it to all_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(routingNodes.node(\"node3\").isEmpty(), equalTo(true));\n    }\n","date":"2018-04-26 03:22:53","endLine":482,"groupId":"42155","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterAllActive2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/ccdb08fb5e90ddfa107506f0e0f04380f1412c.src","preCode":"    public void testClusterAllActive2() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_ALL_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing will not happen (for test1) because we set it to all_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(routingNodes.node(\"node3\").isEmpty(), equalTo(true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-07-18 13:39:24","codes":[{"authorDate":"2019-07-18 13:39:24","commitOrder":2,"curCode":"    public void testClusterPrimariesActive1() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(ClusterRebalanceAllocationDecider\n                .CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test2, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test2\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing happen (for test1) because we set it to primaries_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        assertThat(routingNodes.node(\"node3\").size(), equalTo(1));\n        assertThat(routingNodes.node(\"node3\").iterator().next().shardId().getIndex().getName(), equalTo(\"test1\"));\n    }\n","date":"2019-07-18 13:39:24","endLine":216,"groupId":"5177","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterPrimariesActive1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8e/b056c77825c95e15662a03bacaf7f5087c0c28.src","preCode":"    public void testClusterPrimariesActive1() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(ClusterRebalanceAllocationDecider\n                .CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test2, replicas will start initializing\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test2\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing happen (for test1) because we set it to primaries_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(routingNodes.node(\"node3\").size(), equalTo(1));\n        assertThat(routingNodes.node(\"node3\").iterator().next().shardId().getIndex().getName(), equalTo(\"test1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2019-07-18 13:39:24","commitOrder":2,"curCode":"    public void testClusterAllActive2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_ALL_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing will not happen (for test1) because we set it to all_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(routingNodes.node(\"node3\").isEmpty(), equalTo(true));\n    }\n","date":"2019-07-18 13:39:24","endLine":472,"groupId":"5178","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterAllActive2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8e/b056c77825c95e15662a03bacaf7f5087c0c28.src","preCode":"    public void testClusterAllActive2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_ALL_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(\"test1\", INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing will not happen (for test1) because we set it to all_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(routingNodes.node(\"node3\").isEmpty(), equalTo(true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"}],"commitId":"51fb95ef83f7a1aa6cbc5207e504b03ccee724ee","commitMessage":"@@@Defer reroute when starting shards (#44433)\n\n* Defer reroute when starting shards\n\nToday we reroute the cluster as part of the process of starting a shard.  which\nruns at `URGENT` priority. In large clusters.  rerouting may take some time to\ncomplete.  and this means that a mere trickle of shard-started events can cause\nstarvation for other.  lower-priority.  tasks that are pending on the master.\n\nHowever.  it isn't really necessary to perform a reroute when starting a shard. \nas long as one occurs eventually. This commit removes the inline reroute from\nthe process of starting a shard and replaces it with a deferred one that runs\nat `NORMAL` priority.  avoiding starvation of higher-priority tasks.\n\nThis may improve some of the situations related to #42738 and #42105.\n\n* Specific test case for followup priority setting\n\nWe cannot set the priority in all InternalTestClusters because the deprecation\nwarning makes some tests unhappy. This commit adds a specific test instead.\n\n* Checkstyle\n\n* Cluster state always changed here\n\n* Assert consistency of routing nodes\n\n* Restrict setting only to reasonable priorities\n","date":"2019-07-18 13:39:24","modifiedFileCount":"60","status":"M","submitter":"David Turner"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testClusterPrimariesActive1() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(ClusterRebalanceAllocationDecider\n                .CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE.toString()).build());\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetadata.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test1\"))\n                .addAsNew(metadata.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metadata(metadata).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test2, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test2\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing happen (for test1) because we set it to primaries_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        assertThat(routingNodes.node(\"node3\").size(), equalTo(1));\n        assertThat(routingNodes.node(\"node3\").iterator().next().shardId().getIndex().getName(), equalTo(\"test1\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":216,"groupId":"102197","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterPrimariesActive1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/7bb30e6e481d64279298e0eb193bf0fab1a1e6.src","preCode":"    public void testClusterPrimariesActive1() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(ClusterRebalanceAllocationDecider\n                .CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_PRIMARIES_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test2, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test2\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing happen (for test1) because we set it to primaries_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        assertThat(routingNodes.node(\"node3\").size(), equalTo(1));\n        assertThat(routingNodes.node(\"node3\").iterator().next().shardId().getIndex().getName(), equalTo(\"test1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testClusterAllActive2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_ALL_ACTIVE.toString()).build());\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetadata.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test1\"))\n                .addAsNew(metadata.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metadata(metadata).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing will not happen (for test1) because we set it to all_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(routingNodes.node(\"node3\").isEmpty(), equalTo(true));\n    }\n","date":"2020-04-01 03:52:01","endLine":472,"groupId":"102197","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterAllActive2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/7bb30e6e481d64279298e0eb193bf0fab1a1e6.src","preCode":"    public void testClusterAllActive2() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),\n                ClusterRebalanceAllocationDecider.ClusterRebalanceType.INDICES_ALL_ACTIVE.toString()).build());\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test1\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .put(IndexMetaData.builder(\"test2\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test1\"))\n                .addAsNew(metaData.index(\"test2\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        logger.info(\"start two nodes\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards for test1, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start the test1 replica shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState, \"test1\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test1\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test1\").shard(i).replicaShards().get(0).state(), equalTo(STARTED));\n        }\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test2\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test2\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"now, start 1 more node, check that rebalancing will not happen (for test1) because we set it to all_active\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(routingNodes.node(\"node3\").isEmpty(), equalTo(true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
