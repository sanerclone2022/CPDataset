[{"authorTime":"2020-04-09 02:07:25","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":6,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-04-01 03:52:01","endLine":574,"groupId":"57061","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/570215d8a3449beb96241f498163d105c9441a.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"NB"},{"authorDate":"2020-04-09 02:07:25","commitOrder":6,"curCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        IndexTemplateV2 t1 = new IndexTemplateV2(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-04-09 02:07:25","endLine":606,"groupId":"57061","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromV2TemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/4e0c1af26bc803165be039a954aaa4a2da04cd.src","preCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        IndexTemplateV2 t1 = new IndexTemplateV2(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"B"}],"commitId":"e5d6fd49859e1356173f80d360d93bde3e849f47","commitMessage":"@@@Use V2 templates when reading duplicate aliases and ingest pip? (#54902)\n\nWhen a new index is rolled over.  we check to see whether there are any duplicate alias\nconfigurations in the index template configuration. Additionally.  when a new index is created from a\nbulk action.  we check the templates to see if there are any ingest pipelines that need to be applied\nto the index that will be newly created.\n\nBoth of these actions previously checked the v1 templates for their settings.  they now also check\nthe v2 index templates.  with the v2 index templates taking precendence similar to the way they do\nwhen creating an index.\n\nRelates to #53101","date":"2020-04-09 02:07:25","modifiedFileCount":"7","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-04-21 00:04:42","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":7,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-04-01 03:52:01","endLine":574,"groupId":"57061","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/570215d8a3449beb96241f498163d105c9441a.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"N"},{"authorDate":"2020-04-21 00:04:42","commitOrder":7,"curCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        IndexTemplateV2 t1 = new IndexTemplateV2(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.preferV2Templates(true);\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-04-21 00:04:42","endLine":608,"groupId":"29842","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromV2TemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ab/bae57a0ac9a050be93091bec154e48057d4b31.src","preCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        IndexTemplateV2 t1 = new IndexTemplateV2(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"}],"commitId":"0202e1ae960a3f5c837a490bdcea2a94a4fe321f","commitMessage":"@@@Add prefer_v2_templates flag and index setting (#55411)\n\nThis commit adds a new querystring parameter on the following APIs:\n- Index\n- Update\n- Bulk\n- Create Index\n- Rollover\n\nThese APIs now support a `?prefer_v2_templates=true|false` flag. This flag changes the preference\ncreation to use either V2 index templates or V1 templates. This flag defaults to `false` and will be\nchanged to `true` for 8.0+ in subsequent work.\n\nAdditionally.  setting this flag internally sets the `index.prefer_v2_templates` index-level setting.\nThis setting is used so that actions that automatically create a new index (things like rollover\ninitiated by ILM) will inherit the preference from the original index. This setting is dynamic so\nthat a transition from v1 to v2 templates can occur for long-running indices grouped by an alias\nperforming periodic rollover.\n\nThis also adds support for sending this parameter to the High Level Rest Client.\n\nRelates to #53101\n","date":"2020-04-21 00:04:42","modifiedFileCount":"28","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-05-12 04:56:48","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":8,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-04-01 03:52:01","endLine":574,"groupId":"57061","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/570215d8a3449beb96241f498163d105c9441a.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"N"},{"authorDate":"2020-05-12 04:56:48","commitOrder":8,"curCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        IndexTemplateV2 t1 = new IndexTemplateV2(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-05-12 04:56:48","endLine":607,"groupId":"57061","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromV2TemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ec/9276e86b5b05dc2b4e6f780291d603df8a93b1.src","preCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        IndexTemplateV2 t1 = new IndexTemplateV2(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.preferV2Templates(true);\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"}],"commitId":"fc708ccca4c073952e596470a77d127252e1a026","commitMessage":"@@@Remove prefer_v2_templates query string parameter (#56546)\n\nThis commit removes the `prefer_v2_templates` flag and setting. This was a brief setting that\nallowed specifying whether V1 or V2 template should be used when an index is created. It has been\nremoved in favor of V2 templates always having priority.\n\nRelates to #53101\nResolves #56528\n\nThis is not a breaking change because this flag was never in a released version.\n\n","date":"2020-05-12 04:56:48","modifiedFileCount":"30","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-05-12 19:42:59","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":9,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-04-01 03:52:01","endLine":574,"groupId":"57061","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/570215d8a3449beb96241f498163d105c9441a.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"N"},{"authorDate":"2020-05-12 19:42:59","commitOrder":9,"curCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        IndexTemplateV2 t1 = new IndexTemplateV2(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-05-12 19:42:59","endLine":607,"groupId":"57061","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromV2TemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ed/f7943f0eff68e4430b14a535970809c67cdb0e.src","preCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        IndexTemplateV2 t1 = new IndexTemplateV2(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"}],"commitId":"74e2c011384bab5b171c5efbbfb57b24820f0a07","commitMessage":"@@@Auto create data streams using index templates v2 (#55377)\n\nThis commit adds the ability to auto create data streams using index templates v2.\nIndex templates (v2) now have a data_steam field that includes a timestamp field. \nif provided and index name matches with that template then a data stream\n(plus first backing index) is auto created. \n\nRelates to #53100","date":"2020-05-12 19:42:59","modifiedFileCount":"21","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2020-05-27 23:32:10","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":10,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-04-01 03:52:01","endLine":574,"groupId":"57061","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/570215d8a3449beb96241f498163d105c9441a.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"N"},{"authorDate":"2020-05-27 23:32:10","commitOrder":10,"curCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        ComposableIndexTemplate t1 = new ComposableIndexTemplate(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-05-27 23:32:10","endLine":607,"groupId":"57061","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromV2TemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/d617230c5c8db7449e991feff6aa2306acd2ac.src","preCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        IndexTemplateV2 t1 = new IndexTemplateV2(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"}],"commitId":"4dc32611fcdc4ffc6ad27373103b636ee53941a8","commitMessage":"@@@Rename template V2 classes to ComposableTemplate (#57183)\n\nThis PR changes the name of the Index Template V2 classes to \"Composable Templates\".  it also ensures there are no mentions of \"V2\" in the documentation or error/warning messages. V1 templates are referred to as \"legacy\" templates.\n\nResolves #56609","date":"2020-05-27 23:32:10","modifiedFileCount":"28","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-09-23 02:14:45","codes":[{"authorDate":"2020-09-23 02:14:45","commitOrder":11,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","date":"2020-09-23 02:14:45","endLine":627,"groupId":"57061","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/335056aff2db76f80f903c8632689e4cf57e66.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2020-09-23 02:14:45","commitOrder":11,"curCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        ComposableIndexTemplate t1 = new ComposableIndexTemplate(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","date":"2020-09-23 02:14:45","endLine":657,"groupId":"57061","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromV2TemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/335056aff2db76f80f903c8632689e4cf57e66.src","preCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        ComposableIndexTemplate t1 = new ComposableIndexTemplate(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"}],"commitId":"242083a36e02496aae9214dc41b89372022e7076","commitMessage":"@@@Dedicated threadpool for system index writes (#61655)\n\nThis commit adds a dedicated threadpool for system index write\noperations. The dedicated resources for system index writes serves as\na means to ensure that user activity does not block important system\noperations from occurring such as the management of users and roles.","date":"2020-09-23 02:14:45","modifiedFileCount":"29","status":"M","submitter":"Jay Modi"},{"authorTime":"2020-10-26 20:35:36","codes":[{"authorDate":"2020-09-23 02:14:45","commitOrder":12,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","date":"2020-09-23 02:14:45","endLine":627,"groupId":"57061","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/335056aff2db76f80f903c8632689e4cf57e66.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"N"},{"authorDate":"2020-10-26 20:35:36","commitOrder":12,"curCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        ComposableIndexTemplate t1 = new ComposableIndexTemplate(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","date":"2020-10-26 20:35:36","endLine":651,"groupId":"57061","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromV2TemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/69/1c9bfe17effeab1300fec991a544d02c84bab9.src","preCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        ComposableIndexTemplate t1 = new ComposableIndexTemplate(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"}],"commitId":"dc855add492f3b447a2d3ea0a290458f9fc9207e","commitMessage":"@@@Add a template parameter to override auto_create_index value (#61858)\n\nCloses #20640.\n\nThis PR introduces a new parameter to v2 templates.  `allow_auto_create`. \nwhich allows templates to override the cluster setting `auto_create_index`.\nNotes:\n\n   * `AutoCreateIndex` now looks for a matching v2 template.  and if its\n     `allow_auto_create` setting is true.  it overrides the usual logic.\n   * `TransportBulkAction` previously used `AutoCreateIndex` to check\n     whether missing indices should be created. We now rely on\n     `AutoCreateAction`.  which was already differentiating between creating\n     indices and creating data streams.  I've updated `AutoCreateAction` to\n     use `AutoCreateIndex`. Data streams are also influenced by\n     `allow_auto_create`.  in that their default auto-create behaviour can\n     be disabled with this setting.\n   * Most of the Java file changes are due to introducing an extra\n     constructor parameter to `ComposableIndexTemplate`.\n   * I've added the new setting to various x-pack templates\n   * I added a YAML test to check that watches can be created even when\n     `auto_create_index` is `false`.","date":"2020-10-26 20:35:36","modifiedFileCount":"32","status":"M","submitter":"Rory Hunter"},{"authorTime":"2020-10-26 20:35:36","codes":[{"authorDate":"2020-11-18 18:17:00","commitOrder":13,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        final ImmutableOpenMap<String, IndexTemplateMetadata> templateMetadata = templateMetadataBuilder.build();\n        when(metadata.templates()).thenReturn(templateMetadata);\n        when(metadata.getTemplates()).thenReturn(templateMetadata);\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","date":"2020-11-18 18:17:00","endLine":622,"groupId":"105643","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9c/cdf19c14562dcce5af39a0937a84e4a9a99925.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"M"},{"authorDate":"2020-10-26 20:35:36","commitOrder":13,"curCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        ComposableIndexTemplate t1 = new ComposableIndexTemplate(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","date":"2020-10-26 20:35:36","endLine":651,"groupId":"105643","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromV2TemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/69/1c9bfe17effeab1300fec991a544d02c84bab9.src","preCode":"    public void testFindDefaultPipelineFromV2TemplateMatch() {\n        Exception exception = new Exception(\"fake exception\");\n\n        ComposableIndexTemplate t1 = new ComposableIndexTemplate(Collections.singletonList(\"missing_*\"),\n            new Template(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build(), null, null),\n            null, null, null, null, null, null);\n\n        ClusterState state = clusterService.state();\n        Metadata metadata = Metadata.builder()\n            .put(\"my-template\", t1)\n            .build();\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"N"}],"commitId":"ba5f454139051c8b088c7d0ba097294ea3a6bf40","commitMessage":"@@@Minor Cleanup in org.elasticsearch.common.collect (#64955)\n\n* Return empty map singleton from builder\n* Remove dead methods\n* Cleanup duplicate iterator\n","date":"2020-11-18 18:17:00","modifiedFileCount":"16","status":"M","submitter":"Armin Braun"}]
