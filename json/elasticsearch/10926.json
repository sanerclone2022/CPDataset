[{"authorTime":"2019-04-06 06:15:14","codes":[{"authorDate":"2019-03-23 03:54:26","commitOrder":3,"curCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = super.scriptContexts();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n\n        InstanceBindingTestClass instanceBindingTestClass = new InstanceBindingTestClass(1);\n        WhitelistInstanceBinding getter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"setInstanceBindingValue\", \"void\", Collections.singletonList(\"int\"));\n        WhitelistInstanceBinding setter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"getInstanceBindingValue\", \"int\", Collections.emptyList());\n        List<WhitelistInstanceBinding> instanceBindingsList = new ArrayList<>();\n        instanceBindingsList.add(getter);\n        instanceBindingsList.add(setter);\n        Whitelist instanceBindingsWhitelist = new Whitelist(instanceBindingTestClass.getClass().getClassLoader(),\n                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), instanceBindingsList);\n        whitelists.add(instanceBindingsWhitelist);\n\n        contexts.put(BindingsTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","date":"2019-03-23 03:54:26","endLine":118,"groupId":"31181","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"scriptContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/ca40fc4cdaf0cae416a096404b0af204c72117.src","preCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = super.scriptContexts();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n\n        InstanceBindingTestClass instanceBindingTestClass = new InstanceBindingTestClass(1);\n        WhitelistInstanceBinding getter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"setInstanceBindingValue\", \"void\", Collections.singletonList(\"int\"));\n        WhitelistInstanceBinding setter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"getInstanceBindingValue\", \"int\", Collections.emptyList());\n        List<WhitelistInstanceBinding> instanceBindingsList = new ArrayList<>();\n        instanceBindingsList.add(getter);\n        instanceBindingsList.add(setter);\n        Whitelist instanceBindingsWhitelist = new Whitelist(instanceBindingTestClass.getClass().getClassLoader(),\n                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), instanceBindingsList);\n        whitelists.add(instanceBindingsWhitelist);\n\n        contexts.put(BindingsTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/BindingsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"NB"},{"authorDate":"2019-04-06 06:15:14","commitOrder":3,"curCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n        contexts.put(PainlessTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","date":"2019-04-06 06:15:14","endLine":71,"groupId":"57505","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"scriptContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/04fa92194e0d9b48afcf181c0b0ed7bce43194.src","preCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n        contexts.put(PainlessTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"}],"commitId":"6cfa94b21345649565faf417152768c210a62e58","commitMessage":"@@@Move test classes to test root in Painless (#40873)\n\nThis moves several test classes that were part of the main root to the test root. \nThese were part of the main root due to limitations prior to whitelist \ncustomization. Without whitelist customization these can be moved to a test \ncontext and removed from the base whitelists as they should not be user \nfacing.","date":"2019-04-06 06:15:14","modifiedFileCount":"10","status":"M","submitter":"Jack Conradson"},{"authorTime":"2019-04-06 06:15:14","codes":[{"authorDate":"2019-06-25 00:00:44","commitOrder":4,"curCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = super.scriptContexts();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n\n        InstanceBindingTestClass instanceBindingTestClass = new InstanceBindingTestClass(1);\n        WhitelistInstanceBinding getter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"setInstanceBindingValue\", \"void\", Collections.singletonList(\"int\"), Collections.emptyList());\n        WhitelistInstanceBinding setter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"getInstanceBindingValue\", \"int\", Collections.emptyList(), Collections.emptyList());\n        List<WhitelistInstanceBinding> instanceBindingsList = new ArrayList<>();\n        instanceBindingsList.add(getter);\n        instanceBindingsList.add(setter);\n        Whitelist instanceBindingsWhitelist = new Whitelist(instanceBindingTestClass.getClass().getClassLoader(),\n                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), instanceBindingsList);\n        whitelists.add(instanceBindingsWhitelist);\n\n        contexts.put(BindingsTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","date":"2019-06-25 00:00:44","endLine":118,"groupId":"42842","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"scriptContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/17/1880abd79076e3705e708a1e38fbcb07adbe44.src","preCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = super.scriptContexts();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n\n        InstanceBindingTestClass instanceBindingTestClass = new InstanceBindingTestClass(1);\n        WhitelistInstanceBinding getter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"setInstanceBindingValue\", \"void\", Collections.singletonList(\"int\"));\n        WhitelistInstanceBinding setter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"getInstanceBindingValue\", \"int\", Collections.emptyList());\n        List<WhitelistInstanceBinding> instanceBindingsList = new ArrayList<>();\n        instanceBindingsList.add(getter);\n        instanceBindingsList.add(setter);\n        Whitelist instanceBindingsWhitelist = new Whitelist(instanceBindingTestClass.getClass().getClassLoader(),\n                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), instanceBindingsList);\n        whitelists.add(instanceBindingsWhitelist);\n\n        contexts.put(BindingsTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/BindingsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2019-04-06 06:15:14","commitOrder":4,"curCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n        contexts.put(PainlessTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","date":"2019-04-06 06:15:14","endLine":71,"groupId":"57505","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"scriptContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/04fa92194e0d9b48afcf181c0b0ed7bce43194.src","preCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n        contexts.put(PainlessTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"ab7ca7fa0f0b8552445c15382d282815c43e477b","commitMessage":"@@@Add annotations to Painless whitelist (#43239)\n\n* Start to parse annotations in the whitelist\n\n* Finish parsing annotations\n\n* Finish annotation parsing\n\n* Add docs\n\n* Parser changes.\n\n* Add annotation parser.\n\n* Add annotation tests for Painless core.\n\n* Add example annotation to Painless example extension.\n\n* Response to PR comments.\n","date":"2019-06-25 00:00:44","modifiedFileCount":"12","status":"M","submitter":"Jack Conradson"},{"authorTime":"2019-04-06 06:15:14","codes":[{"authorDate":"2021-02-02 03:16:01","commitOrder":5,"curCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = super.scriptContexts();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n\n        InstanceBindingTestClass instanceBindingTestClass = new InstanceBindingTestClass(1);\n        WhitelistInstanceBinding getter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"setInstanceBindingValue\", \"void\", Collections.singletonList(\"int\"), Collections.emptyList());\n        WhitelistInstanceBinding setter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"getInstanceBindingValue\", \"int\", Collections.emptyList(), Collections.emptyList());\n        WhitelistInstanceBinding mul = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"instanceMul\", \"int\", List.of(\"int\", \"int\"), List.of(CompileTimeOnlyAnnotation.INSTANCE));\n        List<WhitelistInstanceBinding> instanceBindingsList = new ArrayList<>();\n        instanceBindingsList.add(getter);\n        instanceBindingsList.add(setter);\n        instanceBindingsList.add(mul);\n        Whitelist instanceBindingsWhitelist = new Whitelist(instanceBindingTestClass.getClass().getClassLoader(),\n                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), instanceBindingsList);\n        whitelists.add(instanceBindingsWhitelist);\n\n        contexts.put(BindingsTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","date":"2021-02-02 03:16:01","endLine":142,"groupId":"47537","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"scriptContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/68/7cf4657f86cc0e5a2535853e84dba9e9f52c7c.src","preCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = super.scriptContexts();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n\n        InstanceBindingTestClass instanceBindingTestClass = new InstanceBindingTestClass(1);\n        WhitelistInstanceBinding getter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"setInstanceBindingValue\", \"void\", Collections.singletonList(\"int\"), Collections.emptyList());\n        WhitelistInstanceBinding setter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"getInstanceBindingValue\", \"int\", Collections.emptyList(), Collections.emptyList());\n        List<WhitelistInstanceBinding> instanceBindingsList = new ArrayList<>();\n        instanceBindingsList.add(getter);\n        instanceBindingsList.add(setter);\n        Whitelist instanceBindingsWhitelist = new Whitelist(instanceBindingTestClass.getClass().getClassLoader(),\n                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), instanceBindingsList);\n        whitelists.add(instanceBindingsWhitelist);\n\n        contexts.put(BindingsTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/BindingsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-04-06 06:15:14","commitOrder":5,"curCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n        contexts.put(PainlessTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","date":"2019-04-06 06:15:14","endLine":71,"groupId":"57505","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"scriptContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/04fa92194e0d9b48afcf181c0b0ed7bce43194.src","preCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n        contexts.put(PainlessTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"419ce1098981f929f0edf45d17f2b6c05f800aaa","commitMessage":"@@@Add grok and dissect methods to runtime fields (#68088)\n\nThis adds a `grok` and a `dissect` method to runtime fields which\nreturns a `Matcher` style object you can use to get the matched\npatterns. A fairly simple script to extract the \"verb\" from an apache\nlog line with `grok` would look like this:\n```\nString verb = grok('%{COMMONAPACHELOG}').extract(doc[\"message\"].value)?.verb;\nif (verb != null) {\n  emit(verb);\n}\n```\n\nAnd `dissect` would look like:\n```\nString verb = dissect('%{clientip} %{ident} %{auth} [%{@timestamp}] \"%{verb} %{request} HTTP/%{httpversion}\" %{status} %{size}').extract(doc[\"message\"].value)?.verb;\nif (verb != null) {\n  emit(verb);\n}\n```\n\nWe'll work later to get it down to a clean looking one liner.  but for\nnow.  this'll do.\n\nThe `grok` and `dissect` methods are special in that they only run at\nscript compile time. You can't pass non-constants to them. They'll\nproduce compile errors if you send in a bad pattern. This is nice\nbecause they can be expensive to \"compile\" and there are many other\noptimizations we can make when the patterns are available up front.\n\nCloses #67825\n","date":"2021-02-02 03:16:01","modifiedFileCount":"33","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-08-10 09:10:37","codes":[{"authorDate":"2021-08-10 09:10:37","commitOrder":6,"curCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = super.scriptContexts();\n        List<Whitelist> whitelists = new ArrayList<>(PainlessPlugin.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(PainlessPlugin.class, \"org.elasticsearch.painless.test\"));\n\n        InstanceBindingTestClass instanceBindingTestClass = new InstanceBindingTestClass(1);\n        WhitelistInstanceBinding getter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"setInstanceBindingValue\", \"void\", Collections.singletonList(\"int\"), Collections.emptyList());\n        WhitelistInstanceBinding setter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"getInstanceBindingValue\", \"int\", Collections.emptyList(), Collections.emptyList());\n        WhitelistInstanceBinding mul = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"instanceMul\", \"int\", List.of(\"int\", \"int\"), List.of(CompileTimeOnlyAnnotation.INSTANCE));\n        List<WhitelistInstanceBinding> instanceBindingsList = new ArrayList<>();\n        instanceBindingsList.add(getter);\n        instanceBindingsList.add(setter);\n        instanceBindingsList.add(mul);\n        Whitelist instanceBindingsWhitelist = new Whitelist(instanceBindingTestClass.getClass().getClassLoader(),\n                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), instanceBindingsList);\n        whitelists.add(instanceBindingsWhitelist);\n\n        contexts.put(BindingsTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","date":"2021-08-10 09:10:37","endLine":131,"groupId":"10926","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"scriptContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/5e084cd8c9fe4cdd706678bb5681f61078b1d9.src","preCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = super.scriptContexts();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n\n        InstanceBindingTestClass instanceBindingTestClass = new InstanceBindingTestClass(1);\n        WhitelistInstanceBinding getter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"setInstanceBindingValue\", \"void\", Collections.singletonList(\"int\"), Collections.emptyList());\n        WhitelistInstanceBinding setter = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"getInstanceBindingValue\", \"int\", Collections.emptyList(), Collections.emptyList());\n        WhitelistInstanceBinding mul = new WhitelistInstanceBinding(\"test\", instanceBindingTestClass,\n                \"instanceMul\", \"int\", List.of(\"int\", \"int\"), List.of(CompileTimeOnlyAnnotation.INSTANCE));\n        List<WhitelistInstanceBinding> instanceBindingsList = new ArrayList<>();\n        instanceBindingsList.add(getter);\n        instanceBindingsList.add(setter);\n        instanceBindingsList.add(mul);\n        Whitelist instanceBindingsWhitelist = new Whitelist(instanceBindingTestClass.getClass().getClassLoader(),\n                Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), instanceBindingsList);\n        whitelists.add(instanceBindingsWhitelist);\n\n        contexts.put(BindingsTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/BindingsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2021-08-10 09:10:37","commitOrder":6,"curCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>();\n        List<Whitelist> whitelists = new ArrayList<>(PainlessPlugin.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(PainlessPlugin.class, \"org.elasticsearch.painless.test\"));\n        contexts.put(PainlessTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","date":"2021-08-10 09:10:37","endLine":59,"groupId":"10926","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"scriptContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/36706388751afef9a6a18643599118c8e809cd.src","preCode":"    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {\n        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>();\n        List<Whitelist> whitelists = new ArrayList<>(Whitelist.BASE_WHITELISTS);\n        whitelists.add(WhitelistLoader.loadFromResourceFiles(Whitelist.class, \"org.elasticsearch.painless.test\"));\n        contexts.put(PainlessTestScript.CONTEXT, whitelists);\n        return contexts;\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/ScriptTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"43a534e95a32ffc1ae47517b4291285acdbe4dea","commitMessage":"@@@Move painless base whitelist into painless jar (#76262)\n\nThe base whitelist is shared by all script contexts. However.  the text\nfiles exist within painless itself.  not the limited spi jar which is\nmeant for extension. This commit moves the base definition into painless\nand reworks context loading in painless to add the base whitelist so\nthat all contexts get it.  regardless of whether they have added an\nexplicit whitelist.","date":"2021-08-10 09:10:37","modifiedFileCount":"17","status":"M","submitter":"Ryan Ernst"}]
