[{"authorTime":"2020-03-18 00:55:07","codes":[{"authorDate":"2020-03-18 00:55:07","commitOrder":1,"curCode":"    public void testIndexTemplateInvalidNumberOfShards() {\n        PutRequest request = new PutRequest(\"test\", \"test_shards\");\n        request.patterns(singletonList(\"test_shards*\"));\n\n        request.settings(builder()\n            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"0\")\n            .put(\"index.shard.check_on_startup\", \"blargh\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"unknown value for [index.shard.check_on_startup] \" +\n                                \"must be one of [true, false, checksum] but was: blargh\"));\n    }\n","date":"2020-03-18 00:55:07","endLine":73,"groupId":"31691","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexTemplateInvalidNumberOfShards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/d37a52b89bef7461675002dec5713153ab51c6.src","preCode":"    public void testIndexTemplateInvalidNumberOfShards() {\n        PutRequest request = new PutRequest(\"test\", \"test_shards\");\n        request.patterns(singletonList(\"test_shards*\"));\n\n        request.settings(builder()\n            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"0\")\n            .put(\"index.shard.check_on_startup\", \"blargh\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"unknown value for [index.shard.check_on_startup] \" +\n                                \"must be one of [true, false, checksum] but was: blargh\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2020-03-18 00:55:07","commitOrder":1,"curCode":"    public void testIndexTemplateValidationAccumulatesValidationErrors() {\n        PutRequest request = new PutRequest(\"test\", \"putTemplate shards\");\n        request.patterns(singletonList(\"_test_shards*\"));\n        request.settings(builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"0\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(), containsString(\"name must not contain a space\"));\n        assertThat(throwables.get(0).getMessage(), containsString(\"template must not start with '_'\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n    }\n","date":"2020-03-18 00:55:07","endLine":87,"groupId":"17959","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexTemplateValidationAccumulatesValidationErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/d37a52b89bef7461675002dec5713153ab51c6.src","preCode":"    public void testIndexTemplateValidationAccumulatesValidationErrors() {\n        PutRequest request = new PutRequest(\"test\", \"putTemplate shards\");\n        request.patterns(singletonList(\"_test_shards*\"));\n        request.settings(builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"0\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(), containsString(\"name must not contain a space\"));\n        assertThat(throwables.get(0).getMessage(), containsString(\"template must not start with '_'\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"263e525e496498b9a2006675178105cb20114d2c","commitMessage":"@@@Add REST API for ComponentTemplate CRUD (#53558)\n\n* Add REST API for ComponentTemplate CRUD\n\nThis adds the Put/Get/DeleteComponentTemplate APIs that allow inserting.  retrieving.  and removing\nComponentTemplateMetadata into the cluster state metadata.\n\nThese APIs are currently only available behind a feature flag system property -\n`es.itv2_feature_flag_registered`.\n\nRelates to #53101\n\nCo-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>","date":"2020-03-18 00:55:07","modifiedFileCount":"6","status":"B","submitter":"Lee Hinman"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testIndexTemplateInvalidNumberOfShards() {\n        PutRequest request = new PutRequest(\"test\", \"test_shards\");\n        request.patterns(singletonList(\"test_shards*\"));\n\n        request.settings(builder()\n            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, \"0\")\n            .put(\"index.shard.check_on_startup\", \"blargh\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"unknown value for [index.shard.check_on_startup] \" +\n                                \"must be one of [true, false, checksum] but was: blargh\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":77,"groupId":"31691","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexTemplateInvalidNumberOfShards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/10/06822595485e2899bc59bc00b3a8bdd8b0b6fe.src","preCode":"    public void testIndexTemplateInvalidNumberOfShards() {\n        PutRequest request = new PutRequest(\"test\", \"test_shards\");\n        request.patterns(singletonList(\"test_shards*\"));\n\n        request.settings(builder()\n            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"0\")\n            .put(\"index.shard.check_on_startup\", \"blargh\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"unknown value for [index.shard.check_on_startup] \" +\n                                \"must be one of [true, false, checksum] but was: blargh\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testIndexTemplateValidationAccumulatesValidationErrors() {\n        PutRequest request = new PutRequest(\"test\", \"putTemplate shards\");\n        request.patterns(singletonList(\"_test_shards*\"));\n        request.settings(builder().put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, \"0\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(), containsString(\"name must not contain a space\"));\n        assertThat(throwables.get(0).getMessage(), containsString(\"template must not start with '_'\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":138,"groupId":"17959","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexTemplateValidationAccumulatesValidationErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/10/06822595485e2899bc59bc00b3a8bdd8b0b6fe.src","preCode":"    public void testIndexTemplateValidationAccumulatesValidationErrors() {\n        PutRequest request = new PutRequest(\"test\", \"putTemplate shards\");\n        request.patterns(singletonList(\"_test_shards*\"));\n        request.settings(builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, \"0\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(), containsString(\"name must not contain a space\"));\n        assertThat(throwables.get(0).getMessage(), containsString(\"template must not start with '_'\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-05-05 23:24:46","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testIndexTemplateInvalidNumberOfShards() {\n        PutRequest request = new PutRequest(\"test\", \"test_shards\");\n        request.patterns(singletonList(\"test_shards*\"));\n\n        request.settings(builder()\n            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, \"0\")\n            .put(\"index.shard.check_on_startup\", \"blargh\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"unknown value for [index.shard.check_on_startup] \" +\n                                \"must be one of [true, false, checksum] but was: blargh\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":77,"groupId":"102022","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexTemplateInvalidNumberOfShards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/10/06822595485e2899bc59bc00b3a8bdd8b0b6fe.src","preCode":"    public void testIndexTemplateInvalidNumberOfShards() {\n        PutRequest request = new PutRequest(\"test\", \"test_shards\");\n        request.patterns(singletonList(\"test_shards*\"));\n\n        request.settings(builder()\n            .put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, \"0\")\n            .put(\"index.shard.check_on_startup\", \"blargh\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"unknown value for [index.shard.check_on_startup] \" +\n                                \"must be one of [true, false, checksum] but was: blargh\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2020-05-05 23:24:46","commitOrder":3,"curCode":"    public void testIndexTemplateValidationAccumulatesValidationErrors() {\n        PutRequest request = new PutRequest(\"test\", \"putTemplate shards\");\n        request.patterns(singletonList(\"_test_shards*\"));\n        request.settings(builder().put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, \"0\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(), containsString(\"name must not contain a space\"));\n        assertThat(throwables.get(0).getMessage(), containsString(\"index_pattern [_test_shards*] must not start with '_'\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n    }\n","date":"2020-05-05 23:24:46","endLine":152,"groupId":"102022","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexTemplateValidationAccumulatesValidationErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/29d169dcd88aefd25b350f020a12e7aef4df42.src","preCode":"    public void testIndexTemplateValidationAccumulatesValidationErrors() {\n        PutRequest request = new PutRequest(\"test\", \"putTemplate shards\");\n        request.patterns(singletonList(\"_test_shards*\"));\n        request.settings(builder().put(IndexMetadata.SETTING_NUMBER_OF_SHARDS, \"0\").build());\n\n        List<Throwable> throwables = putTemplate(xContentRegistry(), request);\n        assertEquals(throwables.size(), 1);\n        assertThat(throwables.get(0), instanceOf(InvalidIndexTemplateException.class));\n        assertThat(throwables.get(0).getMessage(), containsString(\"name must not contain a space\"));\n        assertThat(throwables.get(0).getMessage(), containsString(\"template must not start with '_'\"));\n        assertThat(throwables.get(0).getMessage(),\n                containsString(\"Failed to parse value [0] for setting [index.number_of_shards] must be >= 1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"ed271a6752f52d2f5198b857128c08c2ee711eab","commitMessage":"@@@Validate V2 templates more strictly (#56170)\n\nThis commit changes the validation for V2 index and component templates to re-use the same\nvalidation that V1 templates used. This includes things like invalid template names.  index patterns. \netc.\n\nThis also adds validation that template names do not contain `*` and index patterns do not contain \n`:` (index names can't contain this regardless).\n\nSupercedes #53970\nRelates to #53101\nResolves #43737\nResolves #46045\n","date":"2020-05-05 23:24:46","modifiedFileCount":"5","status":"M","submitter":"Lee Hinman"}]
