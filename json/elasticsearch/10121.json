[{"authorTime":"2018-12-22 20:21:49","codes":[{"authorDate":"2018-12-22 20:21:49","commitOrder":1,"curCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        \r\n        \r\n        assumeFalse(\"windows deletion behavior is asinine\", Constants.WINDOWS);\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","date":"2018-12-22 20:21:49","endLine":215,"groupId":"30760","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildWithCountryDbAndAsnFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/62e8793970a8a39a319688c8bf34689253141c.src","preCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        \r\n        \r\n        assumeFalse(\"windows deletion behavior is asinine\", Constants.WINDOWS);\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"},{"authorDate":"2018-12-22 20:21:49","commitOrder":1,"curCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        \r\n        \r\n        assumeFalse(\"windows deletion behavior is asinine\", Constants.WINDOWS);\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME]\"));\n    }\n","date":"2018-12-22 20:21:49","endLine":232,"groupId":"30760","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildWithAsnDbAndCityFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/62e8793970a8a39a319688c8bf34689253141c.src","preCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        \r\n        \r\n        assumeFalse(\"windows deletion behavior is asinine\", Constants.WINDOWS);\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"}],"commitId":"e1717df0ac814caa26d3ecba54e8bc95a905628a","commitMessage":"@@@Package ingest-geoip as a module (#36898)\n\nThis commit moves ingest-geoip from being a plugin to being a module\nthat is packaged with Elasticsearch distributions.","date":"2018-12-22 20:21:49","modifiedFileCount":"4","status":"B","submitter":"Jason Tedor"},{"authorTime":"2019-08-21 20:45:51","codes":[{"authorDate":"2019-08-21 20:45:51","commitOrder":2,"curCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","date":"2019-08-21 20:45:51","endLine":179,"groupId":"30760","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildWithCountryDbAndAsnFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/a1362dd53a974bf8c322fcda2b4a05fea7dc6d.src","preCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        \r\n        \r\n        assumeFalse(\"windows deletion behavior is asinine\", Constants.WINDOWS);\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2019-08-21 20:45:51","commitOrder":2,"curCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME]\"));\n    }\n","date":"2019-08-21 20:45:51","endLine":193,"groupId":"30760","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildWithAsnDbAndCityFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/a1362dd53a974bf8c322fcda2b4a05fea7dc6d.src","preCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        \r\n        \r\n        assumeFalse(\"windows deletion behavior is asinine\", Constants.WINDOWS);\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"44133b77258d02061e121f164fe3056ff156e815","commitMessage":"@@@Fix GeoIpProcessorFactoryTests on windows (#45668)\n\nSwitches windows build to use geoip database loaded on heap instead\nof memory mapping it.\n\nCloses #44552","date":"2019-08-21 20:45:51","modifiedFileCount":"1","status":"M","submitter":"Igor Motov"},{"authorTime":"2020-06-16 05:08:29","codes":[{"authorDate":"2020-06-16 05:08:29","commitOrder":3,"curCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","date":"2020-06-16 05:08:29","endLine":179,"groupId":"30760","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildWithCountryDbAndAsnFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/86/f14c59403133c0efaeea66f3f403858fc770c9.src","preCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2020-06-16 05:08:29","commitOrder":3,"curCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME]\"));\n    }\n","date":"2020-06-16 05:08:29","endLine":193,"groupId":"30760","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildWithAsnDbAndCityFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/86/f14c59403133c0efaeea66f3f403858fc770c9.src","preCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"69a6a18d8dc3f95001cfe6f55c1451ac616f7e84","commitMessage":"@@@Add optional description parameter to ingest processors. (#57906)\n\nThis commit adds an optional field.  `description`.  to all ingest processors\nso that users can explain the purpose of the specific processor instance.\n\nCloses #56000.","date":"2020-06-16 05:08:29","modifiedFileCount":"125","status":"M","submitter":"Tal Levy"},{"authorTime":"2020-09-25 00:51:50","codes":[{"authorDate":"2020-06-16 05:08:29","commitOrder":4,"curCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","date":"2020-06-16 05:08:29","endLine":179,"groupId":"30760","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildWithCountryDbAndAsnFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/86/f14c59403133c0efaeea66f3f403858fc770c9.src","preCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"N"},{"authorDate":"2020-09-25 00:51:50","commitOrder":4,"curCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME, NETWORK]\"));\n    }\n","date":"2020-09-25 00:51:50","endLine":193,"groupId":"30760","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildWithAsnDbAndCityFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/356d512fc6743000abf028a18799b46663bb88.src","preCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"b40bdd30933518ff867e6f90ae6ee7d8c5a42e4b","commitMessage":"@@@Add network from MaxMind Geo ASN database (#61676)\n\nThis adds the network property from the MaxMind Geo ASN database. \nThis enables analysis of IP data based on the subnets that MaxMind have \npreviously identified for ASN networks.\n\ncloses #60942","date":"2020-09-25 00:51:50","modifiedFileCount":"3","status":"M","submitter":"Peter Ansell"},{"authorTime":"2021-02-11 17:15:19","codes":[{"authorDate":"2021-02-11 17:15:19","commitOrder":5,"curCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","date":"2021-02-11 17:15:19","endLine":167,"groupId":"30760","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildWithCountryDbAndAsnFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/062ba17cbd37df443a754b10827746668fd924.src","preCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2021-02-11 17:15:19","commitOrder":5,"curCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME, NETWORK]\"));\n    }\n","date":"2021-02-11 17:15:19","endLine":181,"groupId":"30760","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildWithAsnDbAndCityFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/062ba17cbd37df443a754b10827746668fd924.src","preCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders, new GeoIpCache(1000));\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME, NETWORK]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"5529b3d583773eb2725ce8253856092787af383c","commitMessage":"@@@Changed how geoip cache is integrated with geoip processor. (#68581)\n\nThis change helps facilitate allowing maxmind databases to be updated at runtime.\nThis will make is easier to purge the cache if a database changes.\n\nMade the following changes:\n* Changed how geoip processor integrates with the cache. The cache is moved from the geoip processor to DatabaseReaderLazyLoader class.\n* Changed the cache key from ip + response class to ip + database_path.\n* Moved GeoIpCache from IngestGeoIpPlugin class to be a top level class.","date":"2021-02-11 17:15:19","modifiedFileCount":"5","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2021-02-23 22:16:52","codes":[{"authorDate":"2021-02-23 22:16:52","commitOrder":6,"curCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(localDatabases);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","date":"2021-02-23 22:16:52","endLine":166,"groupId":"30760","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildWithCountryDbAndAsnFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/e0390ca545812f1fa67f12310e91ce299367be.src","preCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2021-02-23 22:16:52","commitOrder":6,"curCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(localDatabases);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME, NETWORK]\"));\n    }\n","date":"2021-02-23 22:16:52","endLine":180,"groupId":"30760","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildWithAsnDbAndCityFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/e0390ca545812f1fa67f12310e91ce299367be.src","preCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseReaders);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME, NETWORK]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"683a14c504119361f5dc0bd1c557bd81f49377a6","commitMessage":"@@@Allow custom geoip databases to be updated at runtime. (#68901)\n\nCustom geoip databases can be provided via the config/ingest-geoip directory. \nwhich are loaded at node startup time. This change adds the functionality\nthat reloads custom databases at runtime.\n\nAdded reference counting when getting a DatabaseReaderLazyLoader instance. \nthis to avoid closing a maxmind db reader while it is still being used.\nThere is a small window of time where this might happen during a database update.\n\nA DatabaseReaderLazyLoader instance (which wraps a Maxmind db reader) from config database directory:\n* Is closed immediately if there are no usages of it by any geoip processor instance as part of the database reload.\n* When there are usages.  then it is not closed immediately after a database reload. It is closed by the caller that did the last geoip lookup using this DatabaseReaderLazyLoader instance.","date":"2021-02-23 22:16:52","modifiedFileCount":"7","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2021-03-04 22:01:13","codes":[{"authorDate":"2021-03-04 22:01:13","commitOrder":7,"curCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseRegistry);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","date":"2021-03-04 22:01:13","endLine":178,"groupId":"30760","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildWithCountryDbAndAsnFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/43/96574a0a9ccfa86a7eebe14359e2b4032699b1.src","preCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(localDatabases);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2021-03-04 22:01:13","commitOrder":7,"curCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseRegistry);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME, NETWORK]\"));\n    }\n","date":"2021-03-04 22:01:13","endLine":192,"groupId":"30760","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildWithAsnDbAndCityFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/43/96574a0a9ccfa86a7eebe14359e2b4032699b1.src","preCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(localDatabases);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME, NETWORK]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"6c35c2508192366d462b8fd5d11038facafc7674","commitMessage":"@@@Add DatabaseRegistry for locally managing databases managed by GeoIpDownloader (#69540)\n\nThis component is responsible for making the databases maintained by GeoIpDownloader\navailable for ingest processors.\n\nAlso provided a lookup mechanism for geoip processors with fallback to {@link LocalDatabases}.\nAll databases are downloaded into a geoip tmp directory.  which is created at node startup.\n\nThe following high level steps are executed after each cluster state update:\n1) Check which databases are available in {@link GeoIpTaskState}. \n   which is part of the geoip downloader persistent task.\n2) For each database check whether the databases have changed\n   by comparing the local and remote md5 hash or are locally missing.\n3) For each database identified in step 2 start downloading the database\n   chunks. Each chunks is appended to a tmp file (inside geoip tmp dir) and\n   after all chunks have been downloaded.  the database is uncompressed and\n   renamed to the final filename. After this the database is loaded and\n   if there is an old instance of this database then that is closed.\n4) Cleanup locally loaded databases that are no longer mentioned in {@link GeoIpTaskState}.\n\nRelates to #68920","date":"2021-03-04 22:01:13","modifiedFileCount":"10","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2021-06-18 19:51:12","codes":[{"authorDate":"2021-06-18 19:51:12","commitOrder":8,"curCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseRegistry, clusterService);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","date":"2021-06-18 19:51:12","endLine":184,"groupId":"10121","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildWithCountryDbAndAsnFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/3e37a23e305732e833cbda0548b72ad0f86baa.src","preCode":"    public void testBuildWithCountryDbAndAsnFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseRegistry);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-Country.mmdb\");\n        EnumSet<GeoIpProcessor.Property> asnOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_ASN_PROPERTIES);\n        asnOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String asnProperty = RandomPicks.randomFrom(Randomness.get(), asnOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(asnProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + asnProperty +\n            \"]. valid values are [IP, COUNTRY_ISO_CODE, COUNTRY_NAME, CONTINENT_NAME]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2021-06-18 19:51:12","commitOrder":8,"curCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseRegistry, clusterService);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME, NETWORK]\"));\n    }\n","date":"2021-06-18 19:51:12","endLine":198,"groupId":"10121","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildWithAsnDbAndCityFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/3e37a23e305732e833cbda0548b72ad0f86baa.src","preCode":"    public void testBuildWithAsnDbAndCityFields() throws Exception {\n        GeoIpProcessor.Factory factory = new GeoIpProcessor.Factory(databaseRegistry);\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"field\", \"_field\");\n        config.put(\"database_file\", \"GeoLite2-ASN.mmdb\");\n        EnumSet<GeoIpProcessor.Property> cityOnlyProperties = EnumSet.copyOf(GeoIpProcessor.Property.ALL_CITY_PROPERTIES);\n        cityOnlyProperties.remove(GeoIpProcessor.Property.IP);\n        String cityProperty = RandomPicks.randomFrom(Randomness.get(), cityOnlyProperties).toString();\n        config.put(\"properties\", Collections.singletonList(cityProperty));\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, null, config));\n        assertThat(e.getMessage(), equalTo(\"[properties] illegal property value [\" + cityProperty +\n            \"]. valid values are [IP, ASN, ORGANIZATION_NAME, NETWORK]\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"331a44ba425d9ae937a8f49a7f94d8d0a02f3b93","commitMessage":"@@@Change GeoIP downloader policy after 30 days of no updates (#74099)\n\nThis PR changes the way GeoIpDownloader and GeoIpProcessor handle situation when we are unable to update databases for 30 days. In that case:\n\nGeoIpDownloader will delete all chunks from .geoip_databases index\nDatabaseRegistry will delete all files on ingest nodes\nGeoIpProcessor will tag document with tags: [\"_geoip_expired_database\"] field (same way as in Logstash)\nThis change also fixes bug with that breaks DatabaseRegistry and when it tires to download databases after updating timestamp only (GeoIpDownloader checks if there are new databases and updates timestamp because local databases are up to date)","date":"2021-06-18 19:51:12","modifiedFileCount":"15","status":"M","submitter":"Przemko Robakowski"}]
