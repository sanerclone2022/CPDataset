[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-09-25 00:33:51","commitOrder":2,"curCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"field_1\").fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2 = new TextFieldMapper.Builder(\"field_2\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1);\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData loadField1 = ifd1.load(leafReaderContext);\n        AtomicFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","date":"2018-09-25 00:33:51","endLine":161,"groupId":"34995","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2e/ba60a1a5f83f846f8d58f33380733f1e27cdd7.src","preCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"field_1\").fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2 = new TextFieldMapper.Builder(\"field_2\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1);\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData loadField1 = ifd1.load(leafReaderContext);\n        AtomicFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"s\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","date":"2018-04-26 03:22:53","endLine":153,"groupId":"12335","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldDataCacheListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/30558a216e44cdaa7641fc5117a5a05f9328d4.src","preCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"s\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"NB"}],"commitId":"243e863f6e862074b564f909e90a8fd83ae8ad01","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-25 00:33:51","modifiedFileCount":"253","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-02-25 23:39:28","codes":[{"authorDate":"2020-02-25 23:39:28","commitOrder":3,"curCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"field_1\").fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2 = new TextFieldMapper.Builder(\"field_2\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1);\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData loadField1 = ifd1.load(leafReaderContext);\n        AtomicFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","date":"2020-02-25 23:39:28","endLine":161,"groupId":"34995","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/ece535a6841d6e34682d64cfc5d2e96db0f5b7.src","preCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"field_1\").fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2 = new TextFieldMapper.Builder(\"field_2\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1);\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData loadField1 = ifd1.load(leafReaderContext);\n        AtomicFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2020-02-25 23:39:28","commitOrder":3,"curCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"s\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","date":"2020-02-25 23:39:28","endLine":213,"groupId":"12335","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldDataCacheListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/ece535a6841d6e34682d64cfc5d2e96db0f5b7.src","preCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"s\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"e67beed573547ac3757f6cc4c81b0c7feb440219","commitMessage":"@@@Use ByteBuffersDirectory rather than RAMDirectory (#52768)\n\nLucene's RAMDirectory has been deprecated. This commit replaces all uses of\nRAMDirectory in elasticsearch with the newer ByteBuffersDirectory. Most uses\nare in tests.  but the percolator and painless executor may get some small speedups.","date":"2020-02-25 23:39:28","modifiedFileCount":"21","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-03-17 20:25:51","codes":[{"authorDate":"2020-03-17 20:25:51","commitOrder":4,"curCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"field_1\").fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2 = new TextFieldMapper.Builder(\"field_2\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1);\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","date":"2020-03-17 20:25:51","endLine":161,"groupId":"34995","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/0158714e61431005eec753faca9cf48ae63812.src","preCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"field_1\").fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2 = new TextFieldMapper.Builder(\"field_2\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1);\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData loadField1 = ifd1.load(leafReaderContext);\n        AtomicFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2020-03-17 20:25:51","commitOrder":4,"curCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"s\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","date":"2020-03-17 20:25:51","endLine":213,"groupId":"12335","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldDataCacheListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/0158714e61431005eec753faca9cf48ae63812.src","preCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"s\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        AtomicFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"3e607d9e93c6319fcd606714aabca4af91f133d3","commitMessage":"@@@Rename AtomicFieldData to LeafFieldData (#53554)\n\nThis conforms with lucene's LeafReader naming convention.  and\nmatches other per-segment structures in elasticsearch.","date":"2020-03-17 20:25:51","modifiedFileCount":"59","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-08-27 20:29:24","commitOrder":5,"curCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"field_1\").fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2 = new TextFieldMapper.Builder(\"field_2\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","date":"2020-08-27 20:29:24","endLine":198,"groupId":"34995","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/57/9c6e4ad6394024e921d44990bbc7d6e6703520.src","preCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"field_1\").fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2 = new TextFieldMapper.Builder(\"field_2\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1);\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2020-08-27 20:29:24","commitOrder":5,"curCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"s\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","date":"2020-08-27 20:29:24","endLine":252,"groupId":"12335","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldDataCacheListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/57/9c6e4ad6394024e921d44990bbc7d6e6703520.src","preCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"s\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1);\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-10-07 17:29:29","codes":[{"authorDate":"2020-10-07 17:29:29","commitOrder":6,"curCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"field_1\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2\n            = new TextFieldMapper.Builder(\"field_2\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","date":"2020-10-07 17:29:29","endLine":201,"groupId":"34995","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/cca182ed33979892ca3edb8fbbadea6f111b93.src","preCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"field_1\").fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2 = new TextFieldMapper.Builder(\"field_2\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-10-07 17:29:29","commitOrder":6,"curCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"s\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","date":"2020-10-07 17:29:29","endLine":256,"groupId":"12335","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldDataCacheListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/cca182ed33979892ca3edb8fbbadea6f111b93.src","preCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1 = new TextFieldMapper.Builder(\"s\").fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"f4c85e4562c79e6411801904f2d80e3310c6dbe7","commitMessage":"@@@Convert TextFieldMapper to parametrized form (#63269)\n\nAs a result of this.  we can remove a chunk of code from TypeParsers as well. Tests\nfor search/index mode analyzers have moved into their own file. This commit also\nrationalises the serialization checks for parameters into a single SerializerCheck\ninterface that takes the values includeDefaults.  isConfigured and the value\nitself.\n\nRelates to #62988","date":"2020-10-07 17:29:29","modifiedFileCount":"42","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-11-05 18:48:39","codes":[{"authorDate":"2020-11-05 18:48:39","commitOrder":7,"curCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"field_1\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(contentPath).fieldType();\n        final MappedFieldType mapper2\n            = new TextFieldMapper.Builder(\"field_2\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","date":"2020-11-05 18:48:39","endLine":200,"groupId":"34995","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/1d961d8da4c31bb8933192aa6e3831a0d4f86c.src","preCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"field_1\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(ctx).fieldType();\n        final MappedFieldType mapper2\n            = new TextFieldMapper.Builder(\"field_2\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2020-11-05 18:48:39","commitOrder":7,"curCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"s\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","date":"2020-11-05 18:48:39","endLine":255,"groupId":"12335","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldDataCacheListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/1d961d8da4c31bb8933192aa6e3831a0d4f86c.src","preCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final BuilderContext ctx = new BuilderContext(indexService.getIndexSettings().getSettings(), new ContentPath(1));\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"s\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(ctx).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"0fd70ae383620d587a36ea71baca9295da93a76a","commitMessage":"@@@Remove Mapper.BuilderContext (#64625)\n\nMapper.BuilderContext is a simple wrapper around two objects.  some\nIndexSettings and a ContentPath. The IndexSettings are the same as\nthose provided in the ParserContext.  so we can simplify things here\nby removing them and just passing ContentPath directly to\nMapper.Builder#build()","date":"2020-11-05 18:48:39","modifiedFileCount":"103","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-11-27 00:57:45","codes":[{"authorDate":"2020-11-27 00:57:45","commitOrder":8,"curCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"field_1\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final MappedFieldType mapper2\n            = new TextFieldMapper.Builder(\"field_2\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","date":"2020-11-27 00:57:45","endLine":199,"groupId":"34995","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/34939c7a6f0cf408fafbda33393a1ca5f4515c.src","preCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"field_1\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(contentPath).fieldType();\n        final MappedFieldType mapper2\n            = new TextFieldMapper.Builder(\"field_2\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-11-27 00:57:45","commitOrder":8,"curCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"s\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","date":"2020-11-27 00:57:45","endLine":254,"groupId":"12335","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldDataCacheListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/34939c7a6f0cf408fafbda33393a1ca5f4515c.src","preCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"s\", () -> Lucene.STANDARD_ANALYZER).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"1a8ce8716d2bbca49c123eceb122898502b8a843","commitMessage":"@@@Restore use of default search and search_quote analyzers (#65491)\n\nIn the refactoring of TextFieldMapper.  we lost the ability to define\na default search or search_quote analyzer in index settings. This\ncommit restores that ability.  and adds some more comprehensive\ntesting.\n\nFixes #65434","date":"2020-11-27 00:57:45","modifiedFileCount":"18","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-09-06 20:26:46","codes":[{"authorDate":"2021-09-06 20:26:46","commitOrder":9,"curCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"field_1\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final MappedFieldType mapper2\n            = new TextFieldMapper.Builder(\"field_2\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","date":"2021-09-06 20:26:46","endLine":196,"groupId":"34995","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testClearField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/f8eb13fd5963c4b58e080a7414f3be4313e741.src","preCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"field_1\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final MappedFieldType mapper2\n            = new TextFieldMapper.Builder(\"field_2\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-09-06 20:26:46","commitOrder":9,"curCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"s\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","date":"2021-09-06 20:26:46","endLine":251,"groupId":"12335","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldDataCacheListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/f8eb13fd5963c4b58e080a7414f3be4313e741.src","preCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService(), indexService.mapperService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"s\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"9519e1885e44eef4f777c60ca9a86d84b6ee034d","commitMessage":"@@@Cleanup Deadcode in o.e.index and o.e.indices (#77302)\n\nJust some obvious dead code removal found while researching things.","date":"2021-09-06 20:26:46","modifiedFileCount":"16","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-09-08 23:34:14","codes":[{"authorDate":"2021-09-08 23:34:14","commitOrder":10,"curCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService());\n\n        final MapperBuilderContext context = MapperBuilderContext.ROOT;\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"field_1\", createDefaultIndexAnalyzers()).fielddata(true).build(context).fieldType();\n        final MappedFieldType mapper2\n            = new TextFieldMapper.Builder(\"field_2\", createDefaultIndexAnalyzers()).fielddata(true).build(context).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","date":"2021-09-08 23:34:14","endLine":196,"groupId":"103584","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"testClearField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/42/8f707ed7df46aa585a07a6aa5dfd94b7ecfae9.src","preCode":"    public void testClearField() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n            indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"field_1\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final MappedFieldType mapper2\n            = new TextFieldMapper.Builder(\"field_2\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"field_1\", \"thisisastring\", Store.NO));\n        doc.add(new StringField(\"field_2\", \"thisisanotherstring\", Store.NO));\n        writer.addDocument(doc);\n        final IndexReader reader = DirectoryReader.open(writer);\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd1 = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        IndexFieldData<?> ifd2 = ifdService.getForField(mapper2, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData loadField1 = ifd1.load(leafReaderContext);\n        LeafFieldData loadField2 = ifd2.load(leafReaderContext);\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_1\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n\n        ifdService.clearField(\"field_2\");\n\n        assertEquals(2, onCacheCalled.get());\n        assertEquals(2, onRemovalCalled.get());\n\n        reader.close();\n        loadField1.close();\n        loadField2.close();\n        writer.close();\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-09-08 23:34:14","commitOrder":10,"curCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService());\n\n        final MapperBuilderContext context = MapperBuilderContext.ROOT;\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"s\", createDefaultIndexAnalyzers()).fielddata(true).build(context).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","date":"2021-09-08 23:34:14","endLine":251,"groupId":"103584","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"testFieldDataCacheListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/42/8f707ed7df46aa585a07a6aa5dfd94b7ecfae9.src","preCode":"    public void testFieldDataCacheListener() throws Exception {\n        final IndexService indexService = createIndex(\"test\");\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        \r\n        final IndexFieldDataService ifdService = new IndexFieldDataService(indexService.getIndexSettings(),\n                indicesService.getIndicesFieldDataCache(), indicesService.getCircuitBreakerService());\n\n        final ContentPath contentPath = new ContentPath(1);\n        final MappedFieldType mapper1\n            = new TextFieldMapper.Builder(\"s\", createDefaultIndexAnalyzers()).fielddata(true).build(contentPath).fieldType();\n        final IndexWriter writer = new IndexWriter(new ByteBuffersDirectory(), new IndexWriterConfig(new KeywordAnalyzer()));\n        Document doc = new Document();\n        doc.add(new StringField(\"s\", \"thisisastring\", Store.NO));\n        writer.addDocument(doc);\n        DirectoryReader open = DirectoryReader.open(writer);\n        final boolean wrap = randomBoolean();\n        final IndexReader reader = wrap ? ElasticsearchDirectoryReader.wrap(open, new ShardId(\"test\", \"_na_\", 1)) : open;\n        final AtomicInteger onCacheCalled = new AtomicInteger();\n        final AtomicInteger onRemovalCalled = new AtomicInteger();\n        ifdService.setListener(new IndexFieldDataCache.Listener() {\n            @Override\n            public void onCache(ShardId shardId, String fieldName, Accountable ramUsage) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onCacheCalled.incrementAndGet();\n            }\n\n            @Override\n            public void onRemoval(ShardId shardId, String fieldName, boolean wasEvicted, long sizeInBytes) {\n                if (wrap) {\n                    assertEquals(new ShardId(\"test\", \"_na_\", 1), shardId);\n                } else {\n                    assertNull(shardId);\n                }\n                onRemovalCalled.incrementAndGet();\n            }\n        });\n        IndexFieldData<?> ifd = ifdService.getForField(mapper1, \"test\", () -> {\n            throw new UnsupportedOperationException();\n        });\n        LeafReaderContext leafReaderContext = reader.getContext().leaves().get(0);\n        LeafFieldData load = ifd.load(leafReaderContext);\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(0, onRemovalCalled.get());\n        reader.close();\n        load.close();\n        writer.close();\n        assertEquals(1, onCacheCalled.get());\n        assertEquals(1, onRemovalCalled.get());\n        ifdService.clear();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/fielddata/IndexFieldDataServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"9312eba5ed2a4174e0ac1ce823e98f47a19b4fc1","commitMessage":"@@@Change Mapper.build() to take a context object (#77108)\n\nMapper.build() currently takes a ContentPath object that it can use to generate\nfield type names that will include its parent names. We would like to expand field types\nto include more information about their parents.  and ContentPath does not hold this\ninformation. This commit replaces the ContentPath parameter with a new\nMapperBuilderContext.  which currently holds only the content path information but\ncan be expanded in future to hold parent relationship information.\n\nRelates to #75474","date":"2021-09-08 23:34:14","modifiedFileCount":"97","status":"M","submitter":"Alan Woodward"}]
