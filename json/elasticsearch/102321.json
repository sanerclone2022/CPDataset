[{"authorTime":"2018-12-06 15:31:46","codes":[{"authorDate":"2018-12-06 15:31:46","commitOrder":1,"curCode":"    public void testJoinWithLowerLastAcceptedTermWinsElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 1L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node1, node1, v1.getTerm(), randomLongBetween(0, state2.term() - 1), randomLongBetween(0, 20));\n        assertTrue(cs1.handleJoin(join));\n        assertTrue(cs1.electionWon());\n        assertTrue(cs1.containsJoinVoteFor(node1));\n        assertFalse(cs1.containsJoinVoteFor(node2));\n        assertEquals(cs1.getLastPublishedVersion(), cs1.getLastAcceptedVersion());\n        assertFalse(cs1.handleJoin(join));\n    }\n","date":"2018-12-06 15:31:46","endLine":247,"groupId":"67147","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinWithLowerLastAcceptedTermWinsElection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ab/2ad25e72152f573bcb0c1195cdb330c154ff7b.src","preCode":"    public void testJoinWithLowerLastAcceptedTermWinsElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 1L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node1, node1, v1.getTerm(), randomLongBetween(0, state2.term() - 1), randomLongBetween(0, 20));\n        assertTrue(cs1.handleJoin(join));\n        assertTrue(cs1.electionWon());\n        assertTrue(cs1.containsJoinVoteFor(node1));\n        assertFalse(cs1.containsJoinVoteFor(node2));\n        assertEquals(cs1.getLastPublishedVersion(), cs1.getLastAcceptedVersion());\n        assertFalse(cs1.handleJoin(join));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/CoordinationStateTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"B"},{"authorDate":"2018-12-06 15:31:46","commitOrder":1,"curCode":"    public void testJoinDoesNotWinElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 1L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node2, node1, v1.getTerm(), randomLongBetween(0, state2.term()), randomLongBetween(0, state2.version()));\n        assertTrue(cs1.handleJoin(join));\n        assertFalse(cs1.electionWon());\n        assertEquals(cs1.getLastPublishedVersion(), 0L);\n        assertFalse(cs1.handleJoin(join));\n    }\n","date":"2018-12-06 15:31:46","endLine":287,"groupId":"67147","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinDoesNotWinElection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ab/2ad25e72152f573bcb0c1195cdb330c154ff7b.src","preCode":"    public void testJoinDoesNotWinElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 1L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node2, node1, v1.getTerm(), randomLongBetween(0, state2.term()), randomLongBetween(0, state2.version()));\n        assertTrue(cs1.handleJoin(join));\n        assertFalse(cs1.electionWon());\n        assertEquals(cs1.getLastPublishedVersion(), 0L);\n        assertFalse(cs1.handleJoin(join));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/CoordinationStateTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"B"}],"commitId":"ee05ef131286eead295cf58ed4393af56f0d7ade","commitMessage":"@@@Merge branch 'zen2'\n","date":"2018-12-06 15:31:46","modifiedFileCount":"122","status":"B","submitter":"Yannick Welsch"},{"authorTime":"2019-01-04 17:09:16","codes":[{"authorDate":"2019-01-04 17:09:16","commitOrder":2,"curCode":"    public void testJoinWithLowerLastAcceptedTermWinsElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node1, node1, v1.getTerm(), randomLongBetween(0, state2.term() - 1), randomLongBetween(0, 20));\n        assertTrue(cs1.handleJoin(join));\n        assertTrue(cs1.electionWon());\n        assertTrue(cs1.containsJoinVoteFor(node1));\n        assertFalse(cs1.containsJoinVoteFor(node2));\n        assertEquals(cs1.getLastPublishedVersion(), cs1.getLastAcceptedVersion());\n        assertFalse(cs1.handleJoin(join));\n    }\n","date":"2019-01-04 17:09:16","endLine":247,"groupId":"67147","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinWithLowerLastAcceptedTermWinsElection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/e2e065a875e41c3f8fe139738ea5cb889fbbe6.src","preCode":"    public void testJoinWithLowerLastAcceptedTermWinsElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 1L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node1, node1, v1.getTerm(), randomLongBetween(0, state2.term() - 1), randomLongBetween(0, 20));\n        assertTrue(cs1.handleJoin(join));\n        assertTrue(cs1.electionWon());\n        assertTrue(cs1.containsJoinVoteFor(node1));\n        assertFalse(cs1.containsJoinVoteFor(node2));\n        assertEquals(cs1.getLastPublishedVersion(), cs1.getLastAcceptedVersion());\n        assertFalse(cs1.handleJoin(join));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/CoordinationStateTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2019-01-04 17:09:16","commitOrder":2,"curCode":"    public void testJoinDoesNotWinElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node2, node1, v1.getTerm(), randomLongBetween(0, state2.term()), randomLongBetween(0, state2.version()));\n        assertTrue(cs1.handleJoin(join));\n        assertFalse(cs1.electionWon());\n        assertEquals(cs1.getLastPublishedVersion(), 0L);\n        assertFalse(cs1.handleJoin(join));\n    }\n","date":"2019-01-04 17:09:16","endLine":287,"groupId":"67147","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinDoesNotWinElection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/e2e065a875e41c3f8fe139738ea5cb889fbbe6.src","preCode":"    public void testJoinDoesNotWinElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 1L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node2, node1, v1.getTerm(), randomLongBetween(0, state2.term()), randomLongBetween(0, state2.version()));\n        assertTrue(cs1.handleJoin(join));\n        assertFalse(cs1.electionWon());\n        assertEquals(cs1.getLastPublishedVersion(), 0L);\n        assertFalse(cs1.handleJoin(join));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/CoordinationStateTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"}],"commitId":"3f7d6a989af09fb61a8904816ac644ddae1cdd46","commitMessage":"@@@[Zen2] Elect freshest master in upgrade (#37122)\n\nToday when electing a master in Zen2 we use the cluster state version to\ndetermine whether a node has a fresh-enough cluster state to become master.\nHowever the cluster state version is not a reliable measure of freshness in the\nZen1 world; furthermore in 6.x the cluster state version is not persisted. This\nmeans that when upgrading from 6.x via a full cluster restart a cluster state\nupdate may be lost if a stale master wins the initial election.\n\nThis change fixes this by using the metadata version as a measure of freshness\nwhen in term 0.  since this is persisted in 6.x and does more reliably indicate\nthe freshness of nodes.\n\nIt also makes changes parallel to elastic/elasticsearch-formal-models#40 to\nsupport situations in which nodes accept cluster state versions in term 0: this\ndoes not happen in a pure Zen2 cluster.  but can happen in mixed clusters and\nduring upgrades.","date":"2019-01-04 17:09:16","modifiedFileCount":"7","status":"M","submitter":"David Turner"},{"authorTime":"2019-01-04 17:09:16","codes":[{"authorDate":"2019-06-25 23:29:30","commitOrder":3,"curCode":"    public void testJoinWithLowerLastAcceptedTermWinsElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node1, node1, v1.getTerm(), randomLongBetween(0, state2.term() - 1), randomLongBetween(0, 20));\n        assertTrue(cs1.handleJoin(join));\n        assertTrue(cs1.electionWon());\n        assertTrue(cs1.containsJoinVoteFor(node1));\n        assertTrue(cs1.containsJoin(join));\n        assertFalse(cs1.containsJoinVoteFor(node2));\n        assertEquals(cs1.getLastPublishedVersion(), cs1.getLastAcceptedVersion());\n        assertFalse(cs1.handleJoin(join));\n    }\n","date":"2019-06-25 23:29:30","endLine":241,"groupId":"67147","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinWithLowerLastAcceptedTermWinsElection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/99/f04015867f582073017846d74f7d7a249186fb.src","preCode":"    public void testJoinWithLowerLastAcceptedTermWinsElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node1, node1, v1.getTerm(), randomLongBetween(0, state2.term() - 1), randomLongBetween(0, 20));\n        assertTrue(cs1.handleJoin(join));\n        assertTrue(cs1.electionWon());\n        assertTrue(cs1.containsJoinVoteFor(node1));\n        assertFalse(cs1.containsJoinVoteFor(node2));\n        assertEquals(cs1.getLastPublishedVersion(), cs1.getLastAcceptedVersion());\n        assertFalse(cs1.handleJoin(join));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/CoordinationStateTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2019-01-04 17:09:16","commitOrder":3,"curCode":"    public void testJoinDoesNotWinElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node2, node1, v1.getTerm(), randomLongBetween(0, state2.term()), randomLongBetween(0, state2.version()));\n        assertTrue(cs1.handleJoin(join));\n        assertFalse(cs1.electionWon());\n        assertEquals(cs1.getLastPublishedVersion(), 0L);\n        assertFalse(cs1.handleJoin(join));\n    }\n","date":"2019-01-04 17:09:16","endLine":287,"groupId":"67147","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinDoesNotWinElection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/e2e065a875e41c3f8fe139738ea5cb889fbbe6.src","preCode":"    public void testJoinDoesNotWinElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node2, node1, v1.getTerm(), randomLongBetween(0, state2.term()), randomLongBetween(0, state2.version()));\n        assertTrue(cs1.handleJoin(join));\n        assertFalse(cs1.electionWon());\n        assertEquals(cs1.getLastPublishedVersion(), 0L);\n        assertFalse(cs1.handleJoin(join));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/CoordinationStateTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"N"}],"commitId":"e689b20eba8a583c0a3a7783e06b00a97cbdee63","commitMessage":"@@@Add voting-only master node (#43410)\n\nA voting-only master-eligible node is a node that can participate in master elections but will not act\nas a master in the cluster. In particular.  a voting-only node can help elect another master-eligible\nnode as master.  and can serve as a tiebreaker in elections. High availability (HA) clusters require at\nleast three master-eligible nodes.  so that if one of the three nodes is down.  then the remaining two\ncan still elect a master amongst them-selves. This only requires one of the two remaining nodes to\nhave the capability to act as master.  but both need to have voting powers. This means that one of\nthe three master-eligible nodes can be made as voting-only. If this voting-only node is a dedicated\nmaster.  a less powerful machine or a smaller heap-size can be chosen for this node. Alternatively.  a\nvoting-only non-dedicated master node can play the role of the third master-eligible node.  which\nallows running an HA cluster with only two dedicated master nodes.\n\nCloses #14340\n\nCo-authored-by: David Turner <david.turner@elastic.co>","date":"2019-06-25 23:29:30","modifiedFileCount":"22","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2020-04-01 02:05:47","codes":[{"authorDate":"2020-04-01 02:05:47","commitOrder":4,"curCode":"    public void testJoinWithLowerLastAcceptedTermWinsElection() {\n        VotingConfiguration initialConfig = VotingConfiguration.of(node1);\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node1, node1, v1.getTerm(), randomLongBetween(0, state2.term() - 1), randomLongBetween(0, 20));\n        assertTrue(cs1.handleJoin(join));\n        assertTrue(cs1.electionWon());\n        assertTrue(cs1.containsJoinVoteFor(node1));\n        assertTrue(cs1.containsJoin(join));\n        assertFalse(cs1.containsJoinVoteFor(node2));\n        assertEquals(cs1.getLastPublishedVersion(), cs1.getLastAcceptedVersion());\n        assertFalse(cs1.handleJoin(join));\n    }\n","date":"2020-04-01 02:05:47","endLine":242,"groupId":"102321","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinWithLowerLastAcceptedTermWinsElection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/e23d9d50992daf5da69205938c81d4f3fbabc7.src","preCode":"    public void testJoinWithLowerLastAcceptedTermWinsElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node1, node1, v1.getTerm(), randomLongBetween(0, state2.term() - 1), randomLongBetween(0, 20));\n        assertTrue(cs1.handleJoin(join));\n        assertTrue(cs1.electionWon());\n        assertTrue(cs1.containsJoinVoteFor(node1));\n        assertTrue(cs1.containsJoin(join));\n        assertFalse(cs1.containsJoinVoteFor(node2));\n        assertEquals(cs1.getLastPublishedVersion(), cs1.getLastAcceptedVersion());\n        assertFalse(cs1.handleJoin(join));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/CoordinationStateTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2020-04-01 02:05:47","commitOrder":4,"curCode":"    public void testJoinDoesNotWinElection() {\n        VotingConfiguration initialConfig = VotingConfiguration.of(node1);\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node2, node1, v1.getTerm(), randomLongBetween(0, state2.term()), randomLongBetween(0, state2.version()));\n        assertTrue(cs1.handleJoin(join));\n        assertFalse(cs1.electionWon());\n        assertEquals(cs1.getLastPublishedVersion(), 0L);\n        assertFalse(cs1.handleJoin(join));\n    }\n","date":"2020-04-01 02:05:47","endLine":282,"groupId":"102321","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinDoesNotWinElection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/e23d9d50992daf5da69205938c81d4f3fbabc7.src","preCode":"    public void testJoinDoesNotWinElection() {\n        VotingConfiguration initialConfig = new VotingConfiguration(Collections.singleton(node1.getId()));\n        ClusterState state1 = clusterState(0L, 0L, node1, initialConfig, initialConfig, 42L);\n        cs1.setInitialState(state1);\n\n        StartJoinRequest startJoinRequest1 = new StartJoinRequest(node2, randomLongBetween(1, 5));\n        cs1.handleStartJoin(startJoinRequest1);\n        ClusterState state2 = clusterState(startJoinRequest1.getTerm(), randomLongBetween(2, 20), node1, initialConfig, initialConfig, 42L);\n        cs1.handlePublishRequest(new PublishRequest(state2));\n        StartJoinRequest startJoinRequest2 = new StartJoinRequest(node2, randomLongBetween(startJoinRequest1.getTerm() + 1, 10));\n        Join v1 = cs1.handleStartJoin(startJoinRequest2);\n\n        Join join = new Join(node2, node1, v1.getTerm(), randomLongBetween(0, state2.term()), randomLongBetween(0, state2.version()));\n        assertTrue(cs1.handleJoin(join));\n        assertFalse(cs1.electionWon());\n        assertEquals(cs1.getLastPublishedVersion(), 0L);\n        assertFalse(cs1.handleJoin(join));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/CoordinationStateTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"2073d8c4b9003a6d8f3d7fac7cec22d0e5d47aa2","commitMessage":"@@@Use VotingConfiguration#of where possible (#54507)\n\nThis resolves a longstanding TODO in the cluster coordination subsystem.\n\nRelates #32006","date":"2020-04-01 02:05:47","modifiedFileCount":"6","status":"M","submitter":"David Turner"}]
