[{"authorTime":"2020-01-06 19:46:08","codes":[{"authorDate":"2020-01-06 19:46:08","commitOrder":1,"curCode":"    protected Combine mutateInstance(Combine instance) throws IOException {\n        List<IntervalsSourceProvider> subSources = instance.getSubSources();\n        boolean ordered = instance.isOrdered();\n        int maxGaps = instance.getMaxGaps();\n        IntervalsSourceProvider.IntervalFilter filter = instance.getFilter();\n        switch (between(0, 3)) {\n            case 0:\n                subSources = subSources == null ?\n                    IntervalQueryBuilderTests.createRandomSourceList(0, randomBoolean(), randomInt(5) + 1) :\n                    null;\n                break;\n            case 1:\n                ordered = !ordered;\n                break;\n            case 2:\n                maxGaps++;\n                break;\n            case 3:\n                filter = filter == null ?\n                    IntervalQueryBuilderTests.createRandomNonNullFilter(0, randomBoolean()) :\n                    FilterIntervalsSourceProviderTests.mutateFilter(filter);\n                break;\n            default:\n                throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new Combine(subSources, ordered, maxGaps, filter);\n    }\n","date":"2020-01-06 19:46:08","endLine":67,"groupId":"46338","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mutateInstance","params":"(Combineinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/5a08d2b2b12dfb906f80d13745e9b708cbe674.src","preCode":"    protected Combine mutateInstance(Combine instance) throws IOException {\n        List<IntervalsSourceProvider> subSources = instance.getSubSources();\n        boolean ordered = instance.isOrdered();\n        int maxGaps = instance.getMaxGaps();\n        IntervalsSourceProvider.IntervalFilter filter = instance.getFilter();\n        switch (between(0, 3)) {\n            case 0:\n                subSources = subSources == null ?\n                    IntervalQueryBuilderTests.createRandomSourceList(0, randomBoolean(), randomInt(5) + 1) :\n                    null;\n                break;\n            case 1:\n                ordered = !ordered;\n                break;\n            case 2:\n                maxGaps++;\n                break;\n            case 3:\n                filter = filter == null ?\n                    IntervalQueryBuilderTests.createRandomNonNullFilter(0, randomBoolean()) :\n                    FilterIntervalsSourceProviderTests.mutateFilter(filter);\n                break;\n            default:\n                throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new Combine(subSources, ordered, maxGaps, filter);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/CombineIntervalsSourceProviderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"},{"authorDate":"2020-01-06 19:46:08","commitOrder":1,"curCode":"    protected Disjunction mutateInstance(Disjunction instance) throws IOException {\n        List<IntervalsSourceProvider> subSources = instance.getSubSources();\n        IntervalsSourceProvider.IntervalFilter filter = instance.getFilter();\n        if (randomBoolean()) {\n            subSources = subSources == null ?\n                IntervalQueryBuilderTests.createRandomSourceList(0, randomBoolean(), randomInt(5) + 1) :\n                null;\n        } else {\n            filter = filter == null ?\n                IntervalQueryBuilderTests.createRandomNonNullFilter(0, randomBoolean()) :\n                FilterIntervalsSourceProviderTests.mutateFilter(filter);\n        }\n        return new Disjunction(subSources, filter);\n    }\n","date":"2020-01-06 19:46:08","endLine":54,"groupId":"32058","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mutateInstance","params":"(Disjunctioninstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/af48df07ba60db53feef480e9c7280b807d372.src","preCode":"    protected Disjunction mutateInstance(Disjunction instance) throws IOException {\n        List<IntervalsSourceProvider> subSources = instance.getSubSources();\n        IntervalsSourceProvider.IntervalFilter filter = instance.getFilter();\n        if (randomBoolean()) {\n            subSources = subSources == null ?\n                IntervalQueryBuilderTests.createRandomSourceList(0, randomBoolean(), randomInt(5) + 1) :\n                null;\n        } else {\n            filter = filter == null ?\n                IntervalQueryBuilderTests.createRandomNonNullFilter(0, randomBoolean()) :\n                FilterIntervalsSourceProviderTests.mutateFilter(filter);\n        }\n        return new Disjunction(subSources, filter);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/DisjunctionIntervalsSourceProviderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"}],"commitId":"dfc308a4b488ffaa1b657cb40e6b9a80bfb7c67f","commitMessage":"@@@Add tests for remaining IntervalsSourceProvider implementations (#50326)\n\nThis PR adds unit tests for wire and xContent serialization of remaining IntervalsSourceProvider\nimplementations.\n\nCloses #50150\n","date":"2020-01-06 19:46:08","modifiedFileCount":"4","status":"B","submitter":"Nikita Glashenko"},{"authorTime":"2020-01-06 19:46:08","codes":[{"authorDate":"2021-02-08 23:28:57","commitOrder":2,"curCode":"    protected Combine mutateInstance(Combine instance) throws IOException {\n        List<IntervalsSourceProvider> subSources = instance.getSubSources();\n        boolean ordered = instance.isOrdered();\n        int maxGaps = instance.getMaxGaps();\n        IntervalsSourceProvider.IntervalFilter filter = instance.getFilter();\n        switch (between(0, 3)) {\n            case 0:\n                subSources = subSources == null ?\n                    IntervalQueryBuilderTests.createRandomSourceList(0, randomBoolean(), randomInt(5) + 1) :\n                    null;\n                break;\n            case 1:\n                ordered = ordered == false;\n                break;\n            case 2:\n                maxGaps++;\n                break;\n            case 3:\n                filter = filter == null ?\n                    IntervalQueryBuilderTests.createRandomNonNullFilter(0, randomBoolean()) :\n                    FilterIntervalsSourceProviderTests.mutateFilter(filter);\n                break;\n            default:\n                throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new Combine(subSources, ordered, maxGaps, filter);\n    }\n","date":"2021-02-08 23:28:57","endLine":56,"groupId":"103344","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"mutateInstance","params":"(Combineinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/b6b27f8b5f0aacc94a2c4e6d730e81eb16a719.src","preCode":"    protected Combine mutateInstance(Combine instance) throws IOException {\n        List<IntervalsSourceProvider> subSources = instance.getSubSources();\n        boolean ordered = instance.isOrdered();\n        int maxGaps = instance.getMaxGaps();\n        IntervalsSourceProvider.IntervalFilter filter = instance.getFilter();\n        switch (between(0, 3)) {\n            case 0:\n                subSources = subSources == null ?\n                    IntervalQueryBuilderTests.createRandomSourceList(0, randomBoolean(), randomInt(5) + 1) :\n                    null;\n                break;\n            case 1:\n                ordered = !ordered;\n                break;\n            case 2:\n                maxGaps++;\n                break;\n            case 3:\n                filter = filter == null ?\n                    IntervalQueryBuilderTests.createRandomNonNullFilter(0, randomBoolean()) :\n                    FilterIntervalsSourceProviderTests.mutateFilter(filter);\n                break;\n            default:\n                throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new Combine(subSources, ordered, maxGaps, filter);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/CombineIntervalsSourceProviderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"M"},{"authorDate":"2020-01-06 19:46:08","commitOrder":2,"curCode":"    protected Disjunction mutateInstance(Disjunction instance) throws IOException {\n        List<IntervalsSourceProvider> subSources = instance.getSubSources();\n        IntervalsSourceProvider.IntervalFilter filter = instance.getFilter();\n        if (randomBoolean()) {\n            subSources = subSources == null ?\n                IntervalQueryBuilderTests.createRandomSourceList(0, randomBoolean(), randomInt(5) + 1) :\n                null;\n        } else {\n            filter = filter == null ?\n                IntervalQueryBuilderTests.createRandomNonNullFilter(0, randomBoolean()) :\n                FilterIntervalsSourceProviderTests.mutateFilter(filter);\n        }\n        return new Disjunction(subSources, filter);\n    }\n","date":"2020-01-06 19:46:08","endLine":54,"groupId":"103344","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mutateInstance","params":"(Disjunctioninstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/af48df07ba60db53feef480e9c7280b807d372.src","preCode":"    protected Disjunction mutateInstance(Disjunction instance) throws IOException {\n        List<IntervalsSourceProvider> subSources = instance.getSubSources();\n        IntervalsSourceProvider.IntervalFilter filter = instance.getFilter();\n        if (randomBoolean()) {\n            subSources = subSources == null ?\n                IntervalQueryBuilderTests.createRandomSourceList(0, randomBoolean(), randomInt(5) + 1) :\n                null;\n        } else {\n            filter = filter == null ?\n                IntervalQueryBuilderTests.createRandomNonNullFilter(0, randomBoolean()) :\n                FilterIntervalsSourceProviderTests.mutateFilter(filter);\n        }\n        return new Disjunction(subSources, filter);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/DisjunctionIntervalsSourceProviderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"2d44cce31e2e28d98f6c60e839a4842194e2d4a9","commitMessage":"@@@Replace NOT operator with explicit `false` check - part 9 (#68645)\n\nPart 9.\n\nWe have an in-house rule to compare explicitly against `false` instead\nof using the logical not operator (`!`). However.  this hasn't\nhistorically been enforced.  meaning that there are many violations in\nthe source at present.\n\nWe now have a Checkstyle rule that can detect these cases.  but before we\ncan turn it on.  we need to fix the existing violations. This is being\ndone over a series of PRs.  since there are a lot to fix.","date":"2021-02-08 23:28:57","modifiedFileCount":"127","status":"M","submitter":"Rory Hunter"}]
