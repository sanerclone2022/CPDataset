[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":130,"groupId":"67714","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotIndexed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5c9899c89ad33549f9d3e60640be8b809a52e1.src","preCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":183,"groupId":"67714","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5c9899c89ad33549f9d3e60640be8b809a52e1.src","preCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-06 18:55:23","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":130,"groupId":"67714","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotIndexed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5c9899c89ad33549f9d3e60640be8b809a52e1.src","preCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"},{"authorDate":"2018-11-06 18:55:23","commitOrder":2,"curCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","date":"2018-11-06 18:55:23","endLine":183,"groupId":"67714","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/e0fad53ec49676ce326d32aa500d28376b18bb.src","preCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"a5e1f4d3a2b6f03f5b6268555ebb4271ea3c153b","commitMessage":"@@@Upgrade to lucene-8.0.0-snapshot-31d7dfe6b1 (#35224)\n\n\n","date":"2018-11-06 18:55:23","modifiedFileCount":"30","status":"M","submitter":"Nick Knize"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","date":"2018-12-25 03:06:50","endLine":130,"groupId":"67714","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotIndexed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/6f9a2e5745b4c5599975ae0fba97be4d976b16.src","preCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","date":"2018-12-25 03:06:50","endLine":183,"groupId":"67714","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/6f9a2e5745b4c5599975ae0fba97be4d976b16.src","preCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","date":"2019-10-15 16:05:29","endLine":130,"groupId":"67714","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotIndexed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/236c61b76dc2fb1de485d910ac128bab8afe04.src","preCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","date":"2019-10-15 16:05:29","endLine":183,"groupId":"67714","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/236c61b76dc2fb1de485d910ac128bab8afe04.src","preCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-14 23:15:19","codes":[{"authorDate":"2020-01-14 23:15:19","commitOrder":5,"curCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","date":"2020-01-14 23:15:19","endLine":132,"groupId":"67714","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotIndexed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/c7358c8220f8073066e49b80b16274dcc3b4cb.src","preCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2020-01-14 23:15:19","commitOrder":5,"curCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","date":"2020-01-14 23:15:19","endLine":185,"groupId":"67714","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/c7358c8220f8073066e49b80b16274dcc3b4cb.src","preCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"774bfb5e22389a923678ed8013e8cd284703d5dd","commitMessage":"@@@Don't use user-supplied type when building DocumentMapper (#50960)\n\nThis commit begins the process of removing types from the document parsing\ninfrastructure. Initially.  we just ignore the user-supplied type after it has been\nremoved from the mapping json structure.  and always supply _doc as the name\nof the root parser.\n\nThe production code change is very small here.  and most of the changeset\nconsists of alterations to Mapper test code that was passing in non-standard\ntype names and checking serialization.\n\nRelates to #41059","date":"2020-01-14 23:15:19","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","date":"2020-01-20 19:14:49","endLine":132,"groupId":"67714","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotIndexed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/ae0cee76bb7b109898662989d4102948704603.src","preCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","date":"2020-01-20 19:14:49","endLine":185,"groupId":"67714","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/ae0cee76bb7b109898662989d4102948704603.src","preCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"3d796248437e06dc90c15077702b67851bcb63a8","commitMessage":"@@@Revert \"Don't use user-supplied type when building DocumentMapper (#50960)\" (#51214)\n\nReverts #50960\n\nThis commit has been causing test failures during upgrade tests: specifically.  an upgraded\nnode becomes master and sends a cluster state update to a 7.x node; this node sees that the\nmapping version of its .tasks index is the same as the master.  so asserts that the serialized\nmappings are the same; however.  because the master has rewritten the mapping to use\n_docinstead oftasks`.  we get an assertion failure. The logical fix is for the master to\nincrement its mapping version when it rewrites the mapping.  but there isn't a simple way to\ndo that currently.\n\nThis reverts commit 774bfb5e22389a923678ed8013e8cd284703d5dd.","date":"2020-01-20 19:14:49","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-02-20 18:34:41","codes":[{"authorDate":"2020-01-20 19:14:49","commitOrder":7,"curCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","date":"2020-01-20 19:14:49","endLine":132,"groupId":"67714","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotIndexed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/ae0cee76bb7b109898662989d4102948704603.src","preCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"},{"authorDate":"2020-02-20 18:34:41","commitOrder":7,"curCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","date":"2020-02-20 18:34:41","endLine":185,"groupId":"67714","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/78b6268643947e032ebe891d4f6aba4b9bc169.src","preCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDataDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"cbd224d07012a0e0528a1ebaaeb3e37e75adac73","commitMessage":"@@@Upgrade Lucene 8.5 to latest snapshot (#52520)\n\nUpgrade Lucene 8.5 to latest snapshot\n","date":"2020-02-20 18:34:41","modifiedFileCount":"5","status":"M","submitter":"markharwood"},{"authorTime":"2020-08-24 20:15:41","codes":[{"authorDate":"2020-08-24 20:15:41","commitOrder":8,"curCode":"    public void testNotIndexed() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"scaled_float\").field(\"index\", false).field(\"scaling_factor\", 10.0))\n        );\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","date":"2020-08-24 20:15:41","endLine":112,"groupId":"103112","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotIndexed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/db1073ec6ee11d2fbdde3edb533f18d05b71d4.src","preCode":"    public void testNotIndexed() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"index\", false).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        assertEquals(1230, dvField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-08-24 20:15:41","commitOrder":8,"curCode":"    public void testStore() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"scaled_float\").field(\"store\", true).field(\"scaling_factor\", 10.0))\n        );\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","date":"2020-08-24 20:15:41","endLine":155,"groupId":"103112","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/db1073ec6ee11d2fbdde3edb533f18d05b71d4.src","preCode":"    public void testStore() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"scaled_float\")\n                .field(\"store\", true).field(\"scaling_factor\", 10.0).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", 123)\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n        assertEquals(1230, pointField.numericValue().doubleValue(), 0d);\n        IndexableField dvField = fields[1];\n        assertEquals(DocValuesType.SORTED_NUMERIC, dvField.fieldType().docValuesType());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        assertEquals(1230, storedField.numericValue().longValue());\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"6a9dde599f5fc11205e3f71f339a37bac9a259dc","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-24 20:15:41","modifiedFileCount":"171","status":"M","submitter":"Luca Cavanna"}]
