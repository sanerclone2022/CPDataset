[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testTwoShards() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        QueryCacheStats stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        assertEquals(1, s2.count(new DummyQuery(0)));\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(1L, stats2.getCacheSize());\n        assertEquals(1L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(1L, stats2.getMissCount());\n\n        for (int i = 0; i < 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize()); \r\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r1, dir1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        cache.onClose(shard1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        cache.close(); \r\n    }\n","date":"2018-04-26 03:22:53","endLine":283,"groupId":"22761","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTwoShards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/83/bde66e3bd214465e0e93677be2ea10346ed0fa.src","preCode":"    public void testTwoShards() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        QueryCacheStats stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        assertEquals(1, s2.count(new DummyQuery(0)));\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(1L, stats2.getCacheSize());\n        assertEquals(1L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(1L, stats2.getMissCount());\n\n        for (int i = 0; i < 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize()); \r\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r1, dir1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        cache.onClose(shard1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        cache.close(); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesQueryCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testStatsOnEviction() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        for (int i = 1; i <= 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n\n        \r\n        \r\n        IOUtils.close(r1, dir1);\n        cache.onClose(shard1);\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        cache.close(); \r\n    }\n","date":"2018-04-26 03:22:53","endLine":337,"groupId":"22761","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsOnEviction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/83/bde66e3bd214465e0e93677be2ea10346ed0fa.src","preCode":"    public void testStatsOnEviction() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        for (int i = 1; i <= 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n\n        \r\n        \r\n        IOUtils.close(r1, dir1);\n        cache.onClose(shard1);\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        cache.close(); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesQueryCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-06-20 23:30:49","codes":[{"authorDate":"2018-06-20 23:30:49","commitOrder":2,"curCode":"    public void testTwoShards() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        QueryCacheStats stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        assertEquals(1, s2.count(new DummyQuery(0)));\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(1L, stats2.getCacheSize());\n        assertEquals(1L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(1L, stats2.getMissCount());\n\n        for (int i = 0; i < 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize()); \r\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r1, dir1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        cache.onClose(shard1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        cache.close(); \r\n    }\n","date":"2018-06-20 23:30:49","endLine":296,"groupId":"22761","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTwoShards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e1/55639f143c6aa3e46bb226076050af21ec584b.src","preCode":"    public void testTwoShards() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        QueryCacheStats stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        assertEquals(1, s2.count(new DummyQuery(0)));\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(1L, stats2.getCacheSize());\n        assertEquals(1L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(1L, stats2.getMissCount());\n\n        for (int i = 0; i < 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize()); \r\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r1, dir1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        cache.onClose(shard1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        cache.close(); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesQueryCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2018-06-20 23:30:49","commitOrder":2,"curCode":"    public void testStatsOnEviction() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        for (int i = 1; i <= 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n\n        \r\n        \r\n        IOUtils.close(r1, dir1);\n        cache.onClose(shard1);\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        cache.close(); \r\n    }\n","date":"2018-06-20 23:30:49","endLine":350,"groupId":"22761","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsOnEviction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e1/55639f143c6aa3e46bb226076050af21ec584b.src","preCode":"    public void testStatsOnEviction() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        for (int i = 1; i <= 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n\n        \r\n        \r\n        IOUtils.close(r1, dir1);\n        cache.onClose(shard1);\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        cache.close(); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesQueryCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"8d9b98569f9754f9d87bf5323ba2cfc1b318a677","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-20 23:30:49","modifiedFileCount":"14","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-06-20 23:30:49","codes":[{"authorDate":"2021-03-11 16:50:30","commitOrder":3,"curCode":"    public void testTwoShards() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        QueryCacheStats stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        assertEquals(1, s2.count(new DummyQuery(0)));\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(1L, stats2.getCacheSize());\n        assertEquals(1L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(1L, stats2.getMissCount());\n\n        for (int i = 0; i < 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize()); \r\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r1, dir1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        cache.onClose(shard1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n        assertEquals(0L, stats1.getMemorySizeInBytes());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n        assertEquals(0L, stats2.getMemorySizeInBytes());\n\n        cache.close(); \r\n    }\n","date":"2021-03-11 16:50:30","endLine":288,"groupId":"103811","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testTwoShards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/12/cf61ac2e87fd699dea1b4d81399f9ec7abf25d.src","preCode":"    public void testTwoShards() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        QueryCacheStats stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        assertEquals(1, s2.count(new DummyQuery(0)));\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(1L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(1L, stats2.getCacheSize());\n        assertEquals(1L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(1L, stats2.getMissCount());\n\n        for (int i = 0; i < 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize()); \r\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r1, dir1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(1L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        cache.onClose(shard1);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(10L, stats2.getCacheSize());\n        assertEquals(20L, stats2.getCacheCount());\n        assertEquals(1L, stats2.getHitCount());\n        assertEquals(20L, stats2.getMissCount());\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        \r\n        stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(0L, stats1.getCacheCount());\n        assertEquals(0L, stats1.getHitCount());\n        assertEquals(0L, stats1.getMissCount());\n\n        stats2 = cache.getStats(shard2);\n        assertEquals(0L, stats2.getCacheSize());\n        assertEquals(0L, stats2.getCacheCount());\n        assertEquals(0L, stats2.getHitCount());\n        assertEquals(0L, stats2.getMissCount());\n\n        cache.close(); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesQueryCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2018-06-20 23:30:49","commitOrder":3,"curCode":"    public void testStatsOnEviction() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        for (int i = 1; i <= 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n\n        \r\n        \r\n        IOUtils.close(r1, dir1);\n        cache.onClose(shard1);\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        cache.close(); \r\n    }\n","date":"2018-06-20 23:30:49","endLine":350,"groupId":"103811","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatsOnEviction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e1/55639f143c6aa3e46bb226076050af21ec584b.src","preCode":"    public void testStatsOnEviction() throws IOException {\n        Directory dir1 = newDirectory();\n        IndexWriter w1 = new IndexWriter(dir1, newIndexWriterConfig());\n        w1.addDocument(new Document());\n        DirectoryReader r1 = DirectoryReader.open(w1);\n        w1.close();\n        ShardId shard1 = new ShardId(\"index\", \"_na_\", 0);\n        r1 = ElasticsearchDirectoryReader.wrap(r1, shard1);\n        IndexSearcher s1 = new IndexSearcher(r1);\n        s1.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Directory dir2 = newDirectory();\n        IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig());\n        w2.addDocument(new Document());\n        DirectoryReader r2 = DirectoryReader.open(w2);\n        w2.close();\n        ShardId shard2 = new ShardId(\"index\", \"_na_\", 1);\n        r2 = ElasticsearchDirectoryReader.wrap(r2, shard2);\n        IndexSearcher s2 = new IndexSearcher(r2);\n        s2.setQueryCachingPolicy(alwaysCachePolicy());\n\n        Settings settings = Settings.builder()\n                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10)\n                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true)\n                .build();\n        IndicesQueryCache cache = new IndicesQueryCache(settings);\n        s1.setQueryCache(cache);\n        s2.setQueryCache(cache);\n\n        assertEquals(1, s1.count(new DummyQuery(0)));\n\n        for (int i = 1; i <= 20; ++i) {\n            assertEquals(1, s2.count(new DummyQuery(i)));\n        }\n\n        QueryCacheStats stats1 = cache.getStats(shard1);\n        assertEquals(0L, stats1.getCacheSize());\n        assertEquals(1L, stats1.getCacheCount());\n\n        \r\n        \r\n        IOUtils.close(r1, dir1);\n        cache.onClose(shard1);\n\n        IOUtils.close(r2, dir2);\n        cache.onClose(shard2);\n\n        cache.close(); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesQueryCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"N"}],"commitId":"699a9c7e904ad4e4f48199a08b8800842bec29d7","commitMessage":"@@@Track query stats bug (#70273)\n\nThe query cache stats can currently report negative memory usage.  which breaks REST responses for indices stats.  node stats.  etc.  see #55434 as one such example.\n\nThe reason why negative memory usage is reported is because of the following trappy calculation:\n\nhttps://github.com/elastic/elasticsearch/blob/1de0b616ebb92de6060510e92269ef87fc6a8649/server/src/main/java/org/elasticsearch/indices/IndicesQueryCache.java#L98-L101\n\n- weight can be `Double.POSITIVE_INFINITY` when `totalSize == 0` and `stats.size() == 0`\n- if we then also have `sharedRamBytesUsed > 0`.  then `additionalRamBytesUsed` will be `Long.MAX_VALUE`\n- if you then sum up multiple of these `Long.MAX_VALUE` values (one for each shard).  this leads to an overflow.  resulting in negative numbers as seen in #55434.\n\nThe reason sharedRamBytesUsed can be > 0 when there are no shard stats at all is because of the memory occupied by `LRUQueryCache.uniqueQueries`.  where the lifetime can extend even closing of shards (where they are removed from shardStats).\n\nNote that a workaround to the above bug is to [clear the cache](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html).  as it makes `sharedRamBytesUsed == 0`.  see https://github.com/elastic/elasticsearch/blob/1de0b616ebb92de6060510e92269ef87fc6a8649/server/src/main/java/org/elasticsearch/indices/IndicesQueryCache.java#L168-L174\n\nCloses #55434","date":"2021-03-11 16:50:30","modifiedFileCount":"2","status":"M","submitter":"Yannick Welsch"}]
