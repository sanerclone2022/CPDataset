[{"authorTime":"2020-08-06 04:58:53","codes":[{"authorDate":"2020-08-06 04:58:53","commitOrder":1,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-08-06 04:58:53","endLine":614,"groupId":"1271","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/79055b13dcb74561c5ebb5de1d500c338fbecb.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"B"},{"authorDate":"2020-08-06 04:58:53","commitOrder":1,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            CallSubDefNode irCallSubDefNode = new CallSubDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            CallSubNode irCallSubNode = new CallSubNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irCallSubNode.setLocation(userCallNode.getLocation());\n            irCallSubNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irCallSubNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irCallSubNode.setBox(boxType);\n            irExpressionNode = irCallSubNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        CallNode irCallNode = new CallNode();\n        irCallNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irCallNode.setRightNode(irExpressionNode);\n        irCallNode.setLocation(irExpressionNode.getLocation());\n        irCallNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irCallNode));\n    }\n","date":"2020-08-06 04:58:53","endLine":1485,"groupId":"1271","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/79055b13dcb74561c5ebb5de1d500c338fbecb.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            CallSubDefNode irCallSubDefNode = new CallSubDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            CallSubNode irCallSubNode = new CallSubNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irCallSubNode.setLocation(userCallNode.getLocation());\n            irCallSubNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irCallSubNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irCallSubNode.setBox(boxType);\n            irExpressionNode = irCallSubNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        CallNode irCallNode = new CallNode();\n        irCallNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irCallNode.setRightNode(irExpressionNode);\n        irCallNode.setLocation(irExpressionNode.getLocation());\n        irCallNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irCallNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1432,"status":"B"}],"commitId":"45402118936d96100445723a849c869627cf1dc2","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-06 04:58:53","modifiedFileCount":"224","status":"B","submitter":"Nik Everett"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-06 04:58:53","commitOrder":2,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-08-06 04:58:53","endLine":614,"groupId":"1271","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/79055b13dcb74561c5ebb5de1d500c338fbecb.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"N"},{"authorDate":"2020-08-07 05:14:20","commitOrder":2,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            CallSubDefNode irCallSubDefNode = new CallSubDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            CallSubNode irCallSubNode = new CallSubNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irCallSubNode.setLocation(userCallNode.getLocation());\n            irCallSubNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irCallSubNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irCallSubNode.setBox(boxType);\n            irExpressionNode = irCallSubNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        AccessNode irAccessNode = new AccessNode();\n        irAccessNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irAccessNode.setRightNode(irExpressionNode);\n        irAccessNode.setLocation(irExpressionNode.getLocation());\n        irAccessNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irAccessNode));\n    }\n","date":"2020-08-07 05:14:20","endLine":1483,"groupId":"1271","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/d1bb1d5efb3553ce277bad6202c143a75db8a1.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            CallSubDefNode irCallSubDefNode = new CallSubDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            CallSubNode irCallSubNode = new CallSubNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irCallSubNode.setLocation(userCallNode.getLocation());\n            irCallSubNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irCallSubNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irCallSubNode.setBox(boxType);\n            irExpressionNode = irCallSubNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        CallNode irCallNode = new CallNode();\n        irCallNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irCallNode.setRightNode(irExpressionNode);\n        irCallNode.setLocation(irExpressionNode.getLocation());\n        irCallNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irCallNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1430,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-11 22:44:55","codes":[{"authorDate":"2020-08-06 04:58:53","commitOrder":3,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-08-06 04:58:53","endLine":614,"groupId":"1271","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/79055b13dcb74561c5ebb5de1d500c338fbecb.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"N"},{"authorDate":"2020-08-11 22:44:55","commitOrder":3,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setLocation(userCallNode.getLocation());\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        AccessNode irAccessNode = new AccessNode();\n        irAccessNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irAccessNode.setRightNode(irExpressionNode);\n        irAccessNode.setLocation(irExpressionNode.getLocation());\n        irAccessNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irAccessNode));\n    }\n","date":"2020-08-11 22:44:55","endLine":1502,"groupId":"1271","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/5c23101776af77724eda830edb0ad642979114.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            CallSubDefNode irCallSubDefNode = new CallSubDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            CallSubNode irCallSubNode = new CallSubNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irCallSubNode.setLocation(userCallNode.getLocation());\n            irCallSubNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irCallSubNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irCallSubNode.setBox(boxType);\n            irExpressionNode = irCallSubNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        AccessNode irAccessNode = new AccessNode();\n        irAccessNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irAccessNode.setRightNode(irExpressionNode);\n        irAccessNode.setLocation(irExpressionNode.getLocation());\n        irAccessNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irAccessNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1449,"status":"M"}],"commitId":"fd8b557935c58913805044a03de3453e45ab0318","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-11 22:44:55","modifiedFileCount":"130","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-18 01:34:59","codes":[{"authorDate":"2020-08-06 04:58:53","commitOrder":4,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-08-06 04:58:53","endLine":614,"groupId":"1271","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/79055b13dcb74561c5ebb5de1d500c338fbecb.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"N"},{"authorDate":"2020-08-18 01:34:59","commitOrder":4,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setLocation(userCallNode.getLocation());\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryNode irBinaryNode = new BinaryNode();\n        irBinaryNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryNode.setRightNode(irExpressionNode);\n        irBinaryNode.setLocation(irExpressionNode.getLocation());\n        irBinaryNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryNode));\n    }\n","date":"2020-08-18 01:34:59","endLine":1855,"groupId":"1271","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/bee051d2a22c3fc46156d0536258e7d151aaeb.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setLocation(userCallNode.getLocation());\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        AccessNode irAccessNode = new AccessNode();\n        irAccessNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irAccessNode.setRightNode(irExpressionNode);\n        irAccessNode.setLocation(irExpressionNode.getLocation());\n        irAccessNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irAccessNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1802,"status":"M"}],"commitId":"99c885e5dad18c791ff91d03542abf85ad983ad7","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-18 01:34:59","modifiedFileCount":"346","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-09-04 02:04:16","codes":[{"authorDate":"2020-08-06 04:58:53","commitOrder":5,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-08-06 04:58:53","endLine":614,"groupId":"1271","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/79055b13dcb74561c5ebb5de1d500c338fbecb.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"N"},{"authorDate":"2020-09-04 02:04:16","commitOrder":5,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setLocation(userCallNode.getLocation());\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode();\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.setLocation(irExpressionNode.getLocation());\n        irBinaryImplNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","date":"2020-09-04 02:04:16","endLine":1851,"groupId":"1271","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/c34992cadb0200afb9ceca244f0aabd0e04d9c.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setLocation(userCallNode.getLocation());\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryNode irBinaryNode = new BinaryNode();\n        irBinaryNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryNode.setRightNode(irExpressionNode);\n        irBinaryNode.setLocation(irExpressionNode.getLocation());\n        irBinaryNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1798,"status":"M"}],"commitId":"0216a71dda795e7e7d8551b0bfa7d6170f6863ba","commitMessage":"@@@Change compound assignment structure to support String concatenation (#61825)\n\nThis change modifies the compound assignment structure of the ir tree to support string \nconcatenation in Java 8. The structure is changed so that when a StringBuilder is used for string \nconcatenation it will be the first value pushed onto the stack prior loading the left-hand side of the \ncompound assignment.","date":"2020-09-04 02:04:16","modifiedFileCount":"13","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-10-01 23:35:21","codes":[{"authorDate":"2020-10-01 23:35:21","commitOrder":6,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode(userDeclBlockNode.getLocation());\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-10-01 23:35:21","endLine":686,"groupId":"5374","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5b1ad931c719b6adb1459f11931d88b63cb3df.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode();\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        irDeclarationBlockNode.setLocation(userDeclBlockNode.getLocation());\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":678,"status":"M"},{"authorDate":"2020-10-01 23:35:21","commitOrder":6,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode(irExpressionNode.getLocation());\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode(irExpressionNode.getLocation());\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","date":"2020-10-01 23:35:21","endLine":1734,"groupId":"5374","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5b1ad931c719b6adb1459f11931d88b63cb3df.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setLocation(userCallNode.getLocation());\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode();\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setLocation(userCallNode.getLocation());\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode();\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setLocation(irExpressionNode.getLocation());\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode();\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.setLocation(irExpressionNode.getLocation());\n        irBinaryImplNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1685,"status":"M"}],"commitId":"d23823bfba07c147ec3d6d925314f10ad5d4041a","commitMessage":"@@@Make location final in IRNode (#63078)\n\nThis change makes Location a final member of IRNode as opposed to possibly changing it. This \nensures that all ir nodes have a Location for error information upon creation that cannot be updated \nso each node can be tracked as where it came from originally.","date":"2020-10-01 23:35:21","modifiedFileCount":"81","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-10-05 22:15:14","codes":[{"authorDate":"2020-10-01 23:35:21","commitOrder":7,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode(userDeclBlockNode.getLocation());\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-10-01 23:35:21","endLine":686,"groupId":"5374","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5b1ad931c719b6adb1459f11931d88b63cb3df.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode(userDeclBlockNode.getLocation());\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":678,"status":"N"},{"authorDate":"2020-10-05 22:15:14","commitOrder":7,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n            PainlessMethod method = scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod();\n            Object[] injections = PainlessLookupUtility.buildInjections(method, scriptScope.getCompilerSettings().asMap());\n            Class<?>[] parameterTypes = method.javaMethod.getParameterTypes();\n            int augmentedOffset = method.javaMethod.getDeclaringClass() == method.targetClass ? 0 : 1;\n\n            for (int i = 0; i < injections.length; i++) {\n                Object injection = injections[i];\n                Class<?> parameterType = parameterTypes[i + augmentedOffset];\n\n                if (parameterType != PainlessLookupUtility.typeToUnboxedType(injection.getClass())) {\n                    throw new IllegalStateException(\"illegal tree structure\");\n                }\n\n                ConstantNode constantNode = new ConstantNode(userCallNode.getLocation());\n                constantNode.setExpressionType(parameterType);\n                constantNode.setConstant(injection);\n                irInvokeCallNode.addArgumentNode(constantNode);\n            }\n\n            for (AExpression userCallArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userCallArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode(irExpressionNode.getLocation());\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode(irExpressionNode.getLocation());\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","date":"2020-10-05 22:15:14","endLine":1772,"groupId":"5374","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/4faccb3267167398e9c43a604eebf3ed558eeb.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode(irExpressionNode.getLocation());\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode(irExpressionNode.getLocation());\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1705,"status":"M"}],"commitId":"93f29a4f18b0326da16186a741c30bf248e2d65b","commitMessage":"@@@Scripting: enable regular expressions by default (#63029)\n\n* Setting `script.painless.regex.enabled` has a new option. \n  `use-factor`.  the default.  This defaults to using regular\n  expressions but limiting the complexity of the regular\n  expressions.\n\n  In addition to `use-factor`.  the setting can be `true`.  as\n  before.  which enables regular expressions without limiting them.\n\n  `false` totally disables regular expressions.  which was the\n  old default.\n\n* New setting `script.painless.regex.limit-factor`.  This limits\n  regular expression complexity by limiting the number characters\n  a regular expression can consider based on input length.\n\n  The default is `6`.  so a regular expression can consider\n  `6` * input length number of characters.  With input\n  `foobarbaz` (length `9`).  for example.  the regular expression\n  can consider `54` (`6 * 9`) characters.\n\n  This reduces the impact of exponential backtracking in Java's\n  regular expression engine.\n\n* add `@inject_constant` annotation to whitelist.\n\n  This annotation signals that a compiler settings will\n  be injected at the beginning of a whitelisted method.\n\n  The format is `argnum=settingname`:\n  `1=foo_setting 2=bar_setting`.\n\n  Argument numbers must start at one and must be sequential.\n\n* Augment\n  `Pattern.split(CharSequence)`\n  `Pattern.split(CharSequence.  int)`. \n  `Pattern.splitAsStream(CharSequence)`\n  `Pattern.matcher(CharSequence)`\n  to take the value of `script.painless.regex.limit-factor` as a\n  an injected parameter.  limiting as explained above when this\n  setting is in use.\n\nFixes: #49873","date":"2020-10-05 22:15:14","modifiedFileCount":"23","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-10-23 02:47:32","codes":[{"authorDate":"2020-10-01 23:35:21","commitOrder":8,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode(userDeclBlockNode.getLocation());\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-10-01 23:35:21","endLine":686,"groupId":"5374","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5b1ad931c719b6adb1459f11931d88b63cb3df.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode(userDeclBlockNode.getLocation());\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":678,"status":"N"},{"authorDate":"2020-10-23 02:47:32","commitOrder":8,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n        Class<?> valueType = scriptScope.getDecoration(userCallNode, ValueType.class).getValueType();\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.attachDecoration(new IRDExpressionType(valueType));\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n            PainlessMethod method = scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod();\n            Object[] injections = PainlessLookupUtility.buildInjections(method, scriptScope.getCompilerSettings().asMap());\n            Class<?>[] parameterTypes = method.javaMethod.getParameterTypes();\n            int augmentedOffset = method.javaMethod.getDeclaringClass() == method.targetClass ? 0 : 1;\n\n            for (int i = 0; i < injections.length; i++) {\n                Object injection = injections[i];\n                Class<?> parameterType = parameterTypes[i + augmentedOffset];\n\n                if (parameterType != PainlessLookupUtility.typeToUnboxedType(injection.getClass())) {\n                    throw new IllegalStateException(\"illegal tree structure\");\n                }\n\n                ConstantNode constantNode = new ConstantNode(userCallNode.getLocation());\n                constantNode.attachDecoration(new IRDExpressionType(parameterType));\n                constantNode.setConstant(injection);\n                irInvokeCallNode.addArgumentNode(constantNode);\n            }\n\n            for (AExpression userCallArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userCallArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.attachDecoration(new IRDExpressionType(valueType));\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode(irExpressionNode.getLocation());\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.copyDecorationFrom(irExpressionNode, IRDExpressionType.class);\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode(irExpressionNode.getLocation());\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.copyDecorationFrom(irExpressionNode, IRDExpressionType.class);\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","date":"2020-10-23 02:47:32","endLine":1805,"groupId":"5374","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/321f84d7e8689020f2217af4cd8922fc61d54c.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n            PainlessMethod method = scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod();\n            Object[] injections = PainlessLookupUtility.buildInjections(method, scriptScope.getCompilerSettings().asMap());\n            Class<?>[] parameterTypes = method.javaMethod.getParameterTypes();\n            int augmentedOffset = method.javaMethod.getDeclaringClass() == method.targetClass ? 0 : 1;\n\n            for (int i = 0; i < injections.length; i++) {\n                Object injection = injections[i];\n                Class<?> parameterType = parameterTypes[i + augmentedOffset];\n\n                if (parameterType != PainlessLookupUtility.typeToUnboxedType(injection.getClass())) {\n                    throw new IllegalStateException(\"illegal tree structure\");\n                }\n\n                ConstantNode constantNode = new ConstantNode(userCallNode.getLocation());\n                constantNode.setExpressionType(parameterType);\n                constantNode.setConstant(injection);\n                irInvokeCallNode.addArgumentNode(constantNode);\n            }\n\n            for (AExpression userCallArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userCallArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.setExpressionType(scriptScope.getDecoration(userCallNode, ValueType.class).getValueType());;\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode(irExpressionNode.getLocation());\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.setExpressionType(irExpressionNode.getExpressionType());\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode(irExpressionNode.getLocation());\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.setExpressionType(irExpressionNode.getExpressionType());\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1737,"status":"M"}],"commitId":"6eb168e640b1af65e307a873844f8d65e5a2e8f7","commitMessage":"@@@Add decorations to ir nodes in Painless (#63894)\n\nThis change starts to switch all ir nodes to use decorations instead of specific member data. For this \nspecific change.  we add only an expression type decoration to begin with to keep the change smaller. \nOther members of the ir nodes will be converted to decorations in future changes.\n\nThe decoration system has two important advantages:\n- The first is it's consistent with the user nodes as generated data is attached to them as a decoration.  \nso we have a clear.  consistent model for how to use both trees.\n- This allows additionally generated data to be attached as necessary for optimization phases making \nthe ir tree extendable which is one of our primary.  long-term goals.","date":"2020-10-23 02:47:32","modifiedFileCount":"6","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-10-31 00:25:20","codes":[{"authorDate":"2020-10-01 23:35:21","commitOrder":9,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode(userDeclBlockNode.getLocation());\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-10-01 23:35:21","endLine":686,"groupId":"5374","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5b1ad931c719b6adb1459f11931d88b63cb3df.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode(userDeclBlockNode.getLocation());\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":678,"status":"N"},{"authorDate":"2020-10-31 00:25:20","commitOrder":9,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n        Class<?> valueType = scriptScope.getDecoration(userCallNode, ValueType.class).getValueType();\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.attachDecoration(new IRDExpressionType(valueType));\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n            PainlessMethod method = scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod();\n            Object[] injections = PainlessLookupUtility.buildInjections(method, scriptScope.getCompilerSettings().asMap());\n            Class<?>[] parameterTypes = method.javaMethod.getParameterTypes();\n            int augmentedOffset = method.javaMethod.getDeclaringClass() == method.targetClass ? 0 : 1;\n\n            for (int i = 0; i < injections.length; i++) {\n                Object injection = injections[i];\n                Class<?> parameterType = parameterTypes[i + augmentedOffset];\n\n                if (parameterType != PainlessLookupUtility.typeToUnboxedType(injection.getClass())) {\n                    throw new IllegalStateException(\"illegal tree structure\");\n                }\n\n                ConstantNode constantNode = new ConstantNode(userCallNode.getLocation());\n                constantNode.attachDecoration(new IRDExpressionType(parameterType));\n                constantNode.setConstant(injection);\n                irInvokeCallNode.addArgumentNode(constantNode);\n            }\n\n            for (AExpression userCallArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userCallArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.attachDecoration(new IRDExpressionType(valueType));\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode(irExpressionNode.getLocation());\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.attachDecoration(irExpressionNode.getDecoration(IRDExpressionType.class));\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode(irExpressionNode.getLocation());\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.attachDecoration(irExpressionNode.getDecoration(IRDExpressionType.class));\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","date":"2020-10-31 00:25:20","endLine":1816,"groupId":"5374","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/776406c2b7b488041edb7c2ef7c20bc10d81a0.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n        Class<?> valueType = scriptScope.getDecoration(userCallNode, ValueType.class).getValueType();\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.attachDecoration(new IRDExpressionType(valueType));\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n            PainlessMethod method = scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod();\n            Object[] injections = PainlessLookupUtility.buildInjections(method, scriptScope.getCompilerSettings().asMap());\n            Class<?>[] parameterTypes = method.javaMethod.getParameterTypes();\n            int augmentedOffset = method.javaMethod.getDeclaringClass() == method.targetClass ? 0 : 1;\n\n            for (int i = 0; i < injections.length; i++) {\n                Object injection = injections[i];\n                Class<?> parameterType = parameterTypes[i + augmentedOffset];\n\n                if (parameterType != PainlessLookupUtility.typeToUnboxedType(injection.getClass())) {\n                    throw new IllegalStateException(\"illegal tree structure\");\n                }\n\n                ConstantNode constantNode = new ConstantNode(userCallNode.getLocation());\n                constantNode.attachDecoration(new IRDExpressionType(parameterType));\n                constantNode.setConstant(injection);\n                irInvokeCallNode.addArgumentNode(constantNode);\n            }\n\n            for (AExpression userCallArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userCallArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.attachDecoration(new IRDExpressionType(valueType));\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode(irExpressionNode.getLocation());\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.copyDecorationFrom(irExpressionNode, IRDExpressionType.class);\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode(irExpressionNode.getLocation());\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.copyDecorationFrom(irExpressionNode, IRDExpressionType.class);\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1748,"status":"M"}],"commitId":"e0c7fe8e3d8444c54ea1f318ee24c2e2017ce0e9","commitMessage":"@@@Improve decoration system in ir nodes (#64177)\n\nThis change creates consistency in the decorations added for the ir nodes by adding addtional \nmethods getValue and toString to the base IRDecoration class. This also add getDecorationValue and \ngetDecorationString as convenience methods to IRNode where \ngetDecoration(IRDExpressionType.class).getType() becomes \ngetDecorationValue(IRDExpressionType.class). The BinaryMathNode is used an example of conversion \nto the new methods. The rest of the nodes will change in a follow up.","date":"2020-10-31 00:25:20","modifiedFileCount":"6","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-12-04 04:01:07","codes":[{"authorDate":"2020-10-01 23:35:21","commitOrder":10,"curCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode(userDeclBlockNode.getLocation());\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","date":"2020-10-01 23:35:21","endLine":686,"groupId":"101089","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"visitDeclBlock","params":"(SDeclBlockuserDeclBlockNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5b1ad931c719b6adb1459f11931d88b63cb3df.src","preCode":"    public void visitDeclBlock(SDeclBlock userDeclBlockNode, ScriptScope scriptScope) {\n        DeclarationBlockNode irDeclarationBlockNode = new DeclarationBlockNode(userDeclBlockNode.getLocation());\n\n        for (SDeclaration userDeclarationNode : userDeclBlockNode.getDeclarationNodes()) {\n            irDeclarationBlockNode.addDeclarationNode((DeclarationNode)visit(userDeclarationNode, scriptScope));\n        }\n\n        scriptScope.putDecoration(userDeclBlockNode, new IRNodeDecoration(irDeclarationBlockNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":678,"status":"N"},{"authorDate":"2020-12-04 04:01:07","commitOrder":10,"curCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n        Class<?> valueType = scriptScope.getDecoration(userCallNode, ValueType.class).getValueType();\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.attachDecoration(new IRDExpressionType(valueType));\n            irCallSubDefNode.attachDecoration(new IRDName(userCallNode.getMethodName()));\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n            PainlessMethod method = scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod();\n            Object[] injections = PainlessLookupUtility.buildInjections(method, scriptScope.getCompilerSettings().asMap());\n            Class<?>[] parameterTypes = method.javaMethod.getParameterTypes();\n            int augmentedOffset = method.javaMethod.getDeclaringClass() == method.targetClass ? 0 : 1;\n\n            for (int i = 0; i < injections.length; i++) {\n                Object injection = injections[i];\n                Class<?> parameterType = parameterTypes[i + augmentedOffset];\n\n                if (parameterType != PainlessLookupUtility.typeToUnboxedType(injection.getClass())) {\n                    throw new IllegalStateException(\"illegal tree structure\");\n                }\n\n                ConstantNode constantNode = new ConstantNode(userCallNode.getLocation());\n                constantNode.attachDecoration(new IRDExpressionType(parameterType));\n                constantNode.attachDecoration(new IRDConstant(injection));\n                irInvokeCallNode.addArgumentNode(constantNode);\n            }\n\n            for (AExpression userCallArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userCallArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.attachDecoration(new IRDExpressionType(valueType));\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode(irExpressionNode.getLocation());\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.attachDecoration(irExpressionNode.getDecoration(IRDExpressionType.class));\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode(irExpressionNode.getLocation());\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.attachDecoration(irExpressionNode.getDecoration(IRDExpressionType.class));\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","date":"2020-12-04 04:01:07","endLine":1915,"groupId":"101089","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"visitCall","params":"(ECalluserCallNode@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/97/dfdb8a1dcd4ea0091222ea1e7943bf9a784cc2.src","preCode":"    public void visitCall(ECall userCallNode, ScriptScope scriptScope) {\n        ExpressionNode irExpressionNode;\n\n        ValueType prefixValueType = scriptScope.getDecoration(userCallNode.getPrefixNode(), ValueType.class);\n        Class<?> valueType = scriptScope.getDecoration(userCallNode, ValueType.class).getValueType();\n\n        if (prefixValueType != null && prefixValueType.getValueType() == def.class) {\n            InvokeCallDefNode irCallSubDefNode = new InvokeCallDefNode(userCallNode.getLocation());\n\n            for (AExpression userArgumentNode : userCallNode.getArgumentNodes()) {\n                irCallSubDefNode.addArgumentNode((ExpressionNode)visit(userArgumentNode, scriptScope));\n            }\n\n            irCallSubDefNode.attachDecoration(new IRDExpressionType(valueType));\n            irCallSubDefNode.setName(userCallNode.getMethodName());\n            irExpressionNode = irCallSubDefNode;\n        } else {\n            Class<?> boxType;\n\n            if (prefixValueType != null) {\n                boxType = prefixValueType.getValueType();\n            } else {\n                boxType = scriptScope.getDecoration(userCallNode.getPrefixNode(), StaticType.class).getStaticType();\n            }\n\n            InvokeCallNode irInvokeCallNode = new InvokeCallNode(userCallNode.getLocation());\n            PainlessMethod method = scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod();\n            Object[] injections = PainlessLookupUtility.buildInjections(method, scriptScope.getCompilerSettings().asMap());\n            Class<?>[] parameterTypes = method.javaMethod.getParameterTypes();\n            int augmentedOffset = method.javaMethod.getDeclaringClass() == method.targetClass ? 0 : 1;\n\n            for (int i = 0; i < injections.length; i++) {\n                Object injection = injections[i];\n                Class<?> parameterType = parameterTypes[i + augmentedOffset];\n\n                if (parameterType != PainlessLookupUtility.typeToUnboxedType(injection.getClass())) {\n                    throw new IllegalStateException(\"illegal tree structure\");\n                }\n\n                ConstantNode constantNode = new ConstantNode(userCallNode.getLocation());\n                constantNode.attachDecoration(new IRDExpressionType(parameterType));\n                constantNode.setConstant(injection);\n                irInvokeCallNode.addArgumentNode(constantNode);\n            }\n\n            for (AExpression userCallArgumentNode : userCallNode.getArgumentNodes()) {\n                irInvokeCallNode.addArgumentNode(injectCast(userCallArgumentNode, scriptScope));\n            }\n\n            irInvokeCallNode.attachDecoration(new IRDExpressionType(valueType));\n            irInvokeCallNode.setMethod(scriptScope.getDecoration(userCallNode, StandardPainlessMethod.class).getStandardPainlessMethod());\n            irInvokeCallNode.setBox(boxType);\n            irExpressionNode = irInvokeCallNode;\n        }\n\n        if (userCallNode.isNullSafe()) {\n            NullSafeSubNode irNullSafeSubNode = new NullSafeSubNode(irExpressionNode.getLocation());\n            irNullSafeSubNode.setChildNode(irExpressionNode);\n            irNullSafeSubNode.attachDecoration(irExpressionNode.getDecoration(IRDExpressionType.class));\n            irExpressionNode = irNullSafeSubNode;\n        }\n\n        BinaryImplNode irBinaryImplNode = new BinaryImplNode(irExpressionNode.getLocation());\n        irBinaryImplNode.setLeftNode((ExpressionNode)visit(userCallNode.getPrefixNode(), scriptScope));\n        irBinaryImplNode.setRightNode(irExpressionNode);\n        irBinaryImplNode.attachDecoration(irExpressionNode.getDecoration(IRDExpressionType.class));\n\n        scriptScope.putDecoration(userCallNode, new IRNodeDecoration(irBinaryImplNode));\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1847,"status":"M"}],"commitId":"a44ad560a23ee2570d5faaecc3de73e555c51608","commitMessage":"@@@Complete replacing member data with decorations in the ir tree (#64825)\n\nThis change replaces all the member data in the ir nodes with decorations instead. This completes the \ntransition to a decoration system in the ir tree. This change allows for maximum flexibility when \nmodifying existing phases or adding additional phases.","date":"2020-12-04 04:01:07","modifiedFileCount":"52","status":"M","submitter":"Jack Conradson"}]
