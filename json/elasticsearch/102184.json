[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSingleIndexStartedShard() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and performing rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Rerouting again, nothing should change\");\n        clusterState = ClusterState.builder(clusterState).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        logger.info(\"Marking the shard as started\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Starting another node and making sure nothing changed\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node2\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Killing node1 where the shard is, checking the shard is unassigned\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(\"node1\")).build();\n        newState = strategy.deassociateDeadNodes(clusterState, true, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Bring node1 back, and see it's assinged\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node1\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n\n        logger.info(\"Start another node, make sure that things remain the same (shard is in node2 and initializing)\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node3\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n\n        logger.info(\"Start the shard on node 1\");\n        routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":160,"groupId":"33150","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleIndexStartedShard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/06/68ba415249b0d38b4b92da1c2dcabd375f4b97.src","preCode":"    public void testSingleIndexStartedShard() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and performing rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Rerouting again, nothing should change\");\n        clusterState = ClusterState.builder(clusterState).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        logger.info(\"Marking the shard as started\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Starting another node and making sure nothing changed\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node2\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Killing node1 where the shard is, checking the shard is unassigned\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(\"node1\")).build();\n        newState = strategy.deassociateDeadNodes(clusterState, true, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Bring node1 back, and see it's assinged\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node1\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n\n        logger.info(\"Start another node, make sure that things remain the same (shard is in node2 and initializing)\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node3\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n\n        logger.info(\"Start the shard on node 1\");\n        routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSingleIndexShardFailed() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable.Builder routingTableBuilder = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"));\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTableBuilder.build()).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).unassigned(), equalTo(false));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Marking the shard as failed\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyFailedShard(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING).get(0), randomBoolean());\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":206,"groupId":"33150","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleIndexShardFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/06/68ba415249b0d38b4b92da1c2dcabd375f4b97.src","preCode":"    public void testSingleIndexShardFailed() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable.Builder routingTableBuilder = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"));\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTableBuilder.build()).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).unassigned(), equalTo(false));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Marking the shard as failed\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyFailedShard(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING).get(0), randomBoolean());\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2019-01-24 00:06:25","commitOrder":2,"curCode":"    public void testSingleIndexStartedShard() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and performing rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Rerouting again, nothing should change\");\n        clusterState = ClusterState.builder(clusterState).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        logger.info(\"Marking the shard as started\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Starting another node and making sure nothing changed\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node2\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Killing node1 where the shard is, checking the shard is unassigned\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(\"node1\")).build();\n        newState = strategy.disassociateDeadNodes(clusterState, true, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Bring node1 back, and see it's assinged\");\n\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node1\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n\n        logger.info(\"Start another node, make sure that things remain the same (shard is in node2 and initializing)\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node3\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n\n        logger.info(\"Start the shard on node 1\");\n        routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n    }\n","date":"2019-01-24 00:06:25","endLine":162,"groupId":"33150","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleIndexStartedShard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/ab17160fd65a33d4bdc3dd1c0fe4669c82174b.src","preCode":"    public void testSingleIndexStartedShard() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and performing rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Rerouting again, nothing should change\");\n        clusterState = ClusterState.builder(clusterState).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        logger.info(\"Marking the shard as started\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Starting another node and making sure nothing changed\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node2\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Killing node1 where the shard is, checking the shard is unassigned\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(\"node1\")).build();\n        newState = strategy.deassociateDeadNodes(clusterState, true, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Bring node1 back, and see it's assinged\");\n\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node1\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n\n        logger.info(\"Start another node, make sure that things remain the same (shard is in node2 and initializing)\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node3\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n\n        logger.info(\"Start the shard on node 1\");\n        routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testSingleIndexShardFailed() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable.Builder routingTableBuilder = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"));\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTableBuilder.build()).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).unassigned(), equalTo(false));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Marking the shard as failed\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyFailedShard(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING).get(0), randomBoolean());\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":206,"groupId":"33150","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleIndexShardFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/06/68ba415249b0d38b4b92da1c2dcabd375f4b97.src","preCode":"    public void testSingleIndexShardFailed() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable.Builder routingTableBuilder = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"));\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTableBuilder.build()).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).unassigned(), equalTo(false));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Marking the shard as failed\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyFailedShard(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING).get(0), randomBoolean());\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"}],"commitId":"d193ca8aaecbba7ae2ee7c62855d0e062742cc58","commitMessage":"@@@Use disassociate in preference to deassociate (#37704)\n\n","date":"2019-01-24 00:06:25","modifiedFileCount":"25","status":"M","submitter":"David Kyle"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2019-07-18 13:39:24","commitOrder":3,"curCode":"    public void testSingleIndexStartedShard() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and performing rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Rerouting again, nothing should change\");\n        clusterState = ClusterState.builder(clusterState).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        logger.info(\"Marking the shard as started\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = startInitializingShardsAndReroute(strategy, clusterState, routingNodes.node(\"node1\"));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Starting another node and making sure nothing changed\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node2\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Killing node1 where the shard is, checking the shard is unassigned\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(\"node1\")).build();\n        newState = strategy.disassociateDeadNodes(clusterState, true, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Bring node1 back, and see it's assinged\");\n\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node1\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n\n        logger.info(\"Start another node, make sure that things remain the same (shard is in node2 and initializing)\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node3\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n\n        logger.info(\"Start the shard on node 1\");\n        routingNodes = clusterState.getRoutingNodes();\n        newState = startInitializingShardsAndReroute(strategy, clusterState, routingNodes.node(\"node1\"));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n    }\n","date":"2019-07-18 13:39:24","endLine":162,"groupId":"33150","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleIndexStartedShard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/21aa03341893428a819fd317ae0a4f9c4adacd.src","preCode":"    public void testSingleIndexStartedShard() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and performing rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Rerouting again, nothing should change\");\n        clusterState = ClusterState.builder(clusterState).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        logger.info(\"Marking the shard as started\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Starting another node and making sure nothing changed\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node2\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Killing node1 where the shard is, checking the shard is unassigned\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(\"node1\")).build();\n        newState = strategy.disassociateDeadNodes(clusterState, true, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Bring node1 back, and see it's assinged\");\n\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node1\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n\n        logger.info(\"Start another node, make sure that things remain the same (shard is in node2 and initializing)\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node3\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n\n        logger.info(\"Start the shard on node 1\");\n        routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyStartedShards(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public void testSingleIndexShardFailed() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable.Builder routingTableBuilder = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"));\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTableBuilder.build()).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).unassigned(), equalTo(false));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Marking the shard as failed\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyFailedShard(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING).get(0), randomBoolean());\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":206,"groupId":"33150","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleIndexShardFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/06/68ba415249b0d38b4b92da1c2dcabd375f4b97.src","preCode":"    public void testSingleIndexShardFailed() {\n        AllocationService strategy = createAllocationService(Settings.builder().put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable.Builder routingTableBuilder = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"));\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTableBuilder.build()).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).unassigned(), equalTo(false));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Marking the shard as failed\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyFailedShard(clusterState, routingNodes.node(\"node1\").shardsWithState(INITIALIZING).get(0), randomBoolean());\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"}],"commitId":"51fb95ef83f7a1aa6cbc5207e504b03ccee724ee","commitMessage":"@@@Defer reroute when starting shards (#44433)\n\n* Defer reroute when starting shards\n\nToday we reroute the cluster as part of the process of starting a shard.  which\nruns at `URGENT` priority. In large clusters.  rerouting may take some time to\ncomplete.  and this means that a mere trickle of shard-started events can cause\nstarvation for other.  lower-priority.  tasks that are pending on the master.\n\nHowever.  it isn't really necessary to perform a reroute when starting a shard. \nas long as one occurs eventually. This commit removes the inline reroute from\nthe process of starting a shard and replaces it with a deferred one that runs\nat `NORMAL` priority.  avoiding starvation of higher-priority tasks.\n\nThis may improve some of the situations related to #42738 and #42105.\n\n* Specific test case for followup priority setting\n\nWe cannot set the priority in all InternalTestClusters because the deprecation\nwarning makes some tests unhappy. This commit adds a specific test instead.\n\n* Checkstyle\n\n* Cluster state always changed here\n\n* Assert consistency of routing nodes\n\n* Restrict setting only to reasonable priorities\n","date":"2019-07-18 13:39:24","modifiedFileCount":"60","status":"M","submitter":"David Turner"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testSingleIndexStartedShard() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metadata.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metadata(metadata).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and performing rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Rerouting again, nothing should change\");\n        clusterState = ClusterState.builder(clusterState).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        logger.info(\"Marking the shard as started\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = startInitializingShardsAndReroute(strategy, clusterState, routingNodes.node(\"node1\"));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Starting another node and making sure nothing changed\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node2\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Killing node1 where the shard is, checking the shard is unassigned\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(\"node1\")).build();\n        newState = strategy.disassociateDeadNodes(clusterState, true, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Bring node1 back, and see it's assinged\");\n\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node1\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n\n        logger.info(\"Start another node, make sure that things remain the same (shard is in node2 and initializing)\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node3\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n\n        logger.info(\"Start the shard on node 1\");\n        routingNodes = clusterState.getRoutingNodes();\n        newState = startInitializingShardsAndReroute(strategy, clusterState, routingNodes.node(\"node1\"));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":162,"groupId":"102184","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleIndexStartedShard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/29/130d3f6ae40545d5a779484fd02864cf26f12c.src","preCode":"    public void testSingleIndexStartedShard() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder().addAsNew(metaData.index(\"test\")).build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and performing rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Rerouting again, nothing should change\");\n        clusterState = ClusterState.builder(clusterState).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        logger.info(\"Marking the shard as started\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = startInitializingShardsAndReroute(strategy, clusterState, routingNodes.node(\"node1\"));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Starting another node and making sure nothing changed\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node2\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Killing node1 where the shard is, checking the shard is unassigned\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(\"node1\")).build();\n        newState = strategy.disassociateDeadNodes(clusterState, true, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Bring node1 back, and see it's assinged\");\n\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node1\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n\n        logger.info(\"Start another node, make sure that things remain the same (shard is in node2 and initializing)\");\n        clusterState = ClusterState.builder(clusterState)\n            .nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(\"node3\"))).build();\n        newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, equalTo(clusterState));\n\n        logger.info(\"Start the shard on node 1\");\n        routingNodes = clusterState.getRoutingNodes();\n        newState = startInitializingShardsAndReroute(strategy, clusterState, routingNodes.node(\"node1\"));\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testSingleIndexShardFailed() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable.Builder routingTableBuilder = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"));\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metadata(metadata).routingTable(routingTableBuilder.build()).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).unassigned(), equalTo(false));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Marking the shard as failed\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyFailedShard(clusterState,\n            routingNodes.node(\"node1\").shardsWithState(INITIALIZING).get(0), randomBoolean());\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n    }\n","date":"2020-04-01 03:52:01","endLine":211,"groupId":"102184","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleIndexShardFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/29/130d3f6ae40545d5a779484fd02864cf26f12c.src","preCode":"    public void testSingleIndexShardFailed() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n            .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10).build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))\n                .build();\n\n        RoutingTable.Builder routingTableBuilder = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"));\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTableBuilder.build()).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n\n        logger.info(\"Adding one node and rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\"))).build();\n        ClusterState newState = strategy.reroute(clusterState, \"reroute\");\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).unassigned(), equalTo(false));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(INITIALIZING));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), equalTo(\"node1\"));\n\n        logger.info(\"Marking the shard as failed\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        newState = strategy.applyFailedShard(clusterState,\n            routingNodes.node(\"node1\").shardsWithState(INITIALIZING).get(0), randomBoolean());\n        assertThat(newState, not(equalTo(clusterState)));\n        clusterState = newState;\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().size(), equalTo(1));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).state(), equalTo(UNASSIGNED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).shards().get(0).currentNodeId(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/SingleShardNoReplicasRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
