[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testByteRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.BYTE);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, null));\n    }\n","date":"2018-04-26 03:22:53","endLine":208,"groupId":"31735","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testByteRangeQueryWithDecimalParts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/fe48fe70af6e72491511534608b5d5048f2259.src","preCode":"    public void testByteRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.BYTE);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testIntegerRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.INTEGER);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, null));\n    }\n","date":"2018-04-26 03:22:53","endLine":236,"groupId":"31735","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerRangeQueryWithDecimalParts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/fe48fe70af6e72491511534608b5d5048f2259.src","preCode":"    public void testIntegerRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.INTEGER);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-05-14 02:34:54","codes":[{"authorDate":"2020-05-14 02:34:54","commitOrder":2,"curCode":"    public void testByteRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.BYTE);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_QSC));\n    }\n","date":"2020-05-14 02:34:54","endLine":232,"groupId":"35502","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testByteRangeQueryWithDecimalParts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/4c7ddc2931389e5caed12c4b74c35b30da0a8d.src","preCode":"    public void testByteRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.BYTE);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2020-05-14 02:34:54","commitOrder":2,"curCode":"    public void testIntegerRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.INTEGER);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_QSC));\n    }\n","date":"2020-05-14 02:34:54","endLine":260,"groupId":"35502","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerRangeQueryWithDecimalParts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/4c7ddc2931389e5caed12c4b74c35b30da0a8d.src","preCode":"    public void testIntegerRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.INTEGER);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, null));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, null),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"7b34e22890e15b7480689b216c48487c87385978","commitMessage":"@@@Use index sort range query when possible. (#56657)\n\nThis PR proposes to use `IndexSortSortedNumericDocValuesRangeQuery` when possible to speed up certain range queries. Points-based queries are already very efficient.  the only time this query makes a difference is when the range matches a large number of documents.\n\nSome notes:\n* The optimization is only applied for fields of type `date`.  `integer`.  and `long`. I found that the query implementation isn't yet suited for `double` or `float` types (I will follow up with a Lucene issue).\n* Before applying the query.  we check that the index is sorted on the query field. This isn't strictly necessary.  since the query itself checks this as part of its execution. But it seemed nice to avoid wrapping the query unnecessarily -- it makes debugging easier.  like when reading search profile results.\n\nBelow are benchmark results on the http-logs dataset. The following ranges were run against the `logs-241998` index:\n\nrange-small (897633930.  897655999]: ~2M docs\nrange-medium (897623930.  897655999]: ~5M docs\nrange-large (897259801.  897503930]: ~21M docs\n\n```\n| 50th percentile service time |  range-small |     11.0228 |     8.19478 | -2.82797 |     ms |\n| 95th percentile service time |  range-small |     11.8153 |     9.06257 | -2.75274 |     ms |\n| 50th percentile service time | range-medium |     22.8912 |     7.23264 | -15.6585 |     ms |\n| 95th percentile service time | range-medium |     25.0957 |     7.93246 | -17.1632 |     ms |\n| 50th percentile service time |  range-large |     39.7224 |     6.34589 | -33.3765 |     ms |\n| 95th percentile service time |  range-large |     43.9104 |     7.06604 | -36.8444 |     ms |\n```\n\nRelates to #48665.","date":"2020-05-14 02:34:54","modifiedFileCount":"12","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testByteRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(\"field\", NumberType.BYTE);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_QSC));\n    }\n","date":"2020-06-16 00:47:15","endLine":214,"groupId":"35502","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testByteRangeQueryWithDecimalParts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/40/7fdca4d3b51201570ce432729af814564473de.src","preCode":"    public void testByteRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.BYTE);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_QSC));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testIntegerRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(\"field\", NumberType.INTEGER);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_QSC));\n    }\n","date":"2020-06-16 00:47:15","endLine":238,"groupId":"35502","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerRangeQueryWithDecimalParts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/40/7fdca4d3b51201570ce432729af814564473de.src","preCode":"    public void testIntegerRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.INTEGER);\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_QSC));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testByteRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(\"field\", NumberType.BYTE);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_CONTEXT),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_CONTEXT));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_CONTEXT),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_CONTEXT));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_CONTEXT),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_CONTEXT));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_CONTEXT),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_CONTEXT));\n    }\n","date":"2021-01-15 01:11:59","endLine":215,"groupId":"103040","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testByteRangeQueryWithDecimalParts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/70fade8595ff13783ec700a2a689f39192f3cf.src","preCode":"    public void testByteRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(\"field\", NumberType.BYTE);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_QSC));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testIntegerRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(\"field\", NumberType.INTEGER);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_CONTEXT),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_CONTEXT));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_CONTEXT),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_CONTEXT));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_CONTEXT),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_CONTEXT));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_CONTEXT),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_CONTEXT));\n    }\n","date":"2021-01-15 01:11:59","endLine":239,"groupId":"103040","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIntegerRangeQueryWithDecimalParts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/70fade8595ff13783ec700a2a689f39192f3cf.src","preCode":"    public void testIntegerRangeQueryWithDecimalParts() {\n        MappedFieldType ft = new NumberFieldMapper.NumberFieldType(\"field\", NumberType.INTEGER);\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(2, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1.1, 10, false, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, true, null, null, null, MOCK_QSC));\n        assertEquals(ft.rangeQuery(1, 10, true, true, null, null, null, MOCK_QSC),\n                ft.rangeQuery(1, 10.1, true, false, null, null, null, MOCK_QSC));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
