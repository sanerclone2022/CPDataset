[{"authorTime":"2020-04-22 23:35:17","codes":[{"authorDate":"2020-04-22 23:35:17","commitOrder":1,"curCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            ParseField parseField) {\n\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            int position = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(position, v), namedObjectParser, parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser, parseField);\n        }\n    }\n","date":"2020-04-22 23:35:17","endLine":284,"groupId":"1341","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"declareNamedObjects","params":"(BiConsumer<Value@List<T>>consumer@NamedObjectParser<T@Context>namedObjectParser@ParseFieldparseField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/4851b91738f3435417fe2e0d5aadde8de69107.src","preCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            ParseField parseField) {\n\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            int position = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(position, v), namedObjectParser, parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser, parseField);\n        }\n    }\n","realPath":"libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"B"},{"authorDate":"2020-04-22 23:35:17","commitOrder":1,"curCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            Consumer<Value> orderedModeCallback, ParseField parseField) {\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (orderedModeCallback == null) {\n            throw new IllegalArgumentException(\"[orderedModeCallback] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            int position = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(position, v), namedObjectParser,\n                    wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser,\n                    wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        }\n    }\n","date":"2020-04-22 23:35:17","endLine":318,"groupId":"1342","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"declareNamedObjects","params":"(BiConsumer<Value@List<T>>consumer@NamedObjectParser<T@Context>namedObjectParser@Consumer<Value>orderedModeCallback@ParseFieldparseField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/4851b91738f3435417fe2e0d5aadde8de69107.src","preCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            Consumer<Value> orderedModeCallback, ParseField parseField) {\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (orderedModeCallback == null) {\n            throw new IllegalArgumentException(\"[orderedModeCallback] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            int position = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(position, v), namedObjectParser,\n                    wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser,\n                    wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        }\n    }\n","realPath":"libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"B"}],"commitId":"38bc1f9222709e267552742d52e39c6514f8b97f","commitMessage":"@@@Add InstantiatingObjectParser (#55483)\n\nIntroduces InstantiatingObjectParser which is similar to the\nConstructingObjectParser.  but instantiates the object using its constructor\ninstead of a builder function.\n\nCloses #52499","date":"2020-04-22 23:35:17","modifiedFileCount":"4","status":"B","submitter":"Igor Motov"},{"authorTime":"2021-02-16 18:33:11","codes":[{"authorDate":"2021-02-16 18:33:11","commitOrder":2,"curCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            ParseField parseField) {\n\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            Map<RestApiCompatibleVersion, Integer> positions = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(positions, v), namedObjectParser, parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser, parseField);\n        }\n    }\n","date":"2021-02-16 18:33:11","endLine":279,"groupId":"10165","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"declareNamedObjects","params":"(BiConsumer<Value@List<T>>consumer@NamedObjectParser<T@Context>namedObjectParser@ParseFieldparseField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f7/c18ec73514ea83c36d2f8a7c303b79d6eb38ac.src","preCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            ParseField parseField) {\n\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            int position = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(position, v), namedObjectParser, parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser, parseField);\n        }\n    }\n","realPath":"libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2021-02-16 18:33:11","commitOrder":2,"curCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            Consumer<Value> orderedModeCallback, ParseField parseField) {\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (orderedModeCallback == null) {\n            throw new IllegalArgumentException(\"[orderedModeCallback] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            Map<RestApiCompatibleVersion, Integer> positions = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(positions, v), namedObjectParser,\n                wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser,\n                wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        }\n    }\n","date":"2021-02-16 18:33:11","endLine":313,"groupId":"10166","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"declareNamedObjects","params":"(BiConsumer<Value@List<T>>consumer@NamedObjectParser<T@Context>namedObjectParser@Consumer<Value>orderedModeCallback@ParseFieldparseField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f7/c18ec73514ea83c36d2f8a7c303b79d6eb38ac.src","preCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            Consumer<Value> orderedModeCallback, ParseField parseField) {\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (orderedModeCallback == null) {\n            throw new IllegalArgumentException(\"[orderedModeCallback] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            int position = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(position, v), namedObjectParser,\n                    wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser,\n                    wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        }\n    }\n","realPath":"libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"f22adc47d8300ea7487480754611b93e4ffb2d7c","commitMessage":"@@@Refactor ObjectParser and CompatibleObjectParser to support REST Compatible API (#68808)\n\nIn order to support compatible fields when parsing XContent additional information has to be set during ParsedField declaration.\nThis commit adds a set of RestApiCompatibleVersion on a ParsedField in order to specify on which versions a field is supported. By default ParsedField is allowed to be parsed on both current and previous major versions.\n\nObjectParser - which is used for constructing objects using 'setters' - has a modified fieldParsersMap to be Map of Maps. with key being RestApiCompatibility. This allows to choose set of field-parsers as specified on a request.\nUnder RestApiCompatibility.minimumSupported key.  there is a map that contains field-parsers for both previous and current versions.\nUnder RestApiCompatibility.current there will be only current versions field (compatible fields not a present)\n\nConstructingObjectParser - which is used for constructing objects using 'constructors' - is modified to contain a map of Version To constructorArgInfo .  declarations of fields to be set on a constructor depending on a version\n\nrelates #51816","date":"2021-02-16 18:33:11","modifiedFileCount":"7","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-03-04 01:17:48","codes":[{"authorDate":"2021-03-04 01:17:48","commitOrder":3,"curCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            ParseField parseField) {\n\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            Map<RestApiVersion, Integer> positions = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(positions, v), namedObjectParser, parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser, parseField);\n        }\n    }\n","date":"2021-03-04 01:17:48","endLine":279,"groupId":"111757","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"declareNamedObjects","params":"(BiConsumer<Value@List<T>>consumer@NamedObjectParser<T@Context>namedObjectParser@ParseFieldparseField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/40adff188a53a5e62a0d3ca11405eb5de1dd97.src","preCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            ParseField parseField) {\n\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            Map<RestApiCompatibleVersion, Integer> positions = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(positions, v), namedObjectParser, parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser, parseField);\n        }\n    }\n","realPath":"libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2021-03-04 01:17:48","commitOrder":3,"curCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            Consumer<Value> orderedModeCallback, ParseField parseField) {\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (orderedModeCallback == null) {\n            throw new IllegalArgumentException(\"[orderedModeCallback] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            Map<RestApiVersion, Integer> positions = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(positions, v), namedObjectParser,\n                wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser,\n                wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        }\n    }\n","date":"2021-03-04 01:17:48","endLine":313,"groupId":"111757","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"declareNamedObjects","params":"(BiConsumer<Value@List<T>>consumer@NamedObjectParser<T@Context>namedObjectParser@Consumer<Value>orderedModeCallback@ParseFieldparseField)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/40adff188a53a5e62a0d3ca11405eb5de1dd97.src","preCode":"    public <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,\n            Consumer<Value> orderedModeCallback, ParseField parseField) {\n        if (consumer == null) {\n            throw new IllegalArgumentException(\"[consumer] is required\");\n        }\n        if (namedObjectParser == null) {\n            throw new IllegalArgumentException(\"[parser] is required\");\n        }\n        if (orderedModeCallback == null) {\n            throw new IllegalArgumentException(\"[orderedModeCallback] is required\");\n        }\n        if (parseField == null) {\n            throw new IllegalArgumentException(\"[parseField] is required\");\n        }\n\n        if (isConstructorArg(consumer)) {\n            \r\n\r\n\r\n\r\n\r\n\r\n\n            Map<RestApiCompatibleVersion, Integer> positions = addConstructorArg(consumer, parseField);\n            objectParser.declareNamedObjects((target, v) -> target.constructorArg(positions, v), namedObjectParser,\n                wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        } else {\n            numberOfFields += 1;\n            objectParser.declareNamedObjects(queueingConsumer(consumer, parseField), namedObjectParser,\n                wrapOrderedModeCallBack(orderedModeCallback), parseField);\n        }\n    }\n","realPath":"libs/x-content/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"638735bbb9612504bd665ddb0ec91d9eafee93a7","commitMessage":"@@@Rename RestApiCompatibleVersion to RestApiVersion (#69897)\n\n","date":"2021-03-04 01:17:48","modifiedFileCount":"36","status":"M","submitter":"Joe Gallo"}]
