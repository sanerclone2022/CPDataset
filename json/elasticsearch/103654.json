[{"authorTime":"2019-04-17 19:49:04","codes":[{"authorDate":"2019-04-17 19:49:04","commitOrder":1,"curCode":"    public void testCloseOnOutstandingTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            while (shouldRun.get());\n        });\n        node.close();\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","date":"2019-04-17 19:49:04","endLine":162,"groupId":"41408","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseOnOutstandingTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/0419421b86825b7f51103ebfb0b88ec1fcec16.src","preCode":"    public void testCloseOnOutstandingTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            while (shouldRun.get());\n        });\n        node.close();\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"B"},{"authorDate":"2019-04-17 19:49:04","commitOrder":1,"curCode":"    public void testAwaitCloseTimeoutsOnNonInterruptibleTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            while (shouldRun.get());\n        });\n        node.close();\n        assertFalse(node.awaitClose(0, TimeUnit.MILLISECONDS));\n        shouldRun.set(false);\n    }\n","date":"2019-04-17 19:49:04","endLine":175,"groupId":"41408","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAwaitCloseTimeoutsOnNonInterruptibleTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/0419421b86825b7f51103ebfb0b88ec1fcec16.src","preCode":"    public void testAwaitCloseTimeoutsOnNonInterruptibleTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            while (shouldRun.get());\n        });\n        node.close();\n        assertFalse(node.awaitClose(0, TimeUnit.MILLISECONDS));\n        shouldRun.set(false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"}],"commitId":"d706b40c638b3e29357617982e92c7b68391afa8","commitMessage":"@@@Clean up Node#close. (#39317)\n\n`Node#close` is pretty hard to rely on today:\n - it might swallow exceptions\n - it waits for 10 seconds for threads to terminate but doesn't signal anything\n   if threads are still not terminated after 10 seconds\n\nThis commit makes `IOException`s propagated and splits `Node#close` into\n`Node#close` and `Node#awaitClose` so that the decision what to do if a node\ntakes too long to close can be done on top of `Node#close`.\n\nIt also adds synchronization to lifecycle transitions to make them atomic. I\ndon't think it is a source of problems today.  but it makes things easier to\nreason about.","date":"2019-04-17 19:49:04","modifiedFileCount":"14","status":"B","submitter":"Adrien Grand"},{"authorTime":"2019-06-15 02:29:43","codes":[{"authorDate":"2019-06-15 02:29:43","commitOrder":2,"curCode":"    public void testCloseOnOutstandingTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","date":"2019-06-15 02:29:43","endLine":165,"groupId":"28678","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseOnOutstandingTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/7f4eb13eeea7c66e0e834fb4fedbebec218839.src","preCode":"    public void testCloseOnOutstandingTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            while (shouldRun.get());\n        });\n        node.close();\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2019-06-15 02:29:43","commitOrder":2,"curCode":"    public void testAwaitCloseTimeoutsOnNonInterruptibleTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        assertFalse(node.awaitClose(0, TimeUnit.MILLISECONDS));\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","date":"2019-06-15 02:29:43","endLine":225,"groupId":"28678","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAwaitCloseTimeoutsOnNonInterruptibleTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/7f4eb13eeea7c66e0e834fb4fedbebec218839.src","preCode":"    public void testAwaitCloseTimeoutsOnNonInterruptibleTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            while (shouldRun.get());\n        });\n        node.close();\n        assertFalse(node.awaitClose(0, TimeUnit.MILLISECONDS));\n        shouldRun.set(false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"7870ae2f16f38514d0bcc93ed22031e87f69785d","commitMessage":"@@@Ensure threads running before closing node (#43240)\n\nThere are a few tests within NodeTests that submit items to the\nthreadpool and then close the node. The tests are designed to check\nhow running tasks are affected during node close. These tests can cause\nCI failures since the submitted tasks may not be running when the node\nis closed and then execute after the thread context is closed.  which\ntriggers an unexpected exception. This change ensures the threads are\nrunning so we avoid the unexpected exception and can test these cases.\n\nThe test of task submittal while a node is closing is also important so\nan additional but muted test has been added that tests the case where a\ntask may be getting submitted while the node is closing and ensuring we\ndo not trigger anything unexpected in these cases.\n\nRelates #42774\nRelates #42577","date":"2019-06-15 02:29:43","modifiedFileCount":"1","status":"M","submitter":"Jay Modi"},{"authorTime":"2019-06-15 02:29:43","codes":[{"authorDate":"2019-07-22 15:48:17","commitOrder":3,"curCode":"    public void testCloseOnOutstandingTask() throws Exception {\n        assumeFalse(\"https://github.com/elastic/elasticsearch/issues/44256\", Constants.WINDOWS);\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","date":"2019-07-22 15:48:17","endLine":167,"groupId":"28678","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseOnOutstandingTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/06e557975eabf344a6d0c03275b34d8429eeba.src","preCode":"    public void testCloseOnOutstandingTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"},{"authorDate":"2019-06-15 02:29:43","commitOrder":3,"curCode":"    public void testAwaitCloseTimeoutsOnNonInterruptibleTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        assertFalse(node.awaitClose(0, TimeUnit.MILLISECONDS));\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","date":"2019-06-15 02:29:43","endLine":225,"groupId":"28678","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAwaitCloseTimeoutsOnNonInterruptibleTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/7f4eb13eeea7c66e0e834fb4fedbebec218839.src","preCode":"    public void testAwaitCloseTimeoutsOnNonInterruptibleTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        assertFalse(node.awaitClose(0, TimeUnit.MILLISECONDS));\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"3febe78e8e1d76843e73b9396b21f7c46edd3e53","commitMessage":"@@@Mute multiple tests on Windows (master) (#44675)\n\n* Mute failing test\n\ntracked in #44552\n\n* mute EvilSecurityTests\n\ntracking in #44558\n\n* Fix line endings in ESJsonLayoutTests\n\n* Mute failing ForecastIT  test on windows\n\nTracking in #44609\n\n* mute AutoFollowIT.testConflictingPatterns\n\ntracking in #44610\n\n* mute BasicRenormalizationIT.testDefaultRenormalization\n\ntracked in #44613\n\n* Revert \"mute AutoFollowIT.testConflictingPatterns\"\n\nThis reverts commit 012de08f59a26c2216297ffea1589c55d5b6ddc9.\n\n* mute x-pack internal cluster test windows\n\ntracking #44610\n\n* Mute failure unconfigured node name\n\n* fix mute testDefaultRenormalization\n\n* Increase busyWait timeout windows is slow\n\n* Mute JvmErgonomicsTests on windows\n\nTracking #44669\n\n* mute SharedClusterSnapshotRestoreIT testParallelRestoreOperationsFromSingleSnapshot\n\nTracking #44671\n\n* Mute NodeTests on Windows\n\nTracking #44256\n","date":"2019-07-22 15:48:17","modifiedFileCount":"9","status":"M","submitter":"Alpar Torok"},{"authorTime":"2019-11-23 02:58:57","codes":[{"authorDate":"2019-11-23 02:58:57","commitOrder":4,"curCode":"    public void testCloseOnOutstandingTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(10L, TimeUnit.SECONDS));\n    }\n","date":"2019-11-23 02:58:57","endLine":166,"groupId":"103654","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseOnOutstandingTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/dc59b7ff8287cdab071c5404ece215356a62f3.src","preCode":"    public void testCloseOnOutstandingTask() throws Exception {\n        assumeFalse(\"https://github.com/elastic/elasticsearch/issues/44256\", Constants.WINDOWS);\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"},{"authorDate":"2019-11-23 02:58:57","commitOrder":4,"curCode":"    public void testAwaitCloseTimeoutsOnNonInterruptibleTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        assertFalse(node.awaitClose(0, TimeUnit.MILLISECONDS));\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(10L, TimeUnit.SECONDS));\n    }\n","date":"2019-11-23 02:58:57","endLine":229,"groupId":"103654","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAwaitCloseTimeoutsOnNonInterruptibleTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/dc59b7ff8287cdab071c5404ece215356a62f3.src","preCode":"    public void testAwaitCloseTimeoutsOnNonInterruptibleTask() throws Exception {\n        Node node = new MockNode(baseSettings().build(), basePlugins());\n        node.start();\n        ThreadPool threadpool = node.injector().getInstance(ThreadPool.class);\n        AtomicBoolean shouldRun = new AtomicBoolean(true);\n        final CountDownLatch threadRunning = new CountDownLatch(1);\n        threadpool.executor(ThreadPool.Names.SEARCH).execute(() -> {\n            threadRunning.countDown();\n            while (shouldRun.get());\n        });\n        threadRunning.await();\n        node.close();\n        assertFalse(node.awaitClose(0, TimeUnit.MILLISECONDS));\n        shouldRun.set(false);\n        assertTrue(node.awaitClose(1, TimeUnit.DAYS));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"3b925721d0d97c1cd3b0738746e98107565925d8","commitMessage":"@@@Stop NodeTests from timing out in certain cases (#49202)\n\nThe NodeTests class contains tests that check behavior when shutting\ndown a node. This involves starting a node.  performing some operation. \nstopping the node.  and then awaiting the close of the node. Part of\nclosing a node is the termination of the node's ThreadPool. ThreadPool\ntermination semantics can be deceiving. The ThreadPool#terminate method\ntakes a timeout value and the first oddity is that the terminate method\ncan take two times the timeout value before returning. Internally this\nmethod acts on the ExecutorService instances that are held by the\nThreadPool. First.  an orderly shutdown is attempted and pending tasks\nare allowed to execute while waiting for the timeout value. If any of\nthe ExecutorService instances have not terminated.  a call is made to\nattempt to stop all active tasks (usually using interrupts) and then\nwaits for up to the timeout value a second time for the termination of\nthe ExecutorService instances. This means that if use a large value\nwhen waiting for a node to close.  we may not attempt to interrupt any\nthreads that are in a blocking call before the test times out.\n\nIn order to avoid causing these tests to time out.  this change reduces\nthe timeout passed to Node#awaitClose to 10 seconds from 1 day. This\nwill allow blocked threads to be interrupted before the test suite\nfails due to the timeout.\n\nCloses #44256\nCloses #42350\nCloses #44435","date":"2019-11-23 02:58:57","modifiedFileCount":"1","status":"M","submitter":"Jay Modi"}]
