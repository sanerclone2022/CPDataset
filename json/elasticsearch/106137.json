[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testParseXContentForAnalyzeRequest() throws Exception {\n        XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .array(\"filter\", \"lowercase\")\n            .endObject());\n\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n        assertThat(analyzeRequest.text().length, equalTo(1));\n        assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n        assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n        assertThat(analyzeRequest.tokenFilters().size(), equalTo(1));\n        for (AnalyzeRequest.NameOrDefinition filter : analyzeRequest.tokenFilters()) {\n            assertThat(filter.name, equalTo(\"lowercase\"));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":58,"groupId":"63512","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseXContentForAnalyzeRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/66/f0bd796eaef3b444b0819f3f1e40a3f0d79449.src","preCode":"    public void testParseXContentForAnalyzeRequest() throws Exception {\n        XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .array(\"filter\", \"lowercase\")\n            .endObject());\n\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n        assertThat(analyzeRequest.text().length, equalTo(1));\n        assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n        assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n        assertThat(analyzeRequest.tokenFilters().size(), equalTo(1));\n        for (AnalyzeRequest.NameOrDefinition filter : analyzeRequest.tokenFilters()) {\n            assertThat(filter.name, equalTo(\"lowercase\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testParseXContentForAnalyzeRequestWithCustomFilters() throws Exception {\n        XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .startArray(\"filter\")\n                    .value(\"lowercase\")\n                    .startObject()\n                        .field(\"type\", \"stop\")\n                        .array(\"stopwords\", \"foo\", \"buzz\")\n                    .endObject()\n                .endArray()\n                .startArray(\"char_filter\")\n                    .startObject()\n                        .field(\"type\", \"mapping\")\n                        .array(\"mappings\", \"ph => f\", \"qu => q\")\n                    .endObject()\n                .endArray()\n                .field(\"normalizer\", \"normalizer\")\n            .endObject());\n\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n        assertThat(analyzeRequest.text().length, equalTo(1));\n        assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n        assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n        assertThat(analyzeRequest.tokenFilters().size(), equalTo(2));\n        assertThat(analyzeRequest.tokenFilters().get(0).name, equalTo(\"lowercase\"));\n        assertThat(analyzeRequest.tokenFilters().get(1).definition, notNullValue());\n        assertThat(analyzeRequest.charFilters().size(), equalTo(1));\n        assertThat(analyzeRequest.charFilters().get(0).definition, notNullValue());\n        assertThat(analyzeRequest.normalizer(), equalTo(\"normalizer\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":94,"groupId":"63512","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseXContentForAnalyzeRequestWithCustomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/66/f0bd796eaef3b444b0819f3f1e40a3f0d79449.src","preCode":"    public void testParseXContentForAnalyzeRequestWithCustomFilters() throws Exception {\n        XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .startArray(\"filter\")\n                    .value(\"lowercase\")\n                    .startObject()\n                        .field(\"type\", \"stop\")\n                        .array(\"stopwords\", \"foo\", \"buzz\")\n                    .endObject()\n                .endArray()\n                .startArray(\"char_filter\")\n                    .startObject()\n                        .field(\"type\", \"mapping\")\n                        .array(\"mappings\", \"ph => f\", \"qu => q\")\n                    .endObject()\n                .endArray()\n                .field(\"normalizer\", \"normalizer\")\n            .endObject());\n\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n        assertThat(analyzeRequest.text().length, equalTo(1));\n        assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n        assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n        assertThat(analyzeRequest.tokenFilters().size(), equalTo(2));\n        assertThat(analyzeRequest.tokenFilters().get(0).name, equalTo(\"lowercase\"));\n        assertThat(analyzeRequest.tokenFilters().get(1).definition, notNullValue());\n        assertThat(analyzeRequest.charFilters().size(), equalTo(1));\n        assertThat(analyzeRequest.charFilters().get(0).definition, notNullValue());\n        assertThat(analyzeRequest.normalizer(), equalTo(\"normalizer\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-06-25 03:39:56","codes":[{"authorDate":"2018-06-25 03:39:56","commitOrder":2,"curCode":"    public void testParseXContentForAnalyzeRequest() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .array(\"filter\", \"lowercase\")\n            .endObject())) {\n\n            AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n            RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(1));\n            for (AnalyzeRequest.NameOrDefinition filter : analyzeRequest.tokenFilters()) {\n                assertThat(filter.name, equalTo(\"lowercase\"));\n            }\n        }\n    }\n","date":"2018-06-25 16:41:24","endLine":59,"groupId":"63512","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseXContentForAnalyzeRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/40/6e9b1d36c07c409e00d9a219c5d6ad39f68ac1.src","preCode":"    public void testParseXContentForAnalyzeRequest() throws Exception {\n        XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .array(\"filter\", \"lowercase\")\n            .endObject());\n\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n        assertThat(analyzeRequest.text().length, equalTo(1));\n        assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n        assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n        assertThat(analyzeRequest.tokenFilters().size(), equalTo(1));\n        for (AnalyzeRequest.NameOrDefinition filter : analyzeRequest.tokenFilters()) {\n            assertThat(filter.name, equalTo(\"lowercase\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2018-06-25 03:39:56","commitOrder":2,"curCode":"    public void testParseXContentForAnalyzeRequestWithCustomFilters() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .startArray(\"filter\")\n                    .value(\"lowercase\")\n                    .startObject()\n                        .field(\"type\", \"stop\")\n                        .array(\"stopwords\", \"foo\", \"buzz\")\n                    .endObject()\n                .endArray()\n                .startArray(\"char_filter\")\n                    .startObject()\n                        .field(\"type\", \"mapping\")\n                        .array(\"mappings\", \"ph => f\", \"qu => q\")\n                    .endObject()\n                .endArray()\n                .field(\"normalizer\", \"normalizer\")\n            .endObject())) {\n\n            AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n            RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(2));\n            assertThat(analyzeRequest.tokenFilters().get(0).name, equalTo(\"lowercase\"));\n            assertThat(analyzeRequest.tokenFilters().get(1).definition, notNullValue());\n            assertThat(analyzeRequest.charFilters().size(), equalTo(1));\n            assertThat(analyzeRequest.charFilters().get(0).definition, notNullValue());\n            assertThat(analyzeRequest.normalizer(), equalTo(\"normalizer\"));\n        }\n    }\n","date":"2018-06-25 16:41:24","endLine":96,"groupId":"63512","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseXContentForAnalyzeRequestWithCustomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/40/6e9b1d36c07c409e00d9a219c5d6ad39f68ac1.src","preCode":"    public void testParseXContentForAnalyzeRequestWithCustomFilters() throws Exception {\n        XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .startArray(\"filter\")\n                    .value(\"lowercase\")\n                    .startObject()\n                        .field(\"type\", \"stop\")\n                        .array(\"stopwords\", \"foo\", \"buzz\")\n                    .endObject()\n                .endArray()\n                .startArray(\"char_filter\")\n                    .startObject()\n                        .field(\"type\", \"mapping\")\n                        .array(\"mappings\", \"ph => f\", \"qu => q\")\n                    .endObject()\n                .endArray()\n                .field(\"normalizer\", \"normalizer\")\n            .endObject());\n\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n        assertThat(analyzeRequest.text().length, equalTo(1));\n        assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n        assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n        assertThat(analyzeRequest.tokenFilters().size(), equalTo(2));\n        assertThat(analyzeRequest.tokenFilters().get(0).name, equalTo(\"lowercase\"));\n        assertThat(analyzeRequest.tokenFilters().get(1).definition, notNullValue());\n        assertThat(analyzeRequest.charFilters().size(), equalTo(1));\n        assertThat(analyzeRequest.charFilters().get(0).definition, notNullValue());\n        assertThat(analyzeRequest.normalizer(), equalTo(\"normalizer\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"e6dc01d2b7d36b6d2a6aa11289afb70c9568c986","commitMessage":"@@@Close xcontent parsers (partial) (#31513)\n\nPartial pass at closing XContentParsers in server.  This mostly involved adding try-with-resources statements around the usage of XContentParsers.","date":"2018-06-25 16:41:24","modifiedFileCount":"53","status":"M","submitter":"Tom Callahan"},{"authorTime":"2019-06-03 16:16:54","codes":[{"authorDate":"2019-06-03 16:16:54","commitOrder":3,"curCode":"    public void testParseXContentForAnalyzeRequest() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .array(\"filter\", \"lowercase\")\n            .endObject())) {\n\n            AnalyzeAction.Request analyzeRequest = AnalyzeAction.Request.fromXContent(content, \"for test\");\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(1));\n            for (AnalyzeAction.Request.NameOrDefinition filter : analyzeRequest.tokenFilters()) {\n                assertThat(filter.name, equalTo(\"lowercase\"));\n            }\n        }\n    }\n","date":"2019-06-03 16:16:54","endLine":59,"groupId":"63512","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseXContentForAnalyzeRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/d79b3ae0c47068a38d82498746e17936b38565.src","preCode":"    public void testParseXContentForAnalyzeRequest() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .array(\"filter\", \"lowercase\")\n            .endObject())) {\n\n            AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n            RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(1));\n            for (AnalyzeRequest.NameOrDefinition filter : analyzeRequest.tokenFilters()) {\n                assertThat(filter.name, equalTo(\"lowercase\"));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2019-06-03 16:16:54","commitOrder":3,"curCode":"    public void testParseXContentForAnalyzeRequestWithCustomFilters() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .startArray(\"filter\")\n                    .value(\"lowercase\")\n                    .startObject()\n                        .field(\"type\", \"stop\")\n                        .array(\"stopwords\", \"foo\", \"buzz\")\n                    .endObject()\n                .endArray()\n                .startArray(\"char_filter\")\n                    .startObject()\n                        .field(\"type\", \"mapping\")\n                        .array(\"mappings\", \"ph => f\", \"qu => q\")\n                    .endObject()\n                .endArray()\n                .field(\"normalizer\", \"normalizer\")\n            .endObject())) {\n\n            AnalyzeAction.Request analyzeRequest = AnalyzeAction.Request.fromXContent(content, \"for test\");\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(2));\n            assertThat(analyzeRequest.tokenFilters().get(0).name, equalTo(\"lowercase\"));\n            assertThat(analyzeRequest.tokenFilters().get(1).definition, notNullValue());\n            assertThat(analyzeRequest.charFilters().size(), equalTo(1));\n            assertThat(analyzeRequest.charFilters().get(0).definition, notNullValue());\n            assertThat(analyzeRequest.normalizer(), equalTo(\"normalizer\"));\n        }\n    }\n","date":"2019-06-03 16:16:54","endLine":94,"groupId":"70038","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseXContentForAnalyzeRequestWithCustomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/d79b3ae0c47068a38d82498746e17936b38565.src","preCode":"    public void testParseXContentForAnalyzeRequestWithCustomFilters() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .startArray(\"filter\")\n                    .value(\"lowercase\")\n                    .startObject()\n                        .field(\"type\", \"stop\")\n                        .array(\"stopwords\", \"foo\", \"buzz\")\n                    .endObject()\n                .endArray()\n                .startArray(\"char_filter\")\n                    .startObject()\n                        .field(\"type\", \"mapping\")\n                        .array(\"mappings\", \"ph => f\", \"qu => q\")\n                    .endObject()\n                .endArray()\n                .field(\"normalizer\", \"normalizer\")\n            .endObject())) {\n\n            AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n            RestAnalyzeAction.buildFromContent(content, analyzeRequest);\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(2));\n            assertThat(analyzeRequest.tokenFilters().get(0).name, equalTo(\"lowercase\"));\n            assertThat(analyzeRequest.tokenFilters().get(1).definition, notNullValue());\n            assertThat(analyzeRequest.charFilters().size(), equalTo(1));\n            assertThat(analyzeRequest.charFilters().get(0).definition, notNullValue());\n            assertThat(analyzeRequest.normalizer(), equalTo(\"normalizer\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"17581f2f6f52369b93d15fa534ce9c1fa6d0846a","commitMessage":"@@@Create client-only AnalyzeRequest/AnalyzeResponse classes (#42197)\n\nThis commit clones the existing AnalyzeRequest/AnalyzeResponse classes\nto the high-level rest client.  and adjusts request converters to use these new\nclasses.\n\nThis is a prerequisite to removing the Streamable interface from the internal\nserver version of these classes.","date":"2019-06-03 16:16:54","modifiedFileCount":"21","status":"M","submitter":"Alan Woodward"},{"authorTime":"2019-06-03 16:16:54","codes":[{"authorDate":"2019-06-10 17:26:15","commitOrder":4,"curCode":"    public void testParseXContentForAnalyzeRequest() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .array(\"filter\", \"lowercase\")\n            .endObject())) {\n\n            AnalyzeAction.Request analyzeRequest = AnalyzeAction.Request.fromXContent(content, \"for test\");\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(1));\n            for (NameOrDefinition filter : analyzeRequest.tokenFilters()) {\n                assertThat(filter.name, equalTo(\"lowercase\"));\n            }\n        }\n    }\n","date":"2019-06-10 17:26:15","endLine":60,"groupId":"106137","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseXContentForAnalyzeRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/70/e8903b0c3f80efb5ab64c2d0a732c40466f77d.src","preCode":"    public void testParseXContentForAnalyzeRequest() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .array(\"filter\", \"lowercase\")\n            .endObject())) {\n\n            AnalyzeAction.Request analyzeRequest = AnalyzeAction.Request.fromXContent(content, \"for test\");\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(1));\n            for (AnalyzeAction.Request.NameOrDefinition filter : analyzeRequest.tokenFilters()) {\n                assertThat(filter.name, equalTo(\"lowercase\"));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2019-06-03 16:16:54","commitOrder":4,"curCode":"    public void testParseXContentForAnalyzeRequestWithCustomFilters() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .startArray(\"filter\")\n                    .value(\"lowercase\")\n                    .startObject()\n                        .field(\"type\", \"stop\")\n                        .array(\"stopwords\", \"foo\", \"buzz\")\n                    .endObject()\n                .endArray()\n                .startArray(\"char_filter\")\n                    .startObject()\n                        .field(\"type\", \"mapping\")\n                        .array(\"mappings\", \"ph => f\", \"qu => q\")\n                    .endObject()\n                .endArray()\n                .field(\"normalizer\", \"normalizer\")\n            .endObject())) {\n\n            AnalyzeAction.Request analyzeRequest = AnalyzeAction.Request.fromXContent(content, \"for test\");\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(2));\n            assertThat(analyzeRequest.tokenFilters().get(0).name, equalTo(\"lowercase\"));\n            assertThat(analyzeRequest.tokenFilters().get(1).definition, notNullValue());\n            assertThat(analyzeRequest.charFilters().size(), equalTo(1));\n            assertThat(analyzeRequest.charFilters().get(0).definition, notNullValue());\n            assertThat(analyzeRequest.normalizer(), equalTo(\"normalizer\"));\n        }\n    }\n","date":"2019-06-03 16:16:54","endLine":94,"groupId":"106137","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseXContentForAnalyzeRequestWithCustomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/d79b3ae0c47068a38d82498746e17936b38565.src","preCode":"    public void testParseXContentForAnalyzeRequestWithCustomFilters() throws Exception {\n        try (XContentParser content = createParser(XContentFactory.jsonBuilder()\n            .startObject()\n                .field(\"text\", \"THIS IS A TEST\")\n                .field(\"tokenizer\", \"keyword\")\n                .startArray(\"filter\")\n                    .value(\"lowercase\")\n                    .startObject()\n                        .field(\"type\", \"stop\")\n                        .array(\"stopwords\", \"foo\", \"buzz\")\n                    .endObject()\n                .endArray()\n                .startArray(\"char_filter\")\n                    .startObject()\n                        .field(\"type\", \"mapping\")\n                        .array(\"mappings\", \"ph => f\", \"qu => q\")\n                    .endObject()\n                .endArray()\n                .field(\"normalizer\", \"normalizer\")\n            .endObject())) {\n\n            AnalyzeAction.Request analyzeRequest = AnalyzeAction.Request.fromXContent(content, \"for test\");\n\n            assertThat(analyzeRequest.text().length, equalTo(1));\n            assertThat(analyzeRequest.text(), equalTo(new String[]{\"THIS IS A TEST\"}));\n            assertThat(analyzeRequest.tokenizer().name, equalTo(\"keyword\"));\n            assertThat(analyzeRequest.tokenFilters().size(), equalTo(2));\n            assertThat(analyzeRequest.tokenFilters().get(0).name, equalTo(\"lowercase\"));\n            assertThat(analyzeRequest.tokenFilters().get(1).definition, notNullValue());\n            assertThat(analyzeRequest.charFilters().size(), equalTo(1));\n            assertThat(analyzeRequest.charFilters().get(0).definition, notNullValue());\n            assertThat(analyzeRequest.normalizer(), equalTo(\"normalizer\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"}],"commitId":"af5e6cad821aef53d5db9bc2646173c68428a5f1","commitMessage":"@@@Move construction of custom analyzers into AnalysisRegistry (#42940)\n\nBoth TransportAnalyzeAction and CategorizationAnalyzer have logic to build\ncustom analyzers for index-independent analysis. A lot of this code is duplicated. \nand it requires the AnalysisRegistry to expose a number of internal provider\nclasses.  as well as making some assumptions about when analysis components are\nconstructed.\n\nThis commit moves the build logic directly into AnalysisRegistry.  reducing the\nregistry's API surface considerably.","date":"2019-06-10 17:26:15","modifiedFileCount":"14","status":"M","submitter":"Alan Woodward"}]
