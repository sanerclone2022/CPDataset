[{"authorTime":"2018-06-05 23:09:02","codes":[{"authorDate":"2018-06-05 23:09:02","commitOrder":2,"curCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicNumericFieldData leafData = (AtomicNumericFieldData) fieldData.load(leaf);\n        MutableDateTime joda = new MutableDateTime(0, DateTimeZone.UTC);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    joda.setMillis(millis);\n                    return function.applyAsInt(joda);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","date":"2018-06-05 23:09:02","endLine":72,"groupId":"37685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/59892a7024fb45ada398a9bf64db5703d1b657.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicNumericFieldData leafData = (AtomicNumericFieldData) fieldData.load(leaf);\n        MutableDateTime joda = new MutableDateTime(0, DateTimeZone.UTC);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    joda.setMillis(millis);\n                    return function.applyAsInt(joda);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateObjectValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"MB"},{"authorDate":"2018-06-05 23:09:02","commitOrder":2,"curCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicNumericFieldData leafData = (AtomicNumericFieldData) fieldData.load(leaf);\n        final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ROOT);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    calendar.setTimeInMillis(millis);\n                    return calendar.get(calendarType);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","date":"2018-06-05 23:09:02","endLine":70,"groupId":"11327","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/845a88fe3f0b83cf9719474837d21a5f19cb20.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicNumericFieldData leafData = (AtomicNumericFieldData) fieldData.load(leaf);\n        final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ROOT);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    calendar.setTimeInMillis(millis);\n                    return calendar.get(calendarType);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateMethodValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"MB"}],"commitId":"6b0008c6686c700c9a9e7afbaf1e5edb8b2fa282","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-05 23:09:02","modifiedFileCount":"58","status":"M","submitter":"Tal Levy"},{"authorTime":"2020-03-17 20:25:51","codes":[{"authorDate":"2020-03-17 20:25:51","commitOrder":3,"curCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        MutableDateTime joda = new MutableDateTime(0, DateTimeZone.UTC);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    joda.setMillis(millis);\n                    return function.applyAsInt(joda);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","date":"2020-03-17 20:25:51","endLine":72,"groupId":"37685","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/f991c174d3003e0c6bbe50cf91243ec504b8fe.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicNumericFieldData leafData = (AtomicNumericFieldData) fieldData.load(leaf);\n        MutableDateTime joda = new MutableDateTime(0, DateTimeZone.UTC);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    joda.setMillis(millis);\n                    return function.applyAsInt(joda);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateObjectValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-03-17 20:25:51","commitOrder":3,"curCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ROOT);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    calendar.setTimeInMillis(millis);\n                    return calendar.get(calendarType);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","date":"2020-03-17 20:25:51","endLine":70,"groupId":"11327","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/8c604a39ba20660270eec0cab4bd8ff8ae3335.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicNumericFieldData leafData = (AtomicNumericFieldData) fieldData.load(leaf);\n        final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ROOT);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    calendar.setTimeInMillis(millis);\n                    return calendar.get(calendarType);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateMethodValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"3e607d9e93c6319fcd606714aabca4af91f133d3","commitMessage":"@@@Rename AtomicFieldData to LeafFieldData (#53554)\n\nThis conforms with lucene's LeafReader naming convention.  and\nmatches other per-segment structures in elasticsearch.","date":"2020-03-17 20:25:51","modifiedFileCount":"59","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-03-23 22:47:42","codes":[{"authorDate":"2020-03-23 22:47:42","commitOrder":4,"curCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        MutableDateTime joda = new MutableDateTime(0, DateTimeZone.UTC);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return DoubleValues.withDefault(new DoubleValues() {\n            @Override\n            public double doubleValue() throws IOException {\n                joda.setMillis((long)docValues.doubleValue());\n                return function.applyAsInt(joda);\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return docValues.advanceExact(doc);\n            }\n        }, 0);\n    }\n","date":"2020-03-23 22:47:42","endLine":69,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(LeafReaderContextleaf@DoubleValuesscores)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d4/9dd6c0a1943f6971f81b295c18c24204edf12f.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        MutableDateTime joda = new MutableDateTime(0, DateTimeZone.UTC);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    joda.setMillis(millis);\n                    return function.applyAsInt(joda);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateObjectValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-03-23 22:47:42","commitOrder":4,"curCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ROOT);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleValues() {\n            @Override\n            public double doubleValue() throws IOException {\n                calendar.setTimeInMillis((long)docValues.doubleValue());\n                return calendar.get(calendarType);\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return docValues.advanceExact(doc);\n            }\n        };\n    }\n","date":"2020-03-23 22:47:42","endLine":67,"groupId":"71936","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(LeafReaderContextleaf@DoubleValuesscores)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/c918e2d2447a109705abffe0a5af0d5fa43c32.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ROOT);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int docId) throws IOException {\n                if (docValues.advanceExact(docId)) {\n                    long millis = (long)docValues.doubleValue();\n                    calendar.setTimeInMillis(millis);\n                    return calendar.get(calendarType);\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateMethodValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"b2a6bd80bcb5533fbf6a605e7294f36b8aca7518","commitMessage":"@@@lang-expressions should use DoubleValuesSource.  not ValueSource (#53661)\n\nDoubleValuesSource is the type-safe replacement for ValueSource in the lucene\ncore. Most of elasticsearch has moved to use these.  but lang-expressions is still\nusing the old version. This commit migrates lang-expressions as well.","date":"2020-03-23 22:47:42","modifiedFileCount":"15","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-03-23 22:47:42","codes":[{"authorDate":"2020-03-31 17:49:26","commitOrder":5,"curCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        MutableDateTime joda = new MutableDateTime(0, DateTimeZone.UTC);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleValues() {\n            @Override\n            public double doubleValue() throws IOException {\n                joda.setMillis((long)docValues.doubleValue());\n                return function.applyAsInt(joda);\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return docValues.advanceExact(doc);\n            }\n        };\n    }\n","date":"2020-03-31 17:49:26","endLine":69,"groupId":"101430","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(LeafReaderContextleaf@DoubleValuesscores)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/027a060b9a35fccd1153a34e5d72a1053999bd.src","preCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        MutableDateTime joda = new MutableDateTime(0, DateTimeZone.UTC);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return DoubleValues.withDefault(new DoubleValues() {\n            @Override\n            public double doubleValue() throws IOException {\n                joda.setMillis((long)docValues.doubleValue());\n                return function.applyAsInt(joda);\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return docValues.advanceExact(doc);\n            }\n        }, 0);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateObjectValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-03-23 22:47:42","commitOrder":5,"curCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ROOT);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleValues() {\n            @Override\n            public double doubleValue() throws IOException {\n                calendar.setTimeInMillis((long)docValues.doubleValue());\n                return calendar.get(calendarType);\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return docValues.advanceExact(doc);\n            }\n        };\n    }\n","date":"2020-03-23 22:47:42","endLine":67,"groupId":"101430","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(LeafReaderContextleaf@DoubleValuesscores)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/c918e2d2447a109705abffe0a5af0d5fa43c32.src","preCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafNumericFieldData leafData = (LeafNumericFieldData) fieldData.load(leaf);\n        final Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"), Locale.ROOT);\n        NumericDoubleValues docValues = multiValueMode.select(leafData.getDoubleValues());\n        return new DoubleValues() {\n            @Override\n            public double doubleValue() throws IOException {\n                calendar.setTimeInMillis((long)docValues.doubleValue());\n                return calendar.get(calendarType);\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return docValues.advanceExact(doc);\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateMethodValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"eeab09891e91f215157649a43effdca6fb380313","commitMessage":"@@@Don't double-wrap values (#54432)\n\nAfter commit #53661 converted the lang-expressions module to using\nDoubleValuesSource.  we've seen a performance regression for expressions\nthat use geopoints. Some investigation suggests that this may be due to\nGeoLatitudeValueSource and GeoLongitudeValueSource wrapping their\nper-document values in a DoubleValues.withDefault() class. Values exposed\nvia expressions already have a '0' default value.  so this extra wrapping is\nunnecessary.  and is directly on the hot path. This commit removes the extra\nwrapping.","date":"2020-03-31 17:49:26","modifiedFileCount":"5","status":"M","submitter":"Alan Woodward"}]
