[{"authorTime":"2019-02-21 05:34:19","codes":[{"authorDate":"2019-02-21 05:34:19","commitOrder":1,"curCode":"    public void testDocCountDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME)\n            .interval(1)\n            .extendedBounds(0L, numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"_count\")\n                .gapPolicy(randomFrom(BucketHelpers.GapPolicy.values()))\n        );\n\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(numBuckets_empty_rnd));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (firstDerivValueCounts_empty_rnd[i] == null) {\n                        assertThat(docCountDeriv, nullValue());\n                    } else {\n                        assertThat(docCountDeriv.value(), equalTo(firstDerivValueCounts_empty_rnd[i]));\n                    }\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n\n                        if (frequently()) {\n                            indexWriter.commit();\n                        }\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","date":"2019-02-21 05:34:19","endLine":426,"groupId":"9866","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDocCountDerivativeWithGaps_random","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/d41bf3dc866b42a8b70e4db13aceaa05f989ab.src","preCode":"    public void testDocCountDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME)\n            .interval(1)\n            .extendedBounds(0L, numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"_count\")\n                .gapPolicy(randomFrom(BucketHelpers.GapPolicy.values()))\n        );\n\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(numBuckets_empty_rnd));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (firstDerivValueCounts_empty_rnd[i] == null) {\n                        assertThat(docCountDeriv, nullValue());\n                    } else {\n                        assertThat(docCountDeriv.value(), equalTo(firstDerivValueCounts_empty_rnd[i]));\n                    }\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n\n                        if (frequently()) {\n                            indexWriter.commit();\n                        }\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":372,"status":"B"},{"authorDate":"2019-02-21 05:34:19","commitOrder":1,"curCode":"    public void testSingleValueAggDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        BucketHelpers.GapPolicy gapPolicy = randomFrom(GapPolicy.values());\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME).interval(1)\n            .extendedBounds(0L, (long) numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(new SumAggregationBuilder(\"sum\").field(SINGLE_VALUED_FIELD_NAME));\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"sum\").gapPolicy(gapPolicy)\n        );\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(valueCounts_empty_rnd.length));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                double lastSumValue = Double.NaN;\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    Sum sum = bucket.getAggregations().get(\"sum\");\n                    double thisSumValue = sum.value();\n                    if (bucket.getDocCount() == 0) {\n                        thisSumValue = gapPolicy == GapPolicy.INSERT_ZEROS ? 0 : Double.NaN;\n                    }\n                    SimpleValue sumDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (i == 0) {\n                        assertThat(sumDeriv, nullValue());\n                    } else {\n                        double expectedDerivative = thisSumValue - lastSumValue;\n                        if (Double.isNaN(expectedDerivative)) {\n                            assertThat(sumDeriv.value(), equalTo(expectedDerivative));\n                        } else {\n                            assertThat(sumDeriv.value(), closeTo(expectedDerivative, 0.00001));\n                        }\n                    }\n                    lastSumValue = thisSumValue;\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n\n                        if (frequently()) {\n                            indexWriter.commit();\n                        }\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","date":"2019-02-21 05:34:19","endLine":652,"groupId":"65250","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleValueAggDerivativeWithGaps_random","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/d41bf3dc866b42a8b70e4db13aceaa05f989ab.src","preCode":"    public void testSingleValueAggDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        BucketHelpers.GapPolicy gapPolicy = randomFrom(GapPolicy.values());\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME).interval(1)\n            .extendedBounds(0L, (long) numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(new SumAggregationBuilder(\"sum\").field(SINGLE_VALUED_FIELD_NAME));\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"sum\").gapPolicy(gapPolicy)\n        );\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(valueCounts_empty_rnd.length));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                double lastSumValue = Double.NaN;\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    Sum sum = bucket.getAggregations().get(\"sum\");\n                    double thisSumValue = sum.value();\n                    if (bucket.getDocCount() == 0) {\n                        thisSumValue = gapPolicy == GapPolicy.INSERT_ZEROS ? 0 : Double.NaN;\n                    }\n                    SimpleValue sumDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (i == 0) {\n                        assertThat(sumDeriv, nullValue());\n                    } else {\n                        double expectedDerivative = thisSumValue - lastSumValue;\n                        if (Double.isNaN(expectedDerivative)) {\n                            assertThat(sumDeriv.value(), equalTo(expectedDerivative));\n                        } else {\n                            assertThat(sumDeriv.value(), closeTo(expectedDerivative, 0.00001));\n                        }\n                    }\n                    lastSumValue = thisSumValue;\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n\n                        if (frequently()) {\n                            indexWriter.commit();\n                        }\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":587,"status":"B"}],"commitId":"00880c0fd1edcb44a13731e0e84f0ace7bdfde6d","commitMessage":"@@@Converting Derivative Pipeline Agg integration test into AggregatorTestsCase. (#38679)\n\nReplicates the majority of existing Derivative pipeline integration tests into\nan AggregatorTestCase.  with the goal of removing the integration\ntests in the near future.","date":"2019-02-21 05:34:19","modifiedFileCount":"0","status":"B","submitter":"Mirko Jotic"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":2,"curCode":"    public void testDocCountDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME)\n            .interval(1)\n            .extendedBounds(0L, numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"_count\")\n                .gapPolicy(randomFrom(BucketHelpers.GapPolicy.values()))\n        );\n\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(numBuckets_empty_rnd));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (firstDerivValueCounts_empty_rnd[i] == null) {\n                        assertThat(docCountDeriv, nullValue());\n                    } else {\n                        assertThat(docCountDeriv.value(), equalTo(firstDerivValueCounts_empty_rnd[i]));\n                    }\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","date":"2020-08-07 05:14:20","endLine":419,"groupId":"9866","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDocCountDerivativeWithGaps_random","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/7d87c3b0241256469e228f512f14e80f532c54.src","preCode":"    public void testDocCountDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME)\n            .interval(1)\n            .extendedBounds(0L, numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"_count\")\n                .gapPolicy(randomFrom(BucketHelpers.GapPolicy.values()))\n        );\n\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(numBuckets_empty_rnd));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (firstDerivValueCounts_empty_rnd[i] == null) {\n                        assertThat(docCountDeriv, nullValue());\n                    } else {\n                        assertThat(docCountDeriv.value(), equalTo(firstDerivValueCounts_empty_rnd[i]));\n                    }\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n\n                        if (frequently()) {\n                            indexWriter.commit();\n                        }\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":2,"curCode":"    public void testSingleValueAggDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        BucketHelpers.GapPolicy gapPolicy = randomFrom(GapPolicy.values());\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME).interval(1)\n            .extendedBounds(0L, (long) numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(new SumAggregationBuilder(\"sum\").field(SINGLE_VALUED_FIELD_NAME));\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"sum\").gapPolicy(gapPolicy)\n        );\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(valueCounts_empty_rnd.length));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                double lastSumValue = Double.NaN;\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    Sum sum = bucket.getAggregations().get(\"sum\");\n                    double thisSumValue = sum.value();\n                    if (bucket.getDocCount() == 0) {\n                        thisSumValue = gapPolicy == GapPolicy.INSERT_ZEROS ? 0 : Double.NaN;\n                    }\n                    SimpleValue sumDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (i == 0) {\n                        assertThat(sumDeriv, nullValue());\n                    } else {\n                        double expectedDerivative = thisSumValue - lastSumValue;\n                        if (Double.isNaN(expectedDerivative)) {\n                            assertThat(sumDeriv.value(), equalTo(expectedDerivative));\n                        } else {\n                            assertThat(sumDeriv.value(), closeTo(expectedDerivative, 0.00001));\n                        }\n                    }\n                    lastSumValue = thisSumValue;\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","date":"2020-08-07 05:14:20","endLine":635,"groupId":"65250","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleValueAggDerivativeWithGaps_random","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/7d87c3b0241256469e228f512f14e80f532c54.src","preCode":"    public void testSingleValueAggDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        BucketHelpers.GapPolicy gapPolicy = randomFrom(GapPolicy.values());\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME).interval(1)\n            .extendedBounds(0L, (long) numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(new SumAggregationBuilder(\"sum\").field(SINGLE_VALUED_FIELD_NAME));\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"sum\").gapPolicy(gapPolicy)\n        );\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(valueCounts_empty_rnd.length));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                double lastSumValue = Double.NaN;\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    Sum sum = bucket.getAggregations().get(\"sum\");\n                    double thisSumValue = sum.value();\n                    if (bucket.getDocCount() == 0) {\n                        thisSumValue = gapPolicy == GapPolicy.INSERT_ZEROS ? 0 : Double.NaN;\n                    }\n                    SimpleValue sumDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (i == 0) {\n                        assertThat(sumDeriv, nullValue());\n                    } else {\n                        double expectedDerivative = thisSumValue - lastSumValue;\n                        if (Double.isNaN(expectedDerivative)) {\n                            assertThat(sumDeriv.value(), equalTo(expectedDerivative));\n                        } else {\n                            assertThat(sumDeriv.value(), closeTo(expectedDerivative, 0.00001));\n                        }\n                    }\n                    lastSumValue = thisSumValue;\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n\n                        if (frequently()) {\n                            indexWriter.commit();\n                        }\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":3,"curCode":"    public void testDocCountDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME)\n            .interval(1)\n            .extendedBounds(0L, numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"_count\")\n                .gapPolicy(randomFrom(BucketHelpers.GapPolicy.values()))\n        );\n\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(numBuckets_empty_rnd));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (firstDerivValueCounts_empty_rnd[i] == null) {\n                        assertThat(docCountDeriv, nullValue());\n                    } else {\n                        assertThat(docCountDeriv.value(), equalTo(firstDerivValueCounts_empty_rnd[i]));\n                    }\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","date":"2020-08-07 05:14:20","endLine":419,"groupId":"105533","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDocCountDerivativeWithGaps_random","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/7d87c3b0241256469e228f512f14e80f532c54.src","preCode":"    public void testDocCountDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME)\n            .interval(1)\n            .extendedBounds(0L, numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"_count\")\n                .gapPolicy(randomFrom(BucketHelpers.GapPolicy.values()))\n        );\n\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(numBuckets_empty_rnd));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    SimpleValue docCountDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (firstDerivValueCounts_empty_rnd[i] == null) {\n                        assertThat(docCountDeriv, nullValue());\n                    } else {\n                        assertThat(docCountDeriv.value(), equalTo(firstDerivValueCounts_empty_rnd[i]));\n                    }\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2021-06-17 05:31:31","commitOrder":3,"curCode":"    public void testSingleValueAggDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        BucketHelpers.GapPolicy gapPolicy = randomFrom(GapPolicy.values());\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME).interval(1)\n            .extendedBounds(0L, (long) numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(new SumAggregationBuilder(\"sum\").field(SINGLE_VALUED_FIELD_NAME));\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"sum\").gapPolicy(gapPolicy)\n        );\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(valueCounts_empty_rnd.length));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                double lastSumValue = Double.NaN;\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    Sum sum = bucket.getAggregations().get(\"sum\");\n                    double thisSumValue = sum.value();\n                    if (bucket.getDocCount() == 0) {\n                        switch (gapPolicy) {\n                            case INSERT_ZEROS:\n                                thisSumValue = 0;\n                                break;\n                            case KEEP_VALUES:\n                                break;\n                            default:\n                                thisSumValue = Double.NaN;\n                        }\n                    }\n                    SimpleValue sumDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (i == 0) {\n                        assertThat(sumDeriv, nullValue());\n                    } else {\n                        double expectedDerivative = thisSumValue - lastSumValue;\n                        if (Double.isNaN(expectedDerivative)) {\n                            assertThat(sumDeriv.value(), equalTo(expectedDerivative));\n                        } else {\n                            assertThat(sumDeriv.value(), closeTo(expectedDerivative, 0.00001));\n                        }\n                    }\n                    lastSumValue = thisSumValue;\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","date":"2021-06-17 05:31:31","endLine":632,"groupId":"105533","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleValueAggDerivativeWithGaps_random","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/523f71246b05e6130090fca9839ef51a790b37.src","preCode":"    public void testSingleValueAggDerivativeWithGaps_random() throws IOException {\n        setupValueCounts();\n        BucketHelpers.GapPolicy gapPolicy = randomFrom(GapPolicy.values());\n        Query query = new MatchAllDocsQuery();\n        HistogramAggregationBuilder aggBuilder = new HistogramAggregationBuilder(\"histo\")\n            .field(SINGLE_VALUED_FIELD_NAME).interval(1)\n            .extendedBounds(0L, (long) numBuckets_empty_rnd - 1);\n        aggBuilder.subAggregation(new SumAggregationBuilder(\"sum\").field(SINGLE_VALUED_FIELD_NAME));\n        aggBuilder.subAggregation(\n            new DerivativePipelineAggregationBuilder(\"deriv\", \"sum\").gapPolicy(gapPolicy)\n        );\n        executeTestCase(query, aggBuilder,\n            histogram -> {\n                assertThat(histogram, notNullValue());\n                assertThat(histogram.getName(), equalTo(\"histo\"));\n                List<? extends Histogram.Bucket> buckets = ((Histogram) histogram).getBuckets();\n                assertThat(buckets.size(), equalTo(valueCounts_empty_rnd.length));\n                assertThat(getTotalDocCountAcrossBuckets(buckets), equalTo(numDocsEmptyIdx_rnd));\n\n                double lastSumValue = Double.NaN;\n                for (int i = 0; i < valueCounts_empty_rnd.length; i++) {\n                    Histogram.Bucket bucket = buckets.get(i);\n                    checkBucketKeyAndDocCount(\"InternalBucket \" + i, bucket, i, valueCounts_empty_rnd[i]);\n                    Sum sum = bucket.getAggregations().get(\"sum\");\n                    double thisSumValue = sum.value();\n                    if (bucket.getDocCount() == 0) {\n                        thisSumValue = gapPolicy == GapPolicy.INSERT_ZEROS ? 0 : Double.NaN;\n                    }\n                    SimpleValue sumDeriv = bucket.getAggregations().get(\"deriv\");\n                    if (i == 0) {\n                        assertThat(sumDeriv, nullValue());\n                    } else {\n                        double expectedDerivative = thisSumValue - lastSumValue;\n                        if (Double.isNaN(expectedDerivative)) {\n                            assertThat(sumDeriv.value(), equalTo(expectedDerivative));\n                        } else {\n                            assertThat(sumDeriv.value(), closeTo(expectedDerivative, 0.00001));\n                        }\n                    }\n                    lastSumValue = thisSumValue;\n                }\n            },\n            indexWriter -> {\n                Document document = new Document();\n                for (int i = 0; i < numBuckets_empty_rnd; i++) {\n                    valueCounts_empty_rnd[i] = (long) randomIntBetween(1, 10);\n                    \r\n                    if (randomBoolean())\n                        valueCounts_empty_rnd[i] = 0L;\n                    for (int docs = 0; docs < valueCounts_empty_rnd[i]; docs++) {\n                        document.add(new NumericDocValuesField(SINGLE_VALUED_FIELD_NAME, i));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                        numDocsEmptyIdx_rnd++;\n                    }\n                    if (i > 0) {\n                        firstDerivValueCounts_empty_rnd[i] = (double) valueCounts_empty_rnd[i] - valueCounts_empty_rnd[i - 1];\n                    }\n                    indexWriter.commit();\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/DerivativeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
