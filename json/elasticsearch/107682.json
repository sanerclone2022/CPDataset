[{"authorTime":"2018-12-06 15:31:46","codes":[{"authorDate":"2018-12-06 15:31:46","commitOrder":1,"curCode":"    public static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2018-12-06 15:31:46","endLine":371,"groupId":"2609","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b3/6c13e3fb36c9355fd32f7c234f6e503862e634.src","preCode":"    public static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"B"},{"authorDate":"2018-12-06 15:31:46","commitOrder":1,"curCode":"    public static BytesReference serializeDiffClusterState(Diff diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2018-12-06 15:31:46","endLine":381,"groupId":"44408","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeDiffClusterState","params":"(Diffdiff@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b3/6c13e3fb36c9355fd32f7c234f6e503862e634.src","preCode":"    public static BytesReference serializeDiffClusterState(Diff diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"B"}],"commitId":"ee05ef131286eead295cf58ed4393af56f0d7ade","commitMessage":"@@@Merge branch 'zen2'\n","date":"2018-12-06 15:31:46","modifiedFileCount":"122","status":"B","submitter":"Yannick Welsch"},{"authorTime":"2020-03-03 05:32:41","codes":[{"authorDate":"2020-03-03 05:32:41","commitOrder":2,"curCode":"    public static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        bStream.setVersion(nodeVersion);\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2020-03-03 05:32:41","endLine":328,"groupId":"165","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/b2f509b2ed85935e9604a53aa07bdc1a6b8361.src","preCode":"    public static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2020-03-03 05:32:41","commitOrder":2,"curCode":"    public static BytesReference serializeDiffClusterState(Diff diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        bStream.setVersion(nodeVersion);\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2020-03-03 05:32:41","endLine":338,"groupId":"167","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeDiffClusterState","params":"(Diffdiff@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/b2f509b2ed85935e9604a53aa07bdc1a6b8361.src","preCode":"    public static BytesReference serializeDiffClusterState(Diff diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"4c0e8f12cbc078c1b85a67af76ed8a4be11a6f01","commitMessage":"@@@Introduce system index APIs for Kibana (#52385)\n\nThis commit introduces a module for Kibana that exposes REST APIs that\nwill be used by Kibana for access to its system indices. These APIs are wrapped\nversions of the existing REST endpoints. A new setting is also introduced since\nthe Kibana system indices' names are allowed to be changed by a user in case\nmultiple instances of Kibana use the same instance of Elasticsearch.\n\nAdditionally.  the ThreadContext has been extended to indicate that the use of\nsystem indices may be allowed in a request. This will be built upon in the future\nfor the protection of system indices.","date":"2020-03-03 05:32:41","modifiedFileCount":"38","status":"M","submitter":"Jay Modi"},{"authorTime":"2020-03-24 00:11:16","codes":[{"authorDate":"2020-03-24 00:11:16","commitOrder":3,"curCode":"    public static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2020-03-24 00:11:16","endLine":330,"groupId":"2609","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/c325d3915d4ee98cdda66340d260e2edd3f430.src","preCode":"    public static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        bStream.setVersion(nodeVersion);\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"},{"authorDate":"2020-03-24 00:11:16","commitOrder":3,"curCode":"    public static BytesReference serializeDiffClusterState(Diff diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2020-03-24 00:11:16","endLine":340,"groupId":"44408","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeDiffClusterState","params":"(Diffdiff@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/c325d3915d4ee98cdda66340d260e2edd3f430.src","preCode":"    public static BytesReference serializeDiffClusterState(Diff diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        bStream.setVersion(nodeVersion);\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"8264bdd36a2db3c204387c4f8c8a846001bee899","commitMessage":"@@@Revert \"Introduce system index APIs for Kibana (#52385)\" (#53912)\n\nThis reverts commit 4c0e8f12cbc078c1b85a67af76ed8a4be11a6f01.\n\nIt should be re-added once #53909 is addressed.","date":"2020-03-24 00:11:16","modifiedFileCount":"37","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":4,"curCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","date":"2020-06-26 22:33:37","endLine":223,"groupId":"2609","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/736f55ca4902da6cbdc06d5988d64fedf65aac.src","preCode":"    public static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":4,"curCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2020-06-26 22:33:37","endLine":233,"groupId":"44408","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeDiffClusterState","params":"(Diff<ClusterState>diff@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/736f55ca4902da6cbdc06d5988d64fedf65aac.src","preCode":"    public static BytesReference serializeDiffClusterState(Diff diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-25 01:10:47","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":5,"curCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.threadLocalStreamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","date":"2020-08-25 01:10:47","endLine":228,"groupId":"2609","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/71195526300ddab68b81c50db6c3266fcec456.src","preCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2020-08-25 01:10:47","commitOrder":5,"curCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.threadLocalStreamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2020-08-25 01:10:47","endLine":238,"groupId":"44408","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeDiffClusterState","params":"(Diff<ClusterState>diff@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/71195526300ddab68b81c50db6c3266fcec456.src","preCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.streamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-09-09 04:13:53","codes":[{"authorDate":"2020-09-09 04:13:53","commitOrder":6,"curCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","date":"2020-09-09 04:13:53","endLine":230,"groupId":"2609","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/f9479f8c608648988b3daa0e623e1141dbbdac.src","preCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.threadLocalStreamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2020-09-09 04:13:53","commitOrder":6,"curCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2020-09-09 04:13:53","endLine":240,"groupId":"60920","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeDiffClusterState","params":"(Diff<ClusterState>diff@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/f9479f8c608648988b3daa0e623e1141dbbdac.src","preCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = CompressorFactory.COMPRESSOR.threadLocalStreamOutput(bStream)) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"0684ebc42528c60747e551d1822e337a42c52ccd","commitMessage":"@@@Remove Redundant Stream Wrapping from Compression (#62017)\n\nIn many cases we don't need a `StreamInput` or `StreamOutput`\nwrapper around these streams so I this commit adjusts the API\nto just normal streams and adds the wrapping where necessary.","date":"2020-09-09 04:13:53","modifiedFileCount":"15","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-10-13 16:24:19","codes":[{"authorDate":"2020-10-13 16:24:19","commitOrder":7,"curCode":"    private ReleasableBytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        boolean success = false;\n        final ReleasableBytesStreamOutput bStream = new ReleasableBytesStreamOutput(bigArrays);\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(\n                    Streams.flushOnCloseStream(bStream)))) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(true);\n                clusterState.writeTo(stream);\n            }\n            final BytesReference serializedState = bStream.bytes();\n            logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n                    clusterState.version(), nodeVersion, serializedState.length());\n            final ReleasableBytesReference releasableBytesReference = new ReleasableBytesReference(serializedState, bStream);\n            success = true;\n            return releasableBytesReference;\n        } finally {\n            if (success == false) {\n                IOUtils.closeWhileHandlingException(bStream);\n            }\n        }\n    }\n","date":"2020-10-13 16:24:19","endLine":254,"groupId":"9299","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/46389dd737eb39ac97f852117f9faec8e52f28.src","preCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2020-10-13 16:24:19","commitOrder":7,"curCode":"    private ReleasableBytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        boolean success = false;\n        final ReleasableBytesStreamOutput bStream = new ReleasableBytesStreamOutput(bigArrays);\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(\n                    Streams.flushOnCloseStream(bStream)))) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(false);\n                diff.writeTo(stream);\n            }\n            final BytesReference serializedDiff = bStream.bytes();\n            final ReleasableBytesReference releasableBytesReference = new ReleasableBytesReference(serializedDiff, bStream);\n            success = true;\n            return releasableBytesReference;\n        } finally {\n            if (success == false) {\n                IOUtils.closeWhileHandlingException(bStream);\n            }\n        }\n    }\n","date":"2020-10-13 16:24:19","endLine":275,"groupId":"9299","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeDiffClusterState","params":"(Diff<ClusterState>diff@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/46389dd737eb39ac97f852117f9faec8e52f28.src","preCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"faaf2e72bdaaa65775c2c7cf765430286d2d4f12","commitMessage":"@@@Recycle buffers used for cluster state publication (#63537)\n\nUses a `ReleasableBytesStreamOutput` to serialize the cluster state (or\ndiff) and releases it on completion of the publication.","date":"2020-10-13 16:24:19","modifiedFileCount":"10","status":"M","submitter":"David Turner"},{"authorTime":"2020-10-13 19:07:40","codes":[{"authorDate":"2020-10-13 19:07:40","commitOrder":8,"curCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","date":"2020-10-13 19:07:58","endLine":230,"groupId":"2609","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/f9479f8c608648988b3daa0e623e1141dbbdac.src","preCode":"    private ReleasableBytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        boolean success = false;\n        final ReleasableBytesStreamOutput bStream = new ReleasableBytesStreamOutput(bigArrays);\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(\n                    Streams.flushOnCloseStream(bStream)))) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(true);\n                clusterState.writeTo(stream);\n            }\n            final BytesReference serializedState = bStream.bytes();\n            logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n                    clusterState.version(), nodeVersion, serializedState.length());\n            final ReleasableBytesReference releasableBytesReference = new ReleasableBytesReference(serializedState, bStream);\n            success = true;\n            return releasableBytesReference;\n        } finally {\n            if (success == false) {\n                IOUtils.closeWhileHandlingException(bStream);\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2020-10-13 19:07:40","commitOrder":8,"curCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2020-10-13 19:07:58","endLine":240,"groupId":"60920","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeDiffClusterState","params":"(Diff<ClusterState>diff@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/f9479f8c608648988b3daa0e623e1141dbbdac.src","preCode":"    private ReleasableBytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        boolean success = false;\n        final ReleasableBytesStreamOutput bStream = new ReleasableBytesStreamOutput(bigArrays);\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(\n                    Streams.flushOnCloseStream(bStream)))) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(false);\n                diff.writeTo(stream);\n            }\n            final BytesReference serializedDiff = bStream.bytes();\n            final ReleasableBytesReference releasableBytesReference = new ReleasableBytesReference(serializedDiff, bStream);\n            success = true;\n            return releasableBytesReference;\n        } finally {\n            if (success == false) {\n                IOUtils.closeWhileHandlingException(bStream);\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"aefa31673a8da8ce81f5e9ea58d065b991c3134f","commitMessage":"@@@Revert \"Recycle buffers used for cluster state publication (#63537)\"\n\nThis reverts commit faaf2e72bdaaa65775c2c7cf765430286d2d4f12.\n","date":"2020-10-13 19:07:58","modifiedFileCount":"10","status":"M","submitter":"David Turner"},{"authorTime":"2021-09-08 14:46:04","codes":[{"authorDate":"2021-09-08 14:46:04","commitOrder":9,"curCode":"    private ReleasableBytesReference serializeFullClusterState(ClusterState clusterState, DiscoveryNode node) {\n        final Version nodeVersion = node.getVersion();\n        final BytesStreamOutput bytesStream = new ReleasableBytesStreamOutput(bigArrays);\n        boolean success = false;\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(\n                CompressorFactory.COMPRESSOR.threadLocalOutputStream(Streams.flushOnCloseStream(bytesStream)))\n            ) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(true);\n                clusterState.writeTo(stream);\n            } catch (IOException e) {\n                throw new ElasticsearchException(\"failed to serialize cluster state for publishing to node {}\", e, node);\n            }\n            final ReleasableBytesReference result = new ReleasableBytesReference(bytesStream.bytes(), bytesStream::close);\n            logger.trace(\n                \"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n                clusterState.version(),\n                nodeVersion,\n                result.length());\n            success = true;\n            return result;\n        } finally {\n            if (success == false) {\n                bytesStream.close();\n            }\n        }\n    }\n","date":"2021-09-08 14:46:04","endLine":232,"groupId":"49395","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@DiscoveryNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/f41da113902d708dc0290c9af4898c167f0df9.src","preCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2021-09-08 14:46:04","commitOrder":9,"curCode":"    private ReleasableBytesReference serializeDiffClusterState(long clusterStateVersion, Diff<ClusterState> diff, DiscoveryNode node) {\n        final Version nodeVersion = node.getVersion();\n        final BytesStreamOutput bytesStream = new ReleasableBytesStreamOutput(bigArrays);\n        boolean success = false;\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(\n                CompressorFactory.COMPRESSOR.threadLocalOutputStream(Streams.flushOnCloseStream(bytesStream)))\n            ) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(false);\n                diff.writeTo(stream);\n            } catch (IOException e) {\n                throw new ElasticsearchException(\"failed to serialize cluster state diff for publishing to node {}\", e, node);\n            }\n            final ReleasableBytesReference result = new ReleasableBytesReference(bytesStream.bytes(), bytesStream::close);\n            logger.trace(\n                \"serialized cluster state diff for version [{}] for node version [{}] with size [{}]\",\n                clusterStateVersion,\n                nodeVersion,\n                result.length());\n            success = true;\n            return result;\n        } finally {\n            if (success == false) {\n                bytesStream.close();\n            }\n        }\n    }\n","date":"2021-09-08 14:46:04","endLine":261,"groupId":"49395","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"serializeDiffClusterState","params":"(longclusterStateVersion@Diff<ClusterState>diff@DiscoveryNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/f41da113902d708dc0290c9af4898c167f0df9.src","preCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"8b50fcd3d6fab18bc80947710c53c5f7252eab7d","commitMessage":"@@@Recycle pages used by outgoing publications (#77317)\n\nToday `PublicationTransportHandler.PublicationContext` allocates a bunch\nof memory for serialized cluster states and diffs.  but it uses a plain\n`BytesStreamOutput` which means that the backing pages are allocated by\nthe `BigArrays#NON_RECYCLING_INSTANCE`. With this commit we pass in a\nproper `BigArrays` so that the pages being used can be recycled.","date":"2021-09-08 14:46:04","modifiedFileCount":"14","status":"M","submitter":"David Turner"},{"authorTime":"2021-09-08 15:11:31","codes":[{"authorDate":"2021-09-08 15:11:31","commitOrder":10,"curCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","date":"2021-09-08 15:11:31","endLine":219,"groupId":"2609","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cd/be970fd0a26ddf56b232f3521e40069a51dc1f.src","preCode":"    private ReleasableBytesReference serializeFullClusterState(ClusterState clusterState, DiscoveryNode node) {\n        final Version nodeVersion = node.getVersion();\n        final BytesStreamOutput bytesStream = new ReleasableBytesStreamOutput(bigArrays);\n        boolean success = false;\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(\n                CompressorFactory.COMPRESSOR.threadLocalOutputStream(Streams.flushOnCloseStream(bytesStream)))\n            ) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(true);\n                clusterState.writeTo(stream);\n            } catch (IOException e) {\n                throw new ElasticsearchException(\"failed to serialize cluster state for publishing to node {}\", e, node);\n            }\n            final ReleasableBytesReference result = new ReleasableBytesReference(bytesStream.bytes(), bytesStream::close);\n            logger.trace(\n                \"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n                clusterState.version(),\n                nodeVersion,\n                result.length());\n            success = true;\n            return result;\n        } finally {\n            if (success == false) {\n                bytesStream.close();\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2021-09-08 15:11:31","commitOrder":10,"curCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","date":"2021-09-08 15:11:31","endLine":229,"groupId":"60920","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeDiffClusterState","params":"(Diff<ClusterState>diff@VersionnodeVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cd/be970fd0a26ddf56b232f3521e40069a51dc1f.src","preCode":"    private ReleasableBytesReference serializeDiffClusterState(long clusterStateVersion, Diff<ClusterState> diff, DiscoveryNode node) {\n        final Version nodeVersion = node.getVersion();\n        final BytesStreamOutput bytesStream = new ReleasableBytesStreamOutput(bigArrays);\n        boolean success = false;\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(\n                CompressorFactory.COMPRESSOR.threadLocalOutputStream(Streams.flushOnCloseStream(bytesStream)))\n            ) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(false);\n                diff.writeTo(stream);\n            } catch (IOException e) {\n                throw new ElasticsearchException(\"failed to serialize cluster state diff for publishing to node {}\", e, node);\n            }\n            final ReleasableBytesReference result = new ReleasableBytesReference(bytesStream.bytes(), bytesStream::close);\n            logger.trace(\n                \"serialized cluster state diff for version [{}] for node version [{}] with size [{}]\",\n                clusterStateVersion,\n                nodeVersion,\n                result.length());\n            success = true;\n            return result;\n        } finally {\n            if (success == false) {\n                bytesStream.close();\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"76056c65ebed22fd50e410b4904d4e90974e11ba","commitMessage":"@@@Revert \"Recycle pages used by outgoing publications (#77317)\"\n\nThis reverts commit 8b50fcd3d6fab18bc80947710c53c5f7252eab7d.\n","date":"2021-09-08 15:11:31","modifiedFileCount":"14","status":"M","submitter":"David Turner"},{"authorTime":"2021-09-13 16:40:20","codes":[{"authorDate":"2021-09-13 16:40:20","commitOrder":11,"curCode":"    private ReleasableBytesReference serializeFullClusterState(ClusterState clusterState, DiscoveryNode node) {\n        final Version nodeVersion = node.getVersion();\n        final BytesStreamOutput bytesStream = new ReleasableBytesStreamOutput(bigArrays);\n        boolean success = false;\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(\n                CompressorFactory.COMPRESSOR.threadLocalOutputStream(Streams.flushOnCloseStream(bytesStream)))\n            ) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(true);\n                clusterState.writeTo(stream);\n            } catch (IOException e) {\n                throw new ElasticsearchException(\"failed to serialize cluster state for publishing to node {}\", e, node);\n            }\n            final ReleasableBytesReference result = new ReleasableBytesReference(bytesStream.bytes(), bytesStream::close);\n            logger.trace(\n                \"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n                clusterState.version(),\n                nodeVersion,\n                result.length());\n            success = true;\n            return result;\n        } finally {\n            if (success == false) {\n                bytesStream.close();\n            }\n        }\n    }\n","date":"2021-09-13 16:40:20","endLine":232,"groupId":"107682","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"serializeFullClusterState","params":"(ClusterStateclusterState@DiscoveryNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/f41da113902d708dc0290c9af4898c167f0df9.src","preCode":"    private static BytesReference serializeFullClusterState(ClusterState clusterState, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(true);\n            clusterState.writeTo(stream);\n        }\n        final BytesReference serializedState = bStream.bytes();\n        logger.trace(\"serialized full cluster state version [{}] for node version [{}] with size [{}]\",\n            clusterState.version(), nodeVersion, serializedState.length());\n        return serializedState;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2021-09-13 16:40:20","commitOrder":11,"curCode":"    private ReleasableBytesReference serializeDiffClusterState(long clusterStateVersion, Diff<ClusterState> diff, DiscoveryNode node) {\n        final Version nodeVersion = node.getVersion();\n        final BytesStreamOutput bytesStream = new ReleasableBytesStreamOutput(bigArrays);\n        boolean success = false;\n        try {\n            try (StreamOutput stream = new OutputStreamStreamOutput(\n                CompressorFactory.COMPRESSOR.threadLocalOutputStream(Streams.flushOnCloseStream(bytesStream)))\n            ) {\n                stream.setVersion(nodeVersion);\n                stream.writeBoolean(false);\n                diff.writeTo(stream);\n            } catch (IOException e) {\n                throw new ElasticsearchException(\"failed to serialize cluster state diff for publishing to node {}\", e, node);\n            }\n            final ReleasableBytesReference result = new ReleasableBytesReference(bytesStream.bytes(), bytesStream::close);\n            logger.trace(\n                \"serialized cluster state diff for version [{}] for node version [{}] with size [{}]\",\n                clusterStateVersion,\n                nodeVersion,\n                result.length());\n            success = true;\n            return result;\n        } finally {\n            if (success == false) {\n                bytesStream.close();\n            }\n        }\n    }\n","date":"2021-09-13 16:40:20","endLine":261,"groupId":"107682","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"serializeDiffClusterState","params":"(longclusterStateVersion@Diff<ClusterState>diff@DiscoveryNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/f41da113902d708dc0290c9af4898c167f0df9.src","preCode":"    private static BytesReference serializeDiffClusterState(Diff<ClusterState> diff, Version nodeVersion) throws IOException {\n        final BytesStreamOutput bStream = new BytesStreamOutput();\n        try (StreamOutput stream = new OutputStreamStreamOutput(CompressorFactory.COMPRESSOR.threadLocalOutputStream(bStream))) {\n            stream.setVersion(nodeVersion);\n            stream.writeBoolean(false);\n            diff.writeTo(stream);\n        }\n        return bStream.bytes();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"80409d41658a3e2607a96e9a6fcc466eb5676157","commitMessage":"@@@Recycle pages used by outgoing publications (#77407)\n\n* Recycle pages used by outgoing publications (#77317)\n\nToday `PublicationTransportHandler.PublicationContext` allocates a bunch\nof memory for serialized cluster states and diffs.  but it uses a plain\n`BytesStreamOutput` which means that the backing pages are allocated by\nthe `BigArrays#NON_RECYCLING_INSTANCE`. With this commit we pass in a\nproper `BigArrays` so that the pages being used can be recycled.\n\n* Enable stricter tests always\n\n* Fix one\n\n* Better assertions (and longer run) in testSingleNodeDiscoveryStabilisesEvenWhenDisrupted\n\n* Clean up warnings","date":"2021-09-13 16:40:20","modifiedFileCount":"14","status":"M","submitter":"David Turner"}]
