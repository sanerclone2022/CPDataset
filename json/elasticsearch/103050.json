[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper(\"type\").mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":117,"groupId":"13248","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConflictSameType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/1a1d97798b391e8a660362e9c030f9c9060b12.src","preCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper(\"type\").mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            \r\n            assertTrue(e.getMessage(), e.getMessage().contains(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper(\"type\").mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":139,"groupId":"13248","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConflictNewType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/1a1d97798b391e8a660362e9c030f9c9060b12.src","preCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            \r\n            assertTrue(e.getMessage(), e.getMessage().contains(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper(\"type\").mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-10-30 17:50:23","codes":[{"authorDate":"2019-10-30 17:50:23","commitOrder":2,"curCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2019-10-30 17:50:23","endLine":120,"groupId":"13248","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConflictSameType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e6/8c84fd0bef249830a612f91f5cdf18f32d9d85.src","preCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper(\"type\").mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2019-10-30 17:50:23","commitOrder":2,"curCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            \r\n            assertTrue(e.getMessage(), e.getMessage().contains(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2019-10-30 17:50:23","endLine":142,"groupId":"13248","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConflictNewType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e6/8c84fd0bef249830a612f91f5cdf18f32d9d85.src","preCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            \r\n            assertTrue(e.getMessage(), e.getMessage().contains(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper(\"type\").mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"dbd33f776436c3267a4f0886fbfe168f7f856edd","commitMessage":"@@@Remove type parameter from MapperService.documentMapper() (#48593)\n\nWe only have a single mapper per MapperService now anyway.  so the extra\ntype parameter is surplus to requirements.\n\nRelates to #41059\n","date":"2019-10-30 17:50:23","modifiedFileCount":"24","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-08 17:18:31","codes":[{"authorDate":"2020-01-08 17:18:31","commitOrder":3,"curCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2020-01-08 17:18:31","endLine":120,"groupId":"13248","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConflictSameType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/0eb08ad4c313e83d96b406d23769ab47d3659a.src","preCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-01-08 17:18:31","commitOrder":3,"curCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            \r\n            assertTrue(e.getMessage(), e.getMessage().contains(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2020-01-08 17:18:31","endLine":142,"groupId":"13248","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConflictNewType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/0eb08ad4c313e83d96b406d23769ab47d3659a.src","preCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), \"type\", mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            \r\n            assertTrue(e.getMessage(), e.getMessage().contains(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"a59b065091a0bec7b9e66ed3ae0e878562947cf8","commitMessage":"@@@Remove type parameter from `CreateIndexRequest.mapping(type.  XContentBuilder)` (#50586)\n\nThis continues the removal of type parameters from CreateIndexRequest.mapping\nmethods started in #50419. Here the removed methods are almost entirely in test\ncode.  with the exception of a change to TransformIndex in the transform plugin.\n\nRelates to #41059","date":"2020-01-08 17:18:31","modifiedFileCount":"108","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-05-20 16:32:08","codes":[{"authorDate":"2020-05-20 16:32:08","commitOrder":4,"curCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE));\n        assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n\n        e = expectThrows(IllegalArgumentException.class, () ->\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE));\n        assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2020-05-20 16:32:08","endLine":114,"groupId":"9590","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConflictSameType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/e52f62e80465a463cf13a762a58d39e4162e83.src","preCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-05-20 16:32:08","commitOrder":4,"curCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE));\n        assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2020-05-20 16:32:08","endLine":132,"groupId":"9590","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConflictNewType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/e52f62e80465a463cf13a762a58d39e4162e83.src","preCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        try {\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            \r\n            assertTrue(e.getMessage(), e.getMessage().contains(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n        }\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"f82d74b501701e50358b0d5445a17a6db671ee94","commitMessage":"@@@Move merge compatibility logic from MappedFieldType to FieldMapper (#56915)\n\nMerging logic is currently split between FieldMapper.  with its merge() method.  and\nMappedFieldType.  which checks for merging compatibility. The compatibility checks\nare called from a third class.  MappingMergeValidator. This makes it difficult to reason\nabout what is or is not compatible in updates.  and even what is in fact updateable - we\nhave a number of tests that check compatibility on changes in mapping configuration\nthat are not in fact possible.\n\nThis commit refactors the compatibility logic so that it all sits on FieldMapper.  and\nmakes it called at merge time. It adds a new FieldMapperTestCase base class that\nFieldMapper tests can extend.  and moves the compatibility testing machinery from\nFieldTypeTestCase to here.\n\nRelates to #56814","date":"2020-05-20 16:32:08","modifiedFileCount":"114","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-03-02 22:26:50","codes":[{"authorDate":"2021-03-02 22:26:50","commitOrder":5,"curCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE));\n        assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n\n        e = expectThrows(IllegalArgumentException.class, () ->\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE));\n        assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().getRoot().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2021-03-02 22:26:50","endLine":103,"groupId":"103050","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testConflictSameType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/46d1f16587b003150d1a02db8ffb279d2b37d9.src","preCode":"    public void testConflictSameType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE));\n        assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n\n        e = expectThrows(IllegalArgumentException.class, () ->\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE));\n        assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2021-03-02 22:26:50","commitOrder":5,"curCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE));\n        assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().getRoot().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","date":"2021-03-02 22:26:50","endLine":121,"groupId":"103050","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testConflictNewType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/46d1f16587b003150d1a02db8ffb279d2b37d9.src","preCode":"    public void testConflictNewType() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"long\").endObject()\n                .endObject().endObject().endObject();\n        MapperService mapperService = createIndex(\"test\", Settings.builder().build(), mapping).mapperService();\n\n        XContentBuilder update = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"foo\").field(\"type\", \"double\").endObject()\n                .endObject().endObject().endObject();\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->\n            mapperService.merge(\"type\", new CompressedXContent(Strings.toString(update)), MapperService.MergeReason.MAPPING_UPDATE));\n        assertThat(e.getMessage(), containsString(\"mapper [foo] cannot be changed from type [long] to [double]\"));\n\n        assertThat(((FieldMapper) mapperService.documentMapper().mapping().root().getMapper(\"foo\")).fieldType().typeName(),\n                equalTo(\"long\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/UpdateMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"8ac243666af4854ea67f416522babc69401379ad","commitMessage":"@@@Remove redundant methods from DocumentMapper (#69803)\n\nDocumentMapper exposes root() and meta() methods.  which can be accessed through the mapping() method which exposes the entire Mapping instance.\n\nThis commit removes such redundant methods in favour of accessing mapping and retrieving root and meta from them. Additionally.  access to Mapping's members is made consistent through getters rather than package private fields in some cases and getters is some other case.","date":"2021-03-02 22:26:50","modifiedFileCount":"15","status":"M","submitter":"Luca Cavanna"}]
