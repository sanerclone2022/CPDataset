[{"authorTime":"2020-03-17 03:15:25","codes":[{"authorDate":"2020-03-17 03:15:25","commitOrder":1,"curCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\", null)\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2020-03-17 03:15:25","endLine":257,"groupId":"11487","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueScriptNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/9aec4d231dc8cf8c2444848a7e34871c37ecdb.src","preCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\", null)\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"B"},{"authorDate":"2020-03-17 03:15:25","commitOrder":1,"curCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\", null)\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2020-03-17 03:15:25","endLine":306,"groupId":"72360","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueScriptString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/9aec4d231dc8cf8c2444848a7e34871c37ecdb.src","preCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\", null)\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"}],"commitId":"84a59f8447081fb81d1953796ba99600c4a90542","commitMessage":"@@@Add scripting.  supported-type tests to ValueCount (#53500)\n\nAlso adds a few small notes to the documentation regarding potentially\nunintuitive behavior","date":"2020-03-17 03:15:25","modifiedFileCount":"1","status":"B","submitter":"Zachary Tong"},{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2020-03-27 03:01:07","commitOrder":2,"curCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2020-03-27 03:01:07","endLine":256,"groupId":"11487","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueScriptNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/4a4b093cf343d0c55549e45682d43045a790c8.src","preCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\", null)\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2020-03-27 03:01:07","commitOrder":2,"curCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2020-03-27 03:01:07","endLine":305,"groupId":"72360","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueScriptString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/4a4b093cf343d0c55549e45682d43045a790c8.src","preCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\", null)\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"a90c1de8745681356a6516f4f22a8c40f71f6b12","commitMessage":"@@@Add ValuesSource Registry and associated logic (#54281)\n\n* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)\n\n* ValuesSourceRegistry Prototype (#48758)\n\n* Remove generics from ValuesSource related classes (#49606)\n\n* fix percentile aggregation tests (#50712)\n\n* Basic thread safety for ValuesSourceRegistry (#50340)\n\n* Remove target value type from ValuesSourceAggregationBuilder (#49943)\n\n* Cleanup default values source type (#50992)\n\n* CoreValuesSourceType no longer implements Writable (#51276)\n\n* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)\n\n* Put values source types on fields (#51503)\n\n* Remove VST Any (#51539)\n\n* Rewire terms agg to use new VS registry (#51182)\n\nAlso adds some basic AggTestCases for untested code\npaths (and boilerplate for future tests once the IT are\nconverted over)\n\n* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)\n\n* Wire Percentiles aggregator into new VS framework (#51639)\n\nThis required a bit of a refactor to percentiles itself.  Before. \nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least.  would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core.  and will\nbe moved in a subsequent PR.\n\n* Remove generics and target value type from MultiVSAB (#51647)\n\n* fix checkstyle after merge (#52008)\n\n* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)\n\n* Convert RareTerms to new VS registry (#52166)\n\n* Wire up Value Count (#52225)\n\n* Wire up Max & Min aggregations (#52219)\n\n* ValuesSource refactoring: Wire up Sum aggregation (#52571)\n\n* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)\n\n* Soft immutability for VSConfig (#52729)\n\n* Unmute testSupportedFieldTypes.  fix Percentiles/Ranks/Terms tests (#52734)\n\nAlso fixes Percentiles which was incorrectly specified to only accept\nnumeric.  but in fact also accepts Boolean and Date (because those are\nnumeric on master - thanks `testSupportedFieldTypes` for catching it!)\n\n* VS refactoring: Wire up stats aggregation (#52891)\n\n* ValuesSource refactoring: Wire up string_stats aggregation (#52875)\n\n* VS refactoring: Wire up median (MAD) aggregation (#52945)\n\n* fix valuesourcetype issue with constant_keyword field (#53041)\n\nthis commit implements `getValuesSourceType` for\nthe ConstantKeyword field type.\n\nmaster was merged into feature/extensible-values-source\nintroducing a new field type that was not implementing\n`getValuesSourceType`.\n\n* ValuesSource refactoring: Wire up Avg aggregation (#52752)\n\n* Wire PercentileRanks aggregator into new VS framework  (#51693)\n\n* Add a VSConfig resolver for aggregations not using the registry (#53038)\n\n* Vs refactor wire up ranges and date ranges (#52918)\n\n* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)\n\nThis commit updates the geo_bounds aggregation to depend\non registering itself in the ValuesSourceRegistry\n\nrelates #42949.\n\n* VS refactoring: convert Boxplot to new registry (#53132)\n\n* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)\n\nThis commit updates the geo_centroid aggregation to depend\non registering itself in the ValuesSourceRegistry.\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Fix type tests for Missing aggregation (#53501)\n\n* ValuesSource Refactor: move histo VSType into XPack module (#53298)\n\n- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.\n- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept\n- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new \"Analytics\" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs\n\n* Wire up DateHistogram to the ValuesSourceRegistry (#53484)\n\n* Vs refactor parser cleanup (#53198)\n\nCo-authored-by: Zachary Tong <polyfractal@elastic.co>\nCo-authored-by: Zachary Tong <zach@elastic.co>\nCo-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>\nCo-authored-by: Tal Levy <JubBoy333@gmail.com>","date":"2020-03-27 03:01:07","modifiedFileCount":"214","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-04-10 23:06:10","codes":[{"authorDate":"2020-04-10 23:06:10","commitOrder":3,"curCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, NUMBER_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2020-04-10 23:06:10","endLine":291,"groupId":"11487","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueScriptNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/0125726b2c04f3f7a6432a6549215de9ce04d4.src","preCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2020-04-10 23:06:10","commitOrder":3,"curCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, STRING_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2020-04-10 23:06:10","endLine":340,"groupId":"72360","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueScriptString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/0125726b2c04f3f7a6432a6549215de9ce04d4.src","preCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"8e8ce967757929b1f71e6a9ce4cbfbf60407867b","commitMessage":"@@@value_count Aggregation optimization (#54854)\n\nWe found some problems during the test.\n\nData: 200Million docs.  1 shard.  0 replica\n\n\n    hits    |   avg   |   sum   | value_count |\n----------- | ------- | ------- | ----------- |\n     20. 000 |   .038s |   .033s |       .063s |\n    200. 000 |   .127s |   .125s |       .334s |\n  2. 000. 000 |   .789s |   .729s |      3.176s |\n 20. 000. 000 |  4.200s |  3.239s |     22.787s |\n200. 000. 000 | 21.000s | 22.000s |    154.917s |\n\n\nThe performance of `avg`.  `sum` and other is very close when performing\nstatistics.  but the performance of `value_count` has always been poor. \neven not on an order of magnitude. Based on some common-sense knowledge. \nwe think that `value_count` and sum are similar operations.  and the time\nconsumed should be the same. Therefore.  we have discussed the agg\nof `value_count`.\n\nThe principle of counting in es is to traverse the field of each\ndocument. If the field is an ordinary value.  the count value is\nincreased by 1. If it is an array type.  the count value is increased\nby n. However.  the problem lies in traversing each document and taking\nout the field.  which changes from disk to an object in the Java\nlanguage. We summarize its current problems with Elasticsearch as:\n\n- Number cast to string overhead.  and GC problems caused by a large\n  number of strings\n- After the number type is converted to string.  sorting and other\n  unnecessary operations are performed\n\n\nHere is the proof of type conversion overhead.\n\n```\n// Java long to string source code.  getChars is very time-consuming.\npublic static String toString(long i) {\n        int size = stringSize(i);\n        if (COMPACT_STRINGS) {\n            byte[] buf = new byte[size];\n            getChars(i.  size.  buf);\n            return new String(buf.  LATIN1);\n        } else {\n            byte[] buf = new byte[size * 2];\n            StringUTF16.getChars(i.  size.  buf);\n            return new String(buf.  UTF16);\n        }\n}   \n```\n\n\n  test type  | average |  min |     max     |   sum\n------------ | ------- | ---- | ----------- | -------\ndouble->long |  32.2ns | 28ns |     0.024ms |  3.22s\nlong->double |  31.9ns | 28ns |     0.036ms |  3.19s\nlong->String | 163.8ns | 93ns |  1921    ms | 16.3s\n\n\n\n#36752 The program heat map shows that the toString time is\nparticularly serious.\n\n## optimization\n\nOur optimization code is actually very simple. It is to manage different\ntypes separately.  instead of uniformly converting to string unified\nprocessing. We added type identification in ValueCountAggregator.  and\nmade special treatment for number and geopoint types to cancel their\ntype conversion. Because the string type is reduced and the string\nconstant is reduced.  the improvement effect is very obvious.\n\n## result\n\n    hits    |   avg   |   sum   | value_count | value_count | value_count | value_count | value_count | value_count |\n            |         |         |    double   |    double   |   keyword   |   keyword   |  geo_point  |  geo_point  |\n            |         |         |   before    |    after    |   before    |    after    |   before    |    after    |\n----------- | ------- | ------- | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- |\n     20. 000 |     38s |   .033s |       .063s |       .026s |       .030s |       .030s |       .038s |       .015s |\n    200. 000 |    127s |   .125s |       .334s |       .078s |       .116s |       .099s |       .278s |       .031s |\n  2. 000. 000 |    789s |   .729s |      3.176s |       .439s |       .348s |       .386s |      3.365s |       .178s |\n 20. 000. 000 |  4.200s |  3.239s |     22.787s |      2.700s |      2.500s |      2.600s |     25.192s |      1.278s |\n200. 000. 000 | 21.000s | 22.000s |    154.917s |     18.990s |     19.000s |     20.000s |    168.971s |      9.093s |\n\n- The results are more in line with common sense. `value_count` is about\n  the same as `avg`.  `sum`.  etc..  or even lower than these. Previously. \n  `value_count` was much larger than avg and sum.  and it was not even an\n  order of magnitude when the amount of data was large.\n- When calculating numeric types such as `double` and `long`.  the\n  performance is improved by about 8 to 9 times; when calculating the\n  `geo_point` type.  the performance is improved by 18 to 20 times.\n","date":"2020-04-10 23:06:10","modifiedFileCount":"2","status":"M","submitter":"ScriptShi"},{"authorTime":"2020-04-14 14:38:04","codes":[{"authorDate":"2020-04-14 14:38:04","commitOrder":4,"curCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, NUMBER_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","date":"2020-04-14 14:38:04","endLine":291,"groupId":"11487","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueScriptNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/c1e3a825cd5d36605a5d3b509cd011348604e3.src","preCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, NUMBER_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2020-04-14 14:38:04","commitOrder":4,"curCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, STRING_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","date":"2020-04-14 14:38:04","endLine":341,"groupId":"72360","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueScriptString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/c1e3a825cd5d36605a5d3b509cd011348604e3.src","preCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, STRING_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, card -> {\n            assertEquals(3, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"a862dff26c67744d63076f9d5d8a774ca17e7fe9","commitMessage":"@@@Add tests to MedianAbsoluteDeviationAggregator (#54884)\n\n","date":"2020-04-14 14:38:04","modifiedFileCount":"3","status":"M","submitter":"Christos Soulios"},{"authorTime":"2020-04-29 21:24:07","codes":[{"authorDate":"2020-04-29 21:24:07","commitOrder":5,"curCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, NUMBER_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","date":"2020-04-29 21:24:07","endLine":287,"groupId":"11487","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueScriptNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/c8678317bf7e9b5f3f84cb74a73dbbedf2b62f.src","preCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, NUMBER_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"},{"authorDate":"2020-04-29 21:24:07","commitOrder":5,"curCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, STRING_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","date":"2020-04-29 21:24:07","endLine":337,"groupId":"72360","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueScriptString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/c8678317bf7e9b5f3f84cb74a73dbbedf2b62f.src","preCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, STRING_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"ceb6e6227fb48cf6986f1124014df4cbc6f82a40","commitMessage":"@@@Modified searchAndReduce() to return empty agg when no docs exist  (#55826)\n\nModified AggregatorTestCase.searchAndReduce() method so that it returns an empty aggregation result when no documents have been inserted.\n\nAlso refactored several aggregation tests so they do not re-implement method AggregatorTestCase.testCase()\n\nFixes #55824","date":"2020-04-29 21:24:07","modifiedFileCount":"12","status":"M","submitter":"Christos Soulios"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":6,"curCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, NUMBER_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(FIELD_NAME, ValueType.NUMERIC);\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","date":"2020-06-16 00:47:15","endLine":287,"groupId":"104906","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testValueScriptNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/782469d8486129d453e17c937627d1f8bd6f20.src","preCode":"    public void testValueScriptNumber() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, NUMBER_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.NUMERIC);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(FIELD_NAME, 9)));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":6,"curCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, STRING_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(FIELD_NAME, ValueType.STRING);\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","date":"2020-06-16 00:47:15","endLine":333,"groupId":"104906","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testValueScriptString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/782469d8486129d453e17c937627d1f8bd6f20.src","preCode":"    public void testValueScriptString() throws IOException {\n        ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"name\")\n            .field(FIELD_NAME)\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, STRING_VALUE_SCRIPT, Collections.emptyMap()));\n\n        MappedFieldType fieldType = createMappedFieldType(ValueType.STRING);\n        fieldType.setName(FIELD_NAME);\n        fieldType.setHasDocValues(true);\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"1\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"2\"))));\n            iw.addDocument(singleton(new SortedDocValuesField(FIELD_NAME, new BytesRef(\"3\"))));\n        }, valueCount -> {\n            assertEquals(3, valueCount.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(valueCount));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"}]
