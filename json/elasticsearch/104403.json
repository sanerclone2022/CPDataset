[{"authorTime":"2020-04-11 00:03:31","codes":[{"authorDate":"2020-02-01 00:43:25","commitOrder":3,"curCode":"    public void testFilterNodesWithNodePredicate() {\n        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        try (MockTransportService seedTransport = startTransport(\"seed_node\", knownNodes, Version.CURRENT);\n             MockTransportService discoverableTransport = startTransport(\"discoverable_node\", knownNodes, Version.CURRENT)) {\n            DiscoveryNode seedNode = seedTransport.getLocalNode();\n            DiscoveryNode discoverableNode = discoverableTransport.getLocalNode();\n            knownNodes.add(seedNode);\n            knownNodes.add(discoverableNode);\n            DiscoveryNode rejectedNode = randomBoolean() ? seedNode : discoverableNode;\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService localService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool)) {\n                localService.start();\n                localService.acceptIncomingRequests();\n\n                ClusterConnectionManager connectionManager = new ClusterConnectionManager(profile, localService.transport);\n                try (RemoteConnectionManager remoteConnectionManager = new RemoteConnectionManager(clusterAlias, connectionManager);\n                     SniffConnectionStrategy strategy = new SniffConnectionStrategy(clusterAlias, localService, remoteConnectionManager,\n                         null, 3, n -> n.equals(rejectedNode) == false, seedNodes(seedNode))) {\n                    PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture();\n                    strategy.connect(connectFuture);\n                    connectFuture.actionGet();\n\n                    if (rejectedNode.equals(seedNode)) {\n                        assertFalse(connectionManager.nodeConnected(seedNode));\n                        assertTrue(connectionManager.nodeConnected(discoverableNode));\n                    } else {\n                        assertTrue(connectionManager.nodeConnected(seedNode));\n                        assertFalse(connectionManager.nodeConnected(discoverableNode));\n                    }\n                    assertTrue(strategy.assertNoRunningConnections());\n                }\n            }\n        }\n    }\n","date":"2020-02-01 00:43:25","endLine":325,"groupId":"24524","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterNodesWithNodePredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/55caa4e639b73d1d7110865b2a59daa67ce559.src","preCode":"    public void testFilterNodesWithNodePredicate() {\n        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        try (MockTransportService seedTransport = startTransport(\"seed_node\", knownNodes, Version.CURRENT);\n             MockTransportService discoverableTransport = startTransport(\"discoverable_node\", knownNodes, Version.CURRENT)) {\n            DiscoveryNode seedNode = seedTransport.getLocalNode();\n            DiscoveryNode discoverableNode = discoverableTransport.getLocalNode();\n            knownNodes.add(seedNode);\n            knownNodes.add(discoverableNode);\n            DiscoveryNode rejectedNode = randomBoolean() ? seedNode : discoverableNode;\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService localService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool)) {\n                localService.start();\n                localService.acceptIncomingRequests();\n\n                ClusterConnectionManager connectionManager = new ClusterConnectionManager(profile, localService.transport);\n                try (RemoteConnectionManager remoteConnectionManager = new RemoteConnectionManager(clusterAlias, connectionManager);\n                     SniffConnectionStrategy strategy = new SniffConnectionStrategy(clusterAlias, localService, remoteConnectionManager,\n                         null, 3, n -> n.equals(rejectedNode) == false, seedNodes(seedNode))) {\n                    PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture();\n                    strategy.connect(connectFuture);\n                    connectFuture.actionGet();\n\n                    if (rejectedNode.equals(seedNode)) {\n                        assertFalse(connectionManager.nodeConnected(seedNode));\n                        assertTrue(connectionManager.nodeConnected(discoverableNode));\n                    } else {\n                        assertTrue(connectionManager.nodeConnected(seedNode));\n                        assertFalse(connectionManager.nodeConnected(discoverableNode));\n                    }\n                    assertTrue(strategy.assertNoRunningConnections());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/SniffConnectionStrategyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"NB"},{"authorDate":"2020-04-11 00:03:31","commitOrder":3,"curCode":"    public void testConnectFailsIfNoConnectionsOpened() {\n        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        try (MockTransportService seedTransport = startTransport(\"seed_node\", knownNodes, Version.CURRENT);\n             MockTransportService closedTransport = startTransport(\"discoverable_node\", knownNodes, Version.CURRENT)) {\n            DiscoveryNode seedNode = seedTransport.getLocalNode();\n            DiscoveryNode discoverableNode = closedTransport.getLocalNode();\n            knownNodes.add(discoverableNode);\n            closedTransport.close();\n\n            try (MockTransportService localService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool)) {\n                localService.start();\n                localService.acceptIncomingRequests();\n\n                \r\n                ClusterConnectionManager connectionManager = new ClusterConnectionManager(profile, localService.transport);\n                try (RemoteConnectionManager remoteConnectionManager = new RemoteConnectionManager(clusterAlias, connectionManager);\n                     SniffConnectionStrategy strategy = new SniffConnectionStrategy(clusterAlias, localService, remoteConnectionManager,\n                         null, 3, n -> n.equals(seedNode) == false, seedNodes(seedNode))) {\n                    PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture();\n                    strategy.connect(connectFuture);\n                    final IllegalStateException ise = expectThrows(IllegalStateException.class, connectFuture::actionGet);\n                    assertEquals(\"Unable to open any connections to remote cluster [cluster-alias]\", ise.getMessage());\n                    assertTrue(strategy.assertNoRunningConnections());\n                }\n            }\n        }\n    }\n","date":"2020-04-11 00:03:31","endLine":353,"groupId":"68581","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConnectFailsIfNoConnectionsOpened","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/0d1673af4a28f171fcd7847888213bb5320b79.src","preCode":"    public void testConnectFailsIfNoConnectionsOpened() {\n        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        try (MockTransportService seedTransport = startTransport(\"seed_node\", knownNodes, Version.CURRENT);\n             MockTransportService closedTransport = startTransport(\"discoverable_node\", knownNodes, Version.CURRENT)) {\n            DiscoveryNode seedNode = seedTransport.getLocalNode();\n            DiscoveryNode discoverableNode = closedTransport.getLocalNode();\n            knownNodes.add(discoverableNode);\n            closedTransport.close();\n\n            try (MockTransportService localService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool)) {\n                localService.start();\n                localService.acceptIncomingRequests();\n\n                \r\n                ClusterConnectionManager connectionManager = new ClusterConnectionManager(profile, localService.transport);\n                try (RemoteConnectionManager remoteConnectionManager = new RemoteConnectionManager(clusterAlias, connectionManager);\n                     SniffConnectionStrategy strategy = new SniffConnectionStrategy(clusterAlias, localService, remoteConnectionManager,\n                         null, 3, n -> n.equals(seedNode) == false, seedNodes(seedNode))) {\n                    PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture();\n                    strategy.connect(connectFuture);\n                    final IllegalStateException ise = expectThrows(IllegalStateException.class, connectFuture::actionGet);\n                    assertEquals(\"Unable to open any connections to remote cluster [cluster-alias]\", ise.getMessage());\n                    assertTrue(strategy.assertNoRunningConnections());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/SniffConnectionStrategyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"B"}],"commitId":"dd72ccbe277eb4d16c984ab3b4c7d04b21db739b","commitMessage":"@@@Fail sniff  process if no connections opened (#54934)\n\nCurrently the remote cluster sniff connection process can succeed even\nif no connections are opened. This commit fixes this by failing the\nconnection process if no connections are successfully opened.","date":"2020-04-11 00:03:31","modifiedFileCount":"2","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-04-17 12:10:56","codes":[{"authorDate":"2020-04-17 12:10:56","commitOrder":4,"curCode":"    public void testFilterNodesWithNodePredicate() {\n        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        try (MockTransportService seedTransport = startTransport(\"seed_node\", knownNodes, Version.CURRENT);\n             MockTransportService discoverableTransport = startTransport(\"discoverable_node\", knownNodes, Version.CURRENT)) {\n            DiscoveryNode seedNode = seedTransport.getLocalNode();\n            DiscoveryNode discoverableNode = discoverableTransport.getLocalNode();\n            knownNodes.add(seedNode);\n            knownNodes.add(discoverableNode);\n            DiscoveryNode rejectedNode = randomBoolean() ? seedNode : discoverableNode;\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService localService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool)) {\n                localService.start();\n                localService.acceptIncomingRequests();\n\n                ClusterConnectionManager connectionManager = new ClusterConnectionManager(profile, localService.transport);\n                try (RemoteConnectionManager remoteConnectionManager = new RemoteConnectionManager(clusterAlias, connectionManager);\n                     SniffConnectionStrategy strategy = new SniffConnectionStrategy(clusterAlias, localService, remoteConnectionManager,\n                         null, Settings.EMPTY, 3, n -> n.equals(rejectedNode) == false, seedNodes(seedNode))) {\n                    PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture();\n                    strategy.connect(connectFuture);\n                    connectFuture.actionGet();\n\n                    if (rejectedNode.equals(seedNode)) {\n                        assertFalse(connectionManager.nodeConnected(seedNode));\n                        assertTrue(connectionManager.nodeConnected(discoverableNode));\n                    } else {\n                        assertTrue(connectionManager.nodeConnected(seedNode));\n                        assertFalse(connectionManager.nodeConnected(discoverableNode));\n                    }\n                    assertTrue(strategy.assertNoRunningConnections());\n                }\n            }\n        }\n    }\n","date":"2020-04-17 12:10:56","endLine":325,"groupId":"104403","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterNodesWithNodePredicate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/60286a03a5683885ad53a861d452ed973c86b7.src","preCode":"    public void testFilterNodesWithNodePredicate() {\n        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        try (MockTransportService seedTransport = startTransport(\"seed_node\", knownNodes, Version.CURRENT);\n             MockTransportService discoverableTransport = startTransport(\"discoverable_node\", knownNodes, Version.CURRENT)) {\n            DiscoveryNode seedNode = seedTransport.getLocalNode();\n            DiscoveryNode discoverableNode = discoverableTransport.getLocalNode();\n            knownNodes.add(seedNode);\n            knownNodes.add(discoverableNode);\n            DiscoveryNode rejectedNode = randomBoolean() ? seedNode : discoverableNode;\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService localService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool)) {\n                localService.start();\n                localService.acceptIncomingRequests();\n\n                ClusterConnectionManager connectionManager = new ClusterConnectionManager(profile, localService.transport);\n                try (RemoteConnectionManager remoteConnectionManager = new RemoteConnectionManager(clusterAlias, connectionManager);\n                     SniffConnectionStrategy strategy = new SniffConnectionStrategy(clusterAlias, localService, remoteConnectionManager,\n                         null, 3, n -> n.equals(rejectedNode) == false, seedNodes(seedNode))) {\n                    PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture();\n                    strategy.connect(connectFuture);\n                    connectFuture.actionGet();\n\n                    if (rejectedNode.equals(seedNode)) {\n                        assertFalse(connectionManager.nodeConnected(seedNode));\n                        assertTrue(connectionManager.nodeConnected(discoverableNode));\n                    } else {\n                        assertTrue(connectionManager.nodeConnected(seedNode));\n                        assertFalse(connectionManager.nodeConnected(discoverableNode));\n                    }\n                    assertTrue(strategy.assertNoRunningConnections());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/SniffConnectionStrategyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2020-04-17 12:10:56","commitOrder":4,"curCode":"    public void testConnectFailsIfNoConnectionsOpened() {\n        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        try (MockTransportService seedTransport = startTransport(\"seed_node\", knownNodes, Version.CURRENT);\n             MockTransportService closedTransport = startTransport(\"discoverable_node\", knownNodes, Version.CURRENT)) {\n            DiscoveryNode seedNode = seedTransport.getLocalNode();\n            DiscoveryNode discoverableNode = closedTransport.getLocalNode();\n            knownNodes.add(discoverableNode);\n            closedTransport.close();\n\n            try (MockTransportService localService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool)) {\n                localService.start();\n                localService.acceptIncomingRequests();\n\n                \r\n                ClusterConnectionManager connectionManager = new ClusterConnectionManager(profile, localService.transport);\n                try (RemoteConnectionManager remoteConnectionManager = new RemoteConnectionManager(clusterAlias, connectionManager);\n                     SniffConnectionStrategy strategy = new SniffConnectionStrategy(clusterAlias, localService, remoteConnectionManager,\n                         null, Settings.EMPTY, 3, n -> n.equals(seedNode) == false, seedNodes(seedNode))) {\n                    PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture();\n                    strategy.connect(connectFuture);\n                    final IllegalStateException ise = expectThrows(IllegalStateException.class, connectFuture::actionGet);\n                    assertEquals(\"Unable to open any connections to remote cluster [cluster-alias]\", ise.getMessage());\n                    assertTrue(strategy.assertNoRunningConnections());\n                }\n            }\n        }\n    }\n","date":"2020-04-17 12:10:56","endLine":353,"groupId":"104403","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConnectFailsIfNoConnectionsOpened","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/60286a03a5683885ad53a861d452ed973c86b7.src","preCode":"    public void testConnectFailsIfNoConnectionsOpened() {\n        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        try (MockTransportService seedTransport = startTransport(\"seed_node\", knownNodes, Version.CURRENT);\n             MockTransportService closedTransport = startTransport(\"discoverable_node\", knownNodes, Version.CURRENT)) {\n            DiscoveryNode seedNode = seedTransport.getLocalNode();\n            DiscoveryNode discoverableNode = closedTransport.getLocalNode();\n            knownNodes.add(discoverableNode);\n            closedTransport.close();\n\n            try (MockTransportService localService = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool)) {\n                localService.start();\n                localService.acceptIncomingRequests();\n\n                \r\n                ClusterConnectionManager connectionManager = new ClusterConnectionManager(profile, localService.transport);\n                try (RemoteConnectionManager remoteConnectionManager = new RemoteConnectionManager(clusterAlias, connectionManager);\n                     SniffConnectionStrategy strategy = new SniffConnectionStrategy(clusterAlias, localService, remoteConnectionManager,\n                         null, 3, n -> n.equals(seedNode) == false, seedNodes(seedNode))) {\n                    PlainActionFuture<Void> connectFuture = PlainActionFuture.newFuture();\n                    strategy.connect(connectFuture);\n                    final IllegalStateException ise = expectThrows(IllegalStateException.class, connectFuture::actionGet);\n                    assertEquals(\"Unable to open any connections to remote cluster [cluster-alias]\", ise.getMessage());\n                    assertTrue(strategy.assertNoRunningConnections());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/SniffConnectionStrategyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"5216bd273a70dd8d801d4c925b85c60d5ceadf7a","commitMessage":"@@@Retry follow task when remote connection queue full (#55314)\n\nIf more than 100 shard-follow tasks are trying to connect to the remote \ncluster.  then some of them will abort with \"connect listener queue is \nfull\". This is because we retry on ESRejectedExecutionException.  but not\non RejectedExecutionException.","date":"2020-04-17 12:10:56","modifiedFileCount":"10","status":"M","submitter":"Nhat Nguyen"}]
