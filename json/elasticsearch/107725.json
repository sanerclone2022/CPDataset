[{"authorTime":"2018-12-13 15:08:40","codes":[{"authorDate":"2018-12-13 15:08:40","commitOrder":2,"curCode":"        public Index(Term uid, ParsedDocument doc, long seqNo, long primaryTerm, long version, VersionType versionType, Origin origin,\n                     long startTime, long autoGeneratedIdTimestamp, boolean isRetry, long ifSeqNoMatch, long ifPrimaryTermMatch) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTermMatch >= 0 : \"ifPrimaryTermMatch [\" + ifPrimaryTermMatch + \"] must be non negative\";\n            assert ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNoMatch >=0 :\n                \"ifSeqNoMatch [\" + ifSeqNoMatch + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTermMatch == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.doc = doc;\n            this.isRetry = isRetry;\n            this.autoGeneratedIdTimestamp = autoGeneratedIdTimestamp;\n            this.ifSeqNoMatch = ifSeqNoMatch;\n            this.ifPrimaryTermMatch = ifPrimaryTermMatch;\n        }\n","date":"2018-12-13 15:08:40","endLine":1365,"groupId":"4711","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"Index","params":"(Termuid@ParsedDocumentdoc@longseqNo@longprimaryTerm@longversion@VersionTypeversionType@Originorigin@longstartTime@longautoGeneratedIdTimestamp@booleanisRetry@longifSeqNoMatch@longifPrimaryTermMatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d0/d10986fd8ed461cf655ca1a3adb45574aafbbf.src","preCode":"        public Index(Term uid, ParsedDocument doc, long seqNo, long primaryTerm, long version, VersionType versionType, Origin origin,\n                     long startTime, long autoGeneratedIdTimestamp, boolean isRetry, long ifSeqNoMatch, long ifPrimaryTermMatch) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTermMatch >= 0 : \"ifPrimaryTermMatch [\" + ifPrimaryTermMatch + \"] must be non negative\";\n            assert ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNoMatch >=0 :\n                \"ifSeqNoMatch [\" + ifSeqNoMatch + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTermMatch == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.doc = doc;\n            this.isRetry = isRetry;\n            this.autoGeneratedIdTimestamp = autoGeneratedIdTimestamp;\n            this.ifSeqNoMatch = ifSeqNoMatch;\n            this.ifPrimaryTermMatch = ifPrimaryTermMatch;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/engine/Engine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"MB"},{"authorDate":"2018-12-13 15:08:40","commitOrder":2,"curCode":"        public Delete(String type, String id, Term uid, long seqNo, long primaryTerm, long version, VersionType versionType,\n                      Origin origin, long startTime, long ifSeqNoMatch, long ifPrimaryTermMatch) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTermMatch >= 0 : \"ifPrimaryTermMatch [\" + ifPrimaryTermMatch + \"] must be non negative\";\n            assert ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNoMatch >=0 :\n                \"ifSeqNoMatch [\" + ifSeqNoMatch + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTermMatch == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.type = Objects.requireNonNull(type);\n            this.id = Objects.requireNonNull(id);\n            this.ifSeqNoMatch = ifSeqNoMatch;\n            this.ifPrimaryTermMatch = ifPrimaryTermMatch;\n        }\n","date":"2018-12-13 15:08:40","endLine":1458,"groupId":"4711","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"Delete","params":"(Stringtype@Stringid@Termuid@longseqNo@longprimaryTerm@longversion@VersionTypeversionType@Originorigin@longstartTime@longifSeqNoMatch@longifPrimaryTermMatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d0/d10986fd8ed461cf655ca1a3adb45574aafbbf.src","preCode":"        public Delete(String type, String id, Term uid, long seqNo, long primaryTerm, long version, VersionType versionType,\n                      Origin origin, long startTime, long ifSeqNoMatch, long ifPrimaryTermMatch) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTermMatch >= 0 : \"ifPrimaryTermMatch [\" + ifPrimaryTermMatch + \"] must be non negative\";\n            assert ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNoMatch >=0 :\n                \"ifSeqNoMatch [\" + ifSeqNoMatch + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTermMatch == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.type = Objects.requireNonNull(type);\n            this.id = Objects.requireNonNull(id);\n            this.ifSeqNoMatch = ifSeqNoMatch;\n            this.ifPrimaryTermMatch = ifPrimaryTermMatch;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/engine/Engine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1445,"status":"B"}],"commitId":"f6b5d7e01387c09a449f67e2678cf852f58770b1","commitMessage":"@@@Add sequence numbers based optimistic concurrency control support to Engine (#36467)\n\nThis commit add support to engine operations for resolving and verifying the sequence number and\nprimary term of the last modification to a document before performing an operation. This is\ninfrastructure to move our (optimistic concurrency control)[http://en.wikipedia.org/wiki/Optimistic_concurrency_control] API to use sequence numbers instead of internal versioning.\n\nRelates #36148 \nRelates #10708\n","date":"2018-12-13 15:08:40","modifiedFileCount":"16","status":"M","submitter":"Boaz Leskes"},{"authorTime":"2018-12-18 21:35:18","codes":[{"authorDate":"2018-12-18 21:35:18","commitOrder":3,"curCode":"        public Index(Term uid, ParsedDocument doc, long seqNo, long primaryTerm, long version, VersionType versionType, Origin origin,\n                     long startTime, long autoGeneratedIdTimestamp, boolean isRetry, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTerm == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.doc = doc;\n            this.isRetry = isRetry;\n            this.autoGeneratedIdTimestamp = autoGeneratedIdTimestamp;\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","date":"2018-12-18 21:35:18","endLine":1365,"groupId":"18509","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"Index","params":"(Termuid@ParsedDocumentdoc@longseqNo@longprimaryTerm@longversion@VersionTypeversionType@Originorigin@longstartTime@longautoGeneratedIdTimestamp@booleanisRetry@longifSeqNo@longifPrimaryTerm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/d0157476649d84ac473dc3d27c3b9140fdff20.src","preCode":"        public Index(Term uid, ParsedDocument doc, long seqNo, long primaryTerm, long version, VersionType versionType, Origin origin,\n                     long startTime, long autoGeneratedIdTimestamp, boolean isRetry, long ifSeqNoMatch, long ifPrimaryTermMatch) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTermMatch >= 0 : \"ifPrimaryTermMatch [\" + ifPrimaryTermMatch + \"] must be non negative\";\n            assert ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNoMatch >=0 :\n                \"ifSeqNoMatch [\" + ifSeqNoMatch + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTermMatch == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.doc = doc;\n            this.isRetry = isRetry;\n            this.autoGeneratedIdTimestamp = autoGeneratedIdTimestamp;\n            this.ifSeqNoMatch = ifSeqNoMatch;\n            this.ifPrimaryTermMatch = ifPrimaryTermMatch;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/engine/Engine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"M"},{"authorDate":"2018-12-18 21:35:18","commitOrder":3,"curCode":"        public Delete(String type, String id, Term uid, long seqNo, long primaryTerm, long version, VersionType versionType,\n                      Origin origin, long startTime, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTerm == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.type = Objects.requireNonNull(type);\n            this.id = Objects.requireNonNull(id);\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","date":"2018-12-18 21:35:18","endLine":1458,"groupId":"18509","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"Delete","params":"(Stringtype@Stringid@Termuid@longseqNo@longprimaryTerm@longversion@VersionTypeversionType@Originorigin@longstartTime@longifSeqNo@longifPrimaryTerm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/d0157476649d84ac473dc3d27c3b9140fdff20.src","preCode":"        public Delete(String type, String id, Term uid, long seqNo, long primaryTerm, long version, VersionType versionType,\n                      Origin origin, long startTime, long ifSeqNoMatch, long ifPrimaryTermMatch) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTermMatch >= 0 : \"ifPrimaryTermMatch [\" + ifPrimaryTermMatch + \"] must be non negative\";\n            assert ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNoMatch >=0 :\n                \"ifSeqNoMatch [\" + ifSeqNoMatch + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNoMatch == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTermMatch == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.type = Objects.requireNonNull(type);\n            this.id = Objects.requireNonNull(id);\n            this.ifSeqNoMatch = ifSeqNoMatch;\n            this.ifPrimaryTermMatch = ifPrimaryTermMatch;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/engine/Engine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1445,"status":"M"}],"commitId":"5f76f39386af17899bd3a495b2f501fb1066241f","commitMessage":"@@@Rename seq# powered optimistic concurrency control parameters to ifSeqNo/ifPrimaryTerm  (#36757)\n\nThis PR renames the parameters previously introduce to the following:\n\n\n URL Parameters\n```\nPUT twitter/_doc/1?if_seq_no=501&if_primary_term=1\n{\n    \"user\" : \"kimchy\". \n    \"post_date\" : \"2009-11-15T14:12:12\". \n    \"message\" : \"trying out Elasticsearch\"\n}\n\nDELETE twitter/_doc/1?if_seq_no=501&if_primary_term=1\n```\n\n\n Bulk API\n```\nPOST _bulk\n{ \"index\" : { \"_index\" : \"test\".  \"_type\" : \"_doc\".  \"_id\" : \"1\".  \"if_seq_no\": 501.  \"if_primary_term\": 1 } }\n{ \"field1\" : \"value1\" }\n{ \"delete\" : { \"_index\" : \"test\".  \"_type\" : \"_doc\".  \"_id\" : \"2\".  \"if_seq_no\": 501.  \"if_primary_term\": 1 } }\n```\n\n\n Java API\n```\nIndexRequest.ifSeqNo(long seqNo)\nIndexRequest.ifPrimaryTerm(long primaryTerm)\nDeleteRequest.ifSeqNo(long seqNo)\nDeleteRequest.ifPrimaryTerm(long primaryTerm)\n```\n\nRelates #36148\nRelates #10708","date":"2018-12-18 21:35:18","modifiedFileCount":"13","status":"M","submitter":"Boaz Leskes"},{"authorTime":"2018-12-19 20:15:05","codes":[{"authorDate":"2018-12-19 20:15:05","commitOrder":4,"curCode":"        public Index(Term uid, ParsedDocument doc, long seqNo, long primaryTerm, long version, VersionType versionType, Origin origin,\n                     long startTime, long autoGeneratedIdTimestamp, boolean isRetry, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == UNASSIGNED_SEQ_NO && ifPrimaryTerm == UNASSIGNED_PRIMARY_TERM) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.doc = doc;\n            this.isRetry = isRetry;\n            this.autoGeneratedIdTimestamp = autoGeneratedIdTimestamp;\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","date":"2018-12-19 20:15:05","endLine":1367,"groupId":"42218","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"Index","params":"(Termuid@ParsedDocumentdoc@longseqNo@longprimaryTerm@longversion@VersionTypeversionType@Originorigin@longstartTime@longautoGeneratedIdTimestamp@booleanisRetry@longifSeqNo@longifPrimaryTerm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/8b85331030de6d59c87f1786a34e6d7c0052c1.src","preCode":"        public Index(Term uid, ParsedDocument doc, long seqNo, long primaryTerm, long version, VersionType versionType, Origin origin,\n                     long startTime, long autoGeneratedIdTimestamp, boolean isRetry, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTerm == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.doc = doc;\n            this.isRetry = isRetry;\n            this.autoGeneratedIdTimestamp = autoGeneratedIdTimestamp;\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/engine/Engine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1353,"status":"M"},{"authorDate":"2018-12-19 20:15:05","commitOrder":4,"curCode":"        public Delete(String type, String id, Term uid, long seqNo, long primaryTerm, long version, VersionType versionType,\n                      Origin origin, long startTime, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == UNASSIGNED_SEQ_NO && ifPrimaryTerm == UNASSIGNED_PRIMARY_TERM) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.type = Objects.requireNonNull(type);\n            this.id = Objects.requireNonNull(id);\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","date":"2018-12-19 20:15:05","endLine":1460,"groupId":"42218","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"Delete","params":"(Stringtype@Stringid@Termuid@longseqNo@longprimaryTerm@longversion@VersionTypeversionType@Originorigin@longstartTime@longifSeqNo@longifPrimaryTerm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/8b85331030de6d59c87f1786a34e6d7c0052c1.src","preCode":"        public Delete(String type, String id, Term uid, long seqNo, long primaryTerm, long version, VersionType versionType,\n                      Origin origin, long startTime, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO && ifPrimaryTerm == 0) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.type = Objects.requireNonNull(type);\n            this.id = Objects.requireNonNull(id);\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/engine/Engine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1447,"status":"M"}],"commitId":"216b15410768694019240636c08180245328ac3a","commitMessage":"@@@Replace 0L with an UNASSIGNED_PRIMARY_TERM constant (#36819)\n\n* Replace 0L with an UNASSIGNED_PRIMARY_TERM constant\n\n0 is an illegal value for a primary term that is often used to indicate\nthe primary term isn't assigned or is irrelevant. This PR replaces the\nusage of 0 with a constant.  to improve readability and so it can be\ntracked and if needed.  replaced.\n\n* feedback\n","date":"2018-12-19 20:15:05","modifiedFileCount":"17","status":"M","submitter":"Boaz Leskes"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2018-12-19 20:15:05","commitOrder":5,"curCode":"        public Index(Term uid, ParsedDocument doc, long seqNo, long primaryTerm, long version, VersionType versionType, Origin origin,\n                     long startTime, long autoGeneratedIdTimestamp, boolean isRetry, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == UNASSIGNED_SEQ_NO && ifPrimaryTerm == UNASSIGNED_PRIMARY_TERM) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.doc = doc;\n            this.isRetry = isRetry;\n            this.autoGeneratedIdTimestamp = autoGeneratedIdTimestamp;\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","date":"2018-12-19 20:15:05","endLine":1367,"groupId":"107725","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"Index","params":"(Termuid@ParsedDocumentdoc@longseqNo@longprimaryTerm@longversion@VersionTypeversionType@Originorigin@longstartTime@longautoGeneratedIdTimestamp@booleanisRetry@longifSeqNo@longifPrimaryTerm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/8b85331030de6d59c87f1786a34e6d7c0052c1.src","preCode":"        public Index(Term uid, ParsedDocument doc, long seqNo, long primaryTerm, long version, VersionType versionType, Origin origin,\n                     long startTime, long autoGeneratedIdTimestamp, boolean isRetry, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == UNASSIGNED_SEQ_NO && ifPrimaryTerm == UNASSIGNED_PRIMARY_TERM) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.doc = doc;\n            this.isRetry = isRetry;\n            this.autoGeneratedIdTimestamp = autoGeneratedIdTimestamp;\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/engine/Engine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1353,"status":"N"},{"authorDate":"2019-10-15 16:05:29","commitOrder":5,"curCode":"        public Delete(String id, Term uid, long seqNo, long primaryTerm, long version, VersionType versionType,\n                      Origin origin, long startTime, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == UNASSIGNED_SEQ_NO && ifPrimaryTerm == UNASSIGNED_PRIMARY_TERM) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.id = Objects.requireNonNull(id);\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","date":"2019-10-15 16:05:29","endLine":1461,"groupId":"107725","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"Delete","params":"(Stringid@Termuid@longseqNo@longprimaryTerm@longversion@VersionTypeversionType@Originorigin@longstartTime@longifSeqNo@longifPrimaryTerm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/b6b62ca2e6a4cc07baf7453319275fabae1c40.src","preCode":"        public Delete(String type, String id, Term uid, long seqNo, long primaryTerm, long version, VersionType versionType,\n                      Origin origin, long startTime, long ifSeqNo, long ifPrimaryTerm) {\n            super(uid, seqNo, primaryTerm, version, versionType, origin, startTime);\n            assert (origin == Origin.PRIMARY) == (versionType != null) : \"invalid version_type=\" + versionType + \" for origin=\" + origin;\n            assert ifPrimaryTerm >= 0 : \"ifPrimaryTerm [\" + ifPrimaryTerm + \"] must be non negative\";\n            assert ifSeqNo == UNASSIGNED_SEQ_NO || ifSeqNo >=0 :\n                \"ifSeqNo [\" + ifSeqNo + \"] must be non negative or unset\";\n            assert (origin == Origin.PRIMARY) || (ifSeqNo == UNASSIGNED_SEQ_NO && ifPrimaryTerm == UNASSIGNED_PRIMARY_TERM) :\n                \"cas operations are only allowed if origin is primary. get [\" + origin + \"]\";\n            this.type = Objects.requireNonNull(type);\n            this.id = Objects.requireNonNull(id);\n            this.ifSeqNo = ifSeqNo;\n            this.ifPrimaryTerm = ifPrimaryTerm;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/engine/Engine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1449,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"}]
