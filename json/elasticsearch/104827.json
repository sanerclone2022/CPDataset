[{"authorTime":"2018-05-17 06:46:44","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    protected HistogramAggregationBuilder createTestAggregatorBuilder() {\n        HistogramAggregationBuilder factory = new HistogramAggregationBuilder(\"foo\");\n        factory.field(INT_FIELD_NAME);\n        factory.interval(randomDouble() * 1000);\n        if (randomBoolean()) {\n            double minBound = randomDouble();\n            double maxBound = randomDoubleBetween(minBound, 1, true);\n            factory.extendedBounds(minBound, maxBound);\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","date":"2018-04-26 03:22:53","endLine":68,"groupId":"58133","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/22b2291773d4fd552d2a75cc45247e828c5d4a.src","preCode":"    protected HistogramAggregationBuilder createTestAggregatorBuilder() {\n        HistogramAggregationBuilder factory = new HistogramAggregationBuilder(\"foo\");\n        factory.field(INT_FIELD_NAME);\n        factory.interval(randomDouble() * 1000);\n        if (randomBoolean()) {\n            double minBound = randomDouble();\n            double maxBound = randomDoubleBetween(minBound, 1, true);\n            factory.extendedBounds(minBound, maxBound);\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"NB"},{"authorDate":"2018-05-17 06:46:44","commitOrder":2,"curCode":"    protected DateHistogramAggregationBuilder createTestAggregatorBuilder() {\n        DateHistogramAggregationBuilder factory = new DateHistogramAggregationBuilder(\"foo\");\n        factory.field(INT_FIELD_NAME);\n        if (randomBoolean()) {\n            factory.interval(randomIntBetween(1, 100000));\n        } else {\n            if (randomBoolean()) {\n                factory.dateHistogramInterval(randomFrom(DateHistogramInterval.YEAR, DateHistogramInterval.QUARTER,\n                        DateHistogramInterval.MONTH, DateHistogramInterval.WEEK, DateHistogramInterval.DAY, DateHistogramInterval.HOUR,\n                        DateHistogramInterval.MINUTE, DateHistogramInterval.SECOND));\n            } else {\n                int branch = randomInt(4);\n                switch (branch) {\n                case 0:\n                    factory.dateHistogramInterval(DateHistogramInterval.seconds(randomIntBetween(1, 1000)));\n                    break;\n                case 1:\n                    factory.dateHistogramInterval(DateHistogramInterval.minutes(randomIntBetween(1, 1000)));\n                    break;\n                case 2:\n                    factory.dateHistogramInterval(DateHistogramInterval.hours(randomIntBetween(1, 1000)));\n                    break;\n                case 3:\n                    factory.dateHistogramInterval(DateHistogramInterval.days(randomIntBetween(1, 1000)));\n                    break;\n                case 4:\n                    factory.dateHistogramInterval(DateHistogramInterval.weeks(randomIntBetween(1, 1000)));\n                    break;\n                default:\n                    throw new IllegalStateException(\"invalid branch: \" + branch);\n                }\n            }\n        }\n        if (randomBoolean()) {\n            factory.extendedBounds(ExtendedBoundsTests.randomExtendedBounds());\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","date":"2018-05-17 06:46:44","endLine":107,"groupId":"429","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/83842eab24f10e143a99b3de0c7ca95681417f.src","preCode":"    protected DateHistogramAggregationBuilder createTestAggregatorBuilder() {\n        DateHistogramAggregationBuilder factory = new DateHistogramAggregationBuilder(\"foo\");\n        factory.field(INT_FIELD_NAME);\n        if (randomBoolean()) {\n            factory.interval(randomIntBetween(1, 100000));\n        } else {\n            if (randomBoolean()) {\n                factory.dateHistogramInterval(randomFrom(DateHistogramInterval.YEAR, DateHistogramInterval.QUARTER,\n                        DateHistogramInterval.MONTH, DateHistogramInterval.WEEK, DateHistogramInterval.DAY, DateHistogramInterval.HOUR,\n                        DateHistogramInterval.MINUTE, DateHistogramInterval.SECOND));\n            } else {\n                int branch = randomInt(4);\n                switch (branch) {\n                case 0:\n                    factory.dateHistogramInterval(DateHistogramInterval.seconds(randomIntBetween(1, 1000)));\n                    break;\n                case 1:\n                    factory.dateHistogramInterval(DateHistogramInterval.minutes(randomIntBetween(1, 1000)));\n                    break;\n                case 2:\n                    factory.dateHistogramInterval(DateHistogramInterval.hours(randomIntBetween(1, 1000)));\n                    break;\n                case 3:\n                    factory.dateHistogramInterval(DateHistogramInterval.days(randomIntBetween(1, 1000)));\n                    break;\n                case 4:\n                    factory.dateHistogramInterval(DateHistogramInterval.weeks(randomIntBetween(1, 1000)));\n                    break;\n                default:\n                    throw new IllegalStateException(\"invalid branch: \" + branch);\n                }\n            }\n        }\n        if (randomBoolean()) {\n            factory.extendedBounds(ExtendedBoundsTests.randomExtendedBounds());\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"}],"commitId":"4e757fff211db64a1411cdb785d99980babec98e","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-17 06:46:44","modifiedFileCount":"61","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-09-29 05:40:12","codes":[{"authorDate":"2018-09-29 05:40:12","commitOrder":3,"curCode":"    protected HistogramAggregationBuilder createTestAggregatorBuilder() {\n        HistogramAggregationBuilder factory = new HistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        factory.interval(randomDouble() * 1000);\n        if (randomBoolean()) {\n            double minBound = randomDouble();\n            double maxBound = randomDoubleBetween(minBound, 1, true);\n            factory.extendedBounds(minBound, maxBound);\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","date":"2018-09-29 05:40:12","endLine":68,"groupId":"58133","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/5cb19ed6dd78b5b9b4d56477128c6ad40292b8.src","preCode":"    protected HistogramAggregationBuilder createTestAggregatorBuilder() {\n        HistogramAggregationBuilder factory = new HistogramAggregationBuilder(\"foo\");\n        factory.field(INT_FIELD_NAME);\n        factory.interval(randomDouble() * 1000);\n        if (randomBoolean()) {\n            double minBound = randomDouble();\n            double maxBound = randomDoubleBetween(minBound, 1, true);\n            factory.extendedBounds(minBound, maxBound);\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2018-09-29 05:40:12","commitOrder":3,"curCode":"    protected DateHistogramAggregationBuilder createTestAggregatorBuilder() {\n        DateHistogramAggregationBuilder factory = new DateHistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        if (randomBoolean()) {\n            factory.interval(randomIntBetween(1, 100000));\n        } else {\n            if (randomBoolean()) {\n                factory.dateHistogramInterval(randomFrom(DateHistogramInterval.YEAR, DateHistogramInterval.QUARTER,\n                        DateHistogramInterval.MONTH, DateHistogramInterval.WEEK, DateHistogramInterval.DAY, DateHistogramInterval.HOUR,\n                        DateHistogramInterval.MINUTE, DateHistogramInterval.SECOND));\n            } else {\n                int branch = randomInt(4);\n                switch (branch) {\n                case 0:\n                    factory.dateHistogramInterval(DateHistogramInterval.seconds(randomIntBetween(1, 1000)));\n                    break;\n                case 1:\n                    factory.dateHistogramInterval(DateHistogramInterval.minutes(randomIntBetween(1, 1000)));\n                    break;\n                case 2:\n                    factory.dateHistogramInterval(DateHistogramInterval.hours(randomIntBetween(1, 1000)));\n                    break;\n                case 3:\n                    factory.dateHistogramInterval(DateHistogramInterval.days(randomIntBetween(1, 1000)));\n                    break;\n                case 4:\n                    factory.dateHistogramInterval(DateHistogramInterval.weeks(randomIntBetween(1, 1000)));\n                    break;\n                default:\n                    throw new IllegalStateException(\"invalid branch: \" + branch);\n                }\n            }\n        }\n        if (randomBoolean()) {\n            factory.extendedBounds(ExtendedBoundsTests.randomExtendedBounds());\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","date":"2018-09-29 05:40:12","endLine":103,"groupId":"429","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/48b0b85754ff847f652cb09fc749bae871de0c.src","preCode":"    protected DateHistogramAggregationBuilder createTestAggregatorBuilder() {\n        DateHistogramAggregationBuilder factory = new DateHistogramAggregationBuilder(\"foo\");\n        factory.field(INT_FIELD_NAME);\n        if (randomBoolean()) {\n            factory.interval(randomIntBetween(1, 100000));\n        } else {\n            if (randomBoolean()) {\n                factory.dateHistogramInterval(randomFrom(DateHistogramInterval.YEAR, DateHistogramInterval.QUARTER,\n                        DateHistogramInterval.MONTH, DateHistogramInterval.WEEK, DateHistogramInterval.DAY, DateHistogramInterval.HOUR,\n                        DateHistogramInterval.MINUTE, DateHistogramInterval.SECOND));\n            } else {\n                int branch = randomInt(4);\n                switch (branch) {\n                case 0:\n                    factory.dateHistogramInterval(DateHistogramInterval.seconds(randomIntBetween(1, 1000)));\n                    break;\n                case 1:\n                    factory.dateHistogramInterval(DateHistogramInterval.minutes(randomIntBetween(1, 1000)));\n                    break;\n                case 2:\n                    factory.dateHistogramInterval(DateHistogramInterval.hours(randomIntBetween(1, 1000)));\n                    break;\n                case 3:\n                    factory.dateHistogramInterval(DateHistogramInterval.days(randomIntBetween(1, 1000)));\n                    break;\n                case 4:\n                    factory.dateHistogramInterval(DateHistogramInterval.weeks(randomIntBetween(1, 1000)));\n                    break;\n                default:\n                    throw new IllegalStateException(\"invalid branch: \" + branch);\n                }\n            }\n        }\n        if (randomBoolean()) {\n            factory.extendedBounds(ExtendedBoundsTests.randomExtendedBounds());\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"6ea396a476ada0c6d5ff0f27a3e5526b42ff1502","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-29 05:40:12","modifiedFileCount":"333","status":"M","submitter":"Lee Hinman"},{"authorTime":"2019-05-07 05:17:11","codes":[{"authorDate":"2018-09-29 05:40:12","commitOrder":4,"curCode":"    protected HistogramAggregationBuilder createTestAggregatorBuilder() {\n        HistogramAggregationBuilder factory = new HistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        factory.interval(randomDouble() * 1000);\n        if (randomBoolean()) {\n            double minBound = randomDouble();\n            double maxBound = randomDoubleBetween(minBound, 1, true);\n            factory.extendedBounds(minBound, maxBound);\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","date":"2018-09-29 05:40:12","endLine":68,"groupId":"58133","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/5cb19ed6dd78b5b9b4d56477128c6ad40292b8.src","preCode":"    protected HistogramAggregationBuilder createTestAggregatorBuilder() {\n        HistogramAggregationBuilder factory = new HistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        factory.interval(randomDouble() * 1000);\n        if (randomBoolean()) {\n            double minBound = randomDouble();\n            double maxBound = randomDoubleBetween(minBound, 1, true);\n            factory.extendedBounds(minBound, maxBound);\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"N"},{"authorDate":"2019-05-07 05:17:11","commitOrder":4,"curCode":"    protected DateHistogramAggregationBuilder createTestAggregatorBuilder() {\n        DateHistogramAggregationBuilder factory = new DateHistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        if (randomBoolean()) {\n            factory.fixedInterval(new DateHistogramInterval(randomIntBetween(1, 100000) + \"ms\"));\n        } else {\n            if (randomBoolean()) {\n                factory.calendarInterval(randomFrom(DateHistogramInterval.YEAR, DateHistogramInterval.QUARTER,\n                        DateHistogramInterval.MONTH, DateHistogramInterval.WEEK, DateHistogramInterval.DAY, DateHistogramInterval.HOUR,\n                        DateHistogramInterval.MINUTE, DateHistogramInterval.SECOND));\n            } else {\n                int branch = randomInt(3);\n                switch (branch) {\n                case 0:\n                    factory.fixedInterval(DateHistogramInterval.seconds(randomIntBetween(1, 1000)));\n                    break;\n                case 1:\n                    factory.fixedInterval(DateHistogramInterval.minutes(randomIntBetween(1, 1000)));\n                    break;\n                case 2:\n                    factory.fixedInterval(DateHistogramInterval.hours(randomIntBetween(1, 1000)));\n                    break;\n                case 3:\n                    factory.fixedInterval(DateHistogramInterval.days(randomIntBetween(1, 1000)));\n                    break;\n                default:\n                    throw new IllegalStateException(\"invalid branch: \" + branch);\n                }\n            }\n        }\n        if (randomBoolean()) {\n            factory.extendedBounds(ExtendedBoundsTests.randomExtendedBounds());\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","date":"2019-05-07 05:17:11","endLine":101,"groupId":"46664","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/38/ed1776ec2c5912ca8866a408fc7037a7c0d486.src","preCode":"    protected DateHistogramAggregationBuilder createTestAggregatorBuilder() {\n        DateHistogramAggregationBuilder factory = new DateHistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        if (randomBoolean()) {\n            factory.interval(randomIntBetween(1, 100000));\n        } else {\n            if (randomBoolean()) {\n                factory.dateHistogramInterval(randomFrom(DateHistogramInterval.YEAR, DateHistogramInterval.QUARTER,\n                        DateHistogramInterval.MONTH, DateHistogramInterval.WEEK, DateHistogramInterval.DAY, DateHistogramInterval.HOUR,\n                        DateHistogramInterval.MINUTE, DateHistogramInterval.SECOND));\n            } else {\n                int branch = randomInt(4);\n                switch (branch) {\n                case 0:\n                    factory.dateHistogramInterval(DateHistogramInterval.seconds(randomIntBetween(1, 1000)));\n                    break;\n                case 1:\n                    factory.dateHistogramInterval(DateHistogramInterval.minutes(randomIntBetween(1, 1000)));\n                    break;\n                case 2:\n                    factory.dateHistogramInterval(DateHistogramInterval.hours(randomIntBetween(1, 1000)));\n                    break;\n                case 3:\n                    factory.dateHistogramInterval(DateHistogramInterval.days(randomIntBetween(1, 1000)));\n                    break;\n                case 4:\n                    factory.dateHistogramInterval(DateHistogramInterval.weeks(randomIntBetween(1, 1000)));\n                    break;\n                default:\n                    throw new IllegalStateException(\"invalid branch: \" + branch);\n                }\n            }\n        }\n        if (randomBoolean()) {\n            factory.extendedBounds(ExtendedBoundsTests.randomExtendedBounds());\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"290c8b8256fc4da512e7bbe1c727005c21d55a67","commitMessage":"@@@Force selection of calendar or fixed intervals in date histo agg (#33727)\n\nThe date_histogram accepts an interval which can be either a calendar \ninterval (DST-aware.  leap seconds.  arbitrary length of months.  etc) or \nfixed interval (strict multiples of SI units). Unfortunately this is inferred\nby first trying to parse as a calendar interval.  then falling back to fixed\nif that fails.\n\nThis leads to confusing arrangement where `1d` == calendar.  but \n`2d` == fixed.  And if you want a day of fixed time.  you have to \nspecify `24h` (e.g. the next smallest unit).  This arrangement is very\nerror-prone for users.\n\nThis PR adds `calendar_interval` and `fixed_interval` parameters to any\ncode that uses intervals (date_histogram.  rollup.  composite.  datafeed.  etc).\nCalendar only accepts calendar intervals.  fixed accepts any combination of\nunits (meaning `1d` can be used to specify `24h` in fixed time).  and both\nare mutually exclusive.  \n\nThe old interval behavior is deprecated and will throw a deprecation warning.\nIt is also mutually exclusive with the two new parameters. In the future the \nold dual-purpose interval will be removed.\n\nThe change applies to both REST and java clients.\n\n","date":"2019-05-07 05:17:11","modifiedFileCount":"51","status":"M","submitter":"Zachary Tong"},{"authorTime":"2020-07-14 20:47:57","codes":[{"authorDate":"2018-09-29 05:40:12","commitOrder":5,"curCode":"    protected HistogramAggregationBuilder createTestAggregatorBuilder() {\n        HistogramAggregationBuilder factory = new HistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        factory.interval(randomDouble() * 1000);\n        if (randomBoolean()) {\n            double minBound = randomDouble();\n            double maxBound = randomDoubleBetween(minBound, 1, true);\n            factory.extendedBounds(minBound, maxBound);\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","date":"2018-09-29 05:40:12","endLine":68,"groupId":"104827","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/5cb19ed6dd78b5b9b4d56477128c6ad40292b8.src","preCode":"    protected HistogramAggregationBuilder createTestAggregatorBuilder() {\n        HistogramAggregationBuilder factory = new HistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        factory.interval(randomDouble() * 1000);\n        if (randomBoolean()) {\n            double minBound = randomDouble();\n            double maxBound = randomDoubleBetween(minBound, 1, true);\n            factory.extendedBounds(minBound, maxBound);\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"N"},{"authorDate":"2020-07-14 20:47:57","commitOrder":5,"curCode":"    protected DateHistogramAggregationBuilder createTestAggregatorBuilder() {\n        DateHistogramAggregationBuilder factory = new DateHistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        if (randomBoolean()) {\n            factory.fixedInterval(new DateHistogramInterval(randomIntBetween(1, 100000) + \"ms\"));\n        } else {\n            if (randomBoolean()) {\n                factory.calendarInterval(randomFrom(DateHistogramInterval.YEAR, DateHistogramInterval.QUARTER,\n                        DateHistogramInterval.MONTH, DateHistogramInterval.WEEK, DateHistogramInterval.DAY, DateHistogramInterval.HOUR,\n                        DateHistogramInterval.MINUTE, DateHistogramInterval.SECOND));\n            } else {\n                int branch = randomInt(3);\n                switch (branch) {\n                case 0:\n                    factory.fixedInterval(DateHistogramInterval.seconds(randomIntBetween(1, 1000)));\n                    break;\n                case 1:\n                    factory.fixedInterval(DateHistogramInterval.minutes(randomIntBetween(1, 1000)));\n                    break;\n                case 2:\n                    factory.fixedInterval(DateHistogramInterval.hours(randomIntBetween(1, 1000)));\n                    break;\n                case 3:\n                    factory.fixedInterval(DateHistogramInterval.days(randomIntBetween(1, 1000)));\n                    break;\n                default:\n                    throw new IllegalStateException(\"invalid branch: \" + branch);\n                }\n            }\n        }\n        if (randomBoolean()) {\n            factory.extendedBounds(LongBoundsTests.randomExtendedBounds());\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","date":"2020-07-14 20:47:57","endLine":88,"groupId":"104827","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/efcd3e3a68bbcf4b0daced5313a8fd38ee9072.src","preCode":"    protected DateHistogramAggregationBuilder createTestAggregatorBuilder() {\n        DateHistogramAggregationBuilder factory = new DateHistogramAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        factory.field(INT_FIELD_NAME);\n        if (randomBoolean()) {\n            factory.fixedInterval(new DateHistogramInterval(randomIntBetween(1, 100000) + \"ms\"));\n        } else {\n            if (randomBoolean()) {\n                factory.calendarInterval(randomFrom(DateHistogramInterval.YEAR, DateHistogramInterval.QUARTER,\n                        DateHistogramInterval.MONTH, DateHistogramInterval.WEEK, DateHistogramInterval.DAY, DateHistogramInterval.HOUR,\n                        DateHistogramInterval.MINUTE, DateHistogramInterval.SECOND));\n            } else {\n                int branch = randomInt(3);\n                switch (branch) {\n                case 0:\n                    factory.fixedInterval(DateHistogramInterval.seconds(randomIntBetween(1, 1000)));\n                    break;\n                case 1:\n                    factory.fixedInterval(DateHistogramInterval.minutes(randomIntBetween(1, 1000)));\n                    break;\n                case 2:\n                    factory.fixedInterval(DateHistogramInterval.hours(randomIntBetween(1, 1000)));\n                    break;\n                case 3:\n                    factory.fixedInterval(DateHistogramInterval.days(randomIntBetween(1, 1000)));\n                    break;\n                default:\n                    throw new IllegalStateException(\"invalid branch: \" + branch);\n                }\n            }\n        }\n        if (randomBoolean()) {\n            factory.extendedBounds(ExtendedBoundsTests.randomExtendedBounds());\n        }\n        if (randomBoolean()) {\n            factory.format(\"###.##\");\n        }\n        if (randomBoolean()) {\n            factory.keyed(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.minDocCount(randomIntBetween(0, 100));\n        }\n        if (randomBoolean()) {\n            factory.missing(randomIntBetween(0, 10));\n        }\n        if (randomBoolean()) {\n            factory.offset(randomIntBetween(0, 100000));\n        }\n        if (randomBoolean()) {\n            List<BucketOrder> order = randomOrder();\n            if(order.size() == 1 && randomBoolean()) {\n                factory.order(order.get(0));\n            } else {\n                factory.order(order);\n            }\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"}],"commitId":"f426916b01a3aea836dddd4a820f640ed322f94d","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-14 20:47:57","modifiedFileCount":"165","status":"M","submitter":"Luca Cavanna"}]
