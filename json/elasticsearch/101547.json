[{"authorTime":"2020-04-22 11:15:02","codes":[{"authorDate":"2020-04-22 11:15:02","commitOrder":1,"curCode":"    public void testBuildKeyConfigFromPkcs1PemFilesWithPassword() throws Exception {\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","date":"2020-04-22 11:15:02","endLine":62,"groupId":"3726","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildKeyConfigFromPkcs1PemFilesWithPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/44c6723c9cbe2efdc09655e961bac11d357b6a.src","preCode":"    public void testBuildKeyConfigFromPkcs1PemFilesWithPassword() throws Exception {\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/PemKeyConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2020-04-22 11:15:02","commitOrder":1,"curCode":"    public void testBuildKeyConfigFromPkcs8PemFilesWithPassword() throws Exception {\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2-pkcs8.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","date":"2020-04-22 11:15:02","endLine":78,"groupId":"3726","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildKeyConfigFromPkcs8PemFilesWithPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/44c6723c9cbe2efdc09655e961bac11d357b6a.src","preCode":"    public void testBuildKeyConfigFromPkcs8PemFilesWithPassword() throws Exception {\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2-pkcs8.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/PemKeyConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"d68dcd5981be895125d467d1c0270a46be5fcd32","commitMessage":"@@@Fix use of password protected PKCS#8 keys for SSL  (#55457)\n\nPEMUtils would incorrectly fill the encryption password with zeros\n(the '\\0' character) after decrypting a PKCS#8 key.\n\nSince PEMUtils did not take ownership of this password it should not\nzero it out because it does not know whether the caller will use that\npassword array again. This is actually what PEMKeyConfig does - it\nuses the key encryption password as the password for the ephemeral\nkeystore that it creates in order to build a KeyManager.","date":"2020-04-22 11:15:02","modifiedFileCount":"3","status":"B","submitter":"Tim Vernum"},{"authorTime":"2020-04-30 14:33:08","codes":[{"authorDate":"2020-04-22 11:15:02","commitOrder":2,"curCode":"    public void testBuildKeyConfigFromPkcs1PemFilesWithPassword() throws Exception {\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","date":"2020-04-22 11:15:02","endLine":62,"groupId":"3726","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuildKeyConfigFromPkcs1PemFilesWithPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/44c6723c9cbe2efdc09655e961bac11d357b6a.src","preCode":"    public void testBuildKeyConfigFromPkcs1PemFilesWithPassword() throws Exception {\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/PemKeyConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"},{"authorDate":"2020-04-30 14:33:08","commitOrder":2,"curCode":"    public void testBuildKeyConfigFromPkcs8PemFilesWithPassword() throws Exception {\n        assumeFalse(\"Can't run in a FIPS JVM, PBE KeySpec is not available\", inFipsJvm());\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2-pkcs8.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","date":"2020-04-30 14:33:08","endLine":79,"groupId":"3726","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuildKeyConfigFromPkcs8PemFilesWithPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/862321ca79a34b4b4bc183a3f864d25ea7e2e5.src","preCode":"    public void testBuildKeyConfigFromPkcs8PemFilesWithPassword() throws Exception {\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2-pkcs8.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/PemKeyConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"fc90eef734c2809be4c49c2c91e6f93970b56e68","commitMessage":"@@@Fix PemKeyConfigTests  (#55577)\n\nWe were creating PemKeyConfig objects using different private\nkeys but always using testnode.crt certificate that uses the\nRSA public key. The PemKeyConfig was built but we would\nthen later fail to handle SSL connections during the TLS\nhandshake eitherway.\nThis became obvious in FIPS tests where the consistency\nchecks that FIPS 140 mandates kick in and failed early\nbecausethe private key was of different type than the\npublic key","date":"2020-04-30 14:33:08","modifiedFileCount":"2","status":"M","submitter":"Ioannis Kakavas"},{"authorTime":"2021-07-15 17:46:00","codes":[{"authorDate":"2021-07-15 17:46:00","commitOrder":3,"curCode":"    public void testBuildKeyConfigFromPkcs1PemFilesWithPassword() throws Exception {\n        final String cert = \"cert2/cert2.crt\";\n        final String key = \"cert2/cert2.key\";\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray(), configBasePath);\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(resolve(cert, key)));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","date":"2021-07-15 17:46:00","endLine":68,"groupId":"101547","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testBuildKeyConfigFromPkcs1PemFilesWithPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/b37e4521794bd9942363c50463fee2861604af.src","preCode":"    public void testBuildKeyConfigFromPkcs1PemFilesWithPassword() throws Exception {\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/PemKeyConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2021-07-15 17:46:00","commitOrder":3,"curCode":"    public void testBuildKeyConfigFromPkcs8PemFilesWithPassword() throws Exception {\n        assumeFalse(\"Can't run in a FIPS JVM, PBE KeySpec is not available\", inFipsJvm());\n        final String cert = \"cert2/cert2.crt\";\n        final String key = \"cert2/cert2-pkcs8.key\";\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray(), configBasePath);\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(resolve(cert, key)));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","date":"2021-07-15 17:46:00","endLine":85,"groupId":"101547","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testBuildKeyConfigFromPkcs8PemFilesWithPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/b37e4521794bd9942363c50463fee2861604af.src","preCode":"    public void testBuildKeyConfigFromPkcs8PemFilesWithPassword() throws Exception {\n        assumeFalse(\"Can't run in a FIPS JVM, PBE KeySpec is not available\", inFipsJvm());\n        final Path cert = getDataPath(\"/certs/cert2/cert2.crt\");\n        final Path key = getDataPath(\"/certs/cert2/cert2-pkcs8.key\");\n        final PemKeyConfig keyConfig = new PemKeyConfig(cert, key, \"c2-pass\".toCharArray());\n        assertThat(keyConfig.getDependentFiles(), Matchers.containsInAnyOrder(cert, key));\n        assertCertificateAndKey(keyConfig, \"CN=cert2\");\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/PemKeyConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"940a890958f10d3a0abb5f7e638605357fe1e3fb","commitMessage":"@@@Update \"ssl-config\" to support X-Pack features (#74887)\n\nThis commit upgrades the existing SSPL licensed \"ssl-config\" library\nto include additional features that are supported by the X-Pack SSL\nlibrary.\n\nThis commit does not make any changes to X-Pack to use these new\nfeatures - it introduces them in preparation for their future use by\nX-Pack.\n\nThe reindex module is updated to reflect API changes in ssl-config","date":"2021-07-15 17:46:00","modifiedFileCount":"23","status":"M","submitter":"Tim Vernum"}]
