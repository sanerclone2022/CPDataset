[{"authorTime":"2018-09-19 03:57:41","codes":[{"authorDate":"2018-06-04 17:14:17","commitOrder":3,"curCode":"    protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            fields.add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context, fields);\n            }\n            if (prefixFieldMapper != null) {\n                prefixFieldMapper.addField(value, fields);\n            }\n            if (phraseFieldMapper != null) {\n                fields.add(new Field(phraseFieldMapper.fieldType.name(), value, phraseFieldMapper.fieldType));\n            }\n        }\n    }\n","date":"2018-06-04 17:14:17","endLine":748,"groupId":"30776","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext@List<IndexableField>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/ba5fbc0c2d1aadff4b2eeb3c826d991b9b00a5.src","preCode":"    protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            fields.add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context, fields);\n            }\n            if (prefixFieldMapper != null) {\n                prefixFieldMapper.addField(value, fields);\n            }\n            if (phraseFieldMapper != null) {\n                fields.add(new Field(phraseFieldMapper.fieldType.name(), value, phraseFieldMapper.fieldType));\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":723,"status":"NB"},{"authorDate":"2018-09-19 03:57:41","commitOrder":3,"curCode":"    protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            fields.add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context, fields);\n            }\n        }\n    }\n","date":"2018-09-19 03:57:41","endLine":755,"groupId":"30776","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext@List<IndexableField>fields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/c38d130ff520ad2aeea243a39a7b7277ffcf01.src","preCode":"    protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            fields.add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context, fields);\n            }\n        }\n    }\n","realPath":"plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"B"}],"commitId":"c87cff22b4b41925053cf05e0f0dd171959e3d7e","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-19 03:57:41","modifiedFileCount":"73","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-05-05 02:18:34","codes":[{"authorDate":"2020-05-05 02:18:34","commitOrder":4,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            context.doc().add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context);\n            }\n            if (prefixFieldMapper != null) {\n                prefixFieldMapper.addField(context, value);\n            }\n            if (phraseFieldMapper != null) {\n                context.doc().add(new Field(phraseFieldMapper.fieldType.name(), value, phraseFieldMapper.fieldType));\n            }\n        }\n    }\n","date":"2020-05-05 02:18:34","endLine":841,"groupId":"47106","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6c/28958d07dc31b4ad4d9756acad28b193e445b7.src","preCode":"    protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            fields.add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context, fields);\n            }\n            if (prefixFieldMapper != null) {\n                prefixFieldMapper.addField(value, fields);\n            }\n            if (phraseFieldMapper != null) {\n                fields.add(new Field(phraseFieldMapper.fieldType.name(), value, phraseFieldMapper.fieldType));\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":816,"status":"M"},{"authorDate":"2020-05-05 02:18:34","commitOrder":4,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            context.doc().add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context);\n            }\n        }\n    }\n","date":"2020-05-05 02:18:34","endLine":595,"groupId":"47106","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/29/9dc670c8b7578da6c2c5bdddb7ed4dea6a6bf1.src","preCode":"    protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            fields.add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context, fields);\n            }\n        }\n    }\n","realPath":"plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"M"}],"commitId":"7a5d18ddc37827594fb4a777b29420f21ec69ded","commitMessage":"@@@Simplify signature of FieldMapper#parseCreateField. (#56066)\n\n`FieldMapper#parseCreateField` accepts the parse context.  plus a list of fields\nas an output parameter. These fields are immediately added to the document\nthrough `ParseContext#doc()`.\n\nThis commit simplifies the signature by removing the list of fields.  and having\nthe mappers add the fields directly to `ParseContext#doc()`. I think this is\nnicer for implementors.  because previously fields could be added either through\nthe list.  or the context (through `add`.  `addWithKey`.  etc.)","date":"2020-05-05 02:18:34","modifiedFileCount":"50","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":5,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                createFieldNamesField(context);\n            }\n            if (prefixFieldMapper != null) {\n                prefixFieldMapper.addField(context, value);\n            }\n            if (phraseFieldMapper != null) {\n                context.doc().add(new Field(phraseFieldMapper.fieldType().name(), value, phraseFieldMapper.fieldType));\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":863,"groupId":"18086","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/3530651d1afdf2ce160eaa8af2b0b7158b78d4.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            context.doc().add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context);\n            }\n            if (prefixFieldMapper != null) {\n                prefixFieldMapper.addField(context, value);\n            }\n            if (phraseFieldMapper != null) {\n                context.doc().add(new Field(phraseFieldMapper.fieldType.name(), value, phraseFieldMapper.fieldType));\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":838,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":5,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(mappedFieldType.name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                createFieldNamesField(context);\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":598,"groupId":"60896","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/0cfe86b4574760c56d3658c4659d9b408afcd6.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType());\n            context.doc().add(field);\n            if (fieldType().omitNorms()) {\n                createFieldNamesField(context);\n            }\n        }\n    }\n","realPath":"plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-11-05 21:16:31","commitOrder":6,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                createFieldNamesField(context);\n            }\n            if (prefixFieldInfo != null) {\n                context.doc().add(new Field(prefixFieldInfo.field, value, prefixFieldInfo.fieldType));\n            }\n            if (phraseFieldInfo != null) {\n                context.doc().add(new Field(phraseFieldInfo.field, value, phraseFieldInfo.fieldType));\n            }\n        }\n    }\n","date":"2020-11-05 21:16:31","endLine":839,"groupId":"18086","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/c1a5363afd8cda9c9c12503c4c2ca89e6c27c0.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                createFieldNamesField(context);\n            }\n            if (prefixFieldMapper != null) {\n                prefixFieldMapper.addField(context, value);\n            }\n            if (phraseFieldMapper != null) {\n                context.doc().add(new Field(phraseFieldMapper.fieldType().name(), value, phraseFieldMapper.fieldType));\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":814,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":6,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(mappedFieldType.name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                createFieldNamesField(context);\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":598,"groupId":"60896","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/0cfe86b4574760c56d3658c4659d9b408afcd6.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(mappedFieldType.name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                createFieldNamesField(context);\n            }\n        }\n    }\n","realPath":"plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"N"}],"commitId":"cea93d1c65b014ac02abf546bdb3a27150088bd2","commitMessage":"@@@Don't expose TextFieldMapper subfields (#64597)\n\nTextFieldMapper can optionally index data into subfields for accelerated\nprefix and phrase queries. Currently.  these subfields are implemented\nas FieldMappers in their own right.  made available via TextFieldMapper's\niterator() method and with their own standalone MappedFieldType objects.\n\nThis has the disadvantage that these subfields are directly available for\nsearching.  and appear in APIs such as field caps. In addition.  because\nexists queries are not implemented on them.  an exists query against an\nobject which contains a text field with one of the subfields enabled can\nthrow an error (see #63585).\n\nThis commit reworks the subfields so that they are no longer implemented\nas FieldMappers.  and are no longer exposed to classes outside\nTextFieldMapper either as MappedFieldTypes or as FieldMappers. The\nparent TextFieldMapper handles indexing and analyzer registration. \nPhraseFieldType is removed entirely.  and PrefixFieldType is retained as\na private implementation for fast prefix queries but is unavailable for\nquerying directly.\n\nFixes #63585\nCloses #63446","date":"2020-11-05 21:16:31","modifiedFileCount":"4","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-04-29 14:16:22","codes":[{"authorDate":"2021-04-29 14:16:22","commitOrder":7,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n            if (prefixFieldInfo != null) {\n                context.doc().add(new Field(prefixFieldInfo.field, value, prefixFieldInfo.fieldType));\n            }\n            if (phraseFieldInfo != null) {\n                context.doc().add(new Field(phraseFieldInfo.field, value, phraseFieldInfo.fieldType));\n            }\n        }\n    }\n","date":"2021-04-29 14:16:22","endLine":878,"groupId":"70735","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/c983ea03cfc1f669ac3373468231874718a4e5.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                createFieldNamesField(context);\n            }\n            if (prefixFieldInfo != null) {\n                context.doc().add(new Field(prefixFieldInfo.field, value, prefixFieldInfo.fieldType));\n            }\n            if (phraseFieldInfo != null) {\n                context.doc().add(new Field(phraseFieldInfo.field, value, phraseFieldInfo.fieldType));\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"M"},{"authorDate":"2021-04-29 14:16:22","commitOrder":7,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(mappedFieldType.name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n        }\n    }\n","date":"2021-04-29 14:16:22","endLine":538,"groupId":"60896","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/df8412d2ca14c6d53839ecfa05a3d128ef214a.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(mappedFieldType.name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                createFieldNamesField(context);\n            }\n        }\n    }\n","realPath":"plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":519,"status":"M"}],"commitId":"bfbd991557ae9e84ce7b3f7d9eebe5ffe20080bb","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-29 14:16:22","modifiedFileCount":"178","status":"M","submitter":"iverase"},{"authorTime":"2021-05-12 20:50:26","codes":[{"authorDate":"2021-05-12 20:50:26","commitOrder":8,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value = context.parser().textOrNull();\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n            if (prefixFieldInfo != null) {\n                context.doc().add(new Field(prefixFieldInfo.field, value, prefixFieldInfo.fieldType));\n            }\n            if (phraseFieldInfo != null) {\n                context.doc().add(new Field(phraseFieldInfo.field, value, phraseFieldInfo.fieldType));\n            }\n        }\n    }\n","date":"2021-05-12 20:50:26","endLine":873,"groupId":"70735","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/4ce0efee5f4e22086883b1f247ca7fbd037827.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n            if (prefixFieldInfo != null) {\n                context.doc().add(new Field(prefixFieldInfo.field, value, prefixFieldInfo.fieldType));\n            }\n            if (phraseFieldInfo != null) {\n                context.doc().add(new Field(phraseFieldInfo.field, value, phraseFieldInfo.fieldType));\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"M"},{"authorDate":"2021-05-12 20:50:26","commitOrder":8,"curCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value = context.parser().textOrNull();\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(mappedFieldType.name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n        }\n    }\n","date":"2021-05-12 20:50:26","endLine":533,"groupId":"60896","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"parseCreateField","params":"(ParseContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/b3ed781672897b58e5be066305b29b0e9a8246.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value;\n        if (context.externalValueSet()) {\n            value = context.externalValue().toString();\n        } else {\n            value = context.parser().textOrNull();\n        }\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(mappedFieldType.name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n        }\n    }\n","realPath":"plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":519,"status":"M"}],"commitId":"4528e780c48ada91fd452b9c51dc1a37772c5f07","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n\n# Conflicts:\n#\tx-pack/plugin/spatial/build.gradle\n#\tx-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java\n","date":"2021-05-12 20:50:26","modifiedFileCount":"564","status":"M","submitter":"iverase"},{"authorTime":"2021-07-06 21:15:59","codes":[{"authorDate":"2021-07-06 21:15:59","commitOrder":9,"curCode":"    protected void parseCreateField(DocumentParserContext context) throws IOException {\n        final String value = context.parser().textOrNull();\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n            if (prefixFieldInfo != null) {\n                context.doc().add(new Field(prefixFieldInfo.field, value, prefixFieldInfo.fieldType));\n            }\n            if (phraseFieldInfo != null) {\n                context.doc().add(new Field(phraseFieldInfo.field, value, phraseFieldInfo.fieldType));\n            }\n        }\n    }\n","date":"2021-07-06 21:15:59","endLine":872,"groupId":"107793","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"parseCreateField","params":"(DocumentParserContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/46afcda7360ac1c87ca068fdd6a8a44f9b4783.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value = context.parser().textOrNull();\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(fieldType().name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n            if (prefixFieldInfo != null) {\n                context.doc().add(new Field(prefixFieldInfo.field, value, prefixFieldInfo.fieldType));\n            }\n            if (phraseFieldInfo != null) {\n                context.doc().add(new Field(phraseFieldInfo.field, value, phraseFieldInfo.fieldType));\n            }\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":852,"status":"M"},{"authorDate":"2021-07-06 21:15:59","commitOrder":9,"curCode":"    protected void parseCreateField(DocumentParserContext context) throws IOException {\n        final String value = context.parser().textOrNull();\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(mappedFieldType.name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n        }\n    }\n","date":"2021-07-06 21:15:59","endLine":533,"groupId":"107793","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"parseCreateField","params":"(DocumentParserContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/05111e20fcc43e39fa892fb24d3d3fa5729f05.src","preCode":"    protected void parseCreateField(ParseContext context) throws IOException {\n        final String value = context.parser().textOrNull();\n\n        if (value == null) {\n            return;\n        }\n\n        if (fieldType.indexOptions() != IndexOptions.NONE || fieldType.stored()) {\n            Field field = new Field(mappedFieldType.name(), value, fieldType);\n            context.doc().add(field);\n            if (fieldType.omitNorms()) {\n                context.addToFieldNames(fieldType().name());\n            }\n        }\n    }\n","realPath":"plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":519,"status":"M"}],"commitId":"c6641bf00c2ae7b9024e0f6d4ecad4596a67facc","commitMessage":"@@@Rename ParseContext to DocumentParserContext (#74963)\n\nParseContext is used to parse documents. It was easily confused with ParserContext (now renamed to MappingParserContext) which is instead used to parse mappings.\n\nTo remove any confusion.  this commit renames ParseContext to DocumentParserContext and adapts its subclasses accordingly.","date":"2021-07-06 21:15:59","modifiedFileCount":"66","status":"M","submitter":"Luca Cavanna"}]
