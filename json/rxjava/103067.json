[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<Object>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Observable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":296,"groupId":"4739","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"interrupt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/73/e2cc33c7c206163e76474deddd35d9a7550a48.src","preCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<Object>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Observable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<Object>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Flowable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":361,"groupId":"4739","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"interrupt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7a/f0002bf7b2f0a51ec763510aa06861a392af7f.src","preCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<Object>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Flowable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<Object>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Observable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":296,"groupId":"4739","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"interrupt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/73/e2cc33c7c206163e76474deddd35d9a7550a48.src","preCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<Object>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Observable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Flowable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":382,"groupId":"4739","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"interrupt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/9ea0725d83defa2d0597c60bf1cdd78f4a3c09.src","preCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<Object>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Flowable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Observable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","date":"2019-12-22 18:59:44","endLine":296,"groupId":"103067","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"interrupt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f8/3fb8595d32d485da80c6a5ce779ec9246883a9.src","preCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<Object>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Observable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Flowable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":382,"groupId":"103067","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"interrupt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/9ea0725d83defa2d0597c60bf1cdd78f4a3c09.src","preCode":"    public void interrupt() throws InterruptedException {\n        final AtomicReference<Object> exception = new AtomicReference<>();\n        final CountDownLatch latch = new CountDownLatch(1);\n        Flowable.just(1).subscribeOn(Schedulers.computation()).take(1)\n        .subscribe(new Consumer<Integer>() {\n\n            @Override\n            public void accept(Integer t1) {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    exception.set(e);\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n        });\n\n        latch.await();\n        assertNull(exception.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
