[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void concurrency() {\n        Flowable<Integer> f = Flowable.range(1, 10000).subscribeOn(Schedulers.newThread());\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f.onBackpressureBuffer(), f.onBackpressureBuffer(), f.onBackpressureBuffer());\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(30000, onNextEvents.size());\n            \r\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":556,"groupId":"6169","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"concurrency","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/22/526d1922532b741c7161dad0d1db1939ced05a.src","preCode":"    public void concurrency() {\n        Flowable<Integer> f = Flowable.range(1, 10000).subscribeOn(Schedulers.newThread());\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f.onBackpressureBuffer(), f.onBackpressureBuffer(), f.onBackpressureBuffer());\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(30000, onNextEvents.size());\n            \r\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void concurrencyWithSleeping() {\n\n        Flowable<Integer> f = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Integer> s) {\n                Worker inner = Schedulers.newThread().createWorker();\n                final AsyncSubscription as = new AsyncSubscription();\n                as.setSubscription(new BooleanSubscription());\n                as.setResource(inner);\n\n                s.onSubscribe(as);\n\n                inner.schedule(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            for (int i = 0; i < 100; i++) {\n                                s.onNext(1);\n                                try {\n                                    Thread.sleep(1);\n                                } catch (InterruptedException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        } catch (Exception e) {\n                            s.onError(e);\n                        }\n                        as.dispose();\n                        s.onComplete();\n                    }\n\n                });\n            }\n        });\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f, f, f);\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(5, TimeUnit.SECONDS);\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(300, onNextEvents.size());\n            \r\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":607,"groupId":"3881","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"concurrencyWithSleeping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/22/526d1922532b741c7161dad0d1db1939ced05a.src","preCode":"    public void concurrencyWithSleeping() {\n\n        Flowable<Integer> f = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Integer> s) {\n                Worker inner = Schedulers.newThread().createWorker();\n                final AsyncSubscription as = new AsyncSubscription();\n                as.setSubscription(new BooleanSubscription());\n                as.setResource(inner);\n\n                s.onSubscribe(as);\n\n                inner.schedule(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            for (int i = 0; i < 100; i++) {\n                                s.onNext(1);\n                                try {\n                                    Thread.sleep(1);\n                                } catch (InterruptedException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        } catch (Exception e) {\n                            s.onError(e);\n                        }\n                        as.dispose();\n                        s.onComplete();\n                    }\n\n                });\n            }\n        });\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f, f, f);\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(5, TimeUnit.SECONDS);\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(300, onNextEvents.size());\n            \r\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void concurrency() {\n        Flowable<Integer> f = Flowable.range(1, 10000).subscribeOn(Schedulers.newThread());\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f.onBackpressureBuffer(), f.onBackpressureBuffer(), f.onBackpressureBuffer());\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(30000, onNextEvents.size());\n            \r\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":556,"groupId":"6169","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"concurrency","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6b/3f72e2f941a8cf958bf4d1ac1b1c79d905228f.src","preCode":"    public void concurrency() {\n        Flowable<Integer> f = Flowable.range(1, 10000).subscribeOn(Schedulers.newThread());\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f.onBackpressureBuffer(), f.onBackpressureBuffer(), f.onBackpressureBuffer());\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(30000, onNextEvents.size());\n            \r\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void concurrencyWithSleeping() {\n\n        Flowable<Integer> f = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Integer> s) {\n                Worker inner = Schedulers.newThread().createWorker();\n                final AsyncSubscription as = new AsyncSubscription();\n                as.setSubscription(new BooleanSubscription());\n                as.setResource(inner);\n\n                s.onSubscribe(as);\n\n                inner.schedule(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            for (int i = 0; i < 100; i++) {\n                                s.onNext(1);\n                                try {\n                                    Thread.sleep(1);\n                                } catch (InterruptedException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        } catch (Exception e) {\n                            s.onError(e);\n                        }\n                        as.dispose();\n                        s.onComplete();\n                    }\n\n                });\n            }\n        });\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f, f, f);\n            TestSubscriber<Integer> ts = new TestSubscriber<>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(5, TimeUnit.SECONDS);\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(300, onNextEvents.size());\n            \r\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":607,"groupId":"3881","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"concurrencyWithSleeping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6b/3f72e2f941a8cf958bf4d1ac1b1c79d905228f.src","preCode":"    public void concurrencyWithSleeping() {\n\n        Flowable<Integer> f = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Integer> s) {\n                Worker inner = Schedulers.newThread().createWorker();\n                final AsyncSubscription as = new AsyncSubscription();\n                as.setSubscription(new BooleanSubscription());\n                as.setResource(inner);\n\n                s.onSubscribe(as);\n\n                inner.schedule(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            for (int i = 0; i < 100; i++) {\n                                s.onNext(1);\n                                try {\n                                    Thread.sleep(1);\n                                } catch (InterruptedException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        } catch (Exception e) {\n                            s.onError(e);\n                        }\n                        as.dispose();\n                        s.onComplete();\n                    }\n\n                });\n            }\n        });\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f, f, f);\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(5, TimeUnit.SECONDS);\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(300, onNextEvents.size());\n            \r\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2021-03-14 15:50:44","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void concurrency() {\n        Flowable<Integer> f = Flowable.range(1, 10000).subscribeOn(Schedulers.newThread());\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f.onBackpressureBuffer(), f.onBackpressureBuffer(), f.onBackpressureBuffer());\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(30000, onNextEvents.size());\n            \r\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":556,"groupId":"105984","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"concurrency","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6b/3f72e2f941a8cf958bf4d1ac1b1c79d905228f.src","preCode":"    public void concurrency() {\n        Flowable<Integer> f = Flowable.range(1, 10000).subscribeOn(Schedulers.newThread());\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f.onBackpressureBuffer(), f.onBackpressureBuffer(), f.onBackpressureBuffer());\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(30000, onNextEvents.size());\n            \r\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"N"},{"authorDate":"2021-03-14 15:50:44","commitOrder":3,"curCode":"    public void concurrencyWithSleeping() {\n\n        Flowable<Integer> f = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Integer> s) {\n                Worker inner = Schedulers.newThread().createWorker();\n                final AsyncSubscription as = new AsyncSubscription();\n                as.setSubscription(new BooleanSubscription());\n                as.setResource(inner);\n\n                s.onSubscribe(as);\n\n                inner.schedule(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            for (int i = 0; i < 100; i++) {\n                                s.onNext(1);\n                                try {\n                                    Thread.sleep(1);\n                                } catch (InterruptedException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        } catch (Exception e) {\n                            s.onError(e);\n                        }\n                        as.dispose();\n                        s.onComplete();\n                    }\n\n                });\n            }\n        });\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f, f, f);\n            TestSubscriber<Integer> ts = new TestSubscriber<>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(10, TimeUnit.SECONDS);\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(300, onNextEvents.size());\n            \r\n        }\n    }\n","date":"2021-03-14 15:50:44","endLine":607,"groupId":"105984","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"concurrencyWithSleeping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/57/b7a4a6670d30958282d65d1cff4e84791753ea.src","preCode":"    public void concurrencyWithSleeping() {\n\n        Flowable<Integer> f = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Integer> s) {\n                Worker inner = Schedulers.newThread().createWorker();\n                final AsyncSubscription as = new AsyncSubscription();\n                as.setSubscription(new BooleanSubscription());\n                as.setResource(inner);\n\n                s.onSubscribe(as);\n\n                inner.schedule(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            for (int i = 0; i < 100; i++) {\n                                s.onNext(1);\n                                try {\n                                    Thread.sleep(1);\n                                } catch (InterruptedException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        } catch (Exception e) {\n                            s.onError(e);\n                        }\n                        as.dispose();\n                        s.onComplete();\n                    }\n\n                });\n            }\n        });\n\n        for (int i = 0; i < 10; i++) {\n            Flowable<Integer> merge = Flowable.merge(f, f, f);\n            TestSubscriber<Integer> ts = new TestSubscriber<>();\n            merge.subscribe(ts);\n\n            ts.awaitDone(5, TimeUnit.SECONDS);\n            ts.assertComplete();\n            List<Integer> onNextEvents = ts.values();\n            assertEquals(300, onNextEvents.size());\n            \r\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"M"}],"commitId":"bdf13a1fdb54b79e0ece299535de75c653abc827","commitMessage":"@@@Fix intermittently failing unit tests (#7213)\n\n* Fix intermittently failing tests.  mostly increasing timeout\n\nFix several unit tests that are intermittently failing. All fixes\ninvolve increasing timeouts. Adjusted formatting in several areas within\nupdated tests.\n\n* Remove formatting/refactoring from previous commit\n\nSuperfluous formatting and refactoring was making review impossible.","date":"2021-03-14 15:50:44","modifiedFileCount":"7","status":"M","submitter":"benjamintboyle"}]
