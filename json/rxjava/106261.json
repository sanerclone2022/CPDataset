[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribeScan() {\n\n        FlowableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n        .scan(new HashMap<String, String>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n            @Override\n            public HashMap<String, String> apply(HashMap<String, String> accum, Event perInstanceEvent) {\n                accum.put(\"instance\", perInstanceEvent.instanceId);\n                return accum;\n            }\n        })\n        .take(10)\n        .blockingForEach(new Consumer<HashMap<String, String>>() {\n            @Override\n            public void accept(HashMap<String, String> v) {\n                System.out.println(v);\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":462,"groupId":"1228","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f9/18d152bebb5106a3827b3c6873a09e276c4afd.src","preCode":"    public void unsubscribeScan() {\n\n        FlowableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n        .scan(new HashMap<String, String>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n            @Override\n            public HashMap<String, String> apply(HashMap<String, String> accum, Event perInstanceEvent) {\n                accum.put(\"instance\", perInstanceEvent.instanceId);\n                return accum;\n            }\n        })\n        .take(10)\n        .blockingForEach(new Consumer<HashMap<String, String>>() {\n            @Override\n            public void accept(HashMap<String, String> v) {\n                System.out.println(v);\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void zipObservableOfObservables() throws Exception {\n        ObservableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n                .groupBy(new Function<Event, String>() {\n                    @Override\n                    public String apply(Event e) {\n                        return e.instanceId;\n                    }\n                })\n                \r\n                .flatMap(new Function<GroupedObservable<String, Event>, Observable<HashMap<String, String>>>() {\n                    @Override\n                    public Observable<HashMap<String, String>> apply(final GroupedObservable<String, Event> ge) {\n                            return ge.scan(new HashMap<String, String>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n                                @Override\n                                public HashMap<String, String> apply(HashMap<String, String> accum,\n                                        Event perInstanceEvent) {\n                                    synchronized (accum) {\n                                        accum.put(\"instance\", ge.getKey());\n                                    }\n                                    return accum;\n                                }\n                            });\n                    }\n                })\n                .take(10)\n                .blockingForEach(new Consumer<Object>() {\n                    @Override\n                    public void accept(Object pv) {\n                        synchronized (pv) {\n                            System.out.println(pv);\n                        }\n                    }\n                });\n\n        System.out.println(\"**** finished\");\n\n        Thread.sleep(200); \r\n    }\n","date":"2019-08-16 20:51:17","endLine":69,"groupId":"12578","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"zipObservableOfObservables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b6/3080775810042a7eed50bbdf034435b301efe0.src","preCode":"    public void zipObservableOfObservables() throws Exception {\n        ObservableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n                .groupBy(new Function<Event, String>() {\n                    @Override\n                    public String apply(Event e) {\n                        return e.instanceId;\n                    }\n                })\n                \r\n                .flatMap(new Function<GroupedObservable<String, Event>, Observable<HashMap<String, String>>>() {\n                    @Override\n                    public Observable<HashMap<String, String>> apply(final GroupedObservable<String, Event> ge) {\n                            return ge.scan(new HashMap<String, String>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n                                @Override\n                                public HashMap<String, String> apply(HashMap<String, String> accum,\n                                        Event perInstanceEvent) {\n                                    synchronized (accum) {\n                                        accum.put(\"instance\", ge.getKey());\n                                    }\n                                    return accum;\n                                }\n                            });\n                    }\n                })\n                .take(10)\n                .blockingForEach(new Consumer<Object>() {\n                    @Override\n                    public void accept(Object pv) {\n                        synchronized (pv) {\n                            System.out.println(pv);\n                        }\n                    }\n                });\n\n        System.out.println(\"**** finished\");\n\n        Thread.sleep(200); \r\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observable/ObservableZipTests.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void unsubscribeScan() {\n\n        FlowableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n        .scan(new HashMap<>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n            @Override\n            public HashMap<String, String> apply(HashMap<String, String> accum, Event perInstanceEvent) {\n                accum.put(\"instance\", perInstanceEvent.instanceId);\n                return accum;\n            }\n        })\n        .take(10)\n        .blockingForEach(new Consumer<HashMap<String, String>>() {\n            @Override\n            public void accept(HashMap<String, String> v) {\n                System.out.println(v);\n            }\n        });\n    }\n","date":"2019-12-22 18:39:23","endLine":462,"groupId":"1228","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/29/88da75700be7df11aa8ed3e367e1db3d838865.src","preCode":"    public void unsubscribeScan() {\n\n        FlowableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n        .scan(new HashMap<String, String>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n            @Override\n            public HashMap<String, String> apply(HashMap<String, String> accum, Event perInstanceEvent) {\n                accum.put(\"instance\", perInstanceEvent.instanceId);\n                return accum;\n            }\n        })\n        .take(10)\n        .blockingForEach(new Consumer<HashMap<String, String>>() {\n            @Override\n            public void accept(HashMap<String, String> v) {\n                System.out.println(v);\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void zipObservableOfObservables() throws Exception {\n        ObservableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n                .groupBy(new Function<Event, String>() {\n                    @Override\n                    public String apply(Event e) {\n                        return e.instanceId;\n                    }\n                })\n                \r\n                .flatMap(new Function<GroupedObservable<String, Event>, Observable<HashMap<String, String>>>() {\n                    @Override\n                    public Observable<HashMap<String, String>> apply(final GroupedObservable<String, Event> ge) {\n                            return ge.scan(new HashMap<String, String>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n                                @Override\n                                public HashMap<String, String> apply(HashMap<String, String> accum,\n                                        Event perInstanceEvent) {\n                                    synchronized (accum) {\n                                        accum.put(\"instance\", ge.getKey());\n                                    }\n                                    return accum;\n                                }\n                            });\n                    }\n                })\n                .take(10)\n                .blockingForEach(new Consumer<Object>() {\n                    @Override\n                    public void accept(Object pv) {\n                        synchronized (pv) {\n                            System.out.println(pv);\n                        }\n                    }\n                });\n\n        System.out.println(\"**** finished\");\n\n        Thread.sleep(200); \r\n    }\n","date":"2019-08-16 20:51:17","endLine":69,"groupId":"12578","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"zipObservableOfObservables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b6/3080775810042a7eed50bbdf034435b301efe0.src","preCode":"    public void zipObservableOfObservables() throws Exception {\n        ObservableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n                .groupBy(new Function<Event, String>() {\n                    @Override\n                    public String apply(Event e) {\n                        return e.instanceId;\n                    }\n                })\n                \r\n                .flatMap(new Function<GroupedObservable<String, Event>, Observable<HashMap<String, String>>>() {\n                    @Override\n                    public Observable<HashMap<String, String>> apply(final GroupedObservable<String, Event> ge) {\n                            return ge.scan(new HashMap<String, String>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n                                @Override\n                                public HashMap<String, String> apply(HashMap<String, String> accum,\n                                        Event perInstanceEvent) {\n                                    synchronized (accum) {\n                                        accum.put(\"instance\", ge.getKey());\n                                    }\n                                    return accum;\n                                }\n                            });\n                    }\n                })\n                .take(10)\n                .blockingForEach(new Consumer<Object>() {\n                    @Override\n                    public void accept(Object pv) {\n                        synchronized (pv) {\n                            System.out.println(pv);\n                        }\n                    }\n                });\n\n        System.out.println(\"**** finished\");\n\n        Thread.sleep(200); \r\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observable/ObservableZipTests.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"N"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void unsubscribeScan() {\n\n        FlowableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n        .scan(new HashMap<>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n            @Override\n            public HashMap<String, String> apply(HashMap<String, String> accum, Event perInstanceEvent) {\n                accum.put(\"instance\", perInstanceEvent.instanceId);\n                return accum;\n            }\n        })\n        .take(10)\n        .blockingForEach(new Consumer<HashMap<String, String>>() {\n            @Override\n            public void accept(HashMap<String, String> v) {\n                System.out.println(v);\n            }\n        });\n    }\n","date":"2019-12-22 18:39:23","endLine":462,"groupId":"106261","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeScan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/29/88da75700be7df11aa8ed3e367e1db3d838865.src","preCode":"    public void unsubscribeScan() {\n\n        FlowableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n        .scan(new HashMap<>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n            @Override\n            public HashMap<String, String> apply(HashMap<String, String> accum, Event perInstanceEvent) {\n                accum.put(\"instance\", perInstanceEvent.instanceId);\n                return accum;\n            }\n        })\n        .take(10)\n        .blockingForEach(new Consumer<HashMap<String, String>>() {\n            @Override\n            public void accept(HashMap<String, String> v) {\n                System.out.println(v);\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"N"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void zipObservableOfObservables() throws Exception {\n        ObservableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n                .groupBy(new Function<Event, String>() {\n                    @Override\n                    public String apply(Event e) {\n                        return e.instanceId;\n                    }\n                })\n                \r\n                .flatMap(new Function<GroupedObservable<String, Event>, Observable<HashMap<String, String>>>() {\n                    @Override\n                    public Observable<HashMap<String, String>> apply(final GroupedObservable<String, Event> ge) {\n                            return ge.scan(new HashMap<>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n                                @Override\n                                public HashMap<String, String> apply(HashMap<String, String> accum,\n                                        Event perInstanceEvent) {\n                                    synchronized (accum) {\n                                        accum.put(\"instance\", ge.getKey());\n                                    }\n                                    return accum;\n                                }\n                            });\n                    }\n                })\n                .take(10)\n                .blockingForEach(new Consumer<Object>() {\n                    @Override\n                    public void accept(Object pv) {\n                        synchronized (pv) {\n                            System.out.println(pv);\n                        }\n                    }\n                });\n\n        System.out.println(\"**** finished\");\n\n        Thread.sleep(200); \r\n    }\n","date":"2019-12-22 19:17:37","endLine":69,"groupId":"106261","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"zipObservableOfObservables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/671133485572375e986e5ce7d22910df222679.src","preCode":"    public void zipObservableOfObservables() throws Exception {\n        ObservableEventStream.getEventStream(\"HTTP-ClusterB\", 20)\n                .groupBy(new Function<Event, String>() {\n                    @Override\n                    public String apply(Event e) {\n                        return e.instanceId;\n                    }\n                })\n                \r\n                .flatMap(new Function<GroupedObservable<String, Event>, Observable<HashMap<String, String>>>() {\n                    @Override\n                    public Observable<HashMap<String, String>> apply(final GroupedObservable<String, Event> ge) {\n                            return ge.scan(new HashMap<String, String>(), new BiFunction<HashMap<String, String>, Event, HashMap<String, String>>() {\n                                @Override\n                                public HashMap<String, String> apply(HashMap<String, String> accum,\n                                        Event perInstanceEvent) {\n                                    synchronized (accum) {\n                                        accum.put(\"instance\", ge.getKey());\n                                    }\n                                    return accum;\n                                }\n                            });\n                    }\n                })\n                .take(10)\n                .blockingForEach(new Consumer<Object>() {\n                    @Override\n                    public void accept(Object pv) {\n                        synchronized (pv) {\n                            System.out.println(pv);\n                        }\n                    }\n                });\n\n        System.out.println(\"**** finished\");\n\n        Thread.sleep(200); \r\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observable/ObservableZipTests.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
