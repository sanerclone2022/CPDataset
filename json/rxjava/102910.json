[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupByBackpressure() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>();\n\n        Observable.range(1, 4000)\n                .groupBy(IS_EVEN2)\n                .flatMap(new Function<GroupedObservable<Boolean, Integer>, Observable<String>>() {\n\n                    @Override\n                    public Observable<String> apply(final GroupedObservable<Boolean, Integer> g) {\n                        return g.observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                            @Override\n                            public String apply(Integer l) {\n                                if (g.getKey()) {\n                                    try {\n                                        Thread.sleep(1);\n                                    } catch (InterruptedException e) {\n                                    }\n                                    return l + \" is even.\";\n                                } else {\n                                    return l + \" is odd.\";\n                                }\n                            }\n\n                        });\n                    }\n\n                }).subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":1057,"groupId":"11300","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void groupByBackpressure() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>();\n\n        Observable.range(1, 4000)\n                .groupBy(IS_EVEN2)\n                .flatMap(new Function<GroupedObservable<Boolean, Integer>, Observable<String>>() {\n\n                    @Override\n                    public Observable<String> apply(final GroupedObservable<Boolean, Integer> g) {\n                        return g.observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                            @Override\n                            public String apply(Integer l) {\n                                if (g.getKey()) {\n                                    try {\n                                        Thread.sleep(1);\n                                    } catch (InterruptedException e) {\n                                    }\n                                    return l + \" is even.\";\n                                } else {\n                                    return l + \" is odd.\";\n                                }\n                            }\n\n                        });\n                    }\n\n                }).subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1026,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupByBackpressure2() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n\n        Flowable.range(1, 4000)\n            .doOnNext(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer v) {\n                    System.out.println(\"testgroupByBackpressure2 >> \" + v);\n                }\n            })\n            .groupBy(IS_EVEN2).flatMap(new Function<GroupedFlowable<Boolean, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Boolean, Integer> g) {\n                return g.take(2).observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer l) {\n                        if (g.getKey()) {\n                            try {\n                                Thread.sleep(1);\n                            } catch (InterruptedException e) {\n                            }\n                            return l + \" is even.\";\n                        } else {\n                            return l + \" is odd.\";\n                        }\n                    }\n\n                });\n            }\n\n        }).subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":1347,"groupId":"1348","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByBackpressure2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void groupByBackpressure2() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n\n        Flowable.range(1, 4000)\n            .doOnNext(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer v) {\n                    System.out.println(\"testgroupByBackpressure2 >> \" + v);\n                }\n            })\n            .groupBy(IS_EVEN2).flatMap(new Function<GroupedFlowable<Boolean, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Boolean, Integer> g) {\n                return g.take(2).observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer l) {\n                        if (g.getKey()) {\n                            try {\n                                Thread.sleep(1);\n                            } catch (InterruptedException e) {\n                            }\n                            return l + \" is even.\";\n                        } else {\n                            return l + \" is odd.\";\n                        }\n                    }\n\n                });\n            }\n\n        }).subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1311,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-06 15:59:14","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void groupByBackpressure() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>();\n\n        Observable.range(1, 4000)\n                .groupBy(IS_EVEN2)\n                .flatMap(new Function<GroupedObservable<Boolean, Integer>, Observable<String>>() {\n\n                    @Override\n                    public Observable<String> apply(final GroupedObservable<Boolean, Integer> g) {\n                        return g.observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                            @Override\n                            public String apply(Integer l) {\n                                if (g.getKey()) {\n                                    try {\n                                        Thread.sleep(1);\n                                    } catch (InterruptedException e) {\n                                    }\n                                    return l + \" is even.\";\n                                } else {\n                                    return l + \" is odd.\";\n                                }\n                            }\n\n                        });\n                    }\n\n                }).subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":1057,"groupId":"11300","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void groupByBackpressure() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>();\n\n        Observable.range(1, 4000)\n                .groupBy(IS_EVEN2)\n                .flatMap(new Function<GroupedObservable<Boolean, Integer>, Observable<String>>() {\n\n                    @Override\n                    public Observable<String> apply(final GroupedObservable<Boolean, Integer> g) {\n                        return g.observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                            @Override\n                            public String apply(Integer l) {\n                                if (g.getKey()) {\n                                    try {\n                                        Thread.sleep(1);\n                                    } catch (InterruptedException e) {\n                                    }\n                                    return l + \" is even.\";\n                                } else {\n                                    return l + \" is odd.\";\n                                }\n                            }\n\n                        });\n                    }\n\n                }).subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1026,"status":"N"},{"authorDate":"2019-12-06 15:59:14","commitOrder":2,"curCode":"    public void groupByBackpressure2() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n\n        Flowable.range(1, 4000)\n            .doOnNext(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer v) {\n                    System.out.println(\"testgroupByBackpressure2 >> \" + v);\n                }\n            })\n            .groupBy(IS_EVEN2)\n            .flatMap(new Function<GroupedFlowable<Boolean, Integer>, Flowable<String>>() {\n                @Override\n                public Flowable<String> apply(final GroupedFlowable<Boolean, Integer> g) {\n                    return g.take(2)\n                            .observeOn(Schedulers.computation())\n                            .map(new Function<Integer, String>() {\n                                @Override\n                                public String apply(Integer l) {\n                                    if (g.getKey()) {\n                                        try {\n                                            Thread.sleep(1);\n                                        } catch (InterruptedException e) {\n                                        }\n                                        return l + \" is even.\";\n                                    } else {\n                                        return l + \" is odd.\";\n                                    }\n                                }\n                            });\n                }\n            }, 4000) \r\n            .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","date":"2019-12-06 15:59:14","endLine":1351,"groupId":"1348","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByBackpressure2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5d/ae57500f54387f4d2fb5385154dcbcfd4c103f.src","preCode":"    public void groupByBackpressure2() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n\n        Flowable.range(1, 4000)\n            .doOnNext(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer v) {\n                    System.out.println(\"testgroupByBackpressure2 >> \" + v);\n                }\n            })\n            .groupBy(IS_EVEN2).flatMap(new Function<GroupedFlowable<Boolean, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Boolean, Integer> g) {\n                return g.take(2).observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer l) {\n                        if (g.getKey()) {\n                            try {\n                                Thread.sleep(1);\n                            } catch (InterruptedException e) {\n                            }\n                            return l + \" is even.\";\n                        } else {\n                            return l + \" is odd.\";\n                        }\n                    }\n\n                });\n            }\n\n        }).subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1314,"status":"M"}],"commitId":"1e2995812e759d5bf624f3a921f2e57c8c5e0f34","commitMessage":"@@@3.x: Change Flowable.groupBy to signal MBE instead of possibly hanging (#6740)\n\n* 3.x: Change Flowable.groupBy to signal MBE instead of possibly hanging\n\n* Update groupBy javadocs\n\n* Update backpressure annotation to ERROR.  add some see links\n\n* Correct javadocs typos\n\n* Improve coverage of changes\n","date":"2019-12-06 15:59:14","modifiedFileCount":"5","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":3,"curCode":"    public void groupByBackpressure() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>();\n\n        Observable.range(1, 4000)\n                .groupBy(IS_EVEN2)\n                .flatMap(new Function<GroupedObservable<Boolean, Integer>, Observable<String>>() {\n\n                    @Override\n                    public Observable<String> apply(final GroupedObservable<Boolean, Integer> g) {\n                        return g.observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                            @Override\n                            public String apply(Integer l) {\n                                if (g.getKey()) {\n                                    try {\n                                        Thread.sleep(1);\n                                    } catch (InterruptedException e) {\n                                    }\n                                    return l + \" is even.\";\n                                } else {\n                                    return l + \" is odd.\";\n                                }\n                            }\n\n                        });\n                    }\n\n                }).subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":1057,"groupId":"11300","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void groupByBackpressure() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>();\n\n        Observable.range(1, 4000)\n                .groupBy(IS_EVEN2)\n                .flatMap(new Function<GroupedObservable<Boolean, Integer>, Observable<String>>() {\n\n                    @Override\n                    public Observable<String> apply(final GroupedObservable<Boolean, Integer> g) {\n                        return g.observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                            @Override\n                            public String apply(Integer l) {\n                                if (g.getKey()) {\n                                    try {\n                                        Thread.sleep(1);\n                                    } catch (InterruptedException e) {\n                                    }\n                                    return l + \" is even.\";\n                                } else {\n                                    return l + \" is odd.\";\n                                }\n                            }\n\n                        });\n                    }\n\n                }).subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1026,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void groupByBackpressure2() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<>();\n\n        Flowable.range(1, 4000)\n            .doOnNext(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer v) {\n                    System.out.println(\"testgroupByBackpressure2 >> \" + v);\n                }\n            })\n            .groupBy(IS_EVEN2)\n            .flatMap(new Function<GroupedFlowable<Boolean, Integer>, Flowable<String>>() {\n                @Override\n                public Flowable<String> apply(final GroupedFlowable<Boolean, Integer> g) {\n                    return g.take(2)\n                            .observeOn(Schedulers.computation())\n                            .map(new Function<Integer, String>() {\n                                @Override\n                                public String apply(Integer l) {\n                                    if (g.getKey()) {\n                                        try {\n                                            Thread.sleep(1);\n                                        } catch (InterruptedException e) {\n                                        }\n                                        return l + \" is even.\";\n                                    } else {\n                                        return l + \" is odd.\";\n                                    }\n                                }\n                            });\n                }\n            }, 4000) \r\n            .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","date":"2019-12-22 18:39:23","endLine":1351,"groupId":"1348","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByBackpressure2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void groupByBackpressure2() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n\n        Flowable.range(1, 4000)\n            .doOnNext(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer v) {\n                    System.out.println(\"testgroupByBackpressure2 >> \" + v);\n                }\n            })\n            .groupBy(IS_EVEN2)\n            .flatMap(new Function<GroupedFlowable<Boolean, Integer>, Flowable<String>>() {\n                @Override\n                public Flowable<String> apply(final GroupedFlowable<Boolean, Integer> g) {\n                    return g.take(2)\n                            .observeOn(Schedulers.computation())\n                            .map(new Function<Integer, String>() {\n                                @Override\n                                public String apply(Integer l) {\n                                    if (g.getKey()) {\n                                        try {\n                                            Thread.sleep(1);\n                                        } catch (InterruptedException e) {\n                                        }\n                                        return l + \" is even.\";\n                                    } else {\n                                        return l + \" is odd.\";\n                                    }\n                                }\n                            });\n                }\n            }, 4000) \r\n            .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1314,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void groupByBackpressure() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<>();\n\n        Observable.range(1, 4000)\n                .groupBy(IS_EVEN2)\n                .flatMap(new Function<GroupedObservable<Boolean, Integer>, Observable<String>>() {\n\n                    @Override\n                    public Observable<String> apply(final GroupedObservable<Boolean, Integer> g) {\n                        return g.observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                            @Override\n                            public String apply(Integer l) {\n                                if (g.getKey()) {\n                                    try {\n                                        Thread.sleep(1);\n                                    } catch (InterruptedException e) {\n                                    }\n                                    return l + \" is even.\";\n                                } else {\n                                    return l + \" is odd.\";\n                                }\n                            }\n\n                        });\n                    }\n\n                }).subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","date":"2019-12-22 18:59:44","endLine":1059,"groupId":"102910","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/d3f2d6432c67ffdd0df5bbb6960b138ae6f15a.src","preCode":"    public void groupByBackpressure() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>();\n\n        Observable.range(1, 4000)\n                .groupBy(IS_EVEN2)\n                .flatMap(new Function<GroupedObservable<Boolean, Integer>, Observable<String>>() {\n\n                    @Override\n                    public Observable<String> apply(final GroupedObservable<Boolean, Integer> g) {\n                        return g.observeOn(Schedulers.computation()).map(new Function<Integer, String>() {\n\n                            @Override\n                            public String apply(Integer l) {\n                                if (g.getKey()) {\n                                    try {\n                                        Thread.sleep(1);\n                                    } catch (InterruptedException e) {\n                                    }\n                                    return l + \" is even.\";\n                                } else {\n                                    return l + \" is odd.\";\n                                }\n                            }\n\n                        });\n                    }\n\n                }).subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1028,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void groupByBackpressure2() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<>();\n\n        Flowable.range(1, 4000)\n            .doOnNext(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer v) {\n                    System.out.println(\"testgroupByBackpressure2 >> \" + v);\n                }\n            })\n            .groupBy(IS_EVEN2)\n            .flatMap(new Function<GroupedFlowable<Boolean, Integer>, Flowable<String>>() {\n                @Override\n                public Flowable<String> apply(final GroupedFlowable<Boolean, Integer> g) {\n                    return g.take(2)\n                            .observeOn(Schedulers.computation())\n                            .map(new Function<Integer, String>() {\n                                @Override\n                                public String apply(Integer l) {\n                                    if (g.getKey()) {\n                                        try {\n                                            Thread.sleep(1);\n                                        } catch (InterruptedException e) {\n                                        }\n                                        return l + \" is even.\";\n                                    } else {\n                                        return l + \" is odd.\";\n                                    }\n                                }\n                            });\n                }\n            }, 4000) \r\n            .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","date":"2019-12-22 18:39:23","endLine":1351,"groupId":"102910","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByBackpressure2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void groupByBackpressure2() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<>();\n\n        Flowable.range(1, 4000)\n            .doOnNext(new Consumer<Integer>() {\n                @Override\n                public void accept(Integer v) {\n                    System.out.println(\"testgroupByBackpressure2 >> \" + v);\n                }\n            })\n            .groupBy(IS_EVEN2)\n            .flatMap(new Function<GroupedFlowable<Boolean, Integer>, Flowable<String>>() {\n                @Override\n                public Flowable<String> apply(final GroupedFlowable<Boolean, Integer> g) {\n                    return g.take(2)\n                            .observeOn(Schedulers.computation())\n                            .map(new Function<Integer, String>() {\n                                @Override\n                                public String apply(Integer l) {\n                                    if (g.getKey()) {\n                                        try {\n                                            Thread.sleep(1);\n                                        } catch (InterruptedException e) {\n                                        }\n                                        return l + \" is even.\";\n                                    } else {\n                                        return l + \" is odd.\";\n                                    }\n                                }\n                            });\n                }\n            }, 4000) \r\n            .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1314,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
