[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(to);\n\n        assertEquals(100, to.values().size());\n    }\n","date":"2019-08-16 20:51:17","endLine":136,"groupId":"2940","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotEmitUntilAfterSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5a/7d312edea5177eea021f656b0e57879e7f176f.src","preCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(to);\n\n        assertEquals(100, to.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(ts);\n\n        assertEquals(100, ts.values().size());\n    }\n","date":"2019-08-16 20:51:17","endLine":136,"groupId":"2940","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotEmitUntilAfterSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f9/18d152bebb5106a3827b3c6873a09e276c4afd.src","preCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(ts);\n\n        assertEquals(100, ts.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(to);\n\n        assertEquals(100, to.values().size());\n    }\n","date":"2019-08-16 20:51:17","endLine":136,"groupId":"2940","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotEmitUntilAfterSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5a/7d312edea5177eea021f656b0e57879e7f176f.src","preCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(to);\n\n        assertEquals(100, to.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(ts);\n\n        assertEquals(100, ts.values().size());\n    }\n","date":"2019-12-22 18:39:23","endLine":136,"groupId":"2940","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotEmitUntilAfterSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/29/88da75700be7df11aa8ed3e367e1db3d838865.src","preCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(ts);\n\n        assertEquals(100, ts.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestObserver<Integer> to = new TestObserver<>();\n        Observable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(to);\n\n        assertEquals(100, to.values().size());\n    }\n","date":"2019-12-22 18:59:44","endLine":136,"groupId":"103826","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotEmitUntilAfterSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c4/82d121be7b474658d219e6f3f65b6669c3d6ab.src","preCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(to);\n\n        assertEquals(100, to.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(ts);\n\n        assertEquals(100, ts.values().size());\n    }\n","date":"2019-12-22 18:39:23","endLine":136,"groupId":"103826","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotEmitUntilAfterSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/29/88da75700be7df11aa8ed3e367e1db3d838865.src","preCode":"    public void shouldNotEmitUntilAfterSubscription() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).filter(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer t1) {\n                \r\n                return t1 > 0;\n            }\n\n        }).subscribe(ts);\n\n        assertEquals(100, ts.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
