[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void predicateThrows() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    observer.onNext(1);\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            }\n            .all(new Predicate<Integer>() {\n                @Override\n                public boolean test(Integer v) throws Exception {\n                    throw new TestException();\n                }\n            })\n            .test()\n            .assertFailure(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":366,"groupId":"3157","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"predicateThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/59/34706a4dc4bd8ba8a34f945dc19a249b549f3c.src","preCode":"    public void predicateThrows() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    observer.onNext(1);\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            }\n            .all(new Predicate<Integer>() {\n                @Override\n                public boolean test(Integer v) throws Exception {\n                    throw new TestException();\n                }\n            })\n            .test()\n            .assertFailure(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableAllTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void predicateThrowsObservable() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Integer>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    subscriber.onNext(1);\n                    subscriber.onNext(2);\n                    subscriber.onError(new TestException());\n                    subscriber.onComplete();\n                }\n            }\n            .all(new Predicate<Integer>() {\n                @Override\n                public boolean test(Integer v) throws Exception {\n                    throw new TestException();\n                }\n            })\n            .toFlowable()\n            .test()\n            .assertFailure(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":434,"groupId":"3157","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"predicateThrowsObservable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/75/15b66cb0e0b8d03752fb751ffb18253d43b55c.src","preCode":"    public void predicateThrowsObservable() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Integer>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    subscriber.onNext(1);\n                    subscriber.onNext(2);\n                    subscriber.onError(new TestException());\n                    subscriber.onComplete();\n                }\n            }\n            .all(new Predicate<Integer>() {\n                @Override\n                public boolean test(Integer v) throws Exception {\n                    throw new TestException();\n                }\n            })\n            .toFlowable()\n            .test()\n            .assertFailure(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableAllTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void predicateThrows() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposable.empty());\n\n                    observer.onNext(1);\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            }\n            .all(new Predicate<Integer>() {\n                @Override\n                public boolean test(Integer v) throws Exception {\n                    throw new TestException();\n                }\n            })\n            .test()\n            .assertFailure(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":366,"groupId":"102195","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"predicateThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/be122378055963184c38c6f93abcee2780c217.src","preCode":"    public void predicateThrows() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    observer.onNext(1);\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            }\n            .all(new Predicate<Integer>() {\n                @Override\n                public boolean test(Integer v) throws Exception {\n                    throw new TestException();\n                }\n            })\n            .test()\n            .assertFailure(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableAllTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void predicateThrowsObservable() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Integer>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    subscriber.onNext(1);\n                    subscriber.onNext(2);\n                    subscriber.onError(new TestException());\n                    subscriber.onComplete();\n                }\n            }\n            .all(new Predicate<Integer>() {\n                @Override\n                public boolean test(Integer v) throws Exception {\n                    throw new TestException();\n                }\n            })\n            .toFlowable()\n            .test()\n            .assertFailure(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":434,"groupId":"102195","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"predicateThrowsObservable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/75/15b66cb0e0b8d03752fb751ffb18253d43b55c.src","preCode":"    public void predicateThrowsObservable() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Integer>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    subscriber.onNext(1);\n                    subscriber.onNext(2);\n                    subscriber.onError(new TestException());\n                    subscriber.onComplete();\n                }\n            }\n            .all(new Predicate<Integer>() {\n                @Override\n                public boolean test(Integer v) throws Exception {\n                    throw new TestException();\n                }\n            })\n            .toFlowable()\n            .test()\n            .assertFailure(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableAllTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
