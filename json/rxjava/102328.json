[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void retryIndefinitely() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 20;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        origin.retry().subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(numRetries + 1)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":132,"groupId":"1830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"retryIndefinitely","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/6b37be8498fd805faa5ed1fcc2721995dd4e60.src","preCode":"    public void retryIndefinitely() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 20;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        origin.retry().subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(numRetries + 1)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void retrySuccess() {\n        int numFailures = 1;\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numFailures));\n        origin.retry(3).subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numFailures)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":323,"groupId":"12974","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"retrySuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/6b37be8498fd805faa5ed1fcc2721995dd4e60.src","preCode":"    public void retrySuccess() {\n        int numFailures = 1;\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numFailures));\n        origin.retry(3).subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numFailures)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void retryIndefinitely() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 20;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        origin.retry().subscribe(new TestSubscriber<>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(numRetries + 1)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":132,"groupId":"102328","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"retryIndefinitely","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4d/e1cfb8b0d7ed46d90f8994f62782b0e5d4945e.src","preCode":"    public void retryIndefinitely() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 20;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        origin.retry().subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(numRetries + 1)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void retrySuccess() {\n        int numFailures = 1;\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numFailures));\n        origin.retry(3).subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numFailures)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":323,"groupId":"102328","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"retrySuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/6b37be8498fd805faa5ed1fcc2721995dd4e60.src","preCode":"    public void retrySuccess() {\n        int numFailures = 1;\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numFailures));\n        origin.retry(3).subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numFailures)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"N"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"}]
