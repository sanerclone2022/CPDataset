[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void ordering() throws InterruptedException {\n\r\n        \r\n        Observable<String> obs = Observable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        InOrder inOrder = inOrder(observer);\n        TestObserverEx<String> to = new TestObserverEx<String>(observer);\n\n        obs.observeOn(Schedulers.computation()).subscribe(to);\n\n        to.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (to.errors().size() > 0) {\n            for (Throwable t : to.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"null\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":88,"groupId":"2901","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ordering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/1d36f0d09319680f4c13968eea2d99c5e72ad9.src","preCode":"    public void ordering() throws InterruptedException {\n\r\n        \r\n        Observable<String> obs = Observable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        InOrder inOrder = inOrder(observer);\n        TestObserverEx<String> to = new TestObserverEx<String>(observer);\n\n        obs.observeOn(Schedulers.computation()).subscribe(to);\n\n        to.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (to.errors().size() > 0) {\n            for (Throwable t : to.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"null\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void ordering() throws InterruptedException {\n        Flowable<String> obs = Flowable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        InOrder inOrder = inOrder(subscriber);\n        TestSubscriberEx<String> ts = new TestSubscriberEx<String>(subscriber);\n\n        obs.observeOn(Schedulers.computation()).subscribe(ts);\n\n        ts.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (ts.errors().size() > 0) {\n            for (Throwable t : ts.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"null\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":86,"groupId":"13084","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ordering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ce/81203a840d057eb88c3fed181fbf06af9e57dc.src","preCode":"    public void ordering() throws InterruptedException {\n        Flowable<String> obs = Flowable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        InOrder inOrder = inOrder(subscriber);\n        TestSubscriberEx<String> ts = new TestSubscriberEx<String>(subscriber);\n\n        obs.observeOn(Schedulers.computation()).subscribe(ts);\n\n        ts.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (ts.errors().size() > 0) {\n            for (Throwable t : ts.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"null\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void ordering() throws InterruptedException {\n\r\n        \r\n        Observable<String> obs = Observable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        InOrder inOrder = inOrder(observer);\n        TestObserverEx<String> to = new TestObserverEx<String>(observer);\n\n        obs.observeOn(Schedulers.computation()).subscribe(to);\n\n        to.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (to.errors().size() > 0) {\n            for (Throwable t : to.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"null\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":88,"groupId":"2901","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ordering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/1d36f0d09319680f4c13968eea2d99c5e72ad9.src","preCode":"    public void ordering() throws InterruptedException {\n\r\n        \r\n        Observable<String> obs = Observable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        InOrder inOrder = inOrder(observer);\n        TestObserverEx<String> to = new TestObserverEx<String>(observer);\n\n        obs.observeOn(Schedulers.computation()).subscribe(to);\n\n        to.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (to.errors().size() > 0) {\n            for (Throwable t : to.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"null\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void ordering() throws InterruptedException {\n        Flowable<String> obs = Flowable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        InOrder inOrder = inOrder(subscriber);\n        TestSubscriberEx<String> ts = new TestSubscriberEx<>(subscriber);\n\n        obs.observeOn(Schedulers.computation()).subscribe(ts);\n\n        ts.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (ts.errors().size() > 0) {\n            for (Throwable t : ts.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"null\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":87,"groupId":"13084","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ordering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/73/efdfc426fc765de22359eb2867b467bac65b15.src","preCode":"    public void ordering() throws InterruptedException {\n        Flowable<String> obs = Flowable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        InOrder inOrder = inOrder(subscriber);\n        TestSubscriberEx<String> ts = new TestSubscriberEx<String>(subscriber);\n\n        obs.observeOn(Schedulers.computation()).subscribe(ts);\n\n        ts.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (ts.errors().size() > 0) {\n            for (Throwable t : ts.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"null\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void ordering() throws InterruptedException {\n\r\n        \r\n        Observable<String> obs = Observable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        InOrder inOrder = inOrder(observer);\n        TestObserverEx<String> to = new TestObserverEx<>(observer);\n\n        obs.observeOn(Schedulers.computation()).subscribe(to);\n\n        to.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (to.errors().size() > 0) {\n            for (Throwable t : to.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"null\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:59:44","endLine":88,"groupId":"103568","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"ordering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/57/9b713313f3932bdce293ecbf8bbc8df2f74ed5.src","preCode":"    public void ordering() throws InterruptedException {\n\r\n        \r\n        Observable<String> obs = Observable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        InOrder inOrder = inOrder(observer);\n        TestObserverEx<String> to = new TestObserverEx<String>(observer);\n\n        obs.observeOn(Schedulers.computation()).subscribe(to);\n\n        to.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (to.errors().size() > 0) {\n            for (Throwable t : to.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"null\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void ordering() throws InterruptedException {\n        Flowable<String> obs = Flowable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        InOrder inOrder = inOrder(subscriber);\n        TestSubscriberEx<String> ts = new TestSubscriberEx<>(subscriber);\n\n        obs.observeOn(Schedulers.computation()).subscribe(ts);\n\n        ts.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (ts.errors().size() > 0) {\n            for (Throwable t : ts.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"null\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":87,"groupId":"103568","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ordering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/73/efdfc426fc765de22359eb2867b467bac65b15.src","preCode":"    public void ordering() throws InterruptedException {\n        Flowable<String> obs = Flowable.just(\"one\", \"null\", \"two\", \"three\", \"four\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        InOrder inOrder = inOrder(subscriber);\n        TestSubscriberEx<String> ts = new TestSubscriberEx<>(subscriber);\n\n        obs.observeOn(Schedulers.computation()).subscribe(ts);\n\n        ts.awaitDone(1000, TimeUnit.MILLISECONDS);\n        if (ts.errors().size() > 0) {\n            for (Throwable t : ts.errors()) {\n                t.printStackTrace();\n            }\n            fail(\"failed with exception\");\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"null\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
