[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribe() throws InterruptedException {\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.<String>unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposables.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n            }\n        });\n\n        s1.toFlowable().subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":296,"groupId":"1118","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/99b0b26de026af49de0a14f465067a997b2e98.src","preCode":"    public void unsubscribe() throws InterruptedException {\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.<String>unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposables.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n            }\n        });\n\n        s1.toFlowable().subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/single/SingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribeViaReturnedSubscription() throws InterruptedException {\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposables.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n\n            }\n        });\n\n        Disposable subscription = s1.subscribe();\n\n        Thread.sleep(100);\n\n        subscription.dispose();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":427,"groupId":"1620","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeViaReturnedSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/99b0b26de026af49de0a14f465067a997b2e98.src","preCode":"    public void unsubscribeViaReturnedSubscription() throws InterruptedException {\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposables.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n\n            }\n        });\n\n        Disposable subscription = s1.subscribe();\n\n        Thread.sleep(100);\n\n        subscription.dispose();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/single/SingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void unsubscribe() throws InterruptedException {\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.<String>unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposable.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n            }\n        });\n\n        s1.toFlowable().subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":296,"groupId":"1118","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/b5038719170f03ffacad86cca3a688959bf043.src","preCode":"    public void unsubscribe() throws InterruptedException {\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.<String>unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposables.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n            }\n        });\n\n        s1.toFlowable().subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/single/SingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void unsubscribeViaReturnedSubscription() throws InterruptedException {\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposable.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n\n            }\n        });\n\n        Disposable subscription = s1.subscribe();\n\n        Thread.sleep(100);\n\n        subscription.dispose();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":427,"groupId":"1620","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeViaReturnedSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/b5038719170f03ffacad86cca3a688959bf043.src","preCode":"    public void unsubscribeViaReturnedSubscription() throws InterruptedException {\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposables.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n\n            }\n        });\n\n        Disposable subscription = s1.subscribe();\n\n        Thread.sleep(100);\n\n        subscription.dispose();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/single/SingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void unsubscribe() throws InterruptedException {\n        TestSubscriber<String> ts = new TestSubscriber<>();\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.<String>unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposable.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n            }\n        });\n\n        s1.toFlowable().subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":296,"groupId":"10113","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/974c0ef2eeada7eb46a10a7ee05a392c028761.src","preCode":"    public void unsubscribe() throws InterruptedException {\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.<String>unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposable.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n            }\n        });\n\n        s1.toFlowable().subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/single/SingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void unsubscribeViaReturnedSubscription() throws InterruptedException {\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposable.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n\n            }\n        });\n\n        Disposable subscription = s1.subscribe();\n\n        Thread.sleep(100);\n\n        subscription.dispose();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":427,"groupId":"10113","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeViaReturnedSubscription","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/b5038719170f03ffacad86cca3a688959bf043.src","preCode":"    public void unsubscribeViaReturnedSubscription() throws InterruptedException {\n        final AtomicBoolean unsubscribed = new AtomicBoolean();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch latch = new CountDownLatch(2);\n\n        Single<String> s1 = Single.unsafeCreate(new SingleSource<String>() {\n            @Override\n            public void subscribe(final SingleObserver<? super String> observer) {\n                SerialDisposable sd = new SerialDisposable();\n                observer.onSubscribe(sd);\n                final Thread t = new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(5000);\n                            observer.onSuccess(\"success\");\n                        } catch (InterruptedException e) {\n                            interrupted.set(true);\n                            latch.countDown();\n                        }\n                    }\n\n                });\n                sd.replace(Disposable.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        unsubscribed.set(true);\n                        t.interrupt();\n                        latch.countDown();\n                    }\n                }));\n                t.start();\n\n            }\n        });\n\n        Disposable subscription = s1.subscribe();\n\n        Thread.sleep(100);\n\n        subscription.dispose();\n\n        if (latch.await(1000, TimeUnit.MILLISECONDS)) {\n            assertTrue(unsubscribed.get());\n            assertTrue(interrupted.get());\n        } else {\n            fail(\"timed out waiting for latch\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/single/SingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"N"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
