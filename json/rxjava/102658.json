[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Observable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Observer<? super Notification<Object>> observer) {\n                observer.onSubscribe(Disposables.empty());\n                observer.onNext(Notification.createOnComplete());\n                observer.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","date":"2019-08-16 20:51:17","endLine":236,"groupId":"4853","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"nonNotificationInstanceAfterDispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/84/a6b06b0616faa3f3c800896997b26a8c67d326.src","preCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Observable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Observer<? super Notification<Object>> observer) {\n                observer.onSubscribe(Disposables.empty());\n                observer.onNext(Notification.createOnComplete());\n                observer.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Flowable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Notification<Object>> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                subscriber.onNext(Notification.createOnComplete());\n                subscriber.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","date":"2019-08-16 20:51:17","endLine":238,"groupId":"4853","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"nonNotificationInstanceAfterDispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/75/a05cbd23ca64fb3fe24b9971559a95ec17ee9e.src","preCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Flowable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Notification<Object>> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                subscriber.onNext(Notification.createOnComplete());\n                subscriber.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Observable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Observer<? super Notification<Object>> observer) {\n                observer.onSubscribe(Disposable.empty());\n                observer.onNext(Notification.createOnComplete());\n                observer.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","date":"2019-12-20 02:39:40","endLine":236,"groupId":"4853","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"nonNotificationInstanceAfterDispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5d/3e2b6be10ebfdb3fc6ab7041be7e06842204c7.src","preCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Observable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Observer<? super Notification<Object>> observer) {\n                observer.onSubscribe(Disposables.empty());\n                observer.onNext(Notification.createOnComplete());\n                observer.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Flowable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Notification<Object>> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                subscriber.onNext(Notification.createOnComplete());\n                subscriber.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","date":"2019-08-16 20:51:17","endLine":238,"groupId":"4853","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"nonNotificationInstanceAfterDispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/75/a05cbd23ca64fb3fe24b9971559a95ec17ee9e.src","preCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Flowable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Notification<Object>> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                subscriber.onNext(Notification.createOnComplete());\n                subscriber.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2020-02-12 23:26:52","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Observable<Object>() {\n            @Override\n            protected void subscribeActual(Observer<? super Object> observer) {\n                observer.onSubscribe(Disposable.empty());\n                observer.onNext(Notification.createOnComplete());\n                observer.onNext(1);\n            }\n        }\n        .dematerialize(v -> (Notification<Object>)v)\n        .test()\n        .assertResult();\n    }\n","date":"2020-02-12 23:26:52","endLine":237,"groupId":"102658","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"nonNotificationInstanceAfterDispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bc/041cb1be496ae5b6beee17bf8b8dfff955ebd2.src","preCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Observable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Observer<? super Notification<Object>> observer) {\n                observer.onSubscribe(Disposable.empty());\n                observer.onNext(Notification.createOnComplete());\n                observer.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Flowable<Object>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                subscriber.onNext(Notification.createOnComplete());\n                subscriber.onNext(1);\n            }\n        }\n        .dematerialize(v -> (Notification<Object>)v)\n        .test()\n        .assertResult();\n    }\n","date":"2020-02-12 23:26:52","endLine":254,"groupId":"102658","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"nonNotificationInstanceAfterDispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/25/71dc481e8a3a5d2c2963cc8f287f5d63f5a3f0.src","preCode":"    public void nonNotificationInstanceAfterDispose() {\n        new Flowable<Notification<Object>>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Notification<Object>> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                subscriber.onNext(Notification.createOnComplete());\n                subscriber.onNext(Notification.<Object>createOnNext(1));\n            }\n        }\n        .dematerialize(Functions.<Notification<Object>>identity())\n        .test()\n        .assertResult();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
