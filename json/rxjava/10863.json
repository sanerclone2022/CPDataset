[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void assertTestObserver() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>();\n        oi.subscribe(subscriber);\n\n        subscriber.assertValues(1, 2);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":55,"groupId":"10582","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertTestObserver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/68dc9cb57635691d74f8c7a994166d7e7259aa.src","preCode":"    public void assertTestObserver() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>();\n        oi.subscribe(subscriber);\n\n        subscriber.assertValues(1, 2);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/TestObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void assertNotMatchCount() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>();\n        oi.subscribe(subscriber);\n\n        thrown.expect(AssertionError.class);\n        \r\n\r\n\n        subscriber.assertValue(1);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":70,"groupId":"10581","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNotMatchCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/68dc9cb57635691d74f8c7a994166d7e7259aa.src","preCode":"    public void assertNotMatchCount() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>();\n        oi.subscribe(subscriber);\n\n        thrown.expect(AssertionError.class);\n        \r\n\r\n\n        subscriber.assertValue(1);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/TestObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void assertTestObserver() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<>();\n        oi.subscribe(subscriber);\n\n        subscriber.assertValues(1, 2);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","date":"2019-12-22 19:17:37","endLine":55,"groupId":"12252","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertTestObserver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/4a287cee05cd468472e741cac46e2a0c0ae5de.src","preCode":"    public void assertTestObserver() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>();\n        oi.subscribe(subscriber);\n\n        subscriber.assertValues(1, 2);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/TestObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void assertNotMatchCount() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<>();\n        oi.subscribe(subscriber);\n\n        thrown.expect(AssertionError.class);\n        \r\n\r\n\n        subscriber.assertValue(1);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","date":"2019-12-22 19:17:37","endLine":70,"groupId":"901","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNotMatchCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/4a287cee05cd468472e741cac46e2a0c0ae5de.src","preCode":"    public void assertNotMatchCount() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>();\n        oi.subscribe(subscriber);\n\n        thrown.expect(AssertionError.class);\n        \r\n\r\n\n        subscriber.assertValue(1);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/TestObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2020-01-07 16:33:23","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void assertTestObserver() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<>();\n        oi.subscribe(subscriber);\n\n        subscriber.assertValues(1, 2);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","date":"2019-12-22 19:17:37","endLine":55,"groupId":"10863","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertTestObserver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/4a287cee05cd468472e741cac46e2a0c0ae5de.src","preCode":"    public void assertTestObserver() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<>();\n        oi.subscribe(subscriber);\n\n        subscriber.assertValues(1, 2);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/TestObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2020-01-07 16:33:23","commitOrder":3,"curCode":"    public void assertNotMatchCount() {\n        assertThrows(AssertionError.class, () -> {\n            Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n            TestSubscriber<Integer> subscriber = new TestSubscriber<>();\n            oi.subscribe(subscriber);\n\n            subscriber.assertValue(1);\n            subscriber.assertValueCount(2);\n            subscriber.assertComplete().assertNoErrors();\n        });\n    }\n","date":"2020-01-07 16:33:23","endLine":64,"groupId":"10863","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNotMatchCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/01/d6d76789f6f49c8c1b03eb41321f16612522a8.src","preCode":"    public void assertNotMatchCount() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriber<Integer> subscriber = new TestSubscriber<>();\n        oi.subscribe(subscriber);\n\n        thrown.expect(AssertionError.class);\n        \r\n\r\n\n        subscriber.assertValue(1);\n        subscriber.assertValueCount(2);\n        subscriber.assertComplete().assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/TestObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"45c0b064dcaea7ac3d55249c04a62370ebf4b4a9","commitMessage":"@@@3.x: Fix Junit 4.13 deprecated API use (#6813)\n\n","date":"2020-01-07 16:33:23","modifiedFileCount":"4","status":"M","submitter":"David Karnok"}]
