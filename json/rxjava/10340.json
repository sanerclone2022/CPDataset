[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onSubscribe(Subscription s) {\n        lastThread = Thread.currentThread();\n\n        if (s == null) {\n            errors.add(new NullPointerException(\"onSubscribe received a null Subscription\"));\n            return;\n        }\n        if (!upstream.compareAndSet(null, s)) {\n            s.cancel();\n            if (upstream.get() != SubscriptionHelper.CANCELLED) {\n                errors.add(new IllegalStateException(\"onSubscribe received multiple subscriptions: \" + s));\n            }\n            return;\n        }\n\n        if (initialFusionMode != 0) {\n            if (s instanceof QueueSubscription) {\n                qs = (QueueSubscription<T>)s;\n\n                int m = qs.requestFusion(initialFusionMode);\n                establishedFusionMode = m;\n\n                if (m == QueueFuseable.SYNC) {\n                    checkSubscriptionOnce = true;\n                    lastThread = Thread.currentThread();\n                    try {\n                        T t;\n                        while ((t = qs.poll()) != null) {\n                            values.add(t);\n                        }\n                        completions++;\n                    } catch (Throwable ex) {\n                        \r\n                        errors.add(ex);\n                    }\n                    return;\n                }\n            }\n        }\n\n        downstream.onSubscribe(s);\n\n        long mr = missedRequested.getAndSet(0L);\n        if (mr != 0L) {\n            s.request(mr);\n        }\n\n        onStart();\n    }\n","date":"2019-08-16 20:51:17","endLine":145,"groupId":"10118","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onSubscribe","params":"(Subscriptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bd/c1a6a1daa21cb38135f93a8edeced4071e8104.src","preCode":"    public void onSubscribe(Subscription s) {\n        lastThread = Thread.currentThread();\n\n        if (s == null) {\n            errors.add(new NullPointerException(\"onSubscribe received a null Subscription\"));\n            return;\n        }\n        if (!upstream.compareAndSet(null, s)) {\n            s.cancel();\n            if (upstream.get() != SubscriptionHelper.CANCELLED) {\n                errors.add(new IllegalStateException(\"onSubscribe received multiple subscriptions: \" + s));\n            }\n            return;\n        }\n\n        if (initialFusionMode != 0) {\n            if (s instanceof QueueSubscription) {\n                qs = (QueueSubscription<T>)s;\n\n                int m = qs.requestFusion(initialFusionMode);\n                establishedFusionMode = m;\n\n                if (m == QueueFuseable.SYNC) {\n                    checkSubscriptionOnce = true;\n                    lastThread = Thread.currentThread();\n                    try {\n                        T t;\n                        while ((t = qs.poll()) != null) {\n                            values.add(t);\n                        }\n                        completions++;\n                    } catch (Throwable ex) {\n                        \r\n                        errors.add(ex);\n                    }\n                    return;\n                }\n            }\n        }\n\n        downstream.onSubscribe(s);\n\n        long mr = missedRequested.getAndSet(0L);\n        if (mr != 0L) {\n            s.request(mr);\n        }\n\n        onStart();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberEx.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onSubscribe(Subscription s) {\n        lastThread = Thread.currentThread();\n\n        if (s == null) {\n            errors.add(new NullPointerException(\"onSubscribe received a null Subscription\"));\n            return;\n        }\n        if (!upstream.compareAndSet(null, s)) {\n            s.cancel();\n            if (upstream.get() != SubscriptionHelper.CANCELLED) {\n                errors.add(new IllegalStateException(\"onSubscribe received multiple subscriptions: \" + s));\n            }\n            return;\n        }\n\n        downstream.onSubscribe(s);\n\n        long mr = missedRequested.getAndSet(0L);\n        if (mr != 0L) {\n            s.request(mr);\n        }\n\n        onStart();\n    }\n","date":"2019-08-16 20:51:17","endLine":146,"groupId":"10118","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onSubscribe","params":"(Subscriptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/07337b3668b8c5e014c3dd5769f8c5de4e75e9.src","preCode":"    public void onSubscribe(Subscription s) {\n        lastThread = Thread.currentThread();\n\n        if (s == null) {\n            errors.add(new NullPointerException(\"onSubscribe received a null Subscription\"));\n            return;\n        }\n        if (!upstream.compareAndSet(null, s)) {\n            s.cancel();\n            if (upstream.get() != SubscriptionHelper.CANCELLED) {\n                errors.add(new IllegalStateException(\"onSubscribe received multiple subscriptions: \" + s));\n            }\n            return;\n        }\n\n        downstream.onSubscribe(s);\n\n        long mr = missedRequested.getAndSet(0L);\n        if (mr != 0L) {\n            s.request(mr);\n        }\n\n        onStart();\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subscribers/TestSubscriber.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-21 18:08:34","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void onSubscribe(Subscription s) {\n        lastThread = Thread.currentThread();\n\n        if (s == null) {\n            errors.add(new NullPointerException(\"onSubscribe received a null Subscription\"));\n            return;\n        }\n        if (!upstream.compareAndSet(null, s)) {\n            s.cancel();\n            if (upstream.get() != SubscriptionHelper.CANCELLED) {\n                errors.add(new IllegalStateException(\"onSubscribe received multiple subscriptions: \" + s));\n            }\n            return;\n        }\n\n        if (initialFusionMode != 0) {\n            if (s instanceof QueueSubscription) {\n                qs = (QueueSubscription<T>)s;\n\n                int m = qs.requestFusion(initialFusionMode);\n                establishedFusionMode = m;\n\n                if (m == QueueFuseable.SYNC) {\n                    checkSubscriptionOnce = true;\n                    lastThread = Thread.currentThread();\n                    try {\n                        T t;\n                        while ((t = qs.poll()) != null) {\n                            values.add(t);\n                        }\n                        completions++;\n                    } catch (Throwable ex) {\n                        \r\n                        errors.add(ex);\n                    }\n                    return;\n                }\n            }\n        }\n\n        downstream.onSubscribe(s);\n\n        long mr = missedRequested.getAndSet(0L);\n        if (mr != 0L) {\n            s.request(mr);\n        }\n\n        onStart();\n    }\n","date":"2019-08-16 20:51:17","endLine":145,"groupId":"10340","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onSubscribe","params":"(Subscriptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bd/c1a6a1daa21cb38135f93a8edeced4071e8104.src","preCode":"    public void onSubscribe(Subscription s) {\n        lastThread = Thread.currentThread();\n\n        if (s == null) {\n            errors.add(new NullPointerException(\"onSubscribe received a null Subscription\"));\n            return;\n        }\n        if (!upstream.compareAndSet(null, s)) {\n            s.cancel();\n            if (upstream.get() != SubscriptionHelper.CANCELLED) {\n                errors.add(new IllegalStateException(\"onSubscribe received multiple subscriptions: \" + s));\n            }\n            return;\n        }\n\n        if (initialFusionMode != 0) {\n            if (s instanceof QueueSubscription) {\n                qs = (QueueSubscription<T>)s;\n\n                int m = qs.requestFusion(initialFusionMode);\n                establishedFusionMode = m;\n\n                if (m == QueueFuseable.SYNC) {\n                    checkSubscriptionOnce = true;\n                    lastThread = Thread.currentThread();\n                    try {\n                        T t;\n                        while ((t = qs.poll()) != null) {\n                            values.add(t);\n                        }\n                        completions++;\n                    } catch (Throwable ex) {\n                        \r\n                        errors.add(ex);\n                    }\n                    return;\n                }\n            }\n        }\n\n        downstream.onSubscribe(s);\n\n        long mr = missedRequested.getAndSet(0L);\n        if (mr != 0L) {\n            s.request(mr);\n        }\n\n        onStart();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberEx.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2019-12-21 18:08:34","commitOrder":2,"curCode":"    public void onSubscribe(@NonNull Subscription s) {\n        lastThread = Thread.currentThread();\n\n        if (s == null) {\n            errors.add(new NullPointerException(\"onSubscribe received a null Subscription\"));\n            return;\n        }\n        if (!upstream.compareAndSet(null, s)) {\n            s.cancel();\n            if (upstream.get() != SubscriptionHelper.CANCELLED) {\n                errors.add(new IllegalStateException(\"onSubscribe received multiple subscriptions: \" + s));\n            }\n            return;\n        }\n\n        downstream.onSubscribe(s);\n\n        long mr = missedRequested.getAndSet(0L);\n        if (mr != 0L) {\n            s.request(mr);\n        }\n\n        onStart();\n    }\n","date":"2019-12-21 18:08:34","endLine":149,"groupId":"10340","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onSubscribe","params":"(@NonNullSubscriptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cb/c9d10320228ec3ea2ee8f5338317af309e695e.src","preCode":"    public void onSubscribe(Subscription s) {\n        lastThread = Thread.currentThread();\n\n        if (s == null) {\n            errors.add(new NullPointerException(\"onSubscribe received a null Subscription\"));\n            return;\n        }\n        if (!upstream.compareAndSet(null, s)) {\n            s.cancel();\n            if (upstream.get() != SubscriptionHelper.CANCELLED) {\n                errors.add(new IllegalStateException(\"onSubscribe received multiple subscriptions: \" + s));\n            }\n            return;\n        }\n\n        downstream.onSubscribe(s);\n\n        long mr = missedRequested.getAndSet(0L);\n        if (mr != 0L) {\n            s.request(mr);\n        }\n\n        onStart();\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subscribers/TestSubscriber.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"dba670554c69d6c09d28643505880c1a468af3db","commitMessage":"@@@3.x: Cleanup and prettify Javadocs.  widen XOperator throws (#6785)\n\n* 3.x: Cleanup and prettify Javadocs.  widen XOperator throws\n\n* Fix encoding of ? in javadoc\n\n* Fix a wrong tag name\n","date":"2019-12-21 18:08:34","modifiedFileCount":"75","status":"M","submitter":"David Karnok"}]
