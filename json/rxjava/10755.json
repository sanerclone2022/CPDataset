[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestCompletable tc = new TestCompletable();\n\n            tc.onSubscribe(Disposables.empty());\n\n            Disposable d = Disposables.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":96,"groupId":"8264","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/45/d4b821722dbca8b5376f39c3bfe5fa01c6e919.src","preCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestCompletable tc = new TestCompletable();\n\n            tc.onSubscribe(Disposables.empty());\n\n            Disposable d = Disposables.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/DisposableCompletableObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestMaybe<Integer> tc = new TestMaybe<Integer>();\n\n            tc.onSubscribe(Disposables.empty());\n\n            Disposable d = Disposables.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":104,"groupId":"8264","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/2e40ca3a04870d5de90725e2b3c1683673b18a.src","preCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestMaybe<Integer> tc = new TestMaybe<Integer>();\n\n            tc.onSubscribe(Disposables.empty());\n\n            Disposable d = Disposables.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/DisposableMaybeObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestCompletable tc = new TestCompletable();\n\n            tc.onSubscribe(Disposable.empty());\n\n            Disposable d = Disposable.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":96,"groupId":"8264","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/84/db3819ae4bfbcbf3560fc5784c1ff7feb6908d.src","preCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestCompletable tc = new TestCompletable();\n\n            tc.onSubscribe(Disposables.empty());\n\n            Disposable d = Disposables.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/DisposableCompletableObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestMaybe<Integer> tc = new TestMaybe<Integer>();\n\n            tc.onSubscribe(Disposable.empty());\n\n            Disposable d = Disposable.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":104,"groupId":"8264","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"startOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/42/cbd25c5dac8910561998d12f316222c5dd2bde.src","preCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestMaybe<Integer> tc = new TestMaybe<Integer>();\n\n            tc.onSubscribe(Disposables.empty());\n\n            Disposable d = Disposables.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/DisposableMaybeObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestCompletable tc = new TestCompletable();\n\n            tc.onSubscribe(Disposable.empty());\n\n            Disposable d = Disposable.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":96,"groupId":"10755","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/84/db3819ae4bfbcbf3560fc5784c1ff7feb6908d.src","preCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestCompletable tc = new TestCompletable();\n\n            tc.onSubscribe(Disposable.empty());\n\n            Disposable d = Disposable.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/DisposableCompletableObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestMaybe<Integer> tc = new TestMaybe<>();\n\n            tc.onSubscribe(Disposable.empty());\n\n            Disposable d = Disposable.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":104,"groupId":"10755","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"startOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/dc6a6d3b389b7a63d0cfa1118e22581296b011.src","preCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestMaybe<Integer> tc = new TestMaybe<Integer>();\n\n            tc.onSubscribe(Disposable.empty());\n\n            Disposable d = Disposable.empty();\n\n            tc.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, tc.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(tc.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/DisposableMaybeObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
