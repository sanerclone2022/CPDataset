[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mapWithError() {\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n        Observable<String> m = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return s;\n            }\n        }).doOnError(new Consumer<Throwable>() {\n\n            @Override\n            public void accept(Throwable t1) {\n                t1.printStackTrace();\n            }\n\n        });\n\n        m.subscribe(stringObserver);\n        verify(stringObserver, times(1)).onNext(\"one\");\n        verify(stringObserver, never()).onNext(\"two\");\n        verify(stringObserver, never()).onNext(\"three\");\n        verify(stringObserver, never()).onComplete();\n        verify(stringObserver, times(1)).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":178,"groupId":"7105","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/5651214f0ce14673030859e79338f019ad0634.src","preCode":"    public void mapWithError() {\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n        Observable<String> m = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return s;\n            }\n        }).doOnError(new Consumer<Throwable>() {\n\n            @Override\n            public void accept(Throwable t1) {\n                t1.printStackTrace();\n            }\n\n        });\n\n        m.subscribe(stringObserver);\n        verify(stringObserver, times(1)).onNext(\"one\");\n        verify(stringObserver, never()).onNext(\"two\");\n        verify(stringObserver, never()).onNext(\"three\");\n        verify(stringObserver, never()).onComplete();\n        verify(stringObserver, times(1)).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mapWithError() {\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n        Flowable<String> m = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new TestException(\"Forced Failure\");\n                }\n                return s;\n            }\n        }).doOnError(new Consumer<Throwable>() {\n\n            @Override\n            public void accept(Throwable t1) {\n                errors.add(t1);\n            }\n\n        });\n\n        m.subscribe(stringSubscriber);\n        verify(stringSubscriber, times(1)).onNext(\"one\");\n        verify(stringSubscriber, never()).onNext(\"two\");\n        verify(stringSubscriber, never()).onNext(\"three\");\n        verify(stringSubscriber, never()).onComplete();\n        verify(stringSubscriber, times(1)).onError(any(TestException.class));\n\n        TestHelper.assertError(errors, 0, TestException.class, \"Forced Failure\");\n    }\n","date":"2019-08-16 20:51:17","endLine":186,"groupId":"11338","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/35/dba45e2bea439c8fa4da463366e14537055f0e.src","preCode":"    public void mapWithError() {\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n        Flowable<String> m = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new TestException(\"Forced Failure\");\n                }\n                return s;\n            }\n        }).doOnError(new Consumer<Throwable>() {\n\n            @Override\n            public void accept(Throwable t1) {\n                errors.add(t1);\n            }\n\n        });\n\n        m.subscribe(stringSubscriber);\n        verify(stringSubscriber, times(1)).onNext(\"one\");\n        verify(stringSubscriber, never()).onNext(\"two\");\n        verify(stringSubscriber, never()).onNext(\"three\");\n        verify(stringSubscriber, never()).onComplete();\n        verify(stringSubscriber, times(1)).onError(any(TestException.class));\n\n        TestHelper.assertError(errors, 0, TestException.class, \"Forced Failure\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void mapWithError() {\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n        Observable<String> m = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return s;\n            }\n        }).doOnError(new Consumer<Throwable>() {\n\n            @Override\n            public void accept(Throwable t1) {\n                t1.printStackTrace();\n            }\n\n        });\n\n        m.subscribe(stringObserver);\n        verify(stringObserver, times(1)).onNext(\"one\");\n        verify(stringObserver, never()).onNext(\"two\");\n        verify(stringObserver, never()).onNext(\"three\");\n        verify(stringObserver, never()).onComplete();\n        verify(stringObserver, times(1)).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":178,"groupId":"103881","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/5651214f0ce14673030859e79338f019ad0634.src","preCode":"    public void mapWithError() {\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n        Observable<String> m = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return s;\n            }\n        }).doOnError(new Consumer<Throwable>() {\n\n            @Override\n            public void accept(Throwable t1) {\n                t1.printStackTrace();\n            }\n\n        });\n\n        m.subscribe(stringObserver);\n        verify(stringObserver, times(1)).onNext(\"one\");\n        verify(stringObserver, never()).onNext(\"two\");\n        verify(stringObserver, never()).onNext(\"three\");\n        verify(stringObserver, never()).onComplete();\n        verify(stringObserver, times(1)).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void mapWithError() {\n        final List<Throwable> errors = new ArrayList<>();\n\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n        Flowable<String> m = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new TestException(\"Forced Failure\");\n                }\n                return s;\n            }\n        }).doOnError(new Consumer<Throwable>() {\n\n            @Override\n            public void accept(Throwable t1) {\n                errors.add(t1);\n            }\n\n        });\n\n        m.subscribe(stringSubscriber);\n        verify(stringSubscriber, times(1)).onNext(\"one\");\n        verify(stringSubscriber, never()).onNext(\"two\");\n        verify(stringSubscriber, never()).onNext(\"three\");\n        verify(stringSubscriber, never()).onComplete();\n        verify(stringSubscriber, times(1)).onError(any(TestException.class));\n\n        TestHelper.assertError(errors, 0, TestException.class, \"Forced Failure\");\n    }\n","date":"2019-12-22 18:39:23","endLine":186,"groupId":"103881","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/2aafa21ddd79e48735a148d5ae2c0da30b8d95.src","preCode":"    public void mapWithError() {\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n        Flowable<String> m = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new TestException(\"Forced Failure\");\n                }\n                return s;\n            }\n        }).doOnError(new Consumer<Throwable>() {\n\n            @Override\n            public void accept(Throwable t1) {\n                errors.add(t1);\n            }\n\n        });\n\n        m.subscribe(stringSubscriber);\n        verify(stringSubscriber, times(1)).onNext(\"one\");\n        verify(stringSubscriber, never()).onNext(\"two\");\n        verify(stringSubscriber, never()).onNext(\"three\");\n        verify(stringSubscriber, never()).onComplete();\n        verify(stringSubscriber, times(1)).onError(any(TestException.class));\n\n        TestHelper.assertError(errors, 0, TestException.class, \"Forced Failure\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"}]
