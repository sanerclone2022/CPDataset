[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    static List<String> readFile(File u) throws Exception {\n        List<String> lines = new ArrayList<String>();\n\n        BufferedReader in = new BufferedReader(new FileReader(u));\n        try {\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lines.add(line);\n            }\n        } finally {\n            in.close();\n        }\n        return lines;\n    }\n","date":"2019-08-16 20:51:17","endLine":100,"groupId":"5608","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readFile","params":"(Fileu)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/98/4d6bbbd513d8f9a2a85de1df78f618a910c453.src","preCode":"    static List<String> readFile(File u) throws Exception {\n        List<String> lines = new ArrayList<String>();\n\n        BufferedReader in = new BufferedReader(new FileReader(u));\n        try {\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lines.add(line);\n            }\n        } finally {\n            in.close();\n        }\n        return lines;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/InternalWrongNaming.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":86,"groupId":"1504","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4f/693bd02c89c2de171b8b1d296289c8f30b77ea.src","preCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/TextualAorAn.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    static List<String> readFile(File u) throws Exception {\n        List<String> lines = new ArrayList<>();\n\n        BufferedReader in = new BufferedReader(new FileReader(u));\n        try {\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lines.add(line);\n            }\n        } finally {\n            in.close();\n        }\n        return lines;\n    }\n","date":"2019-12-22 19:17:37","endLine":100,"groupId":"108199","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readFile","params":"(Fileu)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/d937502fcba545a9bc68b6b8c86f68dc4f49f0.src","preCode":"    static List<String> readFile(File u) throws Exception {\n        List<String> lines = new ArrayList<String>();\n\n        BufferedReader in = new BufferedReader(new FileReader(u));\n        try {\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lines.add(line);\n            }\n        } finally {\n            in.close();\n        }\n        return lines;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/InternalWrongNaming.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":86,"groupId":"108199","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6a/ff9cc10e1c6ced7e5d98df8be72404dce81ef3.src","preCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/TextualAorAn.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
