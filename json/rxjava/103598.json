[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    private Observable<Integer> createInfiniteObservable(final AtomicInteger generated) {\n        Observable<Integer> o = Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n\n                    @Override\n                    public void remove() {\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return generated.getAndIncrement();\n                    }\n\n                    @Override\n                    public boolean hasNext() {\n                        return true;\n                    }\n                };\n            }\n        });\n        return o;\n    }\n","date":"2019-08-16 20:51:17","endLine":1018,"groupId":"11733","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createInfiniteObservable","params":"(finalAtomicIntegergenerated)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/9840cbc7c7812d8ee108dd9a4c3715b6377080.src","preCode":"    private Observable<Integer> createInfiniteObservable(final AtomicInteger generated) {\n        Observable<Integer> o = Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n\n                    @Override\n                    public void remove() {\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return generated.getAndIncrement();\n                    }\n\n                    @Override\n                    public boolean hasNext() {\n                        return true;\n                    }\n                };\n            }\n        });\n        return o;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":995,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressureWithTakeBefore() {\n        final AtomicInteger generated = new AtomicInteger();\n        Flowable<Integer> flowable = Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n\n                    @Override\n                    public void remove() {\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return generated.getAndIncrement();\n                    }\n\n                    @Override\n                    public boolean hasNext() {\n                        return true;\n                    }\n                };\n            }\n        });\n\n        TestSubscriber<Integer> testSubscriber = new TestSubscriber<Integer>();\n        flowable\n                .take(7)\n                .observeOn(Schedulers.newThread())\n                .subscribe(testSubscriber);\n\n        testSubscriber.awaitDone(5, TimeUnit.SECONDS);\n        testSubscriber.assertValues(0, 1, 2, 3, 4, 5, 6);\n        assertEquals(7, generated.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":530,"groupId":"11733","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureWithTakeBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ce/81203a840d057eb88c3fed181fbf06af9e57dc.src","preCode":"    public void backpressureWithTakeBefore() {\n        final AtomicInteger generated = new AtomicInteger();\n        Flowable<Integer> flowable = Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n\n                    @Override\n                    public void remove() {\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return generated.getAndIncrement();\n                    }\n\n                    @Override\n                    public boolean hasNext() {\n                        return true;\n                    }\n                };\n            }\n        });\n\n        TestSubscriber<Integer> testSubscriber = new TestSubscriber<Integer>();\n        flowable\n                .take(7)\n                .observeOn(Schedulers.newThread())\n                .subscribe(testSubscriber);\n\n        testSubscriber.awaitDone(5, TimeUnit.SECONDS);\n        testSubscriber.assertValues(0, 1, 2, 3, 4, 5, 6);\n        assertEquals(7, generated.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":497,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    private Observable<Integer> createInfiniteObservable(final AtomicInteger generated) {\n        Observable<Integer> o = Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n\n                    @Override\n                    public void remove() {\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return generated.getAndIncrement();\n                    }\n\n                    @Override\n                    public boolean hasNext() {\n                        return true;\n                    }\n                };\n            }\n        });\n        return o;\n    }\n","date":"2019-08-16 20:51:17","endLine":1018,"groupId":"103598","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createInfiniteObservable","params":"(finalAtomicIntegergenerated)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/9840cbc7c7812d8ee108dd9a4c3715b6377080.src","preCode":"    private Observable<Integer> createInfiniteObservable(final AtomicInteger generated) {\n        Observable<Integer> o = Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n\n                    @Override\n                    public void remove() {\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return generated.getAndIncrement();\n                    }\n\n                    @Override\n                    public boolean hasNext() {\n                        return true;\n                    }\n                };\n            }\n        });\n        return o;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":995,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void backpressureWithTakeBefore() {\n        final AtomicInteger generated = new AtomicInteger();\n        Flowable<Integer> flowable = Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n\n                    @Override\n                    public void remove() {\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return generated.getAndIncrement();\n                    }\n\n                    @Override\n                    public boolean hasNext() {\n                        return true;\n                    }\n                };\n            }\n        });\n\n        TestSubscriber<Integer> testSubscriber = new TestSubscriber<>();\n        flowable\n                .take(7)\n                .observeOn(Schedulers.newThread())\n                .subscribe(testSubscriber);\n\n        testSubscriber.awaitDone(5, TimeUnit.SECONDS);\n        testSubscriber.assertValues(0, 1, 2, 3, 4, 5, 6);\n        assertEquals(7, generated.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":531,"groupId":"103598","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureWithTakeBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/73/efdfc426fc765de22359eb2867b467bac65b15.src","preCode":"    public void backpressureWithTakeBefore() {\n        final AtomicInteger generated = new AtomicInteger();\n        Flowable<Integer> flowable = Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n\n                    @Override\n                    public void remove() {\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return generated.getAndIncrement();\n                    }\n\n                    @Override\n                    public boolean hasNext() {\n                        return true;\n                    }\n                };\n            }\n        });\n\n        TestSubscriber<Integer> testSubscriber = new TestSubscriber<Integer>();\n        flowable\n                .take(7)\n                .observeOn(Schedulers.newThread())\n                .subscribe(testSubscriber);\n\n        testSubscriber.awaitDone(5, TimeUnit.SECONDS);\n        testSubscriber.assertValues(0, 1, 2, 3, 4, 5, 6);\n        assertEquals(7, generated.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":498,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"}]
