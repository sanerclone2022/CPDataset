[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeSubscriber<String> safeObserver = new SafeSubscriber<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(new BooleanSubscription());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeSubscriberTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":186,"groupId":"9427","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onNextFailureSafe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0d/ccdc13063bb0b81c986a3caf699ba523770df3.src","preCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeSubscriber<String> safeObserver = new SafeSubscriber<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(new BooleanSubscription());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeSubscriberTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/SafeSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeObserver<String> safeObserver = new SafeObserver<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(Disposables.empty());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeObserverTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":57,"groupId":"1577","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onNextFailureSafe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/87/6bcffbe4c45e29f890bbfdc5166d59d53a8245.src","preCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeObserver<String> safeObserver = new SafeObserver<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(Disposables.empty());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeObserverTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/SafeObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeSubscriber<String> safeObserver = new SafeSubscriber<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(new BooleanSubscription());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeSubscriberTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":186,"groupId":"9427","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onNextFailureSafe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0d/ccdc13063bb0b81c986a3caf699ba523770df3.src","preCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeSubscriber<String> safeObserver = new SafeSubscriber<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(new BooleanSubscription());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeSubscriberTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/SafeSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeObserver<String> safeObserver = new SafeObserver<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(Disposable.empty());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeObserverTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":57,"groupId":"1776","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onNextFailureSafe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/44/6dfe20df011b417e4acaf4cf458fb8be99a46f.src","preCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeObserver<String> safeObserver = new SafeObserver<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(Disposables.empty());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeObserverTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/SafeObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<>();\n        try {\n            SafeSubscriber<String> safeObserver = new SafeSubscriber<>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(new BooleanSubscription());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeSubscriberTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":186,"groupId":"107964","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onNextFailureSafe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e2/bc1b1bbd5fe6f6e37ca853f7b31ee2e123177f.src","preCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeSubscriber<String> safeObserver = new SafeSubscriber<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(new BooleanSubscription());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeSubscriberTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/SafeSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<>();\n        try {\n            SafeObserver<String> safeObserver = new SafeObserver<>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(Disposable.empty());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeObserverTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":57,"groupId":"107964","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onNextFailureSafe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3a/fced2d4079e19c98e68771d91a99be63ec13fb.src","preCode":"    public void onNextFailureSafe() {\n        AtomicReference<Throwable> onError = new AtomicReference<Throwable>();\n        try {\n            SafeObserver<String> safeObserver = new SafeObserver<String>(OBSERVER_ONNEXT_FAIL(onError));\n            safeObserver.onSubscribe(Disposable.empty());\n            safeObserver.onNext(\"one\");\n            assertNotNull(onError.get());\n            assertTrue(onError.get() instanceof SafeObserverTestException);\n            assertEquals(\"onNextFail\", onError.get().getMessage());\n        } catch (Exception e) {\n            fail(\"expects exception to be passed to onError\");\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/SafeObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
