[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressureFastSlow() {\n        ConnectableObservable<Integer> is = Observable.range(1, Flowable.bufferSize() * 2).publish();\n        Observable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Observable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.merge(fast, slow).subscribe(to);\n        is.connect();\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, to.values().size());\n    }\n","date":"2019-08-16 20:51:17","endLine":135,"groupId":"11395","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressureFastSlow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/f0140e5de8fe5399071cc09e7e171d010d689c.src","preCode":"    public void backpressureFastSlow() {\n        ConnectableObservable<Integer> is = Observable.range(1, Flowable.bufferSize() * 2).publish();\n        Observable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Observable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.merge(fast, slow).subscribe(to);\n        is.connect();\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, to.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressureFastSlow() {\n        ConnectableFlowable<Integer> is = Flowable.range(1, Flowable.bufferSize() * 2).publish();\n        Flowable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Flowable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.merge(fast, slow).subscribe(ts);\n        is.connect();\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, ts.values().size());\n    }\n","date":"2019-08-16 20:51:17","endLine":137,"groupId":"11395","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureFastSlow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/cba3926fbcf7b2764c9247a412564b573a29e2.src","preCode":"    public void backpressureFastSlow() {\n        ConnectableFlowable<Integer> is = Flowable.range(1, Flowable.bufferSize() * 2).publish();\n        Flowable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Flowable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.merge(fast, slow).subscribe(ts);\n        is.connect();\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, ts.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void backpressureFastSlow() {\n        ConnectableObservable<Integer> is = Observable.range(1, Flowable.bufferSize() * 2).publish();\n        Observable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Observable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.merge(fast, slow).subscribe(to);\n        is.connect();\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, to.values().size());\n    }\n","date":"2019-08-16 20:51:17","endLine":135,"groupId":"11395","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressureFastSlow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/f0140e5de8fe5399071cc09e7e171d010d689c.src","preCode":"    public void backpressureFastSlow() {\n        ConnectableObservable<Integer> is = Observable.range(1, Flowable.bufferSize() * 2).publish();\n        Observable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Observable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.merge(fast, slow).subscribe(to);\n        is.connect();\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, to.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void backpressureFastSlow() {\n        ConnectableFlowable<Integer> is = Flowable.range(1, Flowable.bufferSize() * 2).publish();\n        Flowable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Flowable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.merge(fast, slow).subscribe(ts);\n        is.connect();\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, ts.values().size());\n    }\n","date":"2019-12-22 18:39:23","endLine":137,"groupId":"11395","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureFastSlow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/7c88da0970993e17039e0d66dc301b746e7fd0.src","preCode":"    public void backpressureFastSlow() {\n        ConnectableFlowable<Integer> is = Flowable.range(1, Flowable.bufferSize() * 2).publish();\n        Flowable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Flowable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.merge(fast, slow).subscribe(ts);\n        is.connect();\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, ts.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void backpressureFastSlow() {\n        ConnectableObservable<Integer> is = Observable.range(1, Flowable.bufferSize() * 2).publish();\n        Observable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Observable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestObserver<Integer> to = new TestObserver<>();\n        Observable.merge(fast, slow).subscribe(to);\n        is.connect();\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, to.values().size());\n    }\n","date":"2019-12-22 18:59:44","endLine":135,"groupId":"105255","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressureFastSlow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/cb03d00e72ebea8aaf23169601c3b0c6740c5f.src","preCode":"    public void backpressureFastSlow() {\n        ConnectableObservable<Integer> is = Observable.range(1, Flowable.bufferSize() * 2).publish();\n        Observable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Observable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.merge(fast, slow).subscribe(to);\n        is.connect();\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, to.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void backpressureFastSlow() {\n        ConnectableFlowable<Integer> is = Flowable.range(1, Flowable.bufferSize() * 2).publish();\n        Flowable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Flowable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.merge(fast, slow).subscribe(ts);\n        is.connect();\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, ts.values().size());\n    }\n","date":"2019-12-22 18:39:23","endLine":137,"groupId":"105255","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureFastSlow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/7c88da0970993e17039e0d66dc301b746e7fd0.src","preCode":"    public void backpressureFastSlow() {\n        ConnectableFlowable<Integer> is = Flowable.range(1, Flowable.bufferSize() * 2).publish();\n        Flowable<Integer> fast = is.observeOn(Schedulers.computation())\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed FAST\");\n            }\n        });\n\n        Flowable<Integer> slow = is.observeOn(Schedulers.computation()).map(new Function<Integer, Integer>() {\n            int c;\n\n            @Override\n            public Integer apply(Integer i) {\n                if (c == 0) {\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                    }\n                }\n                c++;\n                return i;\n            }\n\n        }).doOnComplete(new Action() {\n\n            @Override\n            public void run() {\n                System.out.println(\"^^^^^^^^^^^^^ completed SLOW\");\n            }\n\n        });\n\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.merge(fast, slow).subscribe(ts);\n        is.connect();\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 4, ts.values().size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
