[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue1900() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":880,"groupId":"7403","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"issue1900","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/6b37be8498fd805faa5ed1fcc2721995dd4e60.src","preCode":"    public void issue1900() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":842,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.unsafeCreate(new Publisher<String>() {\n\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    subscriber.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                subscriber.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":925,"groupId":"3191","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"issue1900SourceNotSupportingBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/6b37be8498fd805faa5ed1fcc2721995dd4e60.src","preCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.unsafeCreate(new Publisher<String>() {\n\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    subscriber.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                subscriber.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":883,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-06 15:59:14","commitOrder":2,"curCode":"    public void issue1900() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        }, NUM_MSG) \r\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-06 15:59:14","endLine":880,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"issue1900","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e2/db70633a09ce3c6ca8e35125ffbe56be3d45b9.src","preCode":"    public void issue1900() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":842,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.unsafeCreate(new Publisher<String>() {\n\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    subscriber.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                subscriber.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":925,"groupId":"3191","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"issue1900SourceNotSupportingBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/6b37be8498fd805faa5ed1fcc2721995dd4e60.src","preCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.unsafeCreate(new Publisher<String>() {\n\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    subscriber.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                subscriber.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":883,"status":"N"}],"commitId":"1e2995812e759d5bf624f3a921f2e57c8c5e0f34","commitMessage":"@@@3.x: Change Flowable.groupBy to signal MBE instead of possibly hanging (#6740)\n\n* 3.x: Change Flowable.groupBy to signal MBE instead of possibly hanging\n\n* Update groupBy javadocs\n\n* Update backpressure annotation to ERROR.  add some see links\n\n* Correct javadocs typos\n\n* Improve coverage of changes\n","date":"2019-12-06 15:59:14","modifiedFileCount":"5","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void issue1900() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        }, NUM_MSG) \r\n        .subscribe(new TestSubscriber<>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":880,"groupId":"102387","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"issue1900","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4d/e1cfb8b0d7ed46d90f8994f62782b0e5d4945e.src","preCode":"    public void issue1900() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        }, NUM_MSG) \r\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":842,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.unsafeCreate(new Publisher<String>() {\n\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    subscriber.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                subscriber.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestSubscriber<>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":925,"groupId":"102387","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"issue1900SourceNotSupportingBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4d/e1cfb8b0d7ed46d90f8994f62782b0e5d4945e.src","preCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Flowable<String> origin = Flowable.unsafeCreate(new Publisher<String>() {\n\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    subscriber.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                subscriber.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedFlowable<String, String>, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(GroupedFlowable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestSubscriber<String>(subscriber));\n\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":883,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"}]
