[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        ObjectHelper.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(new ParallelSortedJoin<T>(railSorted, comparator));\n    }\n","date":"2019-08-16 20:51:17","endLine":459,"groupId":"3633","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sorted","params":"(@NonNullComparator<?superT>comparator@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/d3505337e3b1a652db4ffbb547f1e792770290.src","preCode":"    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        ObjectHelper.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(new ParallelSortedJoin<T>(railSorted, comparator));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/parallel/ParallelFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public final Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        ObjectHelper.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        Flowable<List<T>> merged = railSorted.reduce(new MergerBiFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(merged);\n    }\n","date":"2019-08-16 20:51:17","endLine":496,"groupId":"3633","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toSortedList","params":"(@NonNullComparator<?superT>comparator@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/d3505337e3b1a652db4ffbb547f1e792770290.src","preCode":"    public final Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        ObjectHelper.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        Flowable<List<T>> merged = railSorted.reduce(new MergerBiFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(merged);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/parallel/ParallelFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(new ParallelSortedJoin<T>(railSorted, comparator));\n    }\n","date":"2019-12-18 03:06:44","endLine":459,"groupId":"3633","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sorted","params":"(@NonNullComparator<?superT>comparator@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/af/a2eddcf08b36f72c3e454d64b8ff2312f87887.src","preCode":"    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        ObjectHelper.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(new ParallelSortedJoin<T>(railSorted, comparator));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/parallel/ParallelFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    public final Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        Flowable<List<T>> merged = railSorted.reduce(new MergerBiFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(merged);\n    }\n","date":"2019-12-18 03:06:44","endLine":496,"groupId":"3633","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toSortedList","params":"(@NonNullComparator<?superT>comparator@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/af/a2eddcf08b36f72c3e454d64b8ff2312f87887.src","preCode":"    public final Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        ObjectHelper.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        Flowable<List<T>> merged = railSorted.reduce(new MergerBiFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(merged);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/parallel/ParallelFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-26 06:52:13","codes":[{"authorDate":"2019-12-26 06:52:13","commitOrder":3,"curCode":"    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(new ParallelSortedJoin<>(railSorted, comparator));\n    }\n","date":"2019-12-26 06:52:13","endLine":624,"groupId":"3633","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"sorted","params":"(@NonNullComparator<?superT>comparator@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/dff1cbb0844784f186a66a7242f1de0df32f61.src","preCode":"    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(new ParallelSortedJoin<T>(railSorted, comparator));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/parallel/ParallelFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"M"},{"authorDate":"2019-12-26 06:52:13","commitOrder":3,"curCode":"    public final Flowable<@NonNull List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        Flowable<List<T>> merged = railSorted.reduce(new MergerBiFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(merged);\n    }\n","date":"2019-12-26 06:52:13","endLine":679,"groupId":"3633","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toSortedList","params":"(@NonNullComparator<?superT>comparator@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/dff1cbb0844784f186a66a7242f1de0df32f61.src","preCode":"    public final Flowable<List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        Flowable<List<T>> merged = railSorted.reduce(new MergerBiFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(merged);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/parallel/ParallelFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"}],"commitId":"480889c58d3b762b073ef80229bf27f9d9429dd7","commitMessage":"@@@3.x: Add missing annotations.  fix many diamonds (#6795)\n\n* 3.x: Add missing annotations.  fix many diamonds\n\n* Fix accidental JDK 9 API usage\n\n* Fix NPE in unicast due to null-cleanup\n","date":"2019-12-26 06:52:13","modifiedFileCount":"52","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":4,"curCode":"    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.createArrayList(ch), ListAddBiConsumer.instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<>(comparator));\n\n        return RxJavaPlugins.onAssembly(new ParallelSortedJoin<>(railSorted, comparator));\n    }\n","date":"2019-12-28 03:01:34","endLine":626,"groupId":"103883","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"sorted","params":"(@NonNullComparator<?superT>comparator@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ea/09fb53d46c9e9744b09f8f807837a63b547447.src","preCode":"    public final Flowable<T> sorted(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(new ParallelSortedJoin<>(railSorted, comparator));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/parallel/ParallelFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"M"},{"authorDate":"2019-12-28 03:01:34","commitOrder":4,"curCode":"    public final Flowable<@NonNull List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.createArrayList(ch), ListAddBiConsumer.instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<>(comparator));\n\n        Flowable<List<T>> merged = railSorted.reduce(new MergerBiFunction<>(comparator));\n\n        return RxJavaPlugins.onAssembly(merged);\n    }\n","date":"2019-12-28 03:01:34","endLine":681,"groupId":"103883","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"toSortedList","params":"(@NonNullComparator<?superT>comparator@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ea/09fb53d46c9e9744b09f8f807837a63b547447.src","preCode":"    public final Flowable<@NonNull List<T>> toSortedList(@NonNull Comparator<? super T> comparator, int capacityHint) {\n        Objects.requireNonNull(comparator, \"comparator is null\");\n        ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\n\n        int ch = capacityHint / parallelism() + 1;\n        ParallelFlowable<List<T>> railReduced = reduce(Functions.<T>createArrayList(ch), ListAddBiConsumer.<T>instance());\n        ParallelFlowable<List<T>> railSorted = railReduced.map(new SorterFunction<T>(comparator));\n\n        Flowable<List<T>> merged = railSorted.reduce(new MergerBiFunction<T>(comparator));\n\n        return RxJavaPlugins.onAssembly(merged);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/parallel/ParallelFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"M"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
