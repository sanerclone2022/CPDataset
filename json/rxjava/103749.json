[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>();\n                final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n                TestObserverEx<Observable<Object>> to = new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        refMain.set(observer);\n                    }\n                }\n                .window(new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        ref.set(observer);\n                    }\n                })\n                .to(TestHelper.<Observable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                to\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":449,"groupId":"4703","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mainCompleteBoundaryErrorRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1a/c8c7209bdade6651e578b64bad8746c84b2a6a.src","preCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>();\n                final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n                TestObserverEx<Observable<Object>> to = new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        refMain.set(observer);\n                    }\n                }\n                .window(new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        ref.set(observer);\n                    }\n                })\n                .to(TestHelper.<Observable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                to\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<Subscriber<? super Object>>();\n                final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n                TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        refMain.set(subscriber);\n                    }\n                }\n                .window(new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                })\n                .to(TestHelper.<Flowable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                ts\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":489,"groupId":"5889","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mainCompleteBoundaryErrorRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fc/d2390f7eb783c491660a856266d1abbb8c0607.src","preCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<Subscriber<? super Object>>();\n                final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n                TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        refMain.set(subscriber);\n                    }\n                }\n                .window(new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                })\n                .to(TestHelper.<Flowable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                ts\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>();\n                final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n                TestObserverEx<Observable<Object>> to = new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        refMain.set(observer);\n                    }\n                }\n                .window(new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                })\n                .to(TestHelper.<Observable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                to\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":455,"groupId":"4703","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mainCompleteBoundaryErrorRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/63/bb37eafa516a8625ca7fe49515653a9aeb4383.src","preCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>();\n                final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n                TestObserverEx<Observable<Object>> to = new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        refMain.set(observer);\n                    }\n                }\n                .window(new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        ref.set(observer);\n                    }\n                })\n                .to(TestHelper.<Observable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                to\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":404,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<Subscriber<? super Object>>();\n                final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n                TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        refMain.set(subscriber);\n                    }\n                }\n                .window(new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                })\n                .to(TestHelper.<Flowable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                ts\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":489,"groupId":"5889","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mainCompleteBoundaryErrorRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fc/d2390f7eb783c491660a856266d1abbb8c0607.src","preCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<Subscriber<? super Object>>();\n                final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n                TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        refMain.set(subscriber);\n                    }\n                }\n                .window(new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                })\n                .to(TestHelper.<Flowable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                ts\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>();\n                final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n                TestObserverEx<Observable<Object>> to = new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        refMain.set(observer);\n                    }\n                }\n                .window(new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                })\n                .to(TestHelper.<Observable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                to\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":455,"groupId":"4703","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mainCompleteBoundaryErrorRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/63/bb37eafa516a8625ca7fe49515653a9aeb4383.src","preCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>();\n                final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n                TestObserverEx<Observable<Object>> to = new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        refMain.set(observer);\n                    }\n                }\n                .window(new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                })\n                .to(TestHelper.<Observable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                to\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":404,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<>();\n                final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<>();\n\n                TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        refMain.set(subscriber);\n                    }\n                }\n                .window(new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                })\n                .to(TestHelper.<Flowable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                ts\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":495,"groupId":"5889","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mainCompleteBoundaryErrorRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/7e2ccfaed51dba55813263a726fa6efa86d6ef.src","preCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<Subscriber<? super Object>>();\n                final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n                TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        refMain.set(subscriber);\n                    }\n                }\n                .window(new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                })\n                .to(TestHelper.<Flowable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                ts\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<>();\n                final AtomicReference<Observer<? super Object>> ref = new AtomicReference<>();\n\n                TestObserverEx<Observable<Object>> to = new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        refMain.set(observer);\n                    }\n                }\n                .window(new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                })\n                .to(TestHelper.<Observable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                to\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":455,"groupId":"103749","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"mainCompleteBoundaryErrorRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bf/b972626bcbbe393e06c03bee8ff46e15bf283d.src","preCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Observer<? super Object>> refMain = new AtomicReference<Observer<? super Object>>();\n                final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n                TestObserverEx<Observable<Object>> to = new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        refMain.set(observer);\n                    }\n                }\n                .window(new Observable<Object>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                })\n                .to(TestHelper.<Observable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                to\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":404,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<>();\n                final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<>();\n\n                TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        refMain.set(subscriber);\n                    }\n                }\n                .window(new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                })\n                .to(TestHelper.<Flowable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                ts\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":495,"groupId":"103749","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"mainCompleteBoundaryErrorRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/7e2ccfaed51dba55813263a726fa6efa86d6ef.src","preCode":"    public void mainCompleteBoundaryErrorRace() {\n        final TestException ex = new TestException();\n\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final AtomicReference<Subscriber<? super Object>> refMain = new AtomicReference<>();\n                final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<>();\n\n                TestSubscriberEx<Flowable<Object>> ts = new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        refMain.set(subscriber);\n                    }\n                }\n                .window(new Flowable<Object>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                })\n                .to(TestHelper.<Flowable<Object>>testConsumer());\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        refMain.get().onComplete();\n                    }\n                };\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        ref.get().onError(ex);\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n\n                ts\n                .assertValueCount(1)\n                .assertTerminated();\n\n                if (!errors.isEmpty()) {\n                    TestHelper.assertUndeliverable(errors, 0, TestException.class);\n                }\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
