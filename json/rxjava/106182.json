[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void syncFusedCancelAfterRequestConditional2() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>(2L);\n\n        Flowable.range(1, 2)\n        .observeOn(Schedulers.single())\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts\n        .awaitDone(5, TimeUnit.SECONDS)\n        .assertResult(1, 2);\n    }\n","date":"2019-08-16 20:51:17","endLine":1642,"groupId":"3766","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"syncFusedCancelAfterRequestConditional2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ce/81203a840d057eb88c3fed181fbf06af9e57dc.src","preCode":"    public void syncFusedCancelAfterRequestConditional2() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>(2L);\n\n        Flowable.range(1, 2)\n        .observeOn(Schedulers.single())\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts\n        .awaitDone(5, TimeUnit.SECONDS)\n        .assertResult(1, 2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1631,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void conditionalCancel1() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(2L) {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                if (t == 1) {\n                    cancel();\n                    onComplete();\n                }\n            }\n        };\n\n        Flowable.range(1, 2)\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts.assertResult(1);\n    }\n","date":"2019-08-16 20:51:17","endLine":572,"groupId":"3766","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"conditionalCancel1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a8/d42213c9e7790336927bcceff662beb155f253.src","preCode":"    public void conditionalCancel1() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(2L) {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                if (t == 1) {\n                    cancel();\n                    onComplete();\n                }\n            }\n        };\n\n        Flowable.range(1, 2)\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts.assertResult(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRangeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void syncFusedCancelAfterRequestConditional2() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<>(2L);\n\n        Flowable.range(1, 2)\n        .observeOn(Schedulers.single())\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts\n        .awaitDone(5, TimeUnit.SECONDS)\n        .assertResult(1, 2);\n    }\n","date":"2019-12-22 18:39:23","endLine":1643,"groupId":"106182","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"syncFusedCancelAfterRequestConditional2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/73/efdfc426fc765de22359eb2867b467bac65b15.src","preCode":"    public void syncFusedCancelAfterRequestConditional2() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>(2L);\n\n        Flowable.range(1, 2)\n        .observeOn(Schedulers.single())\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts\n        .awaitDone(5, TimeUnit.SECONDS)\n        .assertResult(1, 2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1632,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void conditionalCancel1() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(2L) {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                if (t == 1) {\n                    cancel();\n                    onComplete();\n                }\n            }\n        };\n\n        Flowable.range(1, 2)\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts.assertResult(1);\n    }\n","date":"2019-08-16 20:51:17","endLine":572,"groupId":"106182","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"conditionalCancel1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a8/d42213c9e7790336927bcceff662beb155f253.src","preCode":"    public void conditionalCancel1() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(2L) {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                if (t == 1) {\n                    cancel();\n                    onComplete();\n                }\n            }\n        };\n\n        Flowable.range(1, 2)\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts.assertResult(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRangeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"N"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"}]
