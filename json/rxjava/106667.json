[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressure() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(0, 100000)\n                .onErrorReturn(new Function<Throwable, Integer>() {\n\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":178,"groupId":"829","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3f/20a8a7dbf5ca59427482c6d40d1b2c36a20604.src","preCode":"    public void backpressure() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(0, 100000)\n                .onErrorReturn(new Function<Throwable, Integer>() {\n\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorReturnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressure() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.range(0, 100000)\n                .onErrorResumeWith(Flowable.just(1))\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":175,"groupId":"829","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/74/2b1e585353259f09a77f023dab2b1da335fece.src","preCode":"    public void backpressure() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.range(0, 100000)\n                .onErrorResumeWith(Flowable.just(1))\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorResumeNextViaFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void backpressure() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(0, 100000)\n                .onErrorReturn(new Function<Throwable, Integer>() {\n\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":178,"groupId":"829","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3f/20a8a7dbf5ca59427482c6d40d1b2c36a20604.src","preCode":"    public void backpressure() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(0, 100000)\n                .onErrorReturn(new Function<Throwable, Integer>() {\n\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorReturnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void backpressure() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.range(0, 100000)\n                .onErrorResumeWith(Flowable.just(1))\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","date":"2019-12-22 18:39:23","endLine":175,"groupId":"829","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b8/829893fab594aa18e38e32db1c073570ccac8d.src","preCode":"    public void backpressure() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.range(0, 100000)\n                .onErrorResumeWith(Flowable.just(1))\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorResumeNextViaFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void backpressure() {\n        TestObserver<Integer> to = new TestObserver<>();\n        Observable.range(0, 100000)\n                .onErrorReturn(new Function<Throwable, Integer>() {\n\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","date":"2019-12-22 18:59:44","endLine":178,"groupId":"106667","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/69/c6c6889cc477ed303c6a2dd3eb5522211027c6.src","preCode":"    public void backpressure() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.range(0, 100000)\n                .onErrorReturn(new Function<Throwable, Integer>() {\n\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorReturnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void backpressure() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.range(0, 100000)\n                .onErrorResumeWith(Flowable.just(1))\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","date":"2019-12-22 18:39:23","endLine":175,"groupId":"106667","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b8/829893fab594aa18e38e32db1c073570ccac8d.src","preCode":"    public void backpressure() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.range(0, 100000)\n                .onErrorResumeWith(Flowable.just(1))\n                .observeOn(Schedulers.computation())\n                .map(new Function<Integer, Integer>() {\n                    int c;\n\n                    @Override\n                    public Integer apply(Integer t1) {\n                        if (c++ <= 1) {\n                            \r\n                            try {\n                                Thread.sleep(500);\n                            } catch (InterruptedException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        return t1;\n                    }\n\n                })\n                .subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorResumeNextViaFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
