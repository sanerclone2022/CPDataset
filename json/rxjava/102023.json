[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    private Consumer<Observable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Observable<String>>() {\n            @Override\n            public void accept(Observable<String> stringObservable) {\n                stringObservable.subscribe(new DefaultObserver<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<String>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","date":"2019-08-16 20:51:17","endLine":148,"groupId":"8614","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"observeWindow","params":"(finalList<String>list@finalList<List<String>>lists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/90/732ddf1e7255e40562819eb3f1f77dbc4a650f.src","preCode":"    private Consumer<Observable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Observable<String>>() {\n            @Override\n            public void accept(Observable<String> stringObservable) {\n                stringObservable.subscribe(new DefaultObserver<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<String>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    private Consumer<Flowable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Flowable<String>>() {\n            @Override\n            public void accept(Flowable<String> stringFlowable) {\n                stringFlowable.subscribe(new DefaultSubscriber<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<String>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","date":"2019-08-16 20:51:17","endLine":147,"groupId":"8614","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"observeWindow","params":"(finalList<String>list@finalList<List<String>>lists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3a/76a4c7a8f2a96d3c50c50b4442fd78f75290ac.src","preCode":"    private Consumer<Flowable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Flowable<String>>() {\n            @Override\n            public void accept(Flowable<String> stringFlowable) {\n                stringFlowable.subscribe(new DefaultSubscriber<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<String>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    private Consumer<Observable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Observable<String>>() {\n            @Override\n            public void accept(Observable<String> stringObservable) {\n                stringObservable.subscribe(new DefaultObserver<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<String>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","date":"2019-08-16 20:51:17","endLine":148,"groupId":"8614","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"observeWindow","params":"(finalList<String>list@finalList<List<String>>lists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/90/732ddf1e7255e40562819eb3f1f77dbc4a650f.src","preCode":"    private Consumer<Observable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Observable<String>>() {\n            @Override\n            public void accept(Observable<String> stringObservable) {\n                stringObservable.subscribe(new DefaultObserver<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<String>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    private Consumer<Flowable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Flowable<String>>() {\n            @Override\n            public void accept(Flowable<String> stringFlowable) {\n                stringFlowable.subscribe(new DefaultSubscriber<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","date":"2019-12-22 18:39:23","endLine":147,"groupId":"2582","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"observeWindow","params":"(finalList<String>list@finalList<List<String>>lists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/55/db25f654030911d342b24289648a1617f3e05d.src","preCode":"    private Consumer<Flowable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Flowable<String>>() {\n            @Override\n            public void accept(Flowable<String> stringFlowable) {\n                stringFlowable.subscribe(new DefaultSubscriber<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<String>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    private Consumer<Observable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Observable<String>>() {\n            @Override\n            public void accept(Observable<String> stringObservable) {\n                stringObservable.subscribe(new DefaultObserver<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","date":"2019-12-22 18:59:44","endLine":148,"groupId":"102023","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"observeWindow","params":"(finalList<String>list@finalList<List<String>>lists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0c/7dc8056ba95845df9c6f2f5260efaf347e1aa4.src","preCode":"    private Consumer<Observable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Observable<String>>() {\n            @Override\n            public void accept(Observable<String> stringObservable) {\n                stringObservable.subscribe(new DefaultObserver<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<String>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    private Consumer<Flowable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Flowable<String>>() {\n            @Override\n            public void accept(Flowable<String> stringFlowable) {\n                stringFlowable.subscribe(new DefaultSubscriber<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","date":"2019-12-22 18:39:23","endLine":147,"groupId":"102023","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"observeWindow","params":"(finalList<String>list@finalList<List<String>>lists)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/55/db25f654030911d342b24289648a1617f3e05d.src","preCode":"    private Consumer<Flowable<String>> observeWindow(final List<String> list, final List<List<String>> lists) {\n        return new Consumer<Flowable<String>>() {\n            @Override\n            public void accept(Flowable<String> stringFlowable) {\n                stringFlowable.subscribe(new DefaultSubscriber<String>() {\n                    @Override\n                    public void onComplete() {\n                        lists.add(new ArrayList<>(list));\n                        list.clear();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        fail(e.getMessage());\n                    }\n\n                    @Override\n                    public void onNext(String args) {\n                        list.add(args);\n                    }\n                });\n            }\n        };\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
