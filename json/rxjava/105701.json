[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<Long>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Observable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":363,"groupId":"11094","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"issue3008RetryInfinite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/f293cb4a4f16899b2177429fc880a268ac0e87.src","preCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<Long>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Observable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryWithPredicateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<Long>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Flowable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":364,"groupId":"11094","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"issue3008RetryInfinite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9a/69dd3ede9abab69828c4cb130e08c957fb77c7.src","preCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<Long>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Flowable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryWithPredicateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<Long>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Observable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":363,"groupId":"11094","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"issue3008RetryInfinite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/f293cb4a4f16899b2177429fc880a268ac0e87.src","preCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<Long>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Observable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryWithPredicateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Flowable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","date":"2019-12-22 18:39:23","endLine":364,"groupId":"11094","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"issue3008RetryInfinite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b7/0b7422018e3b413d4935c85c67598c991e6285.src","preCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<Long>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Flowable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryWithPredicateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Observable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","date":"2019-12-22 18:59:44","endLine":363,"groupId":"105701","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"issue3008RetryInfinite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3b/57f6c2e12c8ee86f9033792489cba7048e6f54.src","preCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<Long>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Observable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryWithPredicateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Flowable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","date":"2019-12-22 18:39:23","endLine":364,"groupId":"105701","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"issue3008RetryInfinite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b7/0b7422018e3b413d4935c85c67598c991e6285.src","preCode":"    public void issue3008RetryInfinite() {\n        final List<Long> list = new CopyOnWriteArrayList<>();\n        final AtomicBoolean isFirst = new AtomicBoolean(true);\n        Flowable.<Long> just(1L, 2L, 3L).map(new Function<Long, Long>() {\n            @Override\n            public Long apply(Long x) {\n                System.out.println(\"map \" + x);\n                if (x == 2 && isFirst.getAndSet(false)) {\n                    throw new RuntimeException(\"retryable error\");\n                }\n                return x;\n            }})\n        .retry()\n        .forEach(new Consumer<Long>() {\n\n            @Override\n            public void accept(Long t) {\n                System.out.println(t);\n                list.add(t);\n            }});\n        assertEquals(Arrays.asList(1L, 1L, 2L, 3L), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryWithPredicateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
