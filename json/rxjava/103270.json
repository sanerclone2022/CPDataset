[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void resumeNext() {\n        TestObservable f = new TestObservable(\"one\");\n        Observable<String> w = Observable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<Throwable>();\n\n        Observable<String> observable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n        observable.subscribe(observer);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, times(1)).onNext(\"failure\");\n        assertNotNull(capturedException.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":66,"groupId":"10280","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3f/20a8a7dbf5ca59427482c6d40d1b2c36a20604.src","preCode":"    public void resumeNext() {\n        TestObservable f = new TestObservable(\"one\");\n        Observable<String> w = Observable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<Throwable>();\n\n        Observable<String> observable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n        observable.subscribe(observer);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, times(1)).onNext(\"failure\");\n        assertNotNull(capturedException.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorReturnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void resumeNext() {\n        TestFlowable f = new TestFlowable(\"one\");\n        Flowable<String> w = Flowable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<Throwable>();\n\n        Flowable<String> flowable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        flowable.subscribe(subscriber);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, times(1)).onNext(\"failure\");\n        verify(subscriber, times(1)).onComplete();\n        assertNotNull(capturedException.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":68,"groupId":"10280","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resumeNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/32/4cfe0eec92eb7cd1d293fac5e4d86032957a95.src","preCode":"    public void resumeNext() {\n        TestFlowable f = new TestFlowable(\"one\");\n        Flowable<String> w = Flowable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<Throwable>();\n\n        Flowable<String> flowable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        flowable.subscribe(subscriber);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, times(1)).onNext(\"failure\");\n        verify(subscriber, times(1)).onComplete();\n        assertNotNull(capturedException.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorReturnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void resumeNext() {\n        TestObservable f = new TestObservable(\"one\");\n        Observable<String> w = Observable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<Throwable>();\n\n        Observable<String> observable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n        observable.subscribe(observer);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, times(1)).onNext(\"failure\");\n        assertNotNull(capturedException.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":66,"groupId":"10280","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3f/20a8a7dbf5ca59427482c6d40d1b2c36a20604.src","preCode":"    public void resumeNext() {\n        TestObservable f = new TestObservable(\"one\");\n        Observable<String> w = Observable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<Throwable>();\n\n        Observable<String> observable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n        observable.subscribe(observer);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, times(1)).onNext(\"failure\");\n        assertNotNull(capturedException.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorReturnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void resumeNext() {\n        TestFlowable f = new TestFlowable(\"one\");\n        Flowable<String> w = Flowable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<>();\n\n        Flowable<String> flowable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        flowable.subscribe(subscriber);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, times(1)).onNext(\"failure\");\n        verify(subscriber, times(1)).onComplete();\n        assertNotNull(capturedException.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":68,"groupId":"10280","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resumeNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/de026f95e755fb10e18e6f03c5b6fd0b6e7de7.src","preCode":"    public void resumeNext() {\n        TestFlowable f = new TestFlowable(\"one\");\n        Flowable<String> w = Flowable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<Throwable>();\n\n        Flowable<String> flowable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        flowable.subscribe(subscriber);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, times(1)).onNext(\"failure\");\n        verify(subscriber, times(1)).onComplete();\n        assertNotNull(capturedException.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorReturnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void resumeNext() {\n        TestObservable f = new TestObservable(\"one\");\n        Observable<String> w = Observable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<>();\n\n        Observable<String> observable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n        observable.subscribe(observer);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, times(1)).onNext(\"failure\");\n        assertNotNull(capturedException.get());\n    }\n","date":"2019-12-22 18:59:44","endLine":66,"groupId":"103270","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"resumeNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/69/c6c6889cc477ed303c6a2dd3eb5522211027c6.src","preCode":"    public void resumeNext() {\n        TestObservable f = new TestObservable(\"one\");\n        Observable<String> w = Observable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<Throwable>();\n\n        Observable<String> observable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n        observable.subscribe(observer);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, times(1)).onNext(\"failure\");\n        assertNotNull(capturedException.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorReturnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void resumeNext() {\n        TestFlowable f = new TestFlowable(\"one\");\n        Flowable<String> w = Flowable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<>();\n\n        Flowable<String> flowable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        flowable.subscribe(subscriber);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, times(1)).onNext(\"failure\");\n        verify(subscriber, times(1)).onComplete();\n        assertNotNull(capturedException.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":68,"groupId":"103270","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"resumeNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/de026f95e755fb10e18e6f03c5b6fd0b6e7de7.src","preCode":"    public void resumeNext() {\n        TestFlowable f = new TestFlowable(\"one\");\n        Flowable<String> w = Flowable.unsafeCreate(f);\n        final AtomicReference<Throwable> capturedException = new AtomicReference<>();\n\n        Flowable<String> flowable = w.onErrorReturn(new Function<Throwable, String>() {\n\n            @Override\n            public String apply(Throwable e) {\n                capturedException.set(e);\n                return \"failure\";\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        flowable.subscribe(subscriber);\n\n        try {\n            f.t.join();\n        } catch (InterruptedException e) {\n            fail(e.getMessage());\n        }\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, times(1)).onNext(\"failure\");\n        verify(subscriber, times(1)).onComplete();\n        assertNotNull(capturedException.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorReturnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
