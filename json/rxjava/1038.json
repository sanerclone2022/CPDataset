[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void setup() {\n        Integer[] array = new Integer[times];\n\n        flowable = Flowable.fromArray(array).flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) throws Exception {\n                return Flowable.just(v);\n            }\n        });\n\n        observable = Observable.fromArray(array).flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) throws Exception {\n                return Observable.just(v);\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":55,"groupId":"12050","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/41f92834e8f2f2d9f2b94955a335dece39b1d5.src","preCode":"    public void setup() {\n        Integer[] array = new Integer[times];\n\n        flowable = Flowable.fromArray(array).flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) throws Exception {\n                return Flowable.just(v);\n            }\n        });\n\n        observable = Observable.fromArray(array).flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) throws Exception {\n                return Observable.just(v);\n            }\n        });\n    }\n","realPath":"src/jmh/java/io/reactivex/rxjava3/core/FlatMapJustPerf.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void setup() {\n        bpRange = Flowable.range(1, times);\n        nbpRange = Observable.range(1, times);\n\n        bpRangeMapJust = bpRange.flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n        nbpRangeMapJust = nbpRange.flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        bpRangeMapRange = bpRange.flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) {\n                return Flowable.range(v, 2);\n            }\n        });\n        nbpRangeMapRange = nbpRange.flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.range(v, 2);\n            }\n        });\n\n        singleJust = Single.just(1);\n        singleJustMapJust = singleJust.flatMap(new Function<Integer, Single<Integer>>() {\n            @Override\n            public Single<Integer> apply(Integer v) {\n                return Single.just(v);\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":83,"groupId":"7884","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e0/5921c531ab47ae80ce9f0179b25149e9fb5a82.src","preCode":"    public void setup() {\n        bpRange = Flowable.range(1, times);\n        nbpRange = Observable.range(1, times);\n\n        bpRangeMapJust = bpRange.flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n        nbpRangeMapJust = nbpRange.flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        bpRangeMapRange = bpRange.flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) {\n                return Flowable.range(v, 2);\n            }\n        });\n        nbpRangeMapRange = nbpRange.flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.range(v, 2);\n            }\n        });\n\n        singleJust = Single.just(1);\n        singleJustMapJust = singleJust.flatMap(new Function<Integer, Single<Integer>>() {\n            @Override\n            public Single<Integer> apply(Integer v) {\n                return Single.just(v);\n            }\n        });\n    }\n","realPath":"src/jmh/java/io/reactivex/rxjava3/core/EachTypeFlatMapPerf.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":2,"curCode":"    public void setup() {\n        Integer[] array = new Integer[times];\n\n        flowable = Flowable.fromArray(array).flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n\n        observable = Observable.fromArray(array).flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n    }\n","date":"2019-12-28 03:01:34","endLine":55,"groupId":"1038","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2a/1fd7539c2ed5e508a687c322d8e893462b2a0c.src","preCode":"    public void setup() {\n        Integer[] array = new Integer[times];\n\n        flowable = Flowable.fromArray(array).flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) throws Exception {\n                return Flowable.just(v);\n            }\n        });\n\n        observable = Observable.fromArray(array).flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) throws Exception {\n                return Observable.just(v);\n            }\n        });\n    }\n","realPath":"src/jmh/java/io/reactivex/rxjava3/core/FlatMapJustPerf.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void setup() {\n        bpRange = Flowable.range(1, times);\n        nbpRange = Observable.range(1, times);\n\n        bpRangeMapJust = bpRange.flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n        nbpRangeMapJust = nbpRange.flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        bpRangeMapRange = bpRange.flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) {\n                return Flowable.range(v, 2);\n            }\n        });\n        nbpRangeMapRange = nbpRange.flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.range(v, 2);\n            }\n        });\n\n        singleJust = Single.just(1);\n        singleJustMapJust = singleJust.flatMap(new Function<Integer, Single<Integer>>() {\n            @Override\n            public Single<Integer> apply(Integer v) {\n                return Single.just(v);\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":83,"groupId":"1038","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e0/5921c531ab47ae80ce9f0179b25149e9fb5a82.src","preCode":"    public void setup() {\n        bpRange = Flowable.range(1, times);\n        nbpRange = Observable.range(1, times);\n\n        bpRangeMapJust = bpRange.flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n        nbpRangeMapJust = nbpRange.flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        bpRangeMapRange = bpRange.flatMap(new Function<Integer, Publisher<Integer>>() {\n            @Override\n            public Publisher<Integer> apply(Integer v) {\n                return Flowable.range(v, 2);\n            }\n        });\n        nbpRangeMapRange = nbpRange.flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.range(v, 2);\n            }\n        });\n\n        singleJust = Single.just(1);\n        singleJustMapJust = singleJust.flatMap(new Function<Integer, Single<Integer>>() {\n            @Override\n            public Single<Integer> apply(Integer v) {\n                return Single.just(v);\n            }\n        });\n    }\n","realPath":"src/jmh/java/io/reactivex/rxjava3/core/EachTypeFlatMapPerf.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
