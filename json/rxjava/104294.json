[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        ObjectHelper.requireNonNull(source1, \"source1 is null\");\n        ObjectHelper.requireNonNull(source2, \"source2 is null\");\n        ObjectHelper.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2019-08-16 20:51:17","endLine":3805,"groupId":"4972","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sequenceEqual","params":"(ObservableSource<?extendsT>source1@ObservableSource<?extendsT>source2@BiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bc/c013a10f40257dded28957b3da473976c6bb44.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        ObjectHelper.requireNonNull(source1, \"source1 is null\");\n        ObjectHelper.requireNonNull(source2, \"source2 is null\");\n        ObjectHelper.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":3798,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        ObjectHelper.requireNonNull(source1, \"source1 is null\");\n        ObjectHelper.requireNonNull(source2, \"source2 is null\");\n        ObjectHelper.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2019-08-16 20:51:17","endLine":4275,"groupId":"4972","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sequenceEqual","params":"(Publisher<?extendsT>source1@Publisher<?extendsT>source2@BiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f1/6fa2cf03001794eda0b11b8d1fe00bfa2fb6b9.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        ObjectHelper.requireNonNull(source1, \"source1 is null\");\n        ObjectHelper.requireNonNull(source2, \"source2 is null\");\n        ObjectHelper.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":4268,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2019-12-18 03:06:44","endLine":3717,"groupId":"6695","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sequenceEqual","params":"(ObservableSource<?extendsT>source1@ObservableSource<?extendsT>source2@BiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/63/406824ba158b4e2455ac106163611841aebd44.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        ObjectHelper.requireNonNull(source1, \"source1 is null\");\n        ObjectHelper.requireNonNull(source2, \"source2 is null\");\n        ObjectHelper.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":3710,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2019-12-18 03:06:44","endLine":4148,"groupId":"6695","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sequenceEqual","params":"(Publisher<?extendsT>source1@Publisher<?extendsT>source2@BiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/51/4845efbc67b5a91cda5e930ed14797beaeed88.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        ObjectHelper.requireNonNull(source1, \"source1 is null\");\n        ObjectHelper.requireNonNull(source2, \"source2 is null\");\n        ObjectHelper.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":4141,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-24 17:18:06","codes":[{"authorDate":"2019-12-24 17:18:06","commitOrder":3,"curCode":"    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2019-12-24 17:18:06","endLine":3712,"groupId":"6695","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"sequenceEqual","params":"(ObservableSource<?extendsT>source1@ObservableSource<?extendsT>source2@BiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/42/d7f3d00a30adbccfbf51f17a9bae85df1872ca.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":3705,"status":"M"},{"authorDate":"2019-12-24 17:18:06","commitOrder":3,"curCode":"    public static <T> Single<Boolean> sequenceEqual(@NonNull Publisher<? extends T> source1, @NonNull Publisher<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2019-12-24 17:18:06","endLine":4196,"groupId":"6695","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"sequenceEqual","params":"(@NonNullPublisher<?extendsT>source1@@NonNullPublisher<?extendsT>source2@@NonNullBiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/bdb06b2cc43b1a9736de785b99fa56fac4634b.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(Publisher<? extends T> source1, Publisher<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<T>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":4189,"status":"M"}],"commitId":"b57169babb184d0adc2fa28cf0425c4f0c1f8555","commitMessage":"@@@3.x: Add NonNull & SafeVarargs annotations + validator (#6791)\n\n","date":"2019-12-24 17:18:06","modifiedFileCount":"28","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-24 17:18:06","codes":[{"authorDate":"2019-12-26 06:52:13","commitOrder":4,"curCode":"    public static <T> Single<Boolean> sequenceEqual(\n            @NonNull ObservableSource<? extends T> source1, @NonNull ObservableSource<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2019-12-26 06:52:13","endLine":3787,"groupId":"6695","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"sequenceEqual","params":"(@NonNullObservableSource<?extendsT>source1@@NonNullObservableSource<?extendsT>source2@@NonNullBiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/e1454af367e5b65e5ddecb077644e09b3d66f6.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(ObservableSource<? extends T> source1, ObservableSource<? extends T> source2,\n            BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":3779,"status":"M"},{"authorDate":"2019-12-24 17:18:06","commitOrder":4,"curCode":"    public static <T> Single<Boolean> sequenceEqual(@NonNull Publisher<? extends T> source1, @NonNull Publisher<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2019-12-24 17:18:06","endLine":4196,"groupId":"6695","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"sequenceEqual","params":"(@NonNullPublisher<?extendsT>source1@@NonNullPublisher<?extendsT>source2@@NonNullBiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/bdb06b2cc43b1a9736de785b99fa56fac4634b.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(@NonNull Publisher<? extends T> source1, @NonNull Publisher<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":4189,"status":"N"}],"commitId":"480889c58d3b762b073ef80229bf27f9d9429dd7","commitMessage":"@@@3.x: Add missing annotations.  fix many diamonds (#6795)\n\n* 3.x: Add missing annotations.  fix many diamonds\n\n* Fix accidental JDK 9 API usage\n\n* Fix NPE in unicast due to null-cleanup\n","date":"2019-12-26 06:52:13","modifiedFileCount":"52","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-14 15:49:53","codes":[{"authorDate":"2019-12-26 06:52:13","commitOrder":5,"curCode":"    public static <T> Single<Boolean> sequenceEqual(\n            @NonNull ObservableSource<? extends T> source1, @NonNull ObservableSource<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2019-12-26 06:52:13","endLine":3787,"groupId":"6695","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"sequenceEqual","params":"(@NonNullObservableSource<?extendsT>source1@@NonNullObservableSource<?extendsT>source2@@NonNullBiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/e1454af367e5b65e5ddecb077644e09b3d66f6.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(\n            @NonNull ObservableSource<? extends T> source1, @NonNull ObservableSource<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":3779,"status":"N"},{"authorDate":"2020-01-14 15:49:53","commitOrder":5,"curCode":"    public static <T> Single<Boolean> sequenceEqual(@NonNull Publisher<@NonNull ? extends T> source1, @NonNull Publisher<@NonNull ? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2020-01-14 15:49:53","endLine":4248,"groupId":"6695","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"sequenceEqual","params":"(@NonNullPublisher<@NonNull?extendsT>source1@@NonNullPublisher<@NonNull?extendsT>source2@@NonNullBiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/48/6b0cb629defb0f51e33900cdb33090c85e4725.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(@NonNull Publisher<? extends T> source1, @NonNull Publisher<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":4241,"status":"M"}],"commitId":"fb6dab6847d858b22fe6a36558cf3b62dc10627d","commitMessage":"@@@3.x: Add nullability annotations to type arguments (#6840)\n\n","date":"2020-01-14 15:49:53","modifiedFileCount":"75","status":"M","submitter":"David Karnok"},{"authorTime":"2021-07-25 00:35:45","codes":[{"authorDate":"2021-07-25 00:35:45","commitOrder":6,"curCode":"    public static <@NonNull T> Single<Boolean> sequenceEqual(\n            @NonNull ObservableSource<? extends T> source1, @NonNull ObservableSource<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2021-07-25 00:35:45","endLine":4083,"groupId":"104294","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"sequenceEqual","params":"(@NonNullObservableSource<?extendsT>source1@@NonNullObservableSource<?extendsT>source2@@NonNullBiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/be/33a95e3f43aee8827eff53f0756e4042f5b538.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(\n            @NonNull ObservableSource<? extends T> source1, @NonNull ObservableSource<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new ObservableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":4075,"status":"M"},{"authorDate":"2021-07-25 00:35:45","commitOrder":6,"curCode":"    public static <@NonNull T> Single<Boolean> sequenceEqual(@NonNull Publisher<? extends T> source1, @NonNull Publisher<? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","date":"2021-07-25 00:35:45","endLine":4588,"groupId":"104294","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"sequenceEqual","params":"(@NonNullPublisher<?extendsT>source1@@NonNullPublisher<?extendsT>source2@@NonNullBiPredicate<?superT@?superT>isEqual@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/31/827d9e1c0235ea4c571f5df54be8e515e94da8.src","preCode":"    public static <T> Single<Boolean> sequenceEqual(@NonNull Publisher<@NonNull ? extends T> source1, @NonNull Publisher<@NonNull ? extends T> source2,\n            @NonNull BiPredicate<? super T, ? super T> isEqual, int bufferSize) {\n        Objects.requireNonNull(source1, \"source1 is null\");\n        Objects.requireNonNull(source2, \"source2 is null\");\n        Objects.requireNonNull(isEqual, \"isEqual is null\");\n        ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\n        return RxJavaPlugins.onAssembly(new FlowableSequenceEqualSingle<>(source1, source2, isEqual, bufferSize));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":4581,"status":"M"}],"commitId":"40ca8eff4a0d6559258489cf282471f5e3b1a229","commitMessage":"@@@3.x: Move nullability annotations into the type argument declaration (#7303)\n\n* 3.x: Move nullability annotations into the type argument declaration\n\n* Reinforce Function<T.  R> return argument type where R is non-trivial","date":"2021-07-25 00:35:45","modifiedFileCount":"17","status":"M","submitter":"David Karnok"}]
