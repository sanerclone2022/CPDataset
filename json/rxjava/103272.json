[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void refCountAsync() {\n        final AtomicInteger subscribeCount = new AtomicInteger();\n        final AtomicInteger nextCount = new AtomicInteger();\n        Observable<Long> r = Observable.interval(0, 25, TimeUnit.MILLISECONDS)\n                .doOnSubscribe(new Consumer<Disposable>() {\n                    @Override\n                    public void accept(Disposable d) {\n                        subscribeCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long l) {\n                        nextCount.incrementAndGet();\n                    }\n                })\n                .publish().refCount();\n\n        final AtomicInteger receivedCount = new AtomicInteger();\n        Disposable d1 = r.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long l) {\n                receivedCount.incrementAndGet();\n            }\n        });\n\n        Disposable d2 = r.subscribe();\n\n        \r\n        try {\n            Thread.sleep(260);\n        } catch (InterruptedException e) {\n        }\n\n        \r\n        d2.dispose(); \r\n        d1.dispose();\n\n        System.out.println(\"onNext: \" + nextCount.get());\n\n        \r\n        assertEquals(nextCount.get(), receivedCount.get());\n        \r\n        assertEquals(1, subscribeCount.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":92,"groupId":"5976","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refCountAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/747c480a90d6b4b716b7ce66cfb96d52316ec7.src","preCode":"    public void refCountAsync() {\n        final AtomicInteger subscribeCount = new AtomicInteger();\n        final AtomicInteger nextCount = new AtomicInteger();\n        Observable<Long> r = Observable.interval(0, 25, TimeUnit.MILLISECONDS)\n                .doOnSubscribe(new Consumer<Disposable>() {\n                    @Override\n                    public void accept(Disposable d) {\n                        subscribeCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long l) {\n                        nextCount.incrementAndGet();\n                    }\n                })\n                .publish().refCount();\n\n        final AtomicInteger receivedCount = new AtomicInteger();\n        Disposable d1 = r.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long l) {\n                receivedCount.incrementAndGet();\n            }\n        });\n\n        Disposable d2 = r.subscribe();\n\n        \r\n        try {\n            Thread.sleep(260);\n        } catch (InterruptedException e) {\n        }\n\n        \r\n        d2.dispose(); \r\n        d1.dispose();\n\n        System.out.println(\"onNext: \" + nextCount.get());\n\n        \r\n        assertEquals(nextCount.get(), receivedCount.get());\n        \r\n        assertEquals(1, subscribeCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void refCountAsync() {\n        final AtomicInteger subscribeCount = new AtomicInteger();\n        final AtomicInteger nextCount = new AtomicInteger();\n        Flowable<Long> r = Flowable.interval(0, 20, TimeUnit.MILLISECONDS)\n                .doOnSubscribe(new Consumer<Subscription>() {\n                    @Override\n                    public void accept(Subscription s) {\n                        subscribeCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long l) {\n                        nextCount.incrementAndGet();\n                    }\n                })\n                .publish().refCount();\n\n        final AtomicInteger receivedCount = new AtomicInteger();\n        Disposable d1 = r.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long l) {\n                receivedCount.incrementAndGet();\n            }\n        });\n\n        Disposable d2 = r.subscribe();\n\n        try {\n            Thread.sleep(10);\n        } catch (InterruptedException e) {\n        }\n\n        for (;;) {\n            int a = nextCount.get();\n            int b = receivedCount.get();\n            if (a > 10 && a < 20 && a == b) {\n                break;\n            }\n            if (a >= 20) {\n                break;\n            }\n            try {\n                Thread.sleep(20);\n            } catch (InterruptedException e) {\n            }\n        }\n        \r\n\n        \r\n        d2.dispose(); \r\n        d1.dispose();\n\n        System.out.println(\"onNext: \" + nextCount.get());\n\n        \r\n        assertEquals(nextCount.get(), receivedCount.get());\n        \r\n        assertEquals(1, subscribeCount.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":107,"groupId":"5976","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"refCountAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/b38ff272c5ac364c7d2bea65b54206088a6700.src","preCode":"    public void refCountAsync() {\n        final AtomicInteger subscribeCount = new AtomicInteger();\n        final AtomicInteger nextCount = new AtomicInteger();\n        Flowable<Long> r = Flowable.interval(0, 20, TimeUnit.MILLISECONDS)\n                .doOnSubscribe(new Consumer<Subscription>() {\n                    @Override\n                    public void accept(Subscription s) {\n                        subscribeCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long l) {\n                        nextCount.incrementAndGet();\n                    }\n                })\n                .publish().refCount();\n\n        final AtomicInteger receivedCount = new AtomicInteger();\n        Disposable d1 = r.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long l) {\n                receivedCount.incrementAndGet();\n            }\n        });\n\n        Disposable d2 = r.subscribe();\n\n        try {\n            Thread.sleep(10);\n        } catch (InterruptedException e) {\n        }\n\n        for (;;) {\n            int a = nextCount.get();\n            int b = receivedCount.get();\n            if (a > 10 && a < 20 && a == b) {\n                break;\n            }\n            if (a >= 20) {\n                break;\n            }\n            try {\n                Thread.sleep(20);\n            } catch (InterruptedException e) {\n            }\n        }\n        \r\n\n        \r\n        d2.dispose(); \r\n        d1.dispose();\n\n        System.out.println(\"onNext: \" + nextCount.get());\n\n        \r\n        assertEquals(nextCount.get(), receivedCount.get());\n        \r\n        assertEquals(1, subscribeCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2020-02-12 23:26:52","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":2,"curCode":"    public void refCountAsync() throws InterruptedException {\n        \r\n        for (int i = 0; i < 10; i++) {\n            try {\n                refCountAsyncActual();\n                return;\n            } catch (AssertionError ex) {\n                if (i == 9) {\n                    throw ex;\n                }\n                Thread.sleep((int)(200 * (Math.random() * 10 + 1)));\n            }\n        }\n    }\n","date":"2020-02-12 23:26:52","endLine":61,"groupId":"103272","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"refCountAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/09/b0bf0cfec08af784a2e54b1fbc293c1af5346a.src","preCode":"    public void refCountAsync() {\n        final AtomicInteger subscribeCount = new AtomicInteger();\n        final AtomicInteger nextCount = new AtomicInteger();\n        Observable<Long> r = Observable.interval(0, 25, TimeUnit.MILLISECONDS)\n                .doOnSubscribe(new Consumer<Disposable>() {\n                    @Override\n                    public void accept(Disposable d) {\n                        subscribeCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long l) {\n                        nextCount.incrementAndGet();\n                    }\n                })\n                .publish().refCount();\n\n        final AtomicInteger receivedCount = new AtomicInteger();\n        Disposable d1 = r.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long l) {\n                receivedCount.incrementAndGet();\n            }\n        });\n\n        Disposable d2 = r.subscribe();\n\n        \r\n        try {\n            Thread.sleep(260);\n        } catch (InterruptedException e) {\n        }\n\n        \r\n        d2.dispose(); \r\n        d1.dispose();\n\n        System.out.println(\"onNext: \" + nextCount.get());\n\n        \r\n        assertEquals(nextCount.get(), receivedCount.get());\n        \r\n        assertEquals(1, subscribeCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-02-12 23:26:52","commitOrder":2,"curCode":"    public void refCountAsync() throws InterruptedException {\n        \r\n        for (int i = 0; i < 10; i++) {\n            try {\n                refCountAsyncActual();\n                return;\n            } catch (AssertionError ex) {\n                if (i == 9) {\n                    throw ex;\n                }\n                Thread.sleep((int)(200 * (Math.random() * 10 + 1)));\n            }\n        }\n    }\n","date":"2020-02-12 23:26:52","endLine":61,"groupId":"103272","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"refCountAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/02/a730b610e989090320081a6cd5a79ac138ec89.src","preCode":"    public void refCountAsync() {\n        final AtomicInteger subscribeCount = new AtomicInteger();\n        final AtomicInteger nextCount = new AtomicInteger();\n        Flowable<Long> r = Flowable.interval(0, 20, TimeUnit.MILLISECONDS)\n                .doOnSubscribe(new Consumer<Subscription>() {\n                    @Override\n                    public void accept(Subscription s) {\n                        subscribeCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long l) {\n                        nextCount.incrementAndGet();\n                    }\n                })\n                .publish().refCount();\n\n        final AtomicInteger receivedCount = new AtomicInteger();\n        Disposable d1 = r.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long l) {\n                receivedCount.incrementAndGet();\n            }\n        });\n\n        Disposable d2 = r.subscribe();\n\n        try {\n            Thread.sleep(10);\n        } catch (InterruptedException e) {\n        }\n\n        for (;;) {\n            int a = nextCount.get();\n            int b = receivedCount.get();\n            if (a > 10 && a < 20 && a == b) {\n                break;\n            }\n            if (a >= 20) {\n                break;\n            }\n            try {\n                Thread.sleep(20);\n            } catch (InterruptedException e) {\n            }\n        }\n        \r\n\n        \r\n        d2.dispose(); \r\n        d1.dispose();\n\n        System.out.println(\"onNext: \" + nextCount.get());\n\n        \r\n        assertEquals(nextCount.get(), receivedCount.get());\n        \r\n        assertEquals(1, subscribeCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
