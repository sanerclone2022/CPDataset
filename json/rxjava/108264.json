[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void andThenCompletableNormal() {\n        final AtomicBoolean run = new AtomicBoolean();\n        Completable c = normal.completable\n                .andThen(Completable.fromCallable(new Callable<Object>() {\n                    @Override\n                    public Object call() throws Exception {\n                        run.set(normal.get() == 0);\n                        return null;\n                    }\n                }));\n\n        c.blockingAwait();\n\n        Assert.assertFalse(\"Start with other\", run.get());\n        normal.assertSubscriptions(1);\n    }\n","date":"2019-08-16 20:51:17","endLine":3968,"groupId":"2449","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"andThenCompletableNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/eb/e1303bd2b987d4d90457fd728986ee9ab7f37c.src","preCode":"    public void andThenCompletableNormal() {\n        final AtomicBoolean run = new AtomicBoolean();\n        Completable c = normal.completable\n                .andThen(Completable.fromCallable(new Callable<Object>() {\n                    @Override\n                    public Object call() throws Exception {\n                        run.set(normal.get() == 0);\n                        return null;\n                    }\n                }));\n\n        c.blockingAwait();\n\n        Assert.assertFalse(\"Start with other\", run.get());\n        normal.assertSubscriptions(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/completable/CompletableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":3953,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void andThenFlowableNormal() {\n        final AtomicBoolean run = new AtomicBoolean();\n        Flowable<Object> c = normal.completable\n                .andThen(Flowable.fromCallable(new Callable<Object>() {\n                    @Override\n                    public Object call() throws Exception {\n                        run.set(normal.get() == 0);\n                        return 1;\n                    }\n                }));\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>();\n\n        c.subscribe(ts);\n\n        Assert.assertFalse(\"Start with other\", run.get());\n        normal.assertSubscriptions(1);\n\n        ts.assertValue(1);\n        ts.assertComplete();\n        ts.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":4005,"groupId":"4545","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"andThenFlowableNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/eb/e1303bd2b987d4d90457fd728986ee9ab7f37c.src","preCode":"    public void andThenFlowableNormal() {\n        final AtomicBoolean run = new AtomicBoolean();\n        Flowable<Object> c = normal.completable\n                .andThen(Flowable.fromCallable(new Callable<Object>() {\n                    @Override\n                    public Object call() throws Exception {\n                        run.set(normal.get() == 0);\n                        return 1;\n                    }\n                }));\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>();\n\n        c.subscribe(ts);\n\n        Assert.assertFalse(\"Start with other\", run.get());\n        normal.assertSubscriptions(1);\n\n        ts.assertValue(1);\n        ts.assertComplete();\n        ts.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/completable/CompletableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":3984,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void andThenCompletableNormal() {\n        final AtomicBoolean run = new AtomicBoolean();\n        Completable c = normal.completable\n                .andThen(Completable.fromCallable(new Callable<Object>() {\n                    @Override\n                    public Object call() throws Exception {\n                        run.set(normal.get() == 0);\n                        return null;\n                    }\n                }));\n\n        c.blockingAwait();\n\n        Assert.assertFalse(\"Start with other\", run.get());\n        normal.assertSubscriptions(1);\n    }\n","date":"2019-08-16 20:51:17","endLine":3968,"groupId":"108264","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"andThenCompletableNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/eb/e1303bd2b987d4d90457fd728986ee9ab7f37c.src","preCode":"    public void andThenCompletableNormal() {\n        final AtomicBoolean run = new AtomicBoolean();\n        Completable c = normal.completable\n                .andThen(Completable.fromCallable(new Callable<Object>() {\n                    @Override\n                    public Object call() throws Exception {\n                        run.set(normal.get() == 0);\n                        return null;\n                    }\n                }));\n\n        c.blockingAwait();\n\n        Assert.assertFalse(\"Start with other\", run.get());\n        normal.assertSubscriptions(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/completable/CompletableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":3953,"status":"N"},{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void andThenFlowableNormal() {\n        final AtomicBoolean run = new AtomicBoolean();\n        Flowable<Object> c = normal.completable\n                .andThen(Flowable.fromCallable(new Callable<Object>() {\n                    @Override\n                    public Object call() throws Exception {\n                        run.set(normal.get() == 0);\n                        return 1;\n                    }\n                }));\n\n        TestSubscriber<Object> ts = new TestSubscriber<>();\n\n        c.subscribe(ts);\n\n        Assert.assertFalse(\"Start with other\", run.get());\n        normal.assertSubscriptions(1);\n\n        ts.assertValue(1);\n        ts.assertComplete();\n        ts.assertNoErrors();\n    }\n","date":"2019-12-22 19:17:37","endLine":4005,"groupId":"108264","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"andThenFlowableNormal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d3/19e48861056cdbdbe461f2adddbe3aabed323c.src","preCode":"    public void andThenFlowableNormal() {\n        final AtomicBoolean run = new AtomicBoolean();\n        Flowable<Object> c = normal.completable\n                .andThen(Flowable.fromCallable(new Callable<Object>() {\n                    @Override\n                    public Object call() throws Exception {\n                        run.set(normal.get() == 0);\n                        return 1;\n                    }\n                }));\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>();\n\n        c.subscribe(ts);\n\n        Assert.assertFalse(\"Start with other\", run.get());\n        normal.assertSubscriptions(1);\n\n        ts.assertValue(1);\n        ts.assertComplete();\n        ts.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/completable/CompletableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":3984,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
