[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void checkAndUpdateTestMethodNames() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n        fail.append(\"Refresh and re-run tests!\\n\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            \r\n                            try {\n                                for (; ; ) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n                                    lineNum++;\n\n                                    Matcher matcher = p.matcher(line);\n                                    if (!line.startsWith(\"//\") && !line.startsWith(\"*\") && matcher.find()) {\n                                        \r\n                                        fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                        total++;\n\n                                        int methodNameStartIndex = matcher.end() - 1;\n                                        char firstChar = Character.toLowerCase(line.charAt(methodNameStartIndex));\n\n                                        String newLine = matcher.replaceAll(replacement + firstChar);\n\n                                        lines.add(newLine);\n                                    } else {\n                                        lines.add(line);\n                                    }\n\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n                    .append(total)\n                    .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":128,"groupId":"1608","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAndUpdateTestMethodNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ae/dcc603f75dfcb773435cc563a79369f77f5779.src","preCode":"    public void checkAndUpdateTestMethodNames() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n        fail.append(\"Refresh and re-run tests!\\n\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            \r\n                            try {\n                                for (; ; ) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n                                    lineNum++;\n\n                                    Matcher matcher = p.matcher(line);\n                                    if (!line.startsWith(\"//\") && !line.startsWith(\"*\") && matcher.find()) {\n                                        \r\n                                        fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                        total++;\n\n                                        int methodNameStartIndex = matcher.end() - 1;\n                                        char firstChar = Character.toLowerCase(line.charAt(methodNameStartIndex));\n\n                                        String newLine = matcher.replaceAll(replacement + firstChar);\n\n                                        lines.add(newLine);\n                                    } else {\n                                        lines.add(line);\n                                    }\n\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n                    .append(total)\n                    .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/TestPrefixInMethodName.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    static void findPattern(String pattern, boolean checkMain) throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        if (checkMain) {\n            dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        }\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line != null) {\n                                        lineNum++;\n\n                                        line = line.trim();\n\n                                        if (!line.startsWith(\"//\") && !line.startsWith(\"*\")) {\n                                            if (p.matcher(line).find()) {\n                                                fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                                total++;\n                                            }\n                                        }\n                                    } else {\n                                        break;\n                                    }\n                                }\n                            } finally {\n                                in.close();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n            .append(total)\n            .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":120,"groupId":"2168","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findPattern","params":"(Stringpattern@booleancheckMain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/22/1896fea24d64cade7b37f2b79a38e046d11242.src","preCode":"    static void findPattern(String pattern, boolean checkMain) throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        if (checkMain) {\n            dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        }\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line != null) {\n                                        lineNum++;\n\n                                        line = line.trim();\n\n                                        if (!line.startsWith(\"//\") && !line.startsWith(\"*\")) {\n                                            if (p.matcher(line).find()) {\n                                                fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                                total++;\n                                            }\n                                        }\n                                    } else {\n                                        break;\n                                    }\n                                }\n                            } finally {\n                                in.close();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n            .append(total)\n            .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/CheckLocalVariablesInTests.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void checkAndUpdateTestMethodNames() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n        fail.append(\"Refresh and re-run tests!\\n\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            \r\n                            try {\n                                for (; ; ) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n                                    lineNum++;\n\n                                    Matcher matcher = p.matcher(line);\n                                    if (!line.startsWith(\"//\") && !line.startsWith(\"*\") && matcher.find()) {\n                                        \r\n                                        fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                        total++;\n\n                                        int methodNameStartIndex = matcher.end() - 1;\n                                        char firstChar = Character.toLowerCase(line.charAt(methodNameStartIndex));\n\n                                        String newLine = matcher.replaceAll(replacement + firstChar);\n\n                                        lines.add(newLine);\n                                    } else {\n                                        lines.add(line);\n                                    }\n\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n                    .append(total)\n                    .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":128,"groupId":"3243","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAndUpdateTestMethodNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2f/b3460a73af1cd93c209ead026ca5cc44e7d75c.src","preCode":"    public void checkAndUpdateTestMethodNames() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n        fail.append(\"Refresh and re-run tests!\\n\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            \r\n                            try {\n                                for (; ; ) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n                                    lineNum++;\n\n                                    Matcher matcher = p.matcher(line);\n                                    if (!line.startsWith(\"//\") && !line.startsWith(\"*\") && matcher.find()) {\n                                        \r\n                                        fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                        total++;\n\n                                        int methodNameStartIndex = matcher.end() - 1;\n                                        char firstChar = Character.toLowerCase(line.charAt(methodNameStartIndex));\n\n                                        String newLine = matcher.replaceAll(replacement + firstChar);\n\n                                        lines.add(newLine);\n                                    } else {\n                                        lines.add(line);\n                                    }\n\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n                    .append(total)\n                    .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/TestPrefixInMethodName.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    static void findPattern(String pattern, boolean checkMain) throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        if (checkMain) {\n            dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        }\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line != null) {\n                                        lineNum++;\n\n                                        line = line.trim();\n\n                                        if (!line.startsWith(\"//\") && !line.startsWith(\"*\")) {\n                                            if (p.matcher(line).find()) {\n                                                fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                                total++;\n                                            }\n                                        }\n                                    } else {\n                                        break;\n                                    }\n                                }\n                            } finally {\n                                in.close();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n            .append(total)\n            .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":120,"groupId":"2168","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findPattern","params":"(Stringpattern@booleancheckMain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/40/a976a1654a11f5f3b42da7fc08dc17d030c064.src","preCode":"    static void findPattern(String pattern, boolean checkMain) throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        if (checkMain) {\n            dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        }\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line != null) {\n                                        lineNum++;\n\n                                        line = line.trim();\n\n                                        if (!line.startsWith(\"//\") && !line.startsWith(\"*\")) {\n                                            if (p.matcher(line).find()) {\n                                                fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                                total++;\n                                            }\n                                        }\n                                    } else {\n                                        break;\n                                    }\n                                }\n                            } finally {\n                                in.close();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n            .append(total)\n            .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/CheckLocalVariablesInTests.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-26 20:33:30","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void checkAndUpdateTestMethodNames() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n        fail.append(\"Refresh and re-run tests!\\n\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            \r\n                            try {\n                                for (; ; ) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n                                    lineNum++;\n\n                                    Matcher matcher = p.matcher(line);\n                                    if (!line.startsWith(\"//\") && !line.startsWith(\"*\") && matcher.find()) {\n                                        \r\n                                        fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                        total++;\n\n                                        int methodNameStartIndex = matcher.end() - 1;\n                                        char firstChar = Character.toLowerCase(line.charAt(methodNameStartIndex));\n\n                                        String newLine = matcher.replaceAll(replacement + firstChar);\n\n                                        lines.add(newLine);\n                                    } else {\n                                        lines.add(line);\n                                    }\n\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n                    .append(total)\n                    .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":128,"groupId":"108198","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAndUpdateTestMethodNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2f/b3460a73af1cd93c209ead026ca5cc44e7d75c.src","preCode":"    public void checkAndUpdateTestMethodNames() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n        fail.append(\"Refresh and re-run tests!\\n\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            \r\n                            try {\n                                for (; ; ) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n                                    lineNum++;\n\n                                    Matcher matcher = p.matcher(line);\n                                    if (!line.startsWith(\"//\") && !line.startsWith(\"*\") && matcher.find()) {\n                                        \r\n                                        fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                        total++;\n\n                                        int methodNameStartIndex = matcher.end() - 1;\n                                        char firstChar = Character.toLowerCase(line.charAt(methodNameStartIndex));\n\n                                        String newLine = matcher.replaceAll(replacement + firstChar);\n\n                                        lines.add(newLine);\n                                    } else {\n                                        lines.add(line);\n                                    }\n\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n                    .append(total)\n                    .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/TestPrefixInMethodName.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"N"},{"authorDate":"2019-12-26 20:33:30","commitOrder":3,"curCode":"    static void findPattern(String pattern, boolean checkMain) throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        if (checkMain) {\n            dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        }\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line != null) {\n                                        lineNum++;\n\n                                        line = line.trim();\n\n                                        if (!line.startsWith(\"//\") && !line.startsWith(\"*\")) {\n                                            if (p.matcher(line).find()) {\n                                                fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\")\n                                                .append(\" at \")\n                                                .append(fname.replace(\".java\", \"\"))\n                                                .append(\".method(\")\n                                                .append(fname)\n                                                .append(\":\")\n                                                .append(lineNum)\n                                                .append(\")\\n\");\n\n                                                total++;\n                                            }\n                                        }\n                                    } else {\n                                        break;\n                                    }\n                                }\n                            } finally {\n                                in.close();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.insert(0, \"Found \" + total + \" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-12-26 20:33:30","endLine":126,"groupId":"108198","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"findPattern","params":"(Stringpattern@booleancheckMain)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/df/6f0a378a76e6488fdfb168172b4e5ca5e64a1d.src","preCode":"    static void findPattern(String pattern, boolean checkMain) throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            System.out.println(\"Unable to find sources of RxJava\");\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        StringBuilder fail = new StringBuilder();\n        fail.append(\"The following code pattern was found: \").append(pattern).append(\"\\n\");\n\n        File parent = f.getParentFile().getParentFile();\n\n        if (checkMain) {\n            dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/')));\n        }\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        Pattern p = Pattern.compile(pattern);\n\n        int total = 0;\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        String fname = u.getName();\n                        if (fname.endsWith(\".java\")) {\n\n                            int lineNum = 0;\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line != null) {\n                                        lineNum++;\n\n                                        line = line.trim();\n\n                                        if (!line.startsWith(\"//\") && !line.startsWith(\"*\")) {\n                                            if (p.matcher(line).find()) {\n                                                fail\n                                                .append(fname)\n                                                .append(\"#L\").append(lineNum)\n                                                .append(\"    \").append(line)\n                                                .append(\"\\n\");\n                                                total++;\n                                            }\n                                        }\n                                    } else {\n                                        break;\n                                    }\n                                }\n                            } finally {\n                                in.close();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (total != 0) {\n            fail.append(\"Found \")\n            .append(total)\n            .append(\" instances\");\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/CheckLocalVariablesInTests.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"af17c6e268d0e2fe4675feb46c19a29227cb135b","commitMessage":"@@@3.x: [Java 8] Add Observable operators + cleanup (#6797)\n\n","date":"2019-12-26 20:33:30","modifiedFileCount":"19","status":"M","submitter":"David Karnok"}]
