[{"authorTime":"2019-12-27 05:37:39","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableFlatMap.subscribe(subscribers[i], mapper, delayError, maxConcurrency, prefetch);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2019-08-16 20:51:17","endLine":74,"groupId":"5791","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superR>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/0c9f5738dad126b07c0a7769c05b641aa18fc0.src","preCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableFlatMap.subscribe(subscribers[i], mapper, delayError, maxConcurrency, prefetch);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"NB"},{"authorDate":"2019-12-27 05:37:39","commitOrder":2,"curCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableFlatMapStream.subscribe(subscribers[i], mapper, prefetch);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2019-12-27 05:37:39","endLine":68,"groupId":"5791","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superR>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3f/38d1fec385dce0d6c6f02360625e13dc908295.src","preCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableFlatMapStream.subscribe(subscribers[i], mapper, prefetch);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/jdk8/ParallelFlatMapStream.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"3d00eb188bad1d49aa058e896ad9d1b5026eba7d","commitMessage":"@@@3.x: [Java 8] Add ParallelFlowable operators + cleanup (#6798)\n\n","date":"2019-12-27 05:37:39","modifiedFileCount":"22","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-27 05:37:39","codes":[{"authorDate":"2021-02-25 00:40:46","commitOrder":3,"curCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        subscribers = RxJavaPlugins.onSubscribe(this, subscribers);\n\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableFlatMap.subscribe(subscribers[i], mapper, delayError, maxConcurrency, prefetch);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2021-02-25 00:40:46","endLine":77,"groupId":"101988","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superR>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/37/2c3cf70a83adb91914d21c16bc89c1f97e7cce.src","preCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableFlatMap.subscribe(subscribers[i], mapper, delayError, maxConcurrency, prefetch);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2019-12-27 05:37:39","commitOrder":3,"curCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableFlatMapStream.subscribe(subscribers[i], mapper, prefetch);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2019-12-27 05:37:39","endLine":68,"groupId":"101988","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superR>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3f/38d1fec385dce0d6c6f02360625e13dc908295.src","preCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableFlatMapStream.subscribe(subscribers[i], mapper, prefetch);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/jdk8/ParallelFlatMapStream.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"22c5e0bfe0ca9a68cd726d23fb696fe56a059a84","commitMessage":"@@@3.x: Add onSubscribe hook to ParallelFlowable operators (#7191)\n\n","date":"2021-02-25 00:40:46","modifiedFileCount":"17","status":"M","submitter":"David Karnok"}]
