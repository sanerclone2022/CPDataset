[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void flatMapValue() {\n        Single.just(1).flatMap(new Function<Integer, SingleSource<Integer>>() {\n            @Override public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                if (integer == 1) {\n                    return Single.just(2);\n                }\n\n                return Single.just(1);\n            }\n        })\n            .test()\n            .assertResult(2);\n    }\n","date":"2019-08-16 20:51:17","endLine":237,"groupId":"11263","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"flatMapValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/18/45a4967d82e78f70f974ee4abf6b0044c3bf48.src","preCode":"    public void flatMapValue() {\n        Single.just(1).flatMap(new Function<Integer, SingleSource<Integer>>() {\n            @Override public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                if (integer == 1) {\n                    return Single.just(2);\n                }\n\n                return Single.just(1);\n            }\n        })\n            .test()\n            .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void flatMapSingleValue() {\n        Maybe.just(1).flatMapSingle(new Function<Integer, SingleSource<Integer>>() {\n            @Override public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                if (integer == 1) {\n                    return Single.just(2);\n                }\n\n                return Single.just(1);\n            }\n        })\n            .test()\n            .assertResult(2);\n    }\n","date":"2019-08-16 20:51:17","endLine":45,"groupId":"11263","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapSingleValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/60/b1a98f3b87c33f27c5821fc6544e6fe139fcba.src","preCode":"    public void flatMapSingleValue() {\n        Maybe.just(1).flatMapSingle(new Function<Integer, SingleSource<Integer>>() {\n            @Override public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                if (integer == 1) {\n                    return Single.just(2);\n                }\n\n                return Single.just(1);\n            }\n        })\n            .test()\n            .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2020-01-29 04:32:19","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void flatMapValue() {\n        Single.just(1).flatMap(new Function<Integer, SingleSource<Integer>>() {\n            @Override public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                if (integer == 1) {\n                    return Single.just(2);\n                }\n\n                return Single.just(1);\n            }\n        })\n            .test()\n            .assertResult(2);\n    }\n","date":"2019-08-16 20:51:17","endLine":237,"groupId":"106926","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"flatMapValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/18/45a4967d82e78f70f974ee4abf6b0044c3bf48.src","preCode":"    public void flatMapValue() {\n        Single.just(1).flatMap(new Function<Integer, SingleSource<Integer>>() {\n            @Override public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                if (integer == 1) {\n                    return Single.just(2);\n                }\n\n                return Single.just(1);\n            }\n        })\n            .test()\n            .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"N"},{"authorDate":"2020-01-29 04:32:19","commitOrder":2,"curCode":"    public void flatMapSingleValue() {\n        Maybe.just(1).flatMapSingle(new Function<Integer, SingleSource<Integer>>() {\n            @Override public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                if (integer == 1) {\n                    return Single.just(2);\n                }\n\n                return Single.just(1);\n            }\n        })\n            .toSingle()\n            .test()\n            .assertResult(2);\n    }\n","date":"2020-01-29 04:32:19","endLine":40,"groupId":"106926","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapSingleValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/49/04678a61a912adda1167512359529e401aa26b.src","preCode":"    public void flatMapSingleValue() {\n        Maybe.just(1).flatMapSingle(new Function<Integer, SingleSource<Integer>>() {\n            @Override public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                if (integer == 1) {\n                    return Single.just(2);\n                }\n\n                return Single.just(1);\n            }\n        })\n            .test()\n            .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"M"}],"commitId":"f1a795da0d4cdfb3133206ad8e3887bdb8ba948b","commitMessage":"@@@3.x: Swap Maybe.flatMapSingle and Maybe.flatMapSingleElement (#6891)\n\n* Deleted Maybe.flatMapSingle\n\nAnd replaced tests with flatMapSingle().toSingle()\n\n* Renamed Maybe.flatMapSingleElement to flatMapSingle\n\n* Deleted unused MaybeFlatMapSingle operator\n\n* Renamed operator MaybeFlatMapSingleElement to MaybeFlatMapSingle\n\n* Add Ignore to XFlatMapTest.maybeSingle\n","date":"2020-01-29 04:32:19","modifiedFileCount":"5","status":"M","submitter":"slisaasquatch"}]
