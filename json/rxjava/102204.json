[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    protected void subscribeActual(SingleObserver<? super R> observer) {\n        R seed;\n\n        try {\n            seed = ObjectHelper.requireNonNull(seedSupplier.get(), \"The seedSupplier returned a null value\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n        source.subscribe(new ReduceSeedObserver<T, R>(observer, reducer, seed));\n    }\n","date":"2019-08-16 20:51:17","endLine":56,"groupId":"12125","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(SingleObserver<?superR>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e7/b1b168139727fc91341561e6c2ebfecc8ef0c0.src","preCode":"    protected void subscribeActual(SingleObserver<? super R> observer) {\n        R seed;\n\n        try {\n            seed = ObjectHelper.requireNonNull(seedSupplier.get(), \"The seedSupplier returned a null value\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n        source.subscribe(new ReduceSeedObserver<T, R>(observer, reducer, seed));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReduceWithSingle.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        MaybeSource<? extends T> source;\n\n        try {\n            source = ObjectHelper.requireNonNull(maybeSupplier.get(), \"The maybeSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        source.subscribe(observer);\n    }\n","date":"2019-08-16 20:51:17","endLine":48,"groupId":"12125","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(MaybeObserver<?superT>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/31/46b4781d8d05c9a60be0bc4858959dec949e53.src","preCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        MaybeSource<? extends T> source;\n\n        try {\n            source = ObjectHelper.requireNonNull(maybeSupplier.get(), \"The maybeSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        source.subscribe(observer);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeDefer.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    protected void subscribeActual(SingleObserver<? super R> observer) {\n        R seed;\n\n        try {\n            seed = Objects.requireNonNull(seedSupplier.get(), \"The seedSupplier returned a null value\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n        source.subscribe(new ReduceSeedObserver<T, R>(observer, reducer, seed));\n    }\n","date":"2019-12-18 03:06:44","endLine":57,"groupId":"12125","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(SingleObserver<?superR>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/95/6d7bf7c94a4573daf23a2741d02bc7b52d3a40.src","preCode":"    protected void subscribeActual(SingleObserver<? super R> observer) {\n        R seed;\n\n        try {\n            seed = ObjectHelper.requireNonNull(seedSupplier.get(), \"The seedSupplier returned a null value\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n        source.subscribe(new ReduceSeedObserver<T, R>(observer, reducer, seed));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReduceWithSingle.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        MaybeSource<? extends T> source;\n\n        try {\n            source = Objects.requireNonNull(maybeSupplier.get(), \"The maybeSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        source.subscribe(observer);\n    }\n","date":"2019-12-18 03:06:44","endLine":49,"groupId":"12125","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(MaybeObserver<?superT>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/ba4e004135a6ba13a1bca5ae8a4dae3ced78e5.src","preCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        MaybeSource<? extends T> source;\n\n        try {\n            source = ObjectHelper.requireNonNull(maybeSupplier.get(), \"The maybeSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        source.subscribe(observer);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeDefer.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":3,"curCode":"    protected void subscribeActual(SingleObserver<? super R> observer) {\n        R seed;\n\n        try {\n            seed = Objects.requireNonNull(seedSupplier.get(), \"The seedSupplier returned a null value\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n        source.subscribe(new ReduceSeedObserver<>(observer, reducer, seed));\n    }\n","date":"2019-12-28 03:01:34","endLine":57,"groupId":"102204","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(SingleObserver<?superR>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1d/e6cb1e6c5dc8a18cb09d1ce29a45d33b611db0.src","preCode":"    protected void subscribeActual(SingleObserver<? super R> observer) {\n        R seed;\n\n        try {\n            seed = Objects.requireNonNull(seedSupplier.get(), \"The seedSupplier returned a null value\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n        source.subscribe(new ReduceSeedObserver<T, R>(observer, reducer, seed));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReduceWithSingle.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":3,"curCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        MaybeSource<? extends T> source;\n\n        try {\n            source = Objects.requireNonNull(maybeSupplier.get(), \"The maybeSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        source.subscribe(observer);\n    }\n","date":"2019-12-18 03:06:44","endLine":49,"groupId":"102204","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(MaybeObserver<?superT>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/ba4e004135a6ba13a1bca5ae8a4dae3ced78e5.src","preCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        MaybeSource<? extends T> source;\n\n        try {\n            source = Objects.requireNonNull(maybeSupplier.get(), \"The maybeSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        source.subscribe(observer);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeDefer.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
