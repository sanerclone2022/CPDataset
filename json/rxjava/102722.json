[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void take() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        ObservableCache<Integer> cached = new ObservableCache<Integer>(Observable.range(1, 1000), 16);\n        cached.take(10).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertComplete();\n        to.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\r\n        assertFalse(cached.hasObservers());\n    }\n","date":"2019-08-16 20:51:17","endLine":132,"groupId":"6191","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"take","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/695b24d6133813eaa07a9d45cfe4cfd749bddb.src","preCode":"    public void take() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        ObservableCache<Integer> cached = new ObservableCache<Integer>(Observable.range(1, 1000), 16);\n        cached.take(10).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertComplete();\n        to.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\r\n        assertFalse(cached.hasObservers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void take() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        FlowableCache<Integer> cached = new FlowableCache<Integer>(Flowable.range(1, 100), 16);\n        cached.take(10).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertComplete();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        assertFalse(cached.hasSubscribers());\n    }\n","date":"2019-08-16 20:51:17","endLine":157,"groupId":"4094","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"take","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e1/3ef40f0c2da677c5b1d3fe7668be98c1ce70a1.src","preCode":"    public void take() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        FlowableCache<Integer> cached = new FlowableCache<Integer>(Flowable.range(1, 100), 16);\n        cached.take(10).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertComplete();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        assertFalse(cached.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void take() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        ObservableCache<Integer> cached = new ObservableCache<Integer>(Observable.range(1, 1000), 16);\n        cached.take(10).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertComplete();\n        to.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\r\n        assertFalse(cached.hasObservers());\n    }\n","date":"2019-08-16 20:51:17","endLine":132,"groupId":"6191","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"take","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/695b24d6133813eaa07a9d45cfe4cfd749bddb.src","preCode":"    public void take() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        ObservableCache<Integer> cached = new ObservableCache<Integer>(Observable.range(1, 1000), 16);\n        cached.take(10).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertComplete();\n        to.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\r\n        assertFalse(cached.hasObservers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void take() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        FlowableCache<Integer> cached = new FlowableCache<>(Flowable.range(1, 100), 16);\n        cached.take(10).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertComplete();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        assertFalse(cached.hasSubscribers());\n    }\n","date":"2019-12-22 18:39:23","endLine":157,"groupId":"4094","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"take","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a3/170558897b418294fe8fef3b42e141698efe77.src","preCode":"    public void take() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        FlowableCache<Integer> cached = new FlowableCache<Integer>(Flowable.range(1, 100), 16);\n        cached.take(10).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertComplete();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        assertFalse(cached.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void take() {\n        TestObserver<Integer> to = new TestObserver<>();\n\n        ObservableCache<Integer> cached = new ObservableCache<>(Observable.range(1, 1000), 16);\n        cached.take(10).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertComplete();\n        to.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\r\n        assertFalse(cached.hasObservers());\n    }\n","date":"2019-12-22 18:59:44","endLine":132,"groupId":"102722","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"take","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8f/4440e41b9f2174f562b4cd7ccfeaaa570468fc.src","preCode":"    public void take() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        ObservableCache<Integer> cached = new ObservableCache<Integer>(Observable.range(1, 1000), 16);\n        cached.take(10).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertComplete();\n        to.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\r\n        assertFalse(cached.hasObservers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void take() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        FlowableCache<Integer> cached = new FlowableCache<>(Flowable.range(1, 100), 16);\n        cached.take(10).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertComplete();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        assertFalse(cached.hasSubscribers());\n    }\n","date":"2019-12-22 18:39:23","endLine":157,"groupId":"102722","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"take","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a3/170558897b418294fe8fef3b42e141698efe77.src","preCode":"    public void take() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        FlowableCache<Integer> cached = new FlowableCache<>(Flowable.range(1, 100), 16);\n        cached.take(10).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertComplete();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        assertFalse(cached.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
