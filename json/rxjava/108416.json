[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public static void checkSubscriberCount(ParallelFlowable<?> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] consumers = new TestSubscriber[n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i] = new TestSubscriber<Object>();\n        }\n\n        source.subscribe(consumers);\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i].awaitDone(5, TimeUnit.SECONDS)\n            .assertFailure(IllegalArgumentException.class);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1317,"groupId":"6400","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSubscriberCount","params":"(ParallelFlowable<?>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/40/afd9a5119b4093576f2258f63e1101a733cf01.src","preCode":"    public static void checkSubscriberCount(ParallelFlowable<?> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] consumers = new TestSubscriber[n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i] = new TestSubscriber<Object>();\n        }\n\n        source.subscribe(consumers);\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i].awaitDone(5, TimeUnit.SECONDS)\n            .assertFailure(IllegalArgumentException.class);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1301,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public static <T> void checkInvalidParallelSubscribers(ParallelFlowable<T> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] tss = new TestSubscriber[n + 1];\n        for (int i = 0; i <= n; i++) {\n            tss[i] = new TestSubscriber<Object>().withTag(\"\" + i);\n        }\n\n        source.subscribe(tss);\n\n        for (int i = 0; i <= n; i++) {\n            tss[i].assertFailure(IllegalArgumentException.class);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":2788,"groupId":"12160","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkInvalidParallelSubscribers","params":"(ParallelFlowable<T>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7b/7ebfac2ace1a1dbb252c52bf233d3ec1941abf.src","preCode":"    public static <T> void checkInvalidParallelSubscribers(ParallelFlowable<T> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] tss = new TestSubscriber[n + 1];\n        for (int i = 0; i <= n; i++) {\n            tss[i] = new TestSubscriber<Object>().withTag(\"\" + i);\n        }\n\n        source.subscribe(tss);\n\n        for (int i = 0; i <= n; i++) {\n            tss[i].assertFailure(IllegalArgumentException.class);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestHelper.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2774,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 00:28:01","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public static void checkSubscriberCount(ParallelFlowable<?> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] consumers = new TestSubscriber[n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i] = new TestSubscriber<Object>();\n        }\n\n        source.subscribe(consumers);\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i].awaitDone(5, TimeUnit.SECONDS)\n            .assertFailure(IllegalArgumentException.class);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1317,"groupId":"6400","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSubscriberCount","params":"(ParallelFlowable<?>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/40/afd9a5119b4093576f2258f63e1101a733cf01.src","preCode":"    public static void checkSubscriberCount(ParallelFlowable<?> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] consumers = new TestSubscriber[n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i] = new TestSubscriber<Object>();\n        }\n\n        source.subscribe(consumers);\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i].awaitDone(5, TimeUnit.SECONDS)\n            .assertFailure(IllegalArgumentException.class);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1301,"status":"N"},{"authorDate":"2019-12-18 00:28:01","commitOrder":2,"curCode":"    public static <T> void checkInvalidParallelSubscribers(ParallelFlowable<T> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] tss = new TestSubscriber[n + 1];\n        for (int i = 0; i <= n; i++) {\n            tss[i] = new TestSubscriber<>().withTag(\"\" + i);\n        }\n\n        source.subscribe(tss);\n\n        for (int i = 0; i <= n; i++) {\n            tss[i].assertFailure(IllegalArgumentException.class);\n        }\n    }\n","date":"2019-12-18 00:28:01","endLine":2793,"groupId":"10560","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkInvalidParallelSubscribers","params":"(ParallelFlowable<T>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/2a834650241d65ad859614076cf392a2685fa1.src","preCode":"    public static <T> void checkInvalidParallelSubscribers(ParallelFlowable<T> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] tss = new TestSubscriber[n + 1];\n        for (int i = 0; i <= n; i++) {\n            tss[i] = new TestSubscriber<Object>().withTag(\"\" + i);\n        }\n\n        source.subscribe(tss);\n\n        for (int i = 0; i <= n; i++) {\n            tss[i].assertFailure(IllegalArgumentException.class);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestHelper.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2779,"status":"M"}],"commitId":"735add2c25cb08f175ab3fc5af0270587fada083","commitMessage":"@@@3.x: [Java 8] Upgrade to Java 8.  add Flowable.fromX operators (#6765)\n\n* 3.x: [Java 8] Upgrade to Java 8.  add Flowable.fromX operators\n\n* Add NonNull annotation to the new fromX methods\n\n* Annotate return type argument to Flowable<@NonNull T>\n","date":"2019-12-18 00:28:01","modifiedFileCount":"7","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-18 00:28:01","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public static void checkSubscriberCount(ParallelFlowable<?> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] consumers = new TestSubscriber[n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i] = new TestSubscriber<>();\n        }\n\n        source.subscribe(consumers);\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i].awaitDone(5, TimeUnit.SECONDS)\n            .assertFailure(IllegalArgumentException.class);\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":1317,"groupId":"108416","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSubscriberCount","params":"(ParallelFlowable<?>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/048a1dcc6a49304641a16e579a6e1257a4b8a0.src","preCode":"    public static void checkSubscriberCount(ParallelFlowable<?> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] consumers = new TestSubscriber[n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i] = new TestSubscriber<Object>();\n        }\n\n        source.subscribe(consumers);\n\n        for (int i = 0; i <= n; i++) {\n            consumers[i].awaitDone(5, TimeUnit.SECONDS)\n            .assertFailure(IllegalArgumentException.class);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1301,"status":"M"},{"authorDate":"2019-12-18 00:28:01","commitOrder":3,"curCode":"    public static <T> void checkInvalidParallelSubscribers(ParallelFlowable<T> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] tss = new TestSubscriber[n + 1];\n        for (int i = 0; i <= n; i++) {\n            tss[i] = new TestSubscriber<>().withTag(\"\" + i);\n        }\n\n        source.subscribe(tss);\n\n        for (int i = 0; i <= n; i++) {\n            tss[i].assertFailure(IllegalArgumentException.class);\n        }\n    }\n","date":"2019-12-18 00:28:01","endLine":2793,"groupId":"108416","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkInvalidParallelSubscribers","params":"(ParallelFlowable<T>source)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/2a834650241d65ad859614076cf392a2685fa1.src","preCode":"    public static <T> void checkInvalidParallelSubscribers(ParallelFlowable<T> source) {\n        int n = source.parallelism();\n\n        @SuppressWarnings(\"unchecked\")\n        TestSubscriber<Object>[] tss = new TestSubscriber[n + 1];\n        for (int i = 0; i <= n; i++) {\n            tss[i] = new TestSubscriber<>().withTag(\"\" + i);\n        }\n\n        source.subscribe(tss);\n\n        for (int i = 0; i <= n; i++) {\n            tss[i].assertFailure(IllegalArgumentException.class);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestHelper.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2779,"status":"N"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
