[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void producerRequestThroughTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n                });\n            }\n\n        }).take(3).subscribe(ts);\n        assertEquals(Long.MAX_VALUE, requested.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":309,"groupId":"5382","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"producerRequestThroughTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7a/f0002bf7b2f0a51ec763510aa06861a392af7f.src","preCode":"    public void producerRequestThroughTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n                });\n            }\n\n        }).take(3).subscribe(ts);\n        assertEquals(Long.MAX_VALUE, requested.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void requestThroughTakeWhereRequestIsSmallerThanTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L);\n        ts.request(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.<Integer>unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n            }\n        }).take(10).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":362,"groupId":"5382","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"requestThroughTakeWhereRequestIsSmallerThanTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ed/3f8f4cdc830f7cbe617f6419cd4ccf3d659da6.src","preCode":"    public void requestThroughTakeWhereRequestIsSmallerThanTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L);\n        ts.request(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.<Integer>unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n            }\n        }).take(10).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-09-13 19:53:16","commitOrder":2,"curCode":"    public void producerRequestThroughTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n                });\n            }\n\n        }).take(3).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","date":"2019-09-13 19:53:16","endLine":330,"groupId":"5382","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"producerRequestThroughTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/85446438bbbf44ae03823230ee9def780a7fe8.src","preCode":"    public void producerRequestThroughTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n                });\n            }\n\n        }).take(3).subscribe(ts);\n        assertEquals(Long.MAX_VALUE, requested.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void requestThroughTakeWhereRequestIsSmallerThanTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L);\n        ts.request(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.<Integer>unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n            }\n        }).take(10).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":362,"groupId":"5382","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"requestThroughTakeWhereRequestIsSmallerThanTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ed/3f8f4cdc830f7cbe617f6419cd4ccf3d659da6.src","preCode":"    public void requestThroughTakeWhereRequestIsSmallerThanTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L);\n        ts.request(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.<Integer>unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n            }\n        }).take(10).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"N"}],"commitId":"0c50f0ab1bcfe9bdb1c8cd13ef1dc214c405e580","commitMessage":"@@@3.x: constrain upstream requests from take (#6569) (#6650)\n\n","date":"2019-09-13 19:53:16","modifiedFileCount":"13","status":"M","submitter":"Dave Moten"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void producerRequestThroughTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n                });\n            }\n\n        }).take(3).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":330,"groupId":"5382","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"producerRequestThroughTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/9ea0725d83defa2d0597c60bf1cdd78f4a3c09.src","preCode":"    public void producerRequestThroughTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n                });\n            }\n\n        }).take(3).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":3,"curCode":"    public void requestThroughTakeWhereRequestIsSmallerThanTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L);\n        ts.request(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.<Integer>unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n            }\n        }).take(10).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":362,"groupId":"5382","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"requestThroughTakeWhereRequestIsSmallerThanTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ed/3f8f4cdc830f7cbe617f6419cd4ccf3d659da6.src","preCode":"    public void requestThroughTakeWhereRequestIsSmallerThanTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L);\n        ts.request(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.<Integer>unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n            }\n        }).take(10).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"N"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void producerRequestThroughTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n                });\n            }\n\n        }).take(3).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":330,"groupId":"108781","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"producerRequestThroughTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/9ea0725d83defa2d0597c60bf1cdd78f4a3c09.src","preCode":"    public void producerRequestThroughTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n                });\n            }\n\n        }).take(3).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"N"},{"authorDate":"2019-12-22 19:17:37","commitOrder":4,"curCode":"    public void requestThroughTakeWhereRequestIsSmallerThanTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>(0L);\n        ts.request(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.<Integer>unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n            }\n        }).take(10).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","date":"2019-12-22 19:17:37","endLine":361,"groupId":"108781","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"requestThroughTakeWhereRequestIsSmallerThanTake","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2a/27aaada0843c23d4ddd60659a57d9ffa3656cb.src","preCode":"    public void requestThroughTakeWhereRequestIsSmallerThanTake() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(0L);\n        ts.request(3);\n        final AtomicLong requested = new AtomicLong();\n        Flowable.<Integer>unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> s) {\n                s.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        requested.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n            }\n        }).take(10).subscribe(ts);\n        assertEquals(3, requested.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
