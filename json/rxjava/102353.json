[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = ObjectHelper.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.dispose();\n                downstream.onComplete();\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":145,"groupId":"8239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onNext","params":"(Tt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d8/6b90395dba7fdc660c1162b733360097f8b66a.src","preCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = ObjectHelper.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.dispose();\n                downstream.onComplete();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = ObjectHelper.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                downstream.onComplete();\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":132,"groupId":"3624","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onNext","params":"(Tt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/d3df6e8e6c44c740225745c91e5d4a8d1f26d2.src","preCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = ObjectHelper.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                downstream.onComplete();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.dispose();\n                downstream.onComplete();\n            }\n        }\n","date":"2019-12-18 03:06:44","endLine":145,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onNext","params":"(Tt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d7/75c5851575c17531389814e18c2c64d8bdee99.src","preCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = ObjectHelper.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.dispose();\n                downstream.onComplete();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                downstream.onComplete();\n            }\n        }\n","date":"2019-12-18 03:06:44","endLine":132,"groupId":"3624","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onNext","params":"(Tt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a4/1c591fe2031c7743340d751f1d5e424647df59.src","preCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = ObjectHelper.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                downstream.onComplete();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-27 07:55:36","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":3,"curCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.dispose();\n                downstream.onComplete();\n            }\n        }\n","date":"2019-12-18 03:06:44","endLine":145,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onNext","params":"(Tt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d7/75c5851575c17531389814e18c2c64d8bdee99.src","preCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.dispose();\n                downstream.onComplete();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"},{"authorDate":"2019-12-27 07:55:36","commitOrder":3,"curCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                fail(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                fail(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                fail(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                downstream.onComplete();\n            }\n        }\n","date":"2019-12-27 07:55:36","endLine":132,"groupId":"5137","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onNext","params":"(Tt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/b9777a50ae9ad2ef20b5f82cc6590e98f82e0d.src","preCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                downstream.onComplete();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"a97d871ee7161fc9f4684d95cae3e94340cd0ccf","commitMessage":"@@@3.x: Add missing throwIfFatal calls (#6801)\n\n","date":"2019-12-27 07:55:36","modifiedFileCount":"21","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-27 07:55:36","codes":[{"authorDate":"2020-09-21 22:50:32","commitOrder":4,"curCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                fail(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                fail(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                fail(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.dispose();\n                downstream.onComplete();\n            }\n        }\n","date":"2020-09-21 22:50:32","endLine":145,"groupId":"102353","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"onNext","params":"(Tt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/881bdca38da0ef637e90cd6dc95cc2aa3167a4.src","preCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.dispose();\n                downstream.onComplete();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-12-27 07:55:36","commitOrder":4,"curCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                fail(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                fail(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                fail(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                downstream.onComplete();\n            }\n        }\n","date":"2019-12-27 07:55:36","endLine":132,"groupId":"102353","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"onNext","params":"(Tt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/b9777a50ae9ad2ef20b5f82cc6590e98f82e0d.src","preCode":"        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            U u;\n\n            try {\n                u = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n            } catch (Throwable e) {\n                fail(e);\n                return;\n            }\n\n            V v;\n            try {\n                v = Objects.requireNonNull(zipper.apply(t, u), \"The zipper function returned a null value\");\n            } catch (Throwable e) {\n                fail(e);\n                return;\n            }\n\n            downstream.onNext(v);\n\n            boolean b;\n\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                fail(e);\n                return;\n            }\n\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                downstream.onComplete();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"fe71f6a22847429163704e076e8447c674ee7571","commitMessage":"@@@s/error/fail/ (#7080)\n\n","date":"2020-09-21 22:50:32","modifiedFileCount":"1","status":"M","submitter":"Tasuku Nakagawa"}]
