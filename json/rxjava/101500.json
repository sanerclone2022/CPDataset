[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mergeArrayDelayError() {\n        Maybe.mergeArrayDelayError(Maybe.empty(), Maybe.just(1), Maybe.error(new TestException()))\n        .test()\n        .assertFailure(TestException.class, 1);\n\n        Maybe.mergeArrayDelayError(Maybe.error(new TestException()), Maybe.empty(), Maybe.just(1))\n        .test()\n        .assertFailure(TestException.class, 1);\n\n        assertSame(Flowable.empty(), Maybe.mergeArrayDelayError());\n    }\n","date":"2019-08-16 20:51:17","endLine":2639,"groupId":"12851","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeArrayDelayError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/37/96f365c087eca27d566896acdb45355bbc4fc4.src","preCode":"    public void mergeArrayDelayError() {\n        Maybe.mergeArrayDelayError(Maybe.empty(), Maybe.just(1), Maybe.error(new TestException()))\n        .test()\n        .assertFailure(TestException.class, 1);\n\n        Maybe.mergeArrayDelayError(Maybe.error(new TestException()), Maybe.empty(), Maybe.just(1))\n        .test()\n        .assertFailure(TestException.class, 1);\n\n        assertSame(Flowable.empty(), Maybe.mergeArrayDelayError());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/maybe/MaybeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2629,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mergeDelayError4() {\n        Maybe.mergeDelayError(Maybe.just(1), Maybe.error(new TestException()), Maybe.just(2), Maybe.just(3))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n\n        Maybe.mergeDelayError(Maybe.error(new TestException()), Maybe.just(1), Maybe.just(2), Maybe.just(3))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n\n        Maybe.mergeDelayError(Maybe.just(1), Maybe.just(2), Maybe.just(3), Maybe.error(new TestException()))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n    }\n","date":"2019-08-16 20:51:17","endLine":2703,"groupId":"12851","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mergeDelayError4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/37/96f365c087eca27d566896acdb45355bbc4fc4.src","preCode":"    public void mergeDelayError4() {\n        Maybe.mergeDelayError(Maybe.just(1), Maybe.error(new TestException()), Maybe.just(2), Maybe.just(3))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n\n        Maybe.mergeDelayError(Maybe.error(new TestException()), Maybe.just(1), Maybe.just(2), Maybe.just(3))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n\n        Maybe.mergeDelayError(Maybe.just(1), Maybe.just(2), Maybe.just(3), Maybe.error(new TestException()))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/maybe/MaybeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2691,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2020-01-28 22:59:54","commitOrder":2,"curCode":"    public void mergeArrayDelayError() {\n        Maybe.mergeArrayDelayError(Maybe.empty(), Maybe.just(1), Maybe.error(new TestException()))\n        .test()\n        .assertFailure(TestException.class, 1);\n\n        Maybe.mergeArrayDelayError(Maybe.error(new TestException()), Maybe.empty(), Maybe.just(1))\n        .test()\n        .assertFailure(TestException.class, 1);\n    }\n","date":"2020-01-28 22:59:54","endLine":2517,"groupId":"101500","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeArrayDelayError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/40/1bdcc918e36dce4fe969050d076ddd374f7288.src","preCode":"    public void mergeArrayDelayError() {\n        Maybe.mergeArrayDelayError(Maybe.empty(), Maybe.just(1), Maybe.error(new TestException()))\n        .test()\n        .assertFailure(TestException.class, 1);\n\n        Maybe.mergeArrayDelayError(Maybe.error(new TestException()), Maybe.empty(), Maybe.just(1))\n        .test()\n        .assertFailure(TestException.class, 1);\n\n        assertSame(Flowable.empty(), Maybe.mergeArrayDelayError());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/maybe/MaybeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2509,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void mergeDelayError4() {\n        Maybe.mergeDelayError(Maybe.just(1), Maybe.error(new TestException()), Maybe.just(2), Maybe.just(3))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n\n        Maybe.mergeDelayError(Maybe.error(new TestException()), Maybe.just(1), Maybe.just(2), Maybe.just(3))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n\n        Maybe.mergeDelayError(Maybe.just(1), Maybe.just(2), Maybe.just(3), Maybe.error(new TestException()))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n    }\n","date":"2019-08-16 20:51:17","endLine":2703,"groupId":"101500","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mergeDelayError4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/37/96f365c087eca27d566896acdb45355bbc4fc4.src","preCode":"    public void mergeDelayError4() {\n        Maybe.mergeDelayError(Maybe.just(1), Maybe.error(new TestException()), Maybe.just(2), Maybe.just(3))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n\n        Maybe.mergeDelayError(Maybe.error(new TestException()), Maybe.just(1), Maybe.just(2), Maybe.just(3))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n\n        Maybe.mergeDelayError(Maybe.just(1), Maybe.just(2), Maybe.just(3), Maybe.error(new TestException()))\n        .test()\n        .assertFailure(TestException.class, 1, 2, 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/maybe/MaybeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2691,"status":"N"}],"commitId":"1ede60786a1a8f00f1fb3968d0701a323ed86f2f","commitMessage":"@@@3.x: Use more appropriate operators when delegating to Flowable ops (#6888)\n\n* 3.x: Use more appropriate operators when delegating to Flowable ops\n\n* Remove now-unused classes\n","date":"2020-01-28 22:59:54","modifiedFileCount":"6","status":"M","submitter":"David Karnok"}]
