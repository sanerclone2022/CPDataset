[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorSubject.createDefault(1)\n            .window(BehaviorSubject.createDefault(1), new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer f) throws Exception {\n                    return new Observable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Observer<? super Integer> observer) {\n                            observer.onSubscribe(Disposables.empty());\n                            observer.onNext(1);\n                            observer.onNext(2);\n                            observer.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":377,"groupId":"11496","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"windowCloseIngoresCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/90/732ddf1e7255e40562819eb3f1f77dbc4a650f.src","preCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorSubject.createDefault(1)\n            .window(BehaviorSubject.createDefault(1), new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer f) throws Exception {\n                    return new Observable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Observer<? super Integer> observer) {\n                            observer.onSubscribe(Disposables.empty());\n                            observer.onNext(1);\n                            observer.onNext(2);\n                            observer.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorProcessor.createDefault(1)\n            .window(BehaviorProcessor.createDefault(1), new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer f) throws Exception {\n                    return new Flowable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Subscriber<? super Integer> s) {\n                            s.onSubscribe(new BooleanSubscription());\n                            s.onNext(1);\n                            s.onNext(2);\n                            s.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":384,"groupId":"8784","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"windowCloseIngoresCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3a/76a4c7a8f2a96d3c50c50b4442fd78f75290ac.src","preCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorProcessor.createDefault(1)\n            .window(BehaviorProcessor.createDefault(1), new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer f) throws Exception {\n                    return new Flowable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Subscriber<? super Integer> s) {\n                            s.onSubscribe(new BooleanSubscription());\n                            s.onNext(1);\n                            s.onNext(2);\n                            s.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-17 17:19:08","codes":[{"authorDate":"2019-12-17 17:19:08","commitOrder":2,"curCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorSubject.createDefault(1)\n            .window(BehaviorSubject.createDefault(1), new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer f) throws Exception {\n                    return new Observable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Observer<? super Integer> observer) {\n                            observer.onSubscribe(Disposables.empty());\n                            observer.onNext(1);\n                            observer.onNext(2);\n                            observer.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .doOnNext(new Consumer<Observable<Integer>>() {\n                @Override\n                public void accept(Observable<Integer> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-17 17:19:08","endLine":397,"groupId":"11496","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"windowCloseIngoresCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/02116cd99ec3143950dad11fdbb8d47529deff.src","preCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorSubject.createDefault(1)\n            .window(BehaviorSubject.createDefault(1), new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer f) throws Exception {\n                    return new Observable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Observer<? super Integer> observer) {\n                            observer.onSubscribe(Disposables.empty());\n                            observer.onNext(1);\n                            observer.onNext(2);\n                            observer.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"M"},{"authorDate":"2019-12-17 17:19:08","commitOrder":2,"curCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorProcessor.createDefault(1)\n            .window(BehaviorProcessor.createDefault(1), new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer f) throws Exception {\n                    return new Flowable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Subscriber<? super Integer> s) {\n                            s.onSubscribe(new BooleanSubscription());\n                            s.onNext(1);\n                            s.onNext(2);\n                            s.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Integer>>() {\n                @Override\n                public void accept(Flowable<Integer> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-17 17:19:08","endLine":394,"groupId":"8784","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"windowCloseIngoresCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/94/20794dc530f13e557b64a0bbafffaa551f352c.src","preCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorProcessor.createDefault(1)\n            .window(BehaviorProcessor.createDefault(1), new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer f) throws Exception {\n                    return new Flowable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Subscriber<? super Integer> s) {\n                            s.onSubscribe(new BooleanSubscription());\n                            s.onNext(1);\n                            s.onNext(2);\n                            s.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"f96821f14c91752d323877a7874f480fd6b02f12","commitMessage":"@@@3.x: Fix window (boundary.  start/end) cancel and abandonment (#6762)\n\n","date":"2019-12-17 17:19:08","modifiedFileCount":"12","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-17 17:19:08","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorSubject.createDefault(1)\n            .window(BehaviorSubject.createDefault(1), new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer f) throws Exception {\n                    return new Observable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Observer<? super Integer> observer) {\n                            observer.onSubscribe(Disposable.empty());\n                            observer.onNext(1);\n                            observer.onNext(2);\n                            observer.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .doOnNext(new Consumer<Observable<Integer>>() {\n                @Override\n                public void accept(Observable<Integer> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":397,"groupId":"102048","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"windowCloseIngoresCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d3/466c7eb436329d5c677578d5ea05599a26ec69.src","preCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorSubject.createDefault(1)\n            .window(BehaviorSubject.createDefault(1), new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer f) throws Exception {\n                    return new Observable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Observer<? super Integer> observer) {\n                            observer.onSubscribe(Disposables.empty());\n                            observer.onNext(1);\n                            observer.onNext(2);\n                            observer.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .doOnNext(new Consumer<Observable<Integer>>() {\n                @Override\n                public void accept(Observable<Integer> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"M"},{"authorDate":"2019-12-17 17:19:08","commitOrder":3,"curCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorProcessor.createDefault(1)\n            .window(BehaviorProcessor.createDefault(1), new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer f) throws Exception {\n                    return new Flowable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Subscriber<? super Integer> s) {\n                            s.onSubscribe(new BooleanSubscription());\n                            s.onNext(1);\n                            s.onNext(2);\n                            s.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Integer>>() {\n                @Override\n                public void accept(Flowable<Integer> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-17 17:19:08","endLine":394,"groupId":"102048","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"windowCloseIngoresCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/94/20794dc530f13e557b64a0bbafffaa551f352c.src","preCode":"    public void windowCloseIngoresCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            BehaviorProcessor.createDefault(1)\n            .window(BehaviorProcessor.createDefault(1), new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer f) throws Exception {\n                    return new Flowable<Integer>() {\n                        @Override\n                        protected void subscribeActual(\n                                Subscriber<? super Integer> s) {\n                            s.onSubscribe(new BooleanSubscription());\n                            s.onNext(1);\n                            s.onNext(2);\n                            s.onError(new TestException());\n                        }\n                    };\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Integer>>() {\n                @Override\n                public void accept(Flowable<Integer> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .test()\n            .assertValueCount(1)\n            .assertNoErrors()\n            .assertNotComplete();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
