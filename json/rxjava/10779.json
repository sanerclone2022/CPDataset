[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n\n            rso.onSubscribe(Disposables.empty());\n\n            Disposable d = Disposables.empty();\n\n            rso.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, rso.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(rso.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":186,"groupId":"10638","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1a/dd001b6301b39356f6851e9cc008eca0fc0e57.src","preCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n\n            rso.onSubscribe(Disposables.empty());\n\n            Disposable d = Disposables.empty();\n\n            rso.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, rso.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(rso.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/ResourceSingleObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void dispose() {\n        TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n        rso.dispose();\n\n        Disposable d = Disposables.empty();\n\n        rso.onSubscribe(d);\n\n        assertTrue(d.isDisposed());\n\n        assertEquals(0, rso.start);\n    }\n","date":"2019-08-16 20:51:17","endLine":200,"groupId":"2030","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"dispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1a/dd001b6301b39356f6851e9cc008eca0fc0e57.src","preCode":"    public void dispose() {\n        TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n        rso.dispose();\n\n        Disposable d = Disposables.empty();\n\n        rso.onSubscribe(d);\n\n        assertTrue(d.isDisposed());\n\n        assertEquals(0, rso.start);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/ResourceSingleObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n\n            rso.onSubscribe(Disposable.empty());\n\n            Disposable d = Disposable.empty();\n\n            rso.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, rso.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(rso.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":186,"groupId":"6457","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/05/4f189bc5f0e2abeb0618aa11bc6ff3f86f828e.src","preCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n\n            rso.onSubscribe(Disposables.empty());\n\n            Disposable d = Disposables.empty();\n\n            rso.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, rso.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(rso.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/ResourceSingleObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void dispose() {\n        TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n        rso.dispose();\n\n        Disposable d = Disposable.empty();\n\n        rso.onSubscribe(d);\n\n        assertTrue(d.isDisposed());\n\n        assertEquals(0, rso.start);\n    }\n","date":"2019-12-20 02:39:40","endLine":200,"groupId":"6458","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"dispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/05/4f189bc5f0e2abeb0618aa11bc6ff3f86f828e.src","preCode":"    public void dispose() {\n        TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n        rso.dispose();\n\n        Disposable d = Disposables.empty();\n\n        rso.onSubscribe(d);\n\n        assertTrue(d.isDisposed());\n\n        assertEquals(0, rso.start);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/ResourceSingleObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<>();\n\n            rso.onSubscribe(Disposable.empty());\n\n            Disposable d = Disposable.empty();\n\n            rso.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, rso.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(rso.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":186,"groupId":"10779","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b7/20931088f45cbb9fa71d0b15c233a46bbb03fc.src","preCode":"    public void startOnce() {\n\n        List<Throwable> error = TestHelper.trackPluginErrors();\n\n        try {\n            TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n\n            rso.onSubscribe(Disposable.empty());\n\n            Disposable d = Disposable.empty();\n\n            rso.onSubscribe(d);\n\n            assertTrue(d.isDisposed());\n\n            assertEquals(1, rso.start);\n\n            TestHelper.assertError(error, 0, IllegalStateException.class, EndConsumerHelper.composeMessage(rso.getClass().getName()));\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/ResourceSingleObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void dispose() {\n        TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<>();\n        rso.dispose();\n\n        Disposable d = Disposable.empty();\n\n        rso.onSubscribe(d);\n\n        assertTrue(d.isDisposed());\n\n        assertEquals(0, rso.start);\n    }\n","date":"2019-12-22 19:17:37","endLine":200,"groupId":"10779","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"dispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b7/20931088f45cbb9fa71d0b15c233a46bbb03fc.src","preCode":"    public void dispose() {\n        TestResourceSingleObserver<Integer> rso = new TestResourceSingleObserver<Integer>();\n        rso.dispose();\n\n        Disposable d = Disposable.empty();\n\n        rso.onSubscribe(d);\n\n        assertTrue(d.isDisposed());\n\n        assertEquals(0, rso.start);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/ResourceSingleObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
