[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Observable<Long> interval = Observable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<Long>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<Long>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<Long>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","date":"2019-08-16 20:51:17","endLine":444,"groupId":"11502","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"refCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/747c480a90d6b4b716b7ce66cfb96d52316ec7.src","preCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Observable<Long> interval = Observable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<Long>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<Long>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<Long>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Flowable<Long> interval = Flowable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<Long>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<Long>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<Long>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","date":"2019-08-16 20:51:17","endLine":463,"groupId":"11502","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"refCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/b38ff272c5ac364c7d2bea65b54206088a6700.src","preCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Flowable<Long> interval = Flowable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<Long>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<Long>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<Long>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Observable<Long> interval = Observable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<Long>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<Long>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<Long>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","date":"2019-08-16 20:51:17","endLine":444,"groupId":"11502","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"refCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/747c480a90d6b4b716b7ce66cfb96d52316ec7.src","preCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Observable<Long> interval = Observable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<Long>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<Long>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<Long>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Flowable<Long> interval = Flowable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","date":"2019-12-22 18:39:23","endLine":463,"groupId":"11502","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"refCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/9409ed1b42179daaf4a95577464551fd0383e0.src","preCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Flowable<Long> interval = Flowable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<Long>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<Long>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<Long>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Observable<Long> interval = Observable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","date":"2019-12-22 18:59:44","endLine":444,"groupId":"103281","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"refCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d9/b98de8f9a21c077c76ae73d0336fd4963c589f.src","preCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Observable<Long> interval = Observable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<Long>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<Long>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<Long>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Flowable<Long> interval = Flowable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","date":"2019-12-22 18:39:23","endLine":463,"groupId":"103281","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"refCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/9409ed1b42179daaf4a95577464551fd0383e0.src","preCode":"    public void refCount() {\n        TestScheduler s = new TestScheduler();\n        Flowable<Long> interval = Flowable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();\n\n        \r\n        final List<Long> list1 = new ArrayList<>();\n        Disposable d1 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list1.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list1.size());\n        assertEquals(0L, list1.get(0).longValue());\n        assertEquals(1L, list1.get(1).longValue());\n\n        \r\n        final List<Long> list2 = new ArrayList<>();\n        Disposable d2 = interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list2.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n        assertEquals(2L, list1.get(2).longValue());\n        assertEquals(3L, list1.get(3).longValue());\n        assertEquals(4L, list1.get(4).longValue());\n\n        \r\n        assertEquals(3, list2.size());\n        assertEquals(2L, list2.get(0).longValue());\n        assertEquals(3L, list2.get(1).longValue());\n        assertEquals(4L, list2.get(2).longValue());\n\n        \r\n        d1.dispose();\n\n        \r\n        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);\n\n        \r\n        assertEquals(5, list1.size());\n\n        \r\n        assertEquals(6, list2.size());\n        assertEquals(5L, list2.get(3).longValue());\n        assertEquals(6L, list2.get(4).longValue());\n        assertEquals(7L, list2.get(5).longValue());\n\n        \r\n        d2.dispose();\n\n        \r\n        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);\n\n        \r\n        \r\n        final List<Long> list3 = new ArrayList<>();\n        interval.subscribe(new Consumer<Long>() {\n            @Override\n            public void accept(Long t1) {\n                list3.add(t1);\n            }\n        });\n\n        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);\n\n        assertEquals(2, list3.size());\n        assertEquals(0L, list3.get(0).longValue());\n        assertEquals(1L, list3.get(1).longValue());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
