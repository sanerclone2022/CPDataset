[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    private static <K, V> Map<K, Collection<V>> toMap(Observable<GroupedObservable<K, V>> observable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        observable.blockingForEach(new Consumer<GroupedObservable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedObservable<K, V> o) {\n                result.put(o.getKey(), new ConcurrentLinkedQueue<V>());\n                o.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(o.getKey()).add(v);\n                    }\n\n                });\n            }\n        });\n\n        return result;\n    }\n","date":"2019-08-16 20:51:17","endLine":170,"groupId":"8320","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toMap","params":"(Observable<GroupedObservable<K@V>>observable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    private static <K, V> Map<K, Collection<V>> toMap(Observable<GroupedObservable<K, V>> observable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        observable.blockingForEach(new Consumer<GroupedObservable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedObservable<K, V> o) {\n                result.put(o.getKey(), new ConcurrentLinkedQueue<V>());\n                o.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(o.getKey()).add(v);\n                    }\n\n                });\n            }\n        });\n\n        return result;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    private static <K, V> Map<K, Collection<V>> toMap(Flowable<GroupedFlowable<K, V>> flowable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        flowable.blockingForEach(new Consumer<GroupedFlowable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedFlowable<K, V> f) {\n                result.put(f.getKey(), new ConcurrentLinkedQueue<V>());\n                f.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(f.getKey()).add(v);\n                    }\n\n                });\n            }\n        });\n\n        return result;\n    }\n","date":"2019-08-16 20:51:17","endLine":177,"groupId":"9806","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toMap","params":"(Flowable<GroupedFlowable<K@V>>flowable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    private static <K, V> Map<K, Collection<V>> toMap(Flowable<GroupedFlowable<K, V>> flowable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        flowable.blockingForEach(new Consumer<GroupedFlowable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedFlowable<K, V> f) {\n                result.put(f.getKey(), new ConcurrentLinkedQueue<V>());\n                f.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(f.getKey()).add(v);\n                    }\n\n                });\n            }\n        });\n\n        return result;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-29 22:33:11","codes":[{"authorDate":"2019-08-29 22:33:11","commitOrder":2,"curCode":"    private static <K, V> Map<K, Collection<V>> toMap(Observable<GroupedObservable<K, V>> observable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        observable.doOnNext(new Consumer<GroupedObservable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedObservable<K, V> o) {\n                result.put(o.getKey(), new ConcurrentLinkedQueue<V>());\n                o.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(o.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","date":"2019-08-29 22:33:11","endLine":170,"groupId":"8320","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toMap","params":"(Observable<GroupedObservable<K@V>>observable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/99/698d18c2dffa208ed9bd6447a7f2a3c6a5ac65.src","preCode":"    private static <K, V> Map<K, Collection<V>> toMap(Observable<GroupedObservable<K, V>> observable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        observable.blockingForEach(new Consumer<GroupedObservable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedObservable<K, V> o) {\n                result.put(o.getKey(), new ConcurrentLinkedQueue<V>());\n                o.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(o.getKey()).add(v);\n                    }\n\n                });\n            }\n        });\n\n        return result;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2019-08-29 22:33:11","commitOrder":2,"curCode":"    private static <K, V> Map<K, Collection<V>> toMap(Flowable<GroupedFlowable<K, V>> flowable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        flowable.doOnNext(new Consumer<GroupedFlowable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedFlowable<K, V> f) {\n                result.put(f.getKey(), new ConcurrentLinkedQueue<V>());\n                f.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(f.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","date":"2019-08-29 22:33:11","endLine":177,"groupId":"9806","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toMap","params":"(Flowable<GroupedFlowable<K@V>>flowable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7f/eaab715c5a31bb39ac8c821bc1b1ae92e378b7.src","preCode":"    private static <K, V> Map<K, Collection<V>> toMap(Flowable<GroupedFlowable<K, V>> flowable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        flowable.blockingForEach(new Consumer<GroupedFlowable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedFlowable<K, V> f) {\n                result.put(f.getKey(), new ConcurrentLinkedQueue<V>());\n                f.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(f.getKey()).add(v);\n                    }\n\n                });\n            }\n        });\n\n        return result;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"9a36930bff81770c98b5babe58621fd8e49dba2d","commitMessage":"@@@3.x: Fix groupBy not canceling upstream due to group abandonment (#6642)\n\n* 3.x: Fix groupBy not canceling upstream due to group abandonment\n\n* Add codecov retry on connection refused\n\n* Retry connrefused\n\n* Connrefused not supported?\n","date":"2019-08-29 22:33:11","modifiedFileCount":"7","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-29 22:33:11","commitOrder":3,"curCode":"    private static <K, V> Map<K, Collection<V>> toMap(Observable<GroupedObservable<K, V>> observable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        observable.doOnNext(new Consumer<GroupedObservable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedObservable<K, V> o) {\n                result.put(o.getKey(), new ConcurrentLinkedQueue<V>());\n                o.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(o.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","date":"2019-08-29 22:33:11","endLine":170,"groupId":"8320","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toMap","params":"(Observable<GroupedObservable<K@V>>observable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/99/698d18c2dffa208ed9bd6447a7f2a3c6a5ac65.src","preCode":"    private static <K, V> Map<K, Collection<V>> toMap(Observable<GroupedObservable<K, V>> observable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        observable.doOnNext(new Consumer<GroupedObservable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedObservable<K, V> o) {\n                result.put(o.getKey(), new ConcurrentLinkedQueue<V>());\n                o.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(o.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    private static <K, V> Map<K, Collection<V>> toMap(Flowable<GroupedFlowable<K, V>> flowable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<>();\n\n        flowable.doOnNext(new Consumer<GroupedFlowable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedFlowable<K, V> f) {\n                result.put(f.getKey(), new ConcurrentLinkedQueue<>());\n                f.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(f.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","date":"2019-12-22 18:39:23","endLine":178,"groupId":"9806","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toMap","params":"(Flowable<GroupedFlowable<K@V>>flowable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    private static <K, V> Map<K, Collection<V>> toMap(Flowable<GroupedFlowable<K, V>> flowable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        flowable.doOnNext(new Consumer<GroupedFlowable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedFlowable<K, V> f) {\n                result.put(f.getKey(), new ConcurrentLinkedQueue<V>());\n                f.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(f.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    private static <K, V> Map<K, Collection<V>> toMap(Observable<GroupedObservable<K, V>> observable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<>();\n\n        observable.doOnNext(new Consumer<GroupedObservable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedObservable<K, V> o) {\n                result.put(o.getKey(), new ConcurrentLinkedQueue<>());\n                o.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(o.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","date":"2019-12-22 18:59:44","endLine":170,"groupId":"102875","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"toMap","params":"(Observable<GroupedObservable<K@V>>observable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/d3f2d6432c67ffdd0df5bbb6960b138ae6f15a.src","preCode":"    private static <K, V> Map<K, Collection<V>> toMap(Observable<GroupedObservable<K, V>> observable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<K, Collection<V>>();\n\n        observable.doOnNext(new Consumer<GroupedObservable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedObservable<K, V> o) {\n                result.put(o.getKey(), new ConcurrentLinkedQueue<V>());\n                o.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(o.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    private static <K, V> Map<K, Collection<V>> toMap(Flowable<GroupedFlowable<K, V>> flowable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<>();\n\n        flowable.doOnNext(new Consumer<GroupedFlowable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedFlowable<K, V> f) {\n                result.put(f.getKey(), new ConcurrentLinkedQueue<>());\n                f.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(f.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","date":"2019-12-22 18:39:23","endLine":178,"groupId":"102875","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"toMap","params":"(Flowable<GroupedFlowable<K@V>>flowable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    private static <K, V> Map<K, Collection<V>> toMap(Flowable<GroupedFlowable<K, V>> flowable) {\n\n        final ConcurrentHashMap<K, Collection<V>> result = new ConcurrentHashMap<>();\n\n        flowable.doOnNext(new Consumer<GroupedFlowable<K, V>>() {\n\n            @Override\n            public void accept(final GroupedFlowable<K, V> f) {\n                result.put(f.getKey(), new ConcurrentLinkedQueue<>());\n                f.subscribe(new Consumer<V>() {\n\n                    @Override\n                    public void accept(V v) {\n                        result.get(f.getKey()).add(v);\n                    }\n\n                });\n            }\n        }).blockingSubscribe();\n\n        return result;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
