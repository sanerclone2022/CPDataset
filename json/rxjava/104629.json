[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void windowUnsubscribeOverlappingAsyncSource() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        final AtomicInteger count = new AtomicInteger();\n        Observable.merge(Observable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5, 4)\n                .take(2), 128)\n                .subscribe(to);\n\n        to.awaitDone(500, TimeUnit.MILLISECONDS);\n        to.assertTerminated();\n        to.assertValues(1, 2, 3, 4, 5, 5, 6, 7, 8, 9);\n        \r\n        \r\n    }\n","date":"2019-08-16 20:51:17","endLine":208,"groupId":"10252","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"windowUnsubscribeOverlappingAsyncSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e9/0d46bd36fd5319edf39e39b9dca05edcf9a66d.src","preCode":"    public void windowUnsubscribeOverlappingAsyncSource() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        final AtomicInteger count = new AtomicInteger();\n        Observable.merge(Observable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5, 4)\n                .take(2), 128)\n                .subscribe(to);\n\n        to.awaitDone(500, TimeUnit.MILLISECONDS);\n        to.assertTerminated();\n        to.assertValues(1, 2, 3, 4, 5, 5, 6, 7, 8, 9);\n        \r\n        \r\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithSizeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void windowUnsubscribeNonOverlappingAsyncSource() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n        final AtomicInteger count = new AtomicInteger();\n        Flowable.merge(Flowable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5)\n                .take(2))\n                .subscribe(ts);\n        ts.awaitDone(500, TimeUnit.MILLISECONDS);\n        ts.assertTerminated();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        \r\n        assertTrue(count.get() < 100000);\n    }\n","date":"2019-08-16 20:51:17","endLine":152,"groupId":"12031","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"windowUnsubscribeNonOverlappingAsyncSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/27/eefd437dfe35d7ee1dffe686ecdcd4214dc971.src","preCode":"    public void windowUnsubscribeNonOverlappingAsyncSource() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n        final AtomicInteger count = new AtomicInteger();\n        Flowable.merge(Flowable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5)\n                .take(2))\n                .subscribe(ts);\n        ts.awaitDone(500, TimeUnit.MILLISECONDS);\n        ts.assertTerminated();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        \r\n        assertTrue(count.get() < 100000);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithSizeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void windowUnsubscribeOverlappingAsyncSource() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        final AtomicInteger count = new AtomicInteger();\n        Observable.merge(Observable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5, 4)\n                .take(2), 128)\n                .subscribe(to);\n\n        to.awaitDone(500, TimeUnit.MILLISECONDS);\n        to.assertTerminated();\n        to.assertValues(1, 2, 3, 4, 5, 5, 6, 7, 8, 9);\n        \r\n        \r\n    }\n","date":"2019-08-16 20:51:17","endLine":208,"groupId":"10252","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"windowUnsubscribeOverlappingAsyncSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e9/0d46bd36fd5319edf39e39b9dca05edcf9a66d.src","preCode":"    public void windowUnsubscribeOverlappingAsyncSource() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        final AtomicInteger count = new AtomicInteger();\n        Observable.merge(Observable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5, 4)\n                .take(2), 128)\n                .subscribe(to);\n\n        to.awaitDone(500, TimeUnit.MILLISECONDS);\n        to.assertTerminated();\n        to.assertValues(1, 2, 3, 4, 5, 5, 6, 7, 8, 9);\n        \r\n        \r\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithSizeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void windowUnsubscribeNonOverlappingAsyncSource() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n        final AtomicInteger count = new AtomicInteger();\n        Flowable.merge(Flowable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5)\n                .take(2))\n                .subscribe(ts);\n        ts.awaitDone(500, TimeUnit.MILLISECONDS);\n        ts.assertTerminated();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        \r\n        assertTrue(count.get() < 100000);\n    }\n","date":"2019-12-22 18:39:23","endLine":144,"groupId":"12031","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"windowUnsubscribeNonOverlappingAsyncSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e9/a7c77518366652a30ab2add229b9304840ccfa.src","preCode":"    public void windowUnsubscribeNonOverlappingAsyncSource() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n        final AtomicInteger count = new AtomicInteger();\n        Flowable.merge(Flowable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5)\n                .take(2))\n                .subscribe(ts);\n        ts.awaitDone(500, TimeUnit.MILLISECONDS);\n        ts.assertTerminated();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        \r\n        assertTrue(count.get() < 100000);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithSizeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void windowUnsubscribeOverlappingAsyncSource() {\n        TestObserverEx<Integer> to = new TestObserverEx<>();\n\n        final AtomicInteger count = new AtomicInteger();\n        Observable.merge(Observable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5, 4)\n                .take(2), 128)\n                .subscribe(to);\n\n        to.awaitDone(500, TimeUnit.MILLISECONDS);\n        to.assertTerminated();\n        to.assertValues(1, 2, 3, 4, 5, 5, 6, 7, 8, 9);\n        \r\n        \r\n    }\n","date":"2019-12-22 18:59:44","endLine":208,"groupId":"104629","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"windowUnsubscribeOverlappingAsyncSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a8/97430ab78e14c0487ada074a5bce46baf3ed07.src","preCode":"    public void windowUnsubscribeOverlappingAsyncSource() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        final AtomicInteger count = new AtomicInteger();\n        Observable.merge(Observable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5, 4)\n                .take(2), 128)\n                .subscribe(to);\n\n        to.awaitDone(500, TimeUnit.MILLISECONDS);\n        to.assertTerminated();\n        to.assertValues(1, 2, 3, 4, 5, 5, 6, 7, 8, 9);\n        \r\n        \r\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithSizeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void windowUnsubscribeNonOverlappingAsyncSource() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n        final AtomicInteger count = new AtomicInteger();\n        Flowable.merge(Flowable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5)\n                .take(2))\n                .subscribe(ts);\n        ts.awaitDone(500, TimeUnit.MILLISECONDS);\n        ts.assertTerminated();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        \r\n        assertTrue(count.get() < 100000);\n    }\n","date":"2019-12-22 18:39:23","endLine":144,"groupId":"104629","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"windowUnsubscribeNonOverlappingAsyncSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e9/a7c77518366652a30ab2add229b9304840ccfa.src","preCode":"    public void windowUnsubscribeNonOverlappingAsyncSource() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n        final AtomicInteger count = new AtomicInteger();\n        Flowable.merge(Flowable.range(1, 100000)\n                .doOnNext(new Consumer<Integer>() {\n\n                    @Override\n                    public void accept(Integer t1) {\n                        count.incrementAndGet();\n                    }\n\n                })\n                .observeOn(Schedulers.computation())\n                .window(5)\n                .take(2))\n                .subscribe(ts);\n        ts.awaitDone(500, TimeUnit.MILLISECONDS);\n        ts.assertTerminated();\n        ts.assertValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        \r\n        assertTrue(count.get() < 100000);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithSizeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
