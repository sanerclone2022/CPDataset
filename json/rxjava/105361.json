[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    observer.onError(new TestException(\"First\"));\n                    observer.onNext(1);\n                    observer.onError(new TestException(\"Second\"));\n                    observer.onComplete();\n                }\n            }.replay()\n            .autoConnect()\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1250,"groupId":"3886","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"badSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5e/f40f340cc789b5d31ea1238c6bfc5bcc8b38f4.src","preCode":"    public void badSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    observer.onError(new TestException(\"First\"));\n                    observer.onNext(1);\n                    observer.onError(new TestException(\"Second\"));\n                    observer.onComplete();\n                }\n            }.replay()\n            .autoConnect()\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1229,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Integer>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    subscriber.onError(new TestException(\"First\"));\n                    subscriber.onNext(1);\n                    subscriber.onError(new TestException(\"Second\"));\n                    subscriber.onComplete();\n                }\n            }.replay()\n            .autoConnect()\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1406,"groupId":"3886","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"badSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d1/7526e47b1a0bf164ed6e2248c17db718d21651.src","preCode":"    public void badSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Integer>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    subscriber.onError(new TestException(\"First\"));\n                    subscriber.onNext(1);\n                    subscriber.onError(new TestException(\"Second\"));\n                    subscriber.onComplete();\n                }\n            }.replay()\n            .autoConnect()\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1385,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void badSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposable.empty());\n                    observer.onError(new TestException(\"First\"));\n                    observer.onNext(1);\n                    observer.onError(new TestException(\"Second\"));\n                    observer.onComplete();\n                }\n            }.replay()\n            .autoConnect()\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":1250,"groupId":"105361","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"badSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e5/5d5ff71657eaa48fef4ffeb9009ebcf87ea654.src","preCode":"    public void badSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    observer.onError(new TestException(\"First\"));\n                    observer.onNext(1);\n                    observer.onError(new TestException(\"Second\"));\n                    observer.onComplete();\n                }\n            }.replay()\n            .autoConnect()\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1229,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void badSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Integer>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    subscriber.onError(new TestException(\"First\"));\n                    subscriber.onNext(1);\n                    subscriber.onError(new TestException(\"Second\"));\n                    subscriber.onComplete();\n                }\n            }.replay()\n            .autoConnect()\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1406,"groupId":"105361","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"badSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d1/7526e47b1a0bf164ed6e2248c17db718d21651.src","preCode":"    public void badSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Integer>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    subscriber.onError(new TestException(\"First\"));\n                    subscriber.onNext(1);\n                    subscriber.onError(new TestException(\"Second\"));\n                    subscriber.onComplete();\n                }\n            }.replay()\n            .autoConnect()\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1385,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
