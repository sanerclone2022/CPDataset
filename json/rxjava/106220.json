[{"authorTime":"2019-10-17 21:44:37","codes":[{"authorDate":"2019-11-12 17:19:12","commitOrder":2,"curCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastProcessor<Integer> up = UnicastProcessor.create();\n\n                TestObserver<Integer> to = up.hide()\n                .observeOn(Schedulers.io())\n                .observeOn(Schedulers.single())\n                .unsubscribeOn(Schedulers.computation())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; up.hasSubscribers() && i < 10000; i++) {\n                    up.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-11-12 17:19:12","endLine":1974,"groupId":"5355","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fusedNoConcurrentCleanDueToCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1c/8763b33ff80fe0af4149bc6f3985f900d998e2.src","preCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastProcessor<Integer> up = UnicastProcessor.create();\n\n                TestObserver<Integer> to = up.hide()\n                .observeOn(Schedulers.io())\n                .observeOn(Schedulers.single())\n                .unsubscribeOn(Schedulers.computation())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; up.hasSubscribers() && i < 10000; i++) {\n                    up.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1944,"status":"B"},{"authorDate":"2019-10-17 21:44:37","commitOrder":2,"curCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastProcessor<Integer> us = UnicastProcessor.create();\n\n                TestObserver<Integer> to = us\n                .observeOn(Schedulers.io())\n                .map(Functions.<Integer>identity())\n                .observeOn(Schedulers.single())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasSubscribers(); i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-10-17 21:44:37","endLine":478,"groupId":"12459","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedNoConcurrentCleanDueToCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a5/52783994f5fd2fbd85e0ce28ee2349cdc6f5a2.src","preCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastProcessor<Integer> us = UnicastProcessor.create();\n\n                TestObserver<Integer> to = us\n                .observeOn(Schedulers.io())\n                .map(Functions.<Integer>identity())\n                .observeOn(Schedulers.single())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasSubscribers(); i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/processors/UnicastProcessorTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"NB"}],"commitId":"df2cdb75c493f15dba72ad3e13b12fe1ac670e54","commitMessage":"@@@3.x: Fix concurrent clear in observeOn while output-fused (#6708)\n\n","date":"2019-11-12 17:19:12","modifiedFileCount":"4","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-26 20:33:30","codes":[{"authorDate":"2019-11-12 17:19:12","commitOrder":3,"curCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastProcessor<Integer> up = UnicastProcessor.create();\n\n                TestObserver<Integer> to = up.hide()\n                .observeOn(Schedulers.io())\n                .observeOn(Schedulers.single())\n                .unsubscribeOn(Schedulers.computation())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; up.hasSubscribers() && i < 10000; i++) {\n                    up.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-11-12 17:19:12","endLine":1974,"groupId":"106220","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fusedNoConcurrentCleanDueToCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1c/8763b33ff80fe0af4149bc6f3985f900d998e2.src","preCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastProcessor<Integer> up = UnicastProcessor.create();\n\n                TestObserver<Integer> to = up.hide()\n                .observeOn(Schedulers.io())\n                .observeOn(Schedulers.single())\n                .unsubscribeOn(Schedulers.computation())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; up.hasSubscribers() && i < 10000; i++) {\n                    up.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1944,"status":"N"},{"authorDate":"2019-12-26 20:33:30","commitOrder":3,"curCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastProcessor<Integer> up = UnicastProcessor.create();\n\n                TestObserver<Integer> to = up\n                .observeOn(Schedulers.io())\n                .map(Functions.<Integer>identity())\n                .observeOn(Schedulers.single())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; up.hasSubscribers(); i++) {\n                    up.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-12-26 20:33:30","endLine":478,"groupId":"106220","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedNoConcurrentCleanDueToCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/00/2d6a17d3f0c699f272c42129489519404ee2c6.src","preCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastProcessor<Integer> us = UnicastProcessor.create();\n\n                TestObserver<Integer> to = us\n                .observeOn(Schedulers.io())\n                .map(Functions.<Integer>identity())\n                .observeOn(Schedulers.single())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasSubscribers(); i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/processors/UnicastProcessorTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"}],"commitId":"af17c6e268d0e2fe4675feb46c19a29227cb135b","commitMessage":"@@@3.x: [Java 8] Add Observable operators + cleanup (#6797)\n\n","date":"2019-12-26 20:33:30","modifiedFileCount":"19","status":"M","submitter":"David Karnok"}]
