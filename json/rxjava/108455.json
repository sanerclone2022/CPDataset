[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void cancelledTaskRetention() throws InterruptedException {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        Scheduler s = Schedulers.from(exec, true);\n        try {\n            Scheduler.Worker w = s.createWorker();\n            try {\n                cancelledRetention(w, false);\n            } finally {\n                w.dispose();\n            }\n\n            w = s.createWorker();\n            try {\n                cancelledRetention(w, true);\n            } finally {\n                w.dispose();\n            }\n        } finally {\n            exec.shutdownNow();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":150,"groupId":"8169","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelledTaskRetention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/9907bb3d030386364721bcb3e48695560e5ce1.src","preCode":"    public void cancelledTaskRetention() throws InterruptedException {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        Scheduler s = Schedulers.from(exec, true);\n        try {\n            Scheduler.Worker w = s.createWorker();\n            try {\n                cancelledRetention(w, false);\n            } finally {\n                w.dispose();\n            }\n\n            w = s.createWorker();\n            try {\n                cancelledRetention(w, true);\n            } finally {\n                w.dispose();\n            }\n        } finally {\n            exec.shutdownNow();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/schedulers/ExecutorSchedulerInterruptibleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void cancelledTaskRetention() throws InterruptedException {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        Scheduler s = Schedulers.from(exec);\n        try {\n            Scheduler.Worker w = s.createWorker();\n            try {\n                cancelledRetention(w, false);\n            } finally {\n                w.dispose();\n            }\n\n            w = s.createWorker();\n            try {\n                cancelledRetention(w, true);\n            } finally {\n                w.dispose();\n            }\n        } finally {\n            exec.shutdownNow();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":150,"groupId":"8169","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cancelledTaskRetention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7b/aebce0d56bc20f6d8f704ef2d6273523678e00.src","preCode":"    public void cancelledTaskRetention() throws InterruptedException {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        Scheduler s = Schedulers.from(exec);\n        try {\n            Scheduler.Worker w = s.createWorker();\n            try {\n                cancelledRetention(w, false);\n            } finally {\n                w.dispose();\n            }\n\n            w = s.createWorker();\n            try {\n                cancelledRetention(w, true);\n            } finally {\n                w.dispose();\n            }\n        } finally {\n            exec.shutdownNow();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/schedulers/ExecutorSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-04 00:48:14","commitOrder":2,"curCode":"    public void cancelledTaskRetention() throws InterruptedException {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        Scheduler s = Schedulers.from(exec, true);\n        try {\n            Scheduler.Worker w = s.createWorker();\n            try {\n                ExecutorSchedulerTest.cancelledRetention(w, false);\n            } finally {\n                w.dispose();\n            }\n\n            w = s.createWorker();\n            try {\n                ExecutorSchedulerTest.cancelledRetention(w, true);\n            } finally {\n                w.dispose();\n            }\n        } finally {\n            exec.shutdownNow();\n        }\n    }\n","date":"2019-12-04 00:48:14","endLine":68,"groupId":"108455","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelledTaskRetention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/f50c3e991ca945dd3471d333ac14445a553004.src","preCode":"    public void cancelledTaskRetention() throws InterruptedException {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        Scheduler s = Schedulers.from(exec, true);\n        try {\n            Scheduler.Worker w = s.createWorker();\n            try {\n                cancelledRetention(w, false);\n            } finally {\n                w.dispose();\n            }\n\n            w = s.createWorker();\n            try {\n                cancelledRetention(w, true);\n            } finally {\n                w.dispose();\n            }\n        } finally {\n            exec.shutdownNow();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/schedulers/ExecutorSchedulerInterruptibleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void cancelledTaskRetention() throws InterruptedException {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        Scheduler s = Schedulers.from(exec);\n        try {\n            Scheduler.Worker w = s.createWorker();\n            try {\n                cancelledRetention(w, false);\n            } finally {\n                w.dispose();\n            }\n\n            w = s.createWorker();\n            try {\n                cancelledRetention(w, true);\n            } finally {\n                w.dispose();\n            }\n        } finally {\n            exec.shutdownNow();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":150,"groupId":"108455","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cancelledTaskRetention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7b/aebce0d56bc20f6d8f704ef2d6273523678e00.src","preCode":"    public void cancelledTaskRetention() throws InterruptedException {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        Scheduler s = Schedulers.from(exec);\n        try {\n            Scheduler.Worker w = s.createWorker();\n            try {\n                cancelledRetention(w, false);\n            } finally {\n                w.dispose();\n            }\n\n            w = s.createWorker();\n            try {\n                cancelledRetention(w, true);\n            } finally {\n                w.dispose();\n            }\n        } finally {\n            exec.shutdownNow();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/schedulers/ExecutorSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"}],"commitId":"292dc62c97bd0a0569cd6d2278adaad134e72d12","commitMessage":"@@@3.x: Add fair mode overload to Schedulers.from(Executor) (#6744)\n\n","date":"2019-12-04 00:48:14","modifiedFileCount":"4","status":"M","submitter":"David Karnok"}]
