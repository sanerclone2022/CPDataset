[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    void runMerge(Function<Integer, Observable<Integer>> func, TestObserverEx<Integer> to) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Observable<Integer> source = Observable.fromIterable(list);\n        source.flatMap(func).subscribe(to);\n\n        if (to.values().size() != 1000) {\n            System.out.println(to.values());\n        }\n\n        to.assertTerminated();\n        to.assertNoErrors();\n        to.assertValueSequence(list);\n    }\n","date":"2019-08-16 20:51:17","endLine":1021,"groupId":"11920","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runMerge","params":"(Function<Integer@Observable<Integer>>func@TestObserverEx<Integer>to)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/87/36bd4ae332523594a8bd4235fb8a57ab596441.src","preCode":"    void runMerge(Function<Integer, Observable<Integer>> func, TestObserverEx<Integer> to) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Observable<Integer> source = Observable.fromIterable(list);\n        source.flatMap(func).subscribe(to);\n\n        if (to.values().size() != 1000) {\n            System.out.println(to.values());\n        }\n\n        to.assertTerminated();\n        to.assertNoErrors();\n        to.assertValueSequence(list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1006,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    void runMerge(Function<Integer, Flowable<Integer>> func, TestSubscriberEx<Integer> ts) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Flowable<Integer> source = Flowable.fromIterable(list);\n        source.flatMap(func).subscribe(ts);\n\n        if (ts.values().size() != 1000) {\n            System.out.println(ts.values());\n        }\n\n        ts.assertTerminated();\n        ts.assertNoErrors();\n        ts.assertValueSequence(list);\n    }\n","date":"2019-08-16 20:51:17","endLine":1297,"groupId":"11920","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runMerge","params":"(Function<Integer@Flowable<Integer>>func@TestSubscriberEx<Integer>ts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/22/526d1922532b741c7161dad0d1db1939ced05a.src","preCode":"    void runMerge(Function<Integer, Flowable<Integer>> func, TestSubscriberEx<Integer> ts) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Flowable<Integer> source = Flowable.fromIterable(list);\n        source.flatMap(func).subscribe(ts);\n\n        if (ts.values().size() != 1000) {\n            System.out.println(ts.values());\n        }\n\n        ts.assertTerminated();\n        ts.assertNoErrors();\n        ts.assertValueSequence(list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1282,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    void runMerge(Function<Integer, Observable<Integer>> func, TestObserverEx<Integer> to) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Observable<Integer> source = Observable.fromIterable(list);\n        source.flatMap(func).subscribe(to);\n\n        if (to.values().size() != 1000) {\n            System.out.println(to.values());\n        }\n\n        to.assertTerminated();\n        to.assertNoErrors();\n        to.assertValueSequence(list);\n    }\n","date":"2019-08-16 20:51:17","endLine":1021,"groupId":"11920","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runMerge","params":"(Function<Integer@Observable<Integer>>func@TestObserverEx<Integer>to)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/87/36bd4ae332523594a8bd4235fb8a57ab596441.src","preCode":"    void runMerge(Function<Integer, Observable<Integer>> func, TestObserverEx<Integer> to) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Observable<Integer> source = Observable.fromIterable(list);\n        source.flatMap(func).subscribe(to);\n\n        if (to.values().size() != 1000) {\n            System.out.println(to.values());\n        }\n\n        to.assertTerminated();\n        to.assertNoErrors();\n        to.assertValueSequence(list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1006,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    void runMerge(Function<Integer, Flowable<Integer>> func, TestSubscriberEx<Integer> ts) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Flowable<Integer> source = Flowable.fromIterable(list);\n        source.flatMap(func).subscribe(ts);\n\n        if (ts.values().size() != 1000) {\n            System.out.println(ts.values());\n        }\n\n        ts.assertTerminated();\n        ts.assertNoErrors();\n        ts.assertValueSequence(list);\n    }\n","date":"2019-12-22 18:39:23","endLine":1297,"groupId":"11920","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runMerge","params":"(Function<Integer@Flowable<Integer>>func@TestSubscriberEx<Integer>ts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6b/3f72e2f941a8cf958bf4d1ac1b1c79d905228f.src","preCode":"    void runMerge(Function<Integer, Flowable<Integer>> func, TestSubscriberEx<Integer> ts) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Flowable<Integer> source = Flowable.fromIterable(list);\n        source.flatMap(func).subscribe(ts);\n\n        if (ts.values().size() != 1000) {\n            System.out.println(ts.values());\n        }\n\n        ts.assertTerminated();\n        ts.assertNoErrors();\n        ts.assertValueSequence(list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1282,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    void runMerge(Function<Integer, Observable<Integer>> func, TestObserverEx<Integer> to) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Observable<Integer> source = Observable.fromIterable(list);\n        source.flatMap(func).subscribe(to);\n\n        if (to.values().size() != 1000) {\n            System.out.println(to.values());\n        }\n\n        to.assertTerminated();\n        to.assertNoErrors();\n        to.assertValueSequence(list);\n    }\n","date":"2019-12-22 18:59:44","endLine":1021,"groupId":"104851","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runMerge","params":"(Function<Integer@Observable<Integer>>func@TestObserverEx<Integer>to)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/d30f8a854a0e92aecdba22f6b96934b073a37b.src","preCode":"    void runMerge(Function<Integer, Observable<Integer>> func, TestObserverEx<Integer> to) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Observable<Integer> source = Observable.fromIterable(list);\n        source.flatMap(func).subscribe(to);\n\n        if (to.values().size() != 1000) {\n            System.out.println(to.values());\n        }\n\n        to.assertTerminated();\n        to.assertNoErrors();\n        to.assertValueSequence(list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1006,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    void runMerge(Function<Integer, Flowable<Integer>> func, TestSubscriberEx<Integer> ts) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Flowable<Integer> source = Flowable.fromIterable(list);\n        source.flatMap(func).subscribe(ts);\n\n        if (ts.values().size() != 1000) {\n            System.out.println(ts.values());\n        }\n\n        ts.assertTerminated();\n        ts.assertNoErrors();\n        ts.assertValueSequence(list);\n    }\n","date":"2019-12-22 18:39:23","endLine":1297,"groupId":"104851","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"runMerge","params":"(Function<Integer@Flowable<Integer>>func@TestSubscriberEx<Integer>ts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6b/3f72e2f941a8cf958bf4d1ac1b1c79d905228f.src","preCode":"    void runMerge(Function<Integer, Flowable<Integer>> func, TestSubscriberEx<Integer> ts) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(i);\n        }\n        Flowable<Integer> source = Flowable.fromIterable(list);\n        source.flatMap(func).subscribe(ts);\n\n        if (ts.values().size() != 1000) {\n            System.out.println(ts.values());\n        }\n\n        ts.assertTerminated();\n        ts.assertNoErrors();\n        ts.assertValueSequence(list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1282,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
