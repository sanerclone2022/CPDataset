[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void emitLate() {\n        final AtomicReference<Observer<? super Integer>> ref = new AtomicReference<Observer<? super Integer>>();\n\n        TestObserver<Integer> to = Observable.range(1, 2)\n        .debounce(new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Observable.never();\n                }\n                return new Observable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        ref.set(observer);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        to\n        .assertResult(2);\n    }\n","date":"2019-08-16 20:51:17","endLine":457,"groupId":"9933","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"emitLate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d6/6de923f84dee61c0f6aa64c46a1884ff8ac1ec.src","preCode":"    public void emitLate() {\n        final AtomicReference<Observer<? super Integer>> ref = new AtomicReference<Observer<? super Integer>>();\n\n        TestObserver<Integer> to = Observable.range(1, 2)\n        .debounce(new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Observable.never();\n                }\n                return new Observable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        ref.set(observer);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        to\n        .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void emitLate() {\n        final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<Subscriber<? super Integer>>();\n\n        TestSubscriber<Integer> ts = Flowable.range(1, 2)\n        .debounce(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Flowable.never();\n                }\n                return new Flowable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        ts\n        .assertResult(2);\n    }\n","date":"2019-08-16 20:51:17","endLine":488,"groupId":"4162","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"emitLate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/ae8ef6543ca6ec2c21ebcf22a4d8efc828178c.src","preCode":"    public void emitLate() {\n        final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<Subscriber<? super Integer>>();\n\n        TestSubscriber<Integer> ts = Flowable.range(1, 2)\n        .debounce(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Flowable.never();\n                }\n                return new Flowable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        ts\n        .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void emitLate() {\n        final AtomicReference<Observer<? super Integer>> ref = new AtomicReference<Observer<? super Integer>>();\n\n        TestObserver<Integer> to = Observable.range(1, 2)\n        .debounce(new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Observable.never();\n                }\n                return new Observable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        to\n        .assertResult(2);\n    }\n","date":"2019-12-20 02:39:40","endLine":457,"groupId":"9933","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"emitLate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/af/60b930189d962b014aa972a23ef287506c5e83.src","preCode":"    public void emitLate() {\n        final AtomicReference<Observer<? super Integer>> ref = new AtomicReference<Observer<? super Integer>>();\n\n        TestObserver<Integer> to = Observable.range(1, 2)\n        .debounce(new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Observable.never();\n                }\n                return new Observable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        ref.set(observer);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        to\n        .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void emitLate() {\n        final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<Subscriber<? super Integer>>();\n\n        TestSubscriber<Integer> ts = Flowable.range(1, 2)\n        .debounce(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Flowable.never();\n                }\n                return new Flowable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        ts\n        .assertResult(2);\n    }\n","date":"2019-08-16 20:51:17","endLine":488,"groupId":"4162","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"emitLate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/ae8ef6543ca6ec2c21ebcf22a4d8efc828178c.src","preCode":"    public void emitLate() {\n        final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<Subscriber<? super Integer>>();\n\n        TestSubscriber<Integer> ts = Flowable.range(1, 2)\n        .debounce(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Flowable.never();\n                }\n                return new Flowable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        ts\n        .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void emitLate() {\n        final AtomicReference<Observer<? super Integer>> ref = new AtomicReference<Observer<? super Integer>>();\n\n        TestObserver<Integer> to = Observable.range(1, 2)\n        .debounce(new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Observable.never();\n                }\n                return new Observable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        to\n        .assertResult(2);\n    }\n","date":"2019-12-20 02:39:40","endLine":457,"groupId":"9933","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"emitLate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/af/60b930189d962b014aa972a23ef287506c5e83.src","preCode":"    public void emitLate() {\n        final AtomicReference<Observer<? super Integer>> ref = new AtomicReference<Observer<? super Integer>>();\n\n        TestObserver<Integer> to = Observable.range(1, 2)\n        .debounce(new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Observable.never();\n                }\n                return new Observable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        to\n        .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void emitLate() {\n        final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<>();\n\n        TestSubscriber<Integer> ts = Flowable.range(1, 2)\n        .debounce(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Flowable.never();\n                }\n                return new Flowable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        ts\n        .assertResult(2);\n    }\n","date":"2019-12-22 18:39:23","endLine":488,"groupId":"4162","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"emitLate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bf/b33f0e8e2f78180436cfe177365ea6d5236703.src","preCode":"    public void emitLate() {\n        final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<Subscriber<? super Integer>>();\n\n        TestSubscriber<Integer> ts = Flowable.range(1, 2)\n        .debounce(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Flowable.never();\n                }\n                return new Flowable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        ts\n        .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void emitLate() {\n        final AtomicReference<Observer<? super Integer>> ref = new AtomicReference<>();\n\n        TestObserver<Integer> to = Observable.range(1, 2)\n        .debounce(new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Observable.never();\n                }\n                return new Observable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        to\n        .assertResult(2);\n    }\n","date":"2019-12-22 18:59:44","endLine":457,"groupId":"104410","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"emitLate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d5/9431a6775abe63c090e2dfee48f7a28a6a4c9a.src","preCode":"    public void emitLate() {\n        final AtomicReference<Observer<? super Integer>> ref = new AtomicReference<Observer<? super Integer>>();\n\n        TestObserver<Integer> to = Observable.range(1, 2)\n        .debounce(new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Observable.never();\n                }\n                return new Observable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        ref.set(observer);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        to\n        .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void emitLate() {\n        final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<>();\n\n        TestSubscriber<Integer> ts = Flowable.range(1, 2)\n        .debounce(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Flowable.never();\n                }\n                return new Flowable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        ts\n        .assertResult(2);\n    }\n","date":"2019-12-22 18:39:23","endLine":488,"groupId":"104410","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"emitLate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bf/b33f0e8e2f78180436cfe177365ea6d5236703.src","preCode":"    public void emitLate() {\n        final AtomicReference<Subscriber<? super Integer>> ref = new AtomicReference<>();\n\n        TestSubscriber<Integer> ts = Flowable.range(1, 2)\n        .debounce(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer o) throws Exception {\n                if (o != 1) {\n                    return Flowable.never();\n                }\n                return new Flowable<Integer>() {\n                    @Override\n                    protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        ref.set(subscriber);\n                    }\n                };\n            }\n        })\n        .test();\n\n        ref.get().onNext(1);\n\n        ts\n        .assertResult(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
