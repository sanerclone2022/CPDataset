[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Observable<Integer> source = Observable.never();\n\n        Observer<List<Integer>> o = TestHelper.mockObserver();\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>(o);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        InOrder inOrder = Mockito.inOrder(o);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(o, times(5)).onNext(Arrays.<Integer> asList());\n\n        to.dispose();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":328,"groupId":"2584","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bufferStopsWhenUnsubscribed1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/03/c437dad9f65153ba2d8f488de8f7c0769eb7ca.src","preCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Observable<Integer> source = Observable.never();\n\n        Observer<List<Integer>> o = TestHelper.mockObserver();\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>(o);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        InOrder inOrder = Mockito.inOrder(o);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(o, times(5)).onNext(Arrays.<Integer> asList());\n\n        to.dispose();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Flowable<Integer> source = Flowable.never();\n\n        Subscriber<List<Integer>> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<List<Integer>>(subscriber, 0L);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(subscriber, times(5)).onNext(Arrays.<Integer> asList());\n\n        ts.cancel();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":327,"groupId":"4933","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bufferStopsWhenUnsubscribed1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bc/d53605fc50d241ecae45123032ca60ee111d91.src","preCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Flowable<Integer> source = Flowable.never();\n\n        Subscriber<List<Integer>> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<List<Integer>>(subscriber, 0L);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(subscriber, times(5)).onNext(Arrays.<Integer> asList());\n\n        ts.cancel();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Observable<Integer> source = Observable.never();\n\n        Observer<List<Integer>> o = TestHelper.mockObserver();\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>(o);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        InOrder inOrder = Mockito.inOrder(o);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(o, times(5)).onNext(Arrays.<Integer> asList());\n\n        to.dispose();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":328,"groupId":"2584","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bufferStopsWhenUnsubscribed1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/03/c437dad9f65153ba2d8f488de8f7c0769eb7ca.src","preCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Observable<Integer> source = Observable.never();\n\n        Observer<List<Integer>> o = TestHelper.mockObserver();\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>(o);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        InOrder inOrder = Mockito.inOrder(o);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(o, times(5)).onNext(Arrays.<Integer> asList());\n\n        to.dispose();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Flowable<Integer> source = Flowable.never();\n\n        Subscriber<List<Integer>> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<>(subscriber, 0L);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(subscriber, times(5)).onNext(Arrays.<Integer> asList());\n\n        ts.cancel();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":327,"groupId":"4933","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bufferStopsWhenUnsubscribed1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/70/7d98e0d480af17afac461a72aa34116095d9a5.src","preCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Flowable<Integer> source = Flowable.never();\n\n        Subscriber<List<Integer>> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<List<Integer>>(subscriber, 0L);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(subscriber, times(5)).onNext(Arrays.<Integer> asList());\n\n        ts.cancel();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Observable<Integer> source = Observable.never();\n\n        Observer<List<Integer>> o = TestHelper.mockObserver();\n        TestObserver<List<Integer>> to = new TestObserver<>(o);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        InOrder inOrder = Mockito.inOrder(o);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(o, times(5)).onNext(Arrays.<Integer> asList());\n\n        to.dispose();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:59:44","endLine":328,"groupId":"103160","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"bufferStopsWhenUnsubscribed1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ee/ee099b0da4a3dd2fba7157f378ce8829d642fa.src","preCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Observable<Integer> source = Observable.never();\n\n        Observer<List<Integer>> o = TestHelper.mockObserver();\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>(o);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        InOrder inOrder = Mockito.inOrder(o);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(o, times(5)).onNext(Arrays.<Integer> asList());\n\n        to.dispose();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Flowable<Integer> source = Flowable.never();\n\n        Subscriber<List<Integer>> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<>(subscriber, 0L);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(subscriber, times(5)).onNext(Arrays.<Integer> asList());\n\n        ts.cancel();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":327,"groupId":"103160","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bufferStopsWhenUnsubscribed1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/70/7d98e0d480af17afac461a72aa34116095d9a5.src","preCode":"    public void bufferStopsWhenUnsubscribed1() {\n        Flowable<Integer> source = Flowable.never();\n\n        Subscriber<List<Integer>> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<>(subscriber, 0L);\n\n        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)\n        .doOnNext(new Consumer<List<Integer>>() {\n            @Override\n            public void accept(List<Integer> pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n\n        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);\n\n        inOrder.verify(subscriber, times(5)).onNext(Arrays.<Integer> asList());\n\n        ts.cancel();\n\n        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);\n\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
