[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void interrupt() {\n        Iterator<Object> it = Observable.never().blockingNext().iterator();\n\n        try {\n            Thread.currentThread().interrupt();\n            it.next();\n        } catch (RuntimeException ex) {\n            assertTrue(ex.toString(), ex.getCause() instanceof InterruptedException);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":351,"groupId":"5225","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"interrupt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/93/8f757a0c1aa489736dff2fcba89784d7c29c3e.src","preCode":"    public void interrupt() {\n        Iterator<Object> it = Observable.never().blockingNext().iterator();\n\n        try {\n            Thread.currentThread().interrupt();\n            it.next();\n        } catch (RuntimeException ex) {\n            assertTrue(ex.toString(), ex.getCause() instanceof InterruptedException);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/BlockingObservableNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void interruptWait() {\n        BlockingObservableIterator<Integer> it = new BlockingObservableIterator<Integer>(128);\n\n        try {\n            Thread.currentThread().interrupt();\n\n            it.hasNext();\n        } catch (RuntimeException ex) {\n            assertTrue(ex.toString(), ex.getCause() instanceof InterruptedException);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":93,"groupId":"5225","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"interruptWait","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d9/04ed30dda1e045b5e3e82956c4112aa6fc64c9.src","preCode":"    public void interruptWait() {\n        BlockingObservableIterator<Integer> it = new BlockingObservableIterator<Integer>(128);\n\n        try {\n            Thread.currentThread().interrupt();\n\n            it.hasNext();\n        } catch (RuntimeException ex) {\n            assertTrue(ex.toString(), ex.getCause() instanceof InterruptedException);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/BlockingObservableToIteratorTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:59:44","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void interrupt() {\n        Iterator<Object> it = Observable.never().blockingNext().iterator();\n\n        try {\n            Thread.currentThread().interrupt();\n            it.next();\n        } catch (RuntimeException ex) {\n            assertTrue(ex.toString(), ex.getCause() instanceof InterruptedException);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":351,"groupId":"105274","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"interrupt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/93/8f757a0c1aa489736dff2fcba89784d7c29c3e.src","preCode":"    public void interrupt() {\n        Iterator<Object> it = Observable.never().blockingNext().iterator();\n\n        try {\n            Thread.currentThread().interrupt();\n            it.next();\n        } catch (RuntimeException ex) {\n            assertTrue(ex.toString(), ex.getCause() instanceof InterruptedException);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/BlockingObservableNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"N"},{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void interruptWait() {\n        BlockingObservableIterator<Integer> it = new BlockingObservableIterator<>(128);\n\n        try {\n            Thread.currentThread().interrupt();\n\n            it.hasNext();\n        } catch (RuntimeException ex) {\n            assertTrue(ex.toString(), ex.getCause() instanceof InterruptedException);\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":96,"groupId":"105274","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"interruptWait","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4b/6e2bc5cd6e2582d5b4b772b5e10f73b6536389.src","preCode":"    public void interruptWait() {\n        BlockingObservableIterator<Integer> it = new BlockingObservableIterator<Integer>(128);\n\n        try {\n            Thread.currentThread().interrupt();\n\n            it.hasNext();\n        } catch (RuntimeException ex) {\n            assertTrue(ex.toString(), ex.getCause() instanceof InterruptedException);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/BlockingObservableToIteratorTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
