[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timedAndCount() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        buffered.subscribe(observer);\n\n        InOrder inOrder = Mockito.inOrder(observer);\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"five\"));\n        inOrder.verify(observer, Mockito.never()).onNext(Mockito.<String>anyList());\n        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));\n        inOrder.verify(observer, Mockito.times(1)).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":154,"groupId":"7034","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/03/c437dad9f65153ba2d8f488de8f7c0769eb7ca.src","preCode":"    public void timedAndCount() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        buffered.subscribe(observer);\n\n        InOrder inOrder = Mockito.inOrder(observer);\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"five\"));\n        inOrder.verify(observer, Mockito.never()).onNext(Mockito.<String>anyList());\n        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));\n        inOrder.verify(observer, Mockito.times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timedAndCount() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        buffered.subscribe(subscriber);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"five\"));\n        inOrder.verify(subscriber, Mockito.never()).onNext(Mockito.<String>anyList());\n        inOrder.verify(subscriber, Mockito.never()).onError(Mockito.any(Throwable.class));\n        inOrder.verify(subscriber, Mockito.times(1)).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":153,"groupId":"7034","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bc/d53605fc50d241ecae45123032ca60ee111d91.src","preCode":"    public void timedAndCount() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        buffered.subscribe(subscriber);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"five\"));\n        inOrder.verify(subscriber, Mockito.never()).onNext(Mockito.<String>anyList());\n        inOrder.verify(subscriber, Mockito.never()).onError(Mockito.any(Throwable.class));\n        inOrder.verify(subscriber, Mockito.times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void timedAndCount() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposable.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        buffered.subscribe(observer);\n\n        InOrder inOrder = Mockito.inOrder(observer);\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"five\"));\n        inOrder.verify(observer, Mockito.never()).onNext(Mockito.<String>anyList());\n        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));\n        inOrder.verify(observer, Mockito.times(1)).onComplete();\n    }\n","date":"2019-12-20 02:39:40","endLine":154,"groupId":"103157","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/34/ae5ed7808632d50e4b5744e11b048eee01ffa6.src","preCode":"    public void timedAndCount() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        buffered.subscribe(observer);\n\n        InOrder inOrder = Mockito.inOrder(observer);\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, Mockito.times(1)).onNext(list(\"five\"));\n        inOrder.verify(observer, Mockito.never()).onNext(Mockito.<String>anyList());\n        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));\n        inOrder.verify(observer, Mockito.times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void timedAndCount() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        buffered.subscribe(subscriber);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"five\"));\n        inOrder.verify(subscriber, Mockito.never()).onNext(Mockito.<String>anyList());\n        inOrder.verify(subscriber, Mockito.never()).onError(Mockito.any(Throwable.class));\n        inOrder.verify(subscriber, Mockito.times(1)).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":153,"groupId":"103157","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bc/d53605fc50d241ecae45123032ca60ee111d91.src","preCode":"    public void timedAndCount() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        buffered.subscribe(subscriber);\n\n        InOrder inOrder = Mockito.inOrder(subscriber);\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, Mockito.times(1)).onNext(list(\"five\"));\n        inOrder.verify(subscriber, Mockito.never()).onNext(Mockito.<String>anyList());\n        inOrder.verify(subscriber, Mockito.never()).onError(Mockito.any(Throwable.class));\n        inOrder.verify(subscriber, Mockito.times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
