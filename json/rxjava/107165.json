[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void offerThrows() {\n        BasicFuseableSubscriber<Integer, Integer> fcs = new BasicFuseableSubscriber<Integer, Integer>(new TestSubscriber<Integer>(0L)) {\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n        };\n\n        fcs.onSubscribe(new ScalarSubscription<Integer>(fcs, 1));\n\n        TestHelper.assertNoOffer(fcs);\n\n        assertFalse(fcs.isEmpty());\n        fcs.clear();\n        assertTrue(fcs.isEmpty());\n    }\n","date":"2019-08-16 20:51:17","endLine":55,"groupId":"3290","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"offerThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b3/543ad7d32170c1b13a250e31fc9325def0fa24.src","preCode":"    public void offerThrows() {\n        BasicFuseableSubscriber<Integer, Integer> fcs = new BasicFuseableSubscriber<Integer, Integer>(new TestSubscriber<Integer>(0L)) {\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n        };\n\n        fcs.onSubscribe(new ScalarSubscription<Integer>(fcs, 1));\n\n        TestHelper.assertNoOffer(fcs);\n\n        assertFalse(fcs.isEmpty());\n        fcs.clear();\n        assertTrue(fcs.isEmpty());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void offerThrows() {\n        ConditionalSubscriber<Integer> cs = new ConditionalSubscriber<Integer>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n            }\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public void onError(Throwable t) {\n            }\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public boolean tryOnNext(Integer t) {\n                return false;\n            }\n        };\n\n        BasicFuseableConditionalSubscriber<Integer, Integer> fcs = new BasicFuseableConditionalSubscriber<Integer, Integer>(cs) {\n\n            @Override\n            public boolean tryOnNext(Integer t) {\n                return false;\n            }\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n        };\n\n        fcs.onSubscribe(new ScalarSubscription<Integer>(fcs, 1));\n\n        TestHelper.assertNoOffer(fcs);\n\n        assertFalse(fcs.isEmpty());\n        fcs.clear();\n        assertTrue(fcs.isEmpty());\n    }\n","date":"2019-08-16 20:51:17","endLine":85,"groupId":"3290","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"offerThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0b/cfd2d12aa052b4fe4bd2387ae18a3c6a887123.src","preCode":"    public void offerThrows() {\n        ConditionalSubscriber<Integer> cs = new ConditionalSubscriber<Integer>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n            }\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public void onError(Throwable t) {\n            }\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public boolean tryOnNext(Integer t) {\n                return false;\n            }\n        };\n\n        BasicFuseableConditionalSubscriber<Integer, Integer> fcs = new BasicFuseableConditionalSubscriber<Integer, Integer>(cs) {\n\n            @Override\n            public boolean tryOnNext(Integer t) {\n                return false;\n            }\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n        };\n\n        fcs.onSubscribe(new ScalarSubscription<Integer>(fcs, 1));\n\n        TestHelper.assertNoOffer(fcs);\n\n        assertFalse(fcs.isEmpty());\n        fcs.clear();\n        assertTrue(fcs.isEmpty());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:23","codes":[{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void offerThrows() {\n        BasicFuseableSubscriber<Integer, Integer> fcs = new BasicFuseableSubscriber<Integer, Integer>(new TestSubscriber<>(0L)) {\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n        };\n\n        fcs.onSubscribe(new ScalarSubscription<>(fcs, 1));\n\n        TestHelper.assertNoOffer(fcs);\n\n        assertFalse(fcs.isEmpty());\n        fcs.clear();\n        assertTrue(fcs.isEmpty());\n    }\n","date":"2019-12-22 19:17:23","endLine":55,"groupId":"107165","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"offerThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/87/ccd91b92fd4f28c396aec2be5ff8cd2eae4ca7.src","preCode":"    public void offerThrows() {\n        BasicFuseableSubscriber<Integer, Integer> fcs = new BasicFuseableSubscriber<Integer, Integer>(new TestSubscriber<Integer>(0L)) {\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n        };\n\n        fcs.onSubscribe(new ScalarSubscription<Integer>(fcs, 1));\n\n        TestHelper.assertNoOffer(fcs);\n\n        assertFalse(fcs.isEmpty());\n        fcs.clear();\n        assertTrue(fcs.isEmpty());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/subscribers/BasicFuseableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"M"},{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void offerThrows() {\n        ConditionalSubscriber<Integer> cs = new ConditionalSubscriber<Integer>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n            }\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public void onError(Throwable t) {\n            }\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public boolean tryOnNext(Integer t) {\n                return false;\n            }\n        };\n\n        BasicFuseableConditionalSubscriber<Integer, Integer> fcs = new BasicFuseableConditionalSubscriber<Integer, Integer>(cs) {\n\n            @Override\n            public boolean tryOnNext(Integer t) {\n                return false;\n            }\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n        };\n\n        fcs.onSubscribe(new ScalarSubscription<>(fcs, 1));\n\n        TestHelper.assertNoOffer(fcs);\n\n        assertFalse(fcs.isEmpty());\n        fcs.clear();\n        assertTrue(fcs.isEmpty());\n    }\n","date":"2019-12-22 19:17:23","endLine":85,"groupId":"107165","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"offerThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c8/4e3807016900c29f36f9e60427b9ed438409e1.src","preCode":"    public void offerThrows() {\n        ConditionalSubscriber<Integer> cs = new ConditionalSubscriber<Integer>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n            }\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public void onError(Throwable t) {\n            }\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public boolean tryOnNext(Integer t) {\n                return false;\n            }\n        };\n\n        BasicFuseableConditionalSubscriber<Integer, Integer> fcs = new BasicFuseableConditionalSubscriber<Integer, Integer>(cs) {\n\n            @Override\n            public boolean tryOnNext(Integer t) {\n                return false;\n            }\n\n            @Override\n            public void onNext(Integer t) {\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n        };\n\n        fcs.onSubscribe(new ScalarSubscription<Integer>(fcs, 1));\n\n        TestHelper.assertNoOffer(fcs);\n\n        assertFalse(fcs.isEmpty());\n        fcs.clear();\n        assertTrue(fcs.isEmpty());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/subscribers/BasicFuseableConditionalSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"M"}],"commitId":"75da4b504a52466b455a49a342747514fa0dffab","commitMessage":"@@@Diamond operators in tests (#6788)\n\n* diamond operators in unit tests.  small packages in internal/\n\n* diamond operators in unit tests.  small packages in internal/operators\n","date":"2019-12-22 19:17:23","modifiedFileCount":"92","status":"M","submitter":"Dmitry Volkov"}]
