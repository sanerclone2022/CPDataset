[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void with3Others() {\n        Observable<Integer> just = Observable.just(1);\n\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(Arrays.asList(1, 1, 1, 1));\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":473,"groupId":"552","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"with3Others","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f8/7491e0e05f894609e23678647dd31a5528a070.src","preCode":"    public void with3Others() {\n        Observable<Integer> just = Observable.just(1);\n\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(Arrays.asList(1, 1, 1, 1));\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void with3Others() {\n        Flowable<Integer> just = Flowable.just(1);\n\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<List<Integer>>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(Arrays.asList(1, 1, 1, 1));\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":571,"groupId":"6377","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"with3Others","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/20/814684da424618d4947a88948a5300a4622db4.src","preCode":"    public void with3Others() {\n        Flowable<Integer> just = Flowable.just(1);\n\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<List<Integer>>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(Arrays.asList(1, 1, 1, 1));\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void with3Others() {\n        Observable<Integer> just = Observable.just(1);\n\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(Arrays.asList(1, 1, 1, 1));\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":473,"groupId":"552","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"with3Others","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f8/7491e0e05f894609e23678647dd31a5528a070.src","preCode":"    public void with3Others() {\n        Observable<Integer> just = Observable.just(1);\n\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(Arrays.asList(1, 1, 1, 1));\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void with3Others() {\n        Flowable<Integer> just = Flowable.just(1);\n\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(Arrays.asList(1, 1, 1, 1));\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":571,"groupId":"6377","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"with3Others","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/54/4ca11bc653261994ad3b3b06172bacb6baff62.src","preCode":"    public void with3Others() {\n        Flowable<Integer> just = Flowable.just(1);\n\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<List<Integer>>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(Arrays.asList(1, 1, 1, 1));\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void with3Others() {\n        Observable<Integer> just = Observable.just(1);\n\n        TestObserver<List<Integer>> to = new TestObserver<>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(Arrays.asList(1, 1, 1, 1));\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","date":"2019-12-22 18:59:44","endLine":473,"groupId":"103014","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"with3Others","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/54b21b8ce76854c7a9067926e072aa934118f8.src","preCode":"    public void with3Others() {\n        Observable<Integer> just = Observable.just(1);\n\n        TestObserver<List<Integer>> to = new TestObserver<List<Integer>>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(Arrays.asList(1, 1, 1, 1));\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWithLatestFromTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void with3Others() {\n        Flowable<Integer> just = Flowable.just(1);\n\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(Arrays.asList(1, 1, 1, 1));\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":571,"groupId":"103014","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"with3Others","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/54/4ca11bc653261994ad3b3b06172bacb6baff62.src","preCode":"    public void with3Others() {\n        Flowable<Integer> just = Flowable.just(1);\n\n        TestSubscriber<List<Integer>> ts = new TestSubscriber<>();\n\n        just.withLatestFrom(just, just, just, new Function4<Integer, Integer, Integer, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(Integer a, Integer b, Integer c, Integer d) {\n                return Arrays.asList(a, b, c, d);\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(Arrays.asList(1, 1, 1, 1));\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWithLatestFromTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
