[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Observable<Integer> source = Observable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n        final TestObserver<Integer> to1 = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnDispose(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(to2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnDispose(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(to1);\n\n        to1.awaitDone(5, TimeUnit.SECONDS);\n        to2.awaitDone(5, TimeUnit.SECONDS);\n\n        to1.assertNoErrors();\n        to2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        to1.assertValues(1, 2, 3, 4, 5);\n        to2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":251,"groupId":"7950","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressureTwoConsumers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/f0140e5de8fe5399071cc09e7e171d010d689c.src","preCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Observable<Integer> source = Observable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n        final TestObserver<Integer> to1 = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnDispose(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(to2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnDispose(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(to1);\n\n        to1.awaitDone(5, TimeUnit.SECONDS);\n        to2.awaitDone(5, TimeUnit.SECONDS);\n\n        to1.assertNoErrors();\n        to2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        to1.assertValues(1, 2, 3, 4, 5);\n        to2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Flowable<Integer> source = Flowable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestSubscriber<Integer> ts2 = new TestSubscriber<Integer>();\n\n        final TestSubscriber<Integer> ts1 = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnCancel(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(ts2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnCancel(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(ts1);\n\n        ts1.awaitDone(5, TimeUnit.SECONDS);\n        ts2.awaitDone(5, TimeUnit.SECONDS);\n\n        ts1.assertNoErrors();\n        ts2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        ts1.assertValues(1, 2, 3, 4, 5);\n        ts2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":253,"groupId":"12158","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureTwoConsumers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/cba3926fbcf7b2764c9247a412564b573a29e2.src","preCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Flowable<Integer> source = Flowable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestSubscriber<Integer> ts2 = new TestSubscriber<Integer>();\n\n        final TestSubscriber<Integer> ts1 = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnCancel(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(ts2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnCancel(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(ts1);\n\n        ts1.awaitDone(5, TimeUnit.SECONDS);\n        ts2.awaitDone(5, TimeUnit.SECONDS);\n\n        ts1.assertNoErrors();\n        ts2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        ts1.assertValues(1, 2, 3, 4, 5);\n        ts2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Observable<Integer> source = Observable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n        final TestObserver<Integer> to1 = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnDispose(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(to2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnDispose(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(to1);\n\n        to1.awaitDone(5, TimeUnit.SECONDS);\n        to2.awaitDone(5, TimeUnit.SECONDS);\n\n        to1.assertNoErrors();\n        to2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        to1.assertValues(1, 2, 3, 4, 5);\n        to2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":251,"groupId":"7950","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressureTwoConsumers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/f0140e5de8fe5399071cc09e7e171d010d689c.src","preCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Observable<Integer> source = Observable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n        final TestObserver<Integer> to1 = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnDispose(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(to2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnDispose(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(to1);\n\n        to1.awaitDone(5, TimeUnit.SECONDS);\n        to2.awaitDone(5, TimeUnit.SECONDS);\n\n        to1.assertNoErrors();\n        to2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        to1.assertValues(1, 2, 3, 4, 5);\n        to2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Flowable<Integer> source = Flowable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestSubscriber<Integer> ts2 = new TestSubscriber<>();\n\n        final TestSubscriber<Integer> ts1 = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnCancel(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(ts2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnCancel(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(ts1);\n\n        ts1.awaitDone(5, TimeUnit.SECONDS);\n        ts2.awaitDone(5, TimeUnit.SECONDS);\n\n        ts1.assertNoErrors();\n        ts2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        ts1.assertValues(1, 2, 3, 4, 5);\n        ts2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":253,"groupId":"7035","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureTwoConsumers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/7c88da0970993e17039e0d66dc301b746e7fd0.src","preCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Flowable<Integer> source = Flowable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestSubscriber<Integer> ts2 = new TestSubscriber<Integer>();\n\n        final TestSubscriber<Integer> ts1 = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnCancel(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(ts2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnCancel(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(ts1);\n\n        ts1.awaitDone(5, TimeUnit.SECONDS);\n        ts2.awaitDone(5, TimeUnit.SECONDS);\n\n        ts1.assertNoErrors();\n        ts2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        ts1.assertValues(1, 2, 3, 4, 5);\n        ts2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Observable<Integer> source = Observable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestObserver<Integer> to2 = new TestObserver<>();\n\n        final TestObserver<Integer> to1 = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnDispose(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(to2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnDispose(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(to1);\n\n        to1.awaitDone(5, TimeUnit.SECONDS);\n        to2.awaitDone(5, TimeUnit.SECONDS);\n\n        to1.assertNoErrors();\n        to2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        to1.assertValues(1, 2, 3, 4, 5);\n        to2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","date":"2019-12-22 18:59:44","endLine":251,"groupId":"105258","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressureTwoConsumers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/cb03d00e72ebea8aaf23169601c3b0c6740c5f.src","preCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Observable<Integer> source = Observable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n        final TestObserver<Integer> to1 = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnDispose(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(to2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnDispose(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(to1);\n\n        to1.awaitDone(5, TimeUnit.SECONDS);\n        to2.awaitDone(5, TimeUnit.SECONDS);\n\n        to1.assertNoErrors();\n        to2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        to1.assertValues(1, 2, 3, 4, 5);\n        to2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Flowable<Integer> source = Flowable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestSubscriber<Integer> ts2 = new TestSubscriber<>();\n\n        final TestSubscriber<Integer> ts1 = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnCancel(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(ts2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnCancel(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(ts1);\n\n        ts1.awaitDone(5, TimeUnit.SECONDS);\n        ts2.awaitDone(5, TimeUnit.SECONDS);\n\n        ts1.assertNoErrors();\n        ts2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        ts1.assertValues(1, 2, 3, 4, 5);\n        ts2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":253,"groupId":"105258","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureTwoConsumers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/7c88da0970993e17039e0d66dc301b746e7fd0.src","preCode":"    public void backpressureTwoConsumers() {\n        final AtomicInteger sourceEmission = new AtomicInteger();\n        final AtomicBoolean sourceUnsubscribed = new AtomicBoolean();\n        final Flowable<Integer> source = Flowable.range(1, 100)\n                .doOnNext(new Consumer<Integer>() {\n                    @Override\n                    public void accept(Integer t1) {\n                        sourceEmission.incrementAndGet();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        sourceUnsubscribed.set(true);\n                    }\n                }).share();\n        ;\n\n        final AtomicBoolean child1Unsubscribed = new AtomicBoolean();\n        final AtomicBoolean child2Unsubscribed = new AtomicBoolean();\n\n        final TestSubscriber<Integer> ts2 = new TestSubscriber<>();\n\n        final TestSubscriber<Integer> ts1 = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                if (values().size() == 2) {\n                    source.doOnCancel(new Action() {\n                        @Override\n                        public void run() {\n                            child2Unsubscribed.set(true);\n                        }\n                    }).take(5).subscribe(ts2);\n                }\n                super.onNext(t);\n            }\n        };\n\n        source.doOnCancel(new Action() {\n            @Override\n            public void run() {\n                child1Unsubscribed.set(true);\n            }\n        }).take(5)\n        .subscribe(ts1);\n\n        ts1.awaitDone(5, TimeUnit.SECONDS);\n        ts2.awaitDone(5, TimeUnit.SECONDS);\n\n        ts1.assertNoErrors();\n        ts2.assertNoErrors();\n\n        assertTrue(sourceUnsubscribed.get());\n        assertTrue(child1Unsubscribed.get());\n        assertTrue(child2Unsubscribed.get());\n\n        ts1.assertValues(1, 2, 3, 4, 5);\n        ts2.assertValues(4, 5, 6, 7, 8);\n\n        assertEquals(8, sourceEmission.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
