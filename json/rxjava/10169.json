[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void assertTestSubscriberEx() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n        oi.subscribe(ts);\n\n        ts.assertValues(1, 2);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","date":"2019-08-16 20:51:17","endLine":53,"groupId":"4894","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertTestSubscriberEx","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/24/a9e84c9b5c431cf94ae9617da86de9d5828e95.src","preCode":"    public void assertTestSubscriberEx() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n        oi.subscribe(ts);\n\n        ts.assertValues(1, 2);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void assertNotMatchValue() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n        oi.subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n\n        ts.assertValues(1, 3);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","date":"2019-08-16 20:51:17","endLine":79,"groupId":"5410","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNotMatchValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/24/a9e84c9b5c431cf94ae9617da86de9d5828e95.src","preCode":"    public void assertNotMatchValue() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n        oi.subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n\n        ts.assertValues(1, 3);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void assertTestSubscriberEx() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n        oi.subscribe(ts);\n\n        ts.assertValues(1, 2);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","date":"2019-12-22 19:17:37","endLine":53,"groupId":"3771","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertTestSubscriberEx","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/30/8c10e0413d5220f182cb7742884885f3b2a774.src","preCode":"    public void assertTestSubscriberEx() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n        oi.subscribe(ts);\n\n        ts.assertValues(1, 2);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void assertNotMatchValue() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n        oi.subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n\n        ts.assertValues(1, 3);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","date":"2019-12-22 19:17:37","endLine":79,"groupId":"3770","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNotMatchValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/30/8c10e0413d5220f182cb7742884885f3b2a774.src","preCode":"    public void assertNotMatchValue() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n        oi.subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n\n        ts.assertValues(1, 3);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2020-01-07 16:33:23","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void assertTestSubscriberEx() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n        oi.subscribe(ts);\n\n        ts.assertValues(1, 2);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","date":"2019-12-22 19:17:37","endLine":53,"groupId":"10169","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertTestSubscriberEx","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/30/8c10e0413d5220f182cb7742884885f3b2a774.src","preCode":"    public void assertTestSubscriberEx() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n        oi.subscribe(ts);\n\n        ts.assertValues(1, 2);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2020-01-07 16:33:23","commitOrder":3,"curCode":"    public void assertNotMatchValue() {\n        assertThrows(AssertionError.class, () -> {\n            Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n            oi.subscribe(ts);\n\n            ts.assertValues(1, 3);\n            ts.assertValueCount(2);\n            ts.assertTerminated();\n        });\n    }\n","date":"2020-01-07 16:33:23","endLine":75,"groupId":"10169","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertNotMatchValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/09/18c08e119d87f53f410f1f2f3d42079c45f368.src","preCode":"    public void assertNotMatchValue() {\n        Flowable<Integer> oi = Flowable.fromIterable(Arrays.asList(1, 2));\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n        oi.subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n\n        ts.assertValues(1, 3);\n        ts.assertValueCount(2);\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"45c0b064dcaea7ac3d55249c04a62370ebf4b4a9","commitMessage":"@@@3.x: Fix Junit 4.13 deprecated API use (#6813)\n\n","date":"2020-01-07 16:33:23","modifiedFileCount":"4","status":"M","submitter":"David Karnok"}]
