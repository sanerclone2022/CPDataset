[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void combineLatestNArguments() throws Exception {\n        Flowable source = Flowable.just(1);\n\n        for (int i = 2; i < 10; i++) {\n            Class<?>[] types = new Class[i + 1];\n            Arrays.fill(types, Publisher.class);\n            types[i] = i == 2 ? BiFunction.class : Class.forName(\"io.reactivex.rxjava3.functions.Function\" + i);\n\n            Method m = Flowable.class.getMethod(\"combineLatest\", types);\n\n            Object[] params = new Object[i + 1];\n            Arrays.fill(params, source);\n            params[i] = ArgsToString.INSTANCE;\n\n            StringBuilder b = new StringBuilder();\n            for (int j = 0; j < i; j++) {\n                b.append('1');\n            }\n\n            ((Flowable)m.invoke(null, params)).test().assertResult(b.toString());\n\n            for (int j = 0; j < params.length; j++) {\n                Object[] params0 = params.clone();\n                params0[j] = null;\n\n                try {\n                    m.invoke(null, params0);\n                    fail(\"Should have thrown @ \" + m);\n                } catch (InvocationTargetException ex) {\n                    assertTrue(ex.toString(), ex.getCause() instanceof NullPointerException);\n\n                    if (j < i) {\n                        assertEquals(\"source\" + (j + 1) + \" is null\", ex.getCause().getMessage());\n                    } else {\n                        assertEquals(\"f is null\", ex.getCause().getMessage());\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1061,"groupId":"11289","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"combineLatestNArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bb/ffd97ee457fba272e7ee1c19226e6ba9b1aa23.src","preCode":"    public void combineLatestNArguments() throws Exception {\n        Flowable source = Flowable.just(1);\n\n        for (int i = 2; i < 10; i++) {\n            Class<?>[] types = new Class[i + 1];\n            Arrays.fill(types, Publisher.class);\n            types[i] = i == 2 ? BiFunction.class : Class.forName(\"io.reactivex.rxjava3.functions.Function\" + i);\n\n            Method m = Flowable.class.getMethod(\"combineLatest\", types);\n\n            Object[] params = new Object[i + 1];\n            Arrays.fill(params, source);\n            params[i] = ArgsToString.INSTANCE;\n\n            StringBuilder b = new StringBuilder();\n            for (int j = 0; j < i; j++) {\n                b.append('1');\n            }\n\n            ((Flowable)m.invoke(null, params)).test().assertResult(b.toString());\n\n            for (int j = 0; j < params.length; j++) {\n                Object[] params0 = params.clone();\n                params0[j] = null;\n\n                try {\n                    m.invoke(null, params0);\n                    fail(\"Should have thrown @ \" + m);\n                } catch (InvocationTargetException ex) {\n                    assertTrue(ex.toString(), ex.getCause() instanceof NullPointerException);\n\n                    if (j < i) {\n                        assertEquals(\"source\" + (j + 1) + \" is null\", ex.getCause().getMessage());\n                    } else {\n                        assertEquals(\"f is null\", ex.getCause().getMessage());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1022,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void zipNArguments() throws Exception {\n        Flowable source = Flowable.just(1);\n\n        for (int i = 2; i < 10; i++) {\n            Class<?>[] types = new Class[i + 1];\n            Arrays.fill(types, Publisher.class);\n            types[i] = i == 2 ? BiFunction.class : Class.forName(\"io.reactivex.rxjava3.functions.Function\" + i);\n\n            Method m = Flowable.class.getMethod(\"zip\", types);\n\n            Object[] params = new Object[i + 1];\n            Arrays.fill(params, source);\n            params[i] = ArgsToString.INSTANCE;\n\n            StringBuilder b = new StringBuilder();\n            for (int j = 0; j < i; j++) {\n                b.append('1');\n            }\n\n            ((Flowable)m.invoke(null, params)).test().assertResult(b.toString());\n\n            for (int j = 0; j < params.length; j++) {\n                Object[] params0 = params.clone();\n                params0[j] = null;\n\n                try {\n                    m.invoke(null, params0);\n                    fail(\"Should have thrown @ \" + m);\n                } catch (InvocationTargetException ex) {\n                    assertTrue(ex.toString(), ex.getCause() instanceof NullPointerException);\n\n                    if (j < i) {\n                        assertEquals(\"source\" + (j + 1) + \" is null\", ex.getCause().getMessage());\n                    } else {\n                        assertEquals(\"f is null\", ex.getCause().getMessage());\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1305,"groupId":"11289","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"zipNArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7a/a44b75348b67c5b5b9dadfe159d380003d1562.src","preCode":"    public void zipNArguments() throws Exception {\n        Flowable source = Flowable.just(1);\n\n        for (int i = 2; i < 10; i++) {\n            Class<?>[] types = new Class[i + 1];\n            Arrays.fill(types, Publisher.class);\n            types[i] = i == 2 ? BiFunction.class : Class.forName(\"io.reactivex.rxjava3.functions.Function\" + i);\n\n            Method m = Flowable.class.getMethod(\"zip\", types);\n\n            Object[] params = new Object[i + 1];\n            Arrays.fill(params, source);\n            params[i] = ArgsToString.INSTANCE;\n\n            StringBuilder b = new StringBuilder();\n            for (int j = 0; j < i; j++) {\n                b.append('1');\n            }\n\n            ((Flowable)m.invoke(null, params)).test().assertResult(b.toString());\n\n            for (int j = 0; j < params.length; j++) {\n                Object[] params0 = params.clone();\n                params0[j] = null;\n\n                try {\n                    m.invoke(null, params0);\n                    fail(\"Should have thrown @ \" + m);\n                } catch (InvocationTargetException ex) {\n                    assertTrue(ex.toString(), ex.getCause() instanceof NullPointerException);\n\n                    if (j < i) {\n                        assertEquals(\"source\" + (j + 1) + \" is null\", ex.getCause().getMessage());\n                    } else {\n                        assertEquals(\"f is null\", ex.getCause().getMessage());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1266,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-26 06:52:13","codes":[{"authorDate":"2019-12-26 06:52:13","commitOrder":2,"curCode":"    public void combineLatestNArguments() throws Exception {\n        Flowable source = Flowable.just(1);\n\n        for (int i = 2; i < 10; i++) {\n            Class<?>[] types = new Class[i + 1];\n            Arrays.fill(types, Publisher.class);\n            types[i] = i == 2 ? BiFunction.class : Class.forName(\"io.reactivex.rxjava3.functions.Function\" + i);\n\n            Method m = Flowable.class.getMethod(\"combineLatest\", types);\n\n            Object[] params = new Object[i + 1];\n            Arrays.fill(params, source);\n            params[i] = ArgsToString.INSTANCE;\n\n            StringBuilder b = new StringBuilder();\n            for (int j = 0; j < i; j++) {\n                b.append('1');\n            }\n\n            ((Flowable)m.invoke(null, params)).test().assertResult(b.toString());\n\n            for (int j = 0; j < params.length; j++) {\n                Object[] params0 = params.clone();\n                params0[j] = null;\n\n                try {\n                    m.invoke(null, params0);\n                    fail(\"Should have thrown @ \" + m);\n                } catch (InvocationTargetException ex) {\n                    assertTrue(ex.toString(), ex.getCause() instanceof NullPointerException);\n\n                    if (j < i) {\n                        assertEquals(\"source\" + (j + 1) + \" is null\", ex.getCause().getMessage());\n                    } else {\n                        assertEquals(\"combiner is null\", ex.getCause().getMessage());\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-12-26 06:52:13","endLine":1054,"groupId":"106420","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"combineLatestNArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/68/29c999862307016575437e05c2622cffb24350.src","preCode":"    public void combineLatestNArguments() throws Exception {\n        Flowable source = Flowable.just(1);\n\n        for (int i = 2; i < 10; i++) {\n            Class<?>[] types = new Class[i + 1];\n            Arrays.fill(types, Publisher.class);\n            types[i] = i == 2 ? BiFunction.class : Class.forName(\"io.reactivex.rxjava3.functions.Function\" + i);\n\n            Method m = Flowable.class.getMethod(\"combineLatest\", types);\n\n            Object[] params = new Object[i + 1];\n            Arrays.fill(params, source);\n            params[i] = ArgsToString.INSTANCE;\n\n            StringBuilder b = new StringBuilder();\n            for (int j = 0; j < i; j++) {\n                b.append('1');\n            }\n\n            ((Flowable)m.invoke(null, params)).test().assertResult(b.toString());\n\n            for (int j = 0; j < params.length; j++) {\n                Object[] params0 = params.clone();\n                params0[j] = null;\n\n                try {\n                    m.invoke(null, params0);\n                    fail(\"Should have thrown @ \" + m);\n                } catch (InvocationTargetException ex) {\n                    assertTrue(ex.toString(), ex.getCause() instanceof NullPointerException);\n\n                    if (j < i) {\n                        assertEquals(\"source\" + (j + 1) + \" is null\", ex.getCause().getMessage());\n                    } else {\n                        assertEquals(\"f is null\", ex.getCause().getMessage());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1015,"status":"M"},{"authorDate":"2019-12-26 06:52:13","commitOrder":2,"curCode":"    public void zipNArguments() throws Exception {\n        Flowable source = Flowable.just(1);\n\n        for (int i = 2; i < 10; i++) {\n            Class<?>[] types = new Class[i + 1];\n            Arrays.fill(types, Publisher.class);\n            types[i] = i == 2 ? BiFunction.class : Class.forName(\"io.reactivex.rxjava3.functions.Function\" + i);\n\n            Method m = Flowable.class.getMethod(\"zip\", types);\n\n            Object[] params = new Object[i + 1];\n            Arrays.fill(params, source);\n            params[i] = ArgsToString.INSTANCE;\n\n            StringBuilder b = new StringBuilder();\n            for (int j = 0; j < i; j++) {\n                b.append('1');\n            }\n\n            ((Flowable)m.invoke(null, params)).test().assertResult(b.toString());\n\n            for (int j = 0; j < params.length; j++) {\n                Object[] params0 = params.clone();\n                params0[j] = null;\n\n                try {\n                    m.invoke(null, params0);\n                    fail(\"Should have thrown @ \" + m);\n                } catch (InvocationTargetException ex) {\n                    assertTrue(ex.toString(), ex.getCause() instanceof NullPointerException);\n\n                    if (j < i) {\n                        assertEquals(\"source\" + (j + 1) + \" is null\", ex.getCause().getMessage());\n                    } else {\n                        assertEquals(\"zipper is null\", ex.getCause().getMessage());\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-12-26 06:52:13","endLine":1305,"groupId":"106420","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"zipNArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/61/4dc28aaa6b3d3c1750965056c12d9f5de42af4.src","preCode":"    public void zipNArguments() throws Exception {\n        Flowable source = Flowable.just(1);\n\n        for (int i = 2; i < 10; i++) {\n            Class<?>[] types = new Class[i + 1];\n            Arrays.fill(types, Publisher.class);\n            types[i] = i == 2 ? BiFunction.class : Class.forName(\"io.reactivex.rxjava3.functions.Function\" + i);\n\n            Method m = Flowable.class.getMethod(\"zip\", types);\n\n            Object[] params = new Object[i + 1];\n            Arrays.fill(params, source);\n            params[i] = ArgsToString.INSTANCE;\n\n            StringBuilder b = new StringBuilder();\n            for (int j = 0; j < i; j++) {\n                b.append('1');\n            }\n\n            ((Flowable)m.invoke(null, params)).test().assertResult(b.toString());\n\n            for (int j = 0; j < params.length; j++) {\n                Object[] params0 = params.clone();\n                params0[j] = null;\n\n                try {\n                    m.invoke(null, params0);\n                    fail(\"Should have thrown @ \" + m);\n                } catch (InvocationTargetException ex) {\n                    assertTrue(ex.toString(), ex.getCause() instanceof NullPointerException);\n\n                    if (j < i) {\n                        assertEquals(\"source\" + (j + 1) + \" is null\", ex.getCause().getMessage());\n                    } else {\n                        assertEquals(\"f is null\", ex.getCause().getMessage());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1266,"status":"M"}],"commitId":"480889c58d3b762b073ef80229bf27f9d9429dd7","commitMessage":"@@@3.x: Add missing annotations.  fix many diamonds (#6795)\n\n* 3.x: Add missing annotations.  fix many diamonds\n\n* Fix accidental JDK 9 API usage\n\n* Fix NPE in unicast due to null-cleanup\n","date":"2019-12-26 06:52:13","modifiedFileCount":"52","status":"M","submitter":"David Karnok"}]
