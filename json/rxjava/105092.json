[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void fusedOnErrorCrash() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        final int[] call = { 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[0]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertFailure(TestException.class);\n\n        assertEquals(0, call[0]);\n    }\n","date":"2019-08-16 20:51:17","endLine":529,"groupId":"3871","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fusedOnErrorCrash","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/42/05fad5e2a3a3cc4786e8c6126d08d297969f6a.src","preCode":"    public void fusedOnErrorCrash() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        final int[] call = { 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[0]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertFailure(TestException.class);\n\n        assertEquals(0, call[0]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void fusedOnErrorCrashConditional() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>().setInitialFusionMode(QueueFuseable.ANY);\n\n        final int[] call = { 0 };\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[0]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertFailure(TestException.class);\n\n        assertEquals(0, call[0]);\n    }\n","date":"2019-08-16 20:51:17","endLine":589,"groupId":"1238","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedOnErrorCrashConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/de/ea77ea7031cbba14cda8693e0b51d50556c426.src","preCode":"    public void fusedOnErrorCrashConditional() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>().setInitialFusionMode(QueueFuseable.ANY);\n\n        final int[] call = { 0 };\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[0]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertFailure(TestException.class);\n\n        assertEquals(0, call[0]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void fusedOnErrorCrash() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        final int[] call = { 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[0]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertFailure(TestException.class);\n\n        assertEquals(0, call[0]);\n    }\n","date":"2019-12-22 18:59:44","endLine":529,"groupId":"105092","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fusedOnErrorCrash","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/04/82d23906d2b67cb52f557e5424a89f4fce6bd6.src","preCode":"    public void fusedOnErrorCrash() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        final int[] call = { 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[0]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertFailure(TestException.class);\n\n        assertEquals(0, call[0]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":504,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void fusedOnErrorCrashConditional() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>().setInitialFusionMode(QueueFuseable.ANY);\n\n        final int[] call = { 0 };\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[0]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertFailure(TestException.class);\n\n        assertEquals(0, call[0]);\n    }\n","date":"2019-08-16 20:51:17","endLine":589,"groupId":"105092","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedOnErrorCrashConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/de/ea77ea7031cbba14cda8693e0b51d50556c426.src","preCode":"    public void fusedOnErrorCrashConditional() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>().setInitialFusionMode(QueueFuseable.ANY);\n\n        final int[] call = { 0 };\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[0]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(ts);\n\n        ts.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertFailure(TestException.class);\n\n        assertEquals(0, call[0]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
