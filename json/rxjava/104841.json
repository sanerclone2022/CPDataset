[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressureUpstream2() throws InterruptedException {\n        final AtomicInteger generated1 = new AtomicInteger();\n        Observable<Integer> o1 = createInfiniteObservable(generated1).subscribeOn(Schedulers.computation());\n\n        TestObserverEx<Integer> testObserver = new TestObserverEx<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n            }\n        };\n\n        Observable.merge(o1.take(Flowable.bufferSize() * 2), Observable.just(-99)).subscribe(testObserver);\n        testObserver.awaitDone(5, TimeUnit.SECONDS);\n\n        List<Integer> onNextEvents = testObserver.values();\n\n        System.out.println(\"Generated 1: \" + generated1.get() + \" / received: \" + onNextEvents.size());\n        System.out.println(onNextEvents);\n\n        if (testObserver.errors().size() > 0) {\n            testObserver.errors().get(0).printStackTrace();\n        }\n        testObserver.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 2 + 1, onNextEvents.size());\n        \r\n        assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3);\n    }\n","date":"2019-08-16 20:51:17","endLine":705,"groupId":"6958","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressureUpstream2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/87/36bd4ae332523594a8bd4235fb8a57ab596441.src","preCode":"    public void backpressureUpstream2() throws InterruptedException {\n        final AtomicInteger generated1 = new AtomicInteger();\n        Observable<Integer> o1 = createInfiniteObservable(generated1).subscribeOn(Schedulers.computation());\n\n        TestObserverEx<Integer> testObserver = new TestObserverEx<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n            }\n        };\n\n        Observable.merge(o1.take(Flowable.bufferSize() * 2), Observable.just(-99)).subscribe(testObserver);\n        testObserver.awaitDone(5, TimeUnit.SECONDS);\n\n        List<Integer> onNextEvents = testObserver.values();\n\n        System.out.println(\"Generated 1: \" + generated1.get() + \" / received: \" + onNextEvents.size());\n        System.out.println(onNextEvents);\n\n        if (testObserver.errors().size() > 0) {\n            testObserver.errors().get(0).printStackTrace();\n        }\n        testObserver.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 2 + 1, onNextEvents.size());\n        \r\n        assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressureUpstream2() throws InterruptedException {\n        final AtomicInteger generated1 = new AtomicInteger();\n        Flowable<Integer> f1 = createInfiniteFlowable(generated1).subscribeOn(Schedulers.computation());\n\n        TestSubscriberEx<Integer> testSubscriber = new TestSubscriberEx<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n            }\n        };\n\n        Flowable.merge(f1.take(Flowable.bufferSize() * 2), Flowable.just(-99)).subscribe(testSubscriber);\n        testSubscriber.awaitDone(5, TimeUnit.SECONDS);\n\n        List<Integer> onNextEvents = testSubscriber.values();\n\n        System.out.println(\"Generated 1: \" + generated1.get() + \" / received: \" + onNextEvents.size());\n        System.out.println(onNextEvents);\n\n        if (testSubscriber.errors().size() > 0) {\n            testSubscriber.errors().get(0).printStackTrace();\n        }\n        testSubscriber.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 2 + 1, onNextEvents.size());\n        \r\n        assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3);\n    }\n","date":"2019-08-16 20:51:17","endLine":723,"groupId":"6958","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureUpstream2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/22/526d1922532b741c7161dad0d1db1939ced05a.src","preCode":"    public void backpressureUpstream2() throws InterruptedException {\n        final AtomicInteger generated1 = new AtomicInteger();\n        Flowable<Integer> f1 = createInfiniteFlowable(generated1).subscribeOn(Schedulers.computation());\n\n        TestSubscriberEx<Integer> testSubscriber = new TestSubscriberEx<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n            }\n        };\n\n        Flowable.merge(f1.take(Flowable.bufferSize() * 2), Flowable.just(-99)).subscribe(testSubscriber);\n        testSubscriber.awaitDone(5, TimeUnit.SECONDS);\n\n        List<Integer> onNextEvents = testSubscriber.values();\n\n        System.out.println(\"Generated 1: \" + generated1.get() + \" / received: \" + onNextEvents.size());\n        System.out.println(onNextEvents);\n\n        if (testSubscriber.errors().size() > 0) {\n            testSubscriber.errors().get(0).printStackTrace();\n        }\n        testSubscriber.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 2 + 1, onNextEvents.size());\n        \r\n        assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2021-03-14 15:50:44","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void backpressureUpstream2() throws InterruptedException {\n        final AtomicInteger generated1 = new AtomicInteger();\n        Observable<Integer> o1 = createInfiniteObservable(generated1).subscribeOn(Schedulers.computation());\n\n        TestObserverEx<Integer> testObserver = new TestObserverEx<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n            }\n        };\n\n        Observable.merge(o1.take(Flowable.bufferSize() * 2), Observable.just(-99)).subscribe(testObserver);\n        testObserver.awaitDone(5, TimeUnit.SECONDS);\n\n        List<Integer> onNextEvents = testObserver.values();\n\n        System.out.println(\"Generated 1: \" + generated1.get() + \" / received: \" + onNextEvents.size());\n        System.out.println(onNextEvents);\n\n        if (testObserver.errors().size() > 0) {\n            testObserver.errors().get(0).printStackTrace();\n        }\n        testObserver.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 2 + 1, onNextEvents.size());\n        \r\n        assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3);\n    }\n","date":"2019-08-16 20:51:17","endLine":705,"groupId":"104841","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"backpressureUpstream2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/87/36bd4ae332523594a8bd4235fb8a57ab596441.src","preCode":"    public void backpressureUpstream2() throws InterruptedException {\n        final AtomicInteger generated1 = new AtomicInteger();\n        Observable<Integer> o1 = createInfiniteObservable(generated1).subscribeOn(Schedulers.computation());\n\n        TestObserverEx<Integer> testObserver = new TestObserverEx<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n            }\n        };\n\n        Observable.merge(o1.take(Flowable.bufferSize() * 2), Observable.just(-99)).subscribe(testObserver);\n        testObserver.awaitDone(5, TimeUnit.SECONDS);\n\n        List<Integer> onNextEvents = testObserver.values();\n\n        System.out.println(\"Generated 1: \" + generated1.get() + \" / received: \" + onNextEvents.size());\n        System.out.println(onNextEvents);\n\n        if (testObserver.errors().size() > 0) {\n            testObserver.errors().get(0).printStackTrace();\n        }\n        testObserver.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 2 + 1, onNextEvents.size());\n        \r\n        assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"N"},{"authorDate":"2021-03-14 15:50:44","commitOrder":2,"curCode":"    public void backpressureUpstream2() throws InterruptedException {\n        final AtomicInteger generated1 = new AtomicInteger();\n        Flowable<Integer> f1 = createInfiniteFlowable(generated1).subscribeOn(Schedulers.computation());\n\n        TestSubscriberEx<Integer> testSubscriber = new TestSubscriberEx<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n            }\n        };\n\n        Flowable.merge(f1.take(Flowable.bufferSize() * 2), Flowable.just(-99)).subscribe(testSubscriber);\n        testSubscriber.awaitDone(10, TimeUnit.SECONDS);\n\n        List<Integer> onNextEvents = testSubscriber.values();\n\n        System.out.println(\"Generated 1: \" + generated1.get() + \" / received: \" + onNextEvents.size());\n        System.out.println(onNextEvents);\n\n        if (testSubscriber.errors().size() > 0) {\n            testSubscriber.errors().get(0).printStackTrace();\n        }\n        testSubscriber.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 2 + 1, onNextEvents.size());\n        \r\n        assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3);\n    }\n","date":"2021-03-14 15:50:44","endLine":723,"groupId":"104841","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"backpressureUpstream2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/57/b7a4a6670d30958282d65d1cff4e84791753ea.src","preCode":"    public void backpressureUpstream2() throws InterruptedException {\n        final AtomicInteger generated1 = new AtomicInteger();\n        Flowable<Integer> f1 = createInfiniteFlowable(generated1).subscribeOn(Schedulers.computation());\n\n        TestSubscriberEx<Integer> testSubscriber = new TestSubscriberEx<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n            }\n        };\n\n        Flowable.merge(f1.take(Flowable.bufferSize() * 2), Flowable.just(-99)).subscribe(testSubscriber);\n        testSubscriber.awaitDone(5, TimeUnit.SECONDS);\n\n        List<Integer> onNextEvents = testSubscriber.values();\n\n        System.out.println(\"Generated 1: \" + generated1.get() + \" / received: \" + onNextEvents.size());\n        System.out.println(onNextEvents);\n\n        if (testSubscriber.errors().size() > 0) {\n            testSubscriber.errors().get(0).printStackTrace();\n        }\n        testSubscriber.assertNoErrors();\n        assertEquals(Flowable.bufferSize() * 2 + 1, onNextEvents.size());\n        \r\n        assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"M"}],"commitId":"bdf13a1fdb54b79e0ece299535de75c653abc827","commitMessage":"@@@Fix intermittently failing unit tests (#7213)\n\n* Fix intermittently failing tests.  mostly increasing timeout\n\nFix several unit tests that are intermittently failing. All fixes\ninvolve increasing timeouts. Adjusted formatting in several areas within\nupdated tests.\n\n* Remove formatting/refactoring from previous commit\n\nSuperfluous formatting and refactoring was making review impossible.","date":"2021-03-14 15:50:44","modifiedFileCount":"7","status":"M","submitter":"benjamintboyle"}]
