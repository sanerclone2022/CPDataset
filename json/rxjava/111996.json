[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        cancelAll();\n                        Throwable mbe = new MissingBackpressureException(\"Queue full?!\");\n                        if (errors.compareAndSet(null, mbe)) {\n                            downstream.onError(mbe);\n                        } else {\n                            RxJavaPlugins.onError(mbe);\n                        }\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    cancelAll();\n                    onError(new MissingBackpressureException(\"Queue full?!\"));\n                    return;\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","date":"2019-08-16 20:51:17","endLine":182,"groupId":"2278","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onNext","params":"(JoinInnerSubscriber<T>inner@Tvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/db/26589bd13dfd051183e3558f4b579e2f259c48.src","preCode":"        public void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        cancelAll();\n                        Throwable mbe = new MissingBackpressureException(\"Queue full?!\");\n                        if (errors.compareAndSet(null, mbe)) {\n                            downstream.onError(mbe);\n                        } else {\n                            RxJavaPlugins.onError(mbe);\n                        }\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    cancelAll();\n                    onError(new MissingBackpressureException(\"Queue full?!\"));\n                    return;\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        inner.cancel();\n                        errors.addThrowable(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                        drainLoop();\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    if (inner.cancel()) {\n                        errors.addThrowable(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                    }\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","date":"2019-08-16 20:51:17","endLine":365,"groupId":"5524","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onNext","params":"(JoinInnerSubscriber<T>inner@Tvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/db/26589bd13dfd051183e3558f4b579e2f259c48.src","preCode":"        void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        inner.cancel();\n                        errors.addThrowable(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                        drainLoop();\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    if (inner.cancel()) {\n                        errors.addThrowable(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                    }\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-28 22:07:44","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        public void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        cancelAll();\n                        Throwable mbe = new MissingBackpressureException(\"Queue full?!\");\n                        if (errors.compareAndSet(null, mbe)) {\n                            downstream.onError(mbe);\n                        } else {\n                            RxJavaPlugins.onError(mbe);\n                        }\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    cancelAll();\n                    onError(new MissingBackpressureException(\"Queue full?!\"));\n                    return;\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","date":"2019-08-16 20:51:17","endLine":182,"groupId":"2278","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onNext","params":"(JoinInnerSubscriber<T>inner@Tvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/db/26589bd13dfd051183e3558f4b579e2f259c48.src","preCode":"        public void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        cancelAll();\n                        Throwable mbe = new MissingBackpressureException(\"Queue full?!\");\n                        if (errors.compareAndSet(null, mbe)) {\n                            downstream.onError(mbe);\n                        } else {\n                            RxJavaPlugins.onError(mbe);\n                        }\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    cancelAll();\n                    onError(new MissingBackpressureException(\"Queue full?!\"));\n                    return;\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"N"},{"authorDate":"2019-08-28 22:07:44","commitOrder":2,"curCode":"        void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        inner.cancel();\n                        errors.tryAddThrowableOrReport(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                        drainLoop();\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    if (inner.cancel()) {\n                        errors.tryAddThrowableOrReport(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                    }\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","date":"2019-08-28 22:07:44","endLine":365,"groupId":"12952","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onNext","params":"(JoinInnerSubscriber<T>inner@Tvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b1/5fa8dfd5f166a43e7f3ff2a72baaa25d3b7732.src","preCode":"        void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        inner.cancel();\n                        errors.addThrowable(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                        drainLoop();\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    if (inner.cancel()) {\n                        errors.addThrowable(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                    }\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"a07c45eeeb68b1cfc24f913c75edbc2820aadb76","commitMessage":"@@@3.x: Cleanup addThrowable.  \"2.x\" and null-value error messages (#6639)\n\n","date":"2019-08-28 22:07:44","modifiedFileCount":"106","status":"M","submitter":"David Karnok"},{"authorTime":"2020-02-12 23:26:52","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":3,"curCode":"        public void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        cancelAll();\n                        Throwable mbe = new MissingBackpressureException(\"Queue full?!\");\n                        if (errors.compareAndSet(null, mbe)) {\n                            downstream.onError(mbe);\n                        } else {\n                            RxJavaPlugins.onError(mbe);\n                        }\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    cancelAll();\n                    onError(new MissingBackpressureException(\"Queue full?!\"));\n                    return;\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","date":"2019-08-16 20:51:17","endLine":182,"groupId":"111996","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onNext","params":"(JoinInnerSubscriber<T>inner@Tvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/db/26589bd13dfd051183e3558f4b579e2f259c48.src","preCode":"        public void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        cancelAll();\n                        Throwable mbe = new MissingBackpressureException(\"Queue full?!\");\n                        if (errors.compareAndSet(null, mbe)) {\n                            downstream.onError(mbe);\n                        } else {\n                            RxJavaPlugins.onError(mbe);\n                        }\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    cancelAll();\n                    onError(new MissingBackpressureException(\"Queue full?!\"));\n                    return;\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"N"},{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"        void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        inner.cancel();\n                        errors.tryAddThrowableOrReport(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                        drainLoop();\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    inner.cancel();\n                    errors.tryAddThrowableOrReport(new MissingBackpressureException(\"Queue full?!\"));\n                    done.decrementAndGet();\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","date":"2020-02-12 23:26:52","endLine":359,"groupId":"111996","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onNext","params":"(JoinInnerSubscriber<T>inner@Tvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/57/f82230a0c1af8b6dc4321ef8701d0609141ec5.src","preCode":"        void onNext(JoinInnerSubscriber<T> inner, T value) {\n            if (get() == 0 && compareAndSet(0, 1)) {\n                if (requested.get() != 0) {\n                    downstream.onNext(value);\n                    if (requested.get() != Long.MAX_VALUE) {\n                        requested.decrementAndGet();\n                    }\n                    inner.request(1);\n                } else {\n                    SimplePlainQueue<T> q = inner.getQueue();\n\n                    if (!q.offer(value)) {\n                        inner.cancel();\n                        errors.tryAddThrowableOrReport(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                        drainLoop();\n                        return;\n                    }\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n            } else {\n                SimplePlainQueue<T> q = inner.getQueue();\n\n                if (!q.offer(value)) {\n                    if (inner.cancel()) {\n                        errors.tryAddThrowableOrReport(new MissingBackpressureException(\"Queue full?!\"));\n                        done.decrementAndGet();\n                    }\n                }\n\n                if (getAndIncrement() != 0) {\n                    return;\n                }\n            }\n\n            drainLoop();\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelJoin.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
