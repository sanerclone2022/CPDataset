[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber);\n\n        Flowable.fromFuture(future).subscribe(ts);\n\n        ts.cancel();\n\n        verify(subscriber, times(1)).onNext(value);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(anyBoolean());\n    }\n","date":"2019-08-16 20:51:17","endLine":51,"groupId":"2212","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"success","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/a61aa2236ce2ba6c234545855f9927bd46aec1.src","preCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber);\n\n        Flowable.fromFuture(future).subscribe(ts);\n\n        ts.cancel();\n\n        verify(subscriber, times(1)).onNext(value);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(anyBoolean());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber);\n\n        Flowable.fromFuture(future, scheduler).subscribe(ts);\n\n        verify(subscriber, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(subscriber, times(1)).onNext(value);\n    }\n","date":"2019-08-16 20:51:17","endLine":72,"groupId":"2213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"successOperatesOnSuppliedScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/a61aa2236ce2ba6c234545855f9927bd46aec1.src","preCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber);\n\n        Flowable.fromFuture(future, scheduler).subscribe(ts);\n\n        verify(subscriber, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(subscriber, times(1)).onNext(value);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<>(subscriber);\n\n        Flowable.fromFuture(future).subscribe(ts);\n\n        ts.cancel();\n\n        verify(subscriber, times(1)).onNext(value);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(anyBoolean());\n    }\n","date":"2019-12-22 18:39:23","endLine":51,"groupId":"2212","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"success","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/52/4a7216e11c9cdd4535ae7d5ad0b5e3e0006b64.src","preCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber);\n\n        Flowable.fromFuture(future).subscribe(ts);\n\n        ts.cancel();\n\n        verify(subscriber, times(1)).onNext(value);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(anyBoolean());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriber<Object> ts = new TestSubscriber<>(subscriber);\n\n        Flowable.fromFuture(future, scheduler).subscribe(ts);\n\n        verify(subscriber, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(subscriber, times(1)).onNext(value);\n    }\n","date":"2019-12-22 18:39:23","endLine":72,"groupId":"2213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"successOperatesOnSuppliedScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/52/4a7216e11c9cdd4535ae7d5ad0b5e3e0006b64.src","preCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber);\n\n        Flowable.fromFuture(future, scheduler).subscribe(ts);\n\n        verify(subscriber, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(subscriber, times(1)).onNext(value);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2020-01-07 17:47:28","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<>(subscriber);\n\n        Flowable.fromFuture(future).subscribe(ts);\n\n        ts.cancel();\n\n        verify(subscriber, times(1)).onNext(value);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(anyBoolean());\n    }\n","date":"2019-12-22 18:39:23","endLine":51,"groupId":"106563","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"success","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/52/4a7216e11c9cdd4535ae7d5ad0b5e3e0006b64.src","preCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<>(subscriber);\n\n        Flowable.fromFuture(future).subscribe(ts);\n\n        ts.cancel();\n\n        verify(subscriber, times(1)).onNext(value);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(anyBoolean());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"N"},{"authorDate":"2020-01-07 17:47:28","commitOrder":3,"curCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriber<Object> ts = new TestSubscriber<>(subscriber);\n\n        Flowable.fromFuture(future).subscribeOn(scheduler).subscribe(ts);\n\n        verify(subscriber, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(subscriber, times(1)).onNext(value);\n    }\n","date":"2020-01-07 17:47:28","endLine":72,"groupId":"106563","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"successOperatesOnSuppliedScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/42/41dc8be912d124d3b2d584a42e87609d42e2cd.src","preCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriber<Object> ts = new TestSubscriber<>(subscriber);\n\n        Flowable.fromFuture(future, scheduler).subscribe(ts);\n\n        verify(subscriber, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(subscriber, times(1)).onNext(value);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"9e2fa63aa044b67d28de351aee32685e4eaa8c2d","commitMessage":"@@@3.x: Remove fromFuture(....  Scheduler) overloads (#6814)\n\n","date":"2020-01-07 17:47:28","modifiedFileCount":"11","status":"M","submitter":"David Karnok"}]
