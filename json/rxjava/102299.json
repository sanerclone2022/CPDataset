[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void onComplete() {\n            Observer<? super T> a = downstream;\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n                T v = poll();\n                if (v == null) {\n                    if (!cancelled) {\n                        a.onComplete();\n                    }\n                    return;\n                }\n                a.onNext(v);\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":87,"groupId":"3","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/45/566a64e779ca57eb94fdd88ecd1a035d5ff4ce.src","preCode":"        public void onComplete() {\n            Observer<? super T> a = downstream;\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n                T v = poll();\n                if (v == null) {\n                    if (!cancelled) {\n                        a.onComplete();\n                    }\n                    return;\n                }\n                a.onNext(v);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTakeLast.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        void drain() {\n            if (wip.getAndIncrement() == 0) {\n                Subscriber<? super T> a = downstream;\n                long r = requested.get();\n                do {\n                    if (cancelled) {\n                        return;\n                    }\n                    if (done) {\n                        long e = 0L;\n\n                        while (e != r) {\n                            if (cancelled) {\n                                return;\n                            }\n                            T v = poll();\n                            if (v == null) {\n                                a.onComplete();\n                                return;\n                            }\n                            a.onNext(v);\n                            e++;\n                        }\n                        if (e != 0L && r != Long.MAX_VALUE) {\n                            r = requested.addAndGet(-e);\n                        }\n                    }\n                } while (wip.decrementAndGet() != 0);\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":128,"groupId":"9915","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"drain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/52/52bd808dce8f2005fc492a3ba30df2cf346c15.src","preCode":"        void drain() {\n            if (wip.getAndIncrement() == 0) {\n                Subscriber<? super T> a = downstream;\n                long r = requested.get();\n                do {\n                    if (cancelled) {\n                        return;\n                    }\n                    if (done) {\n                        long e = 0L;\n\n                        while (e != r) {\n                            if (cancelled) {\n                                return;\n                            }\n                            T v = poll();\n                            if (v == null) {\n                                a.onComplete();\n                                return;\n                            }\n                            a.onNext(v);\n                            e++;\n                        }\n                        if (e != 0L && r != Long.MAX_VALUE) {\n                            r = requested.addAndGet(-e);\n                        }\n                    }\n                } while (wip.decrementAndGet() != 0);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2020-02-12 23:26:52","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":2,"curCode":"        public void onComplete() {\n            Observer<? super T> a = downstream;\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n                T v = poll();\n                if (v == null) {\n                    a.onComplete();\n                    return;\n                }\n                a.onNext(v);\n            }\n        }\n","date":"2020-02-12 23:26:52","endLine":85,"groupId":"102299","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/80/f408de3281ba1b928c25bd3804fbf0b6da4872.src","preCode":"        public void onComplete() {\n            Observer<? super T> a = downstream;\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n                T v = poll();\n                if (v == null) {\n                    if (!cancelled) {\n                        a.onComplete();\n                    }\n                    return;\n                }\n                a.onNext(v);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTakeLast.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-02-12 23:26:52","commitOrder":2,"curCode":"        void drain() {\n            if (wip.getAndIncrement() == 0) {\n                Subscriber<? super T> a = downstream;\n                long r = requested.get();\n                do {\n                    if (cancelled) {\n                        return;\n                    }\n                    if (done) {\n                        long e = 0L;\n\n                        while (e != r) {\n                            if (cancelled) {\n                                return;\n                            }\n                            T v = poll();\n                            if (v == null) {\n                                a.onComplete();\n                                return;\n                            }\n                            a.onNext(v);\n                            e++;\n                        }\n                        if (isEmpty()) {\n                            a.onComplete();\n                            return;\n                        }\n                        if (e != 0L) {\n                            r = BackpressureHelper.produced(requested, e);\n                        }\n                    }\n                } while (wip.decrementAndGet() != 0);\n            }\n        }\n","date":"2020-02-12 23:26:52","endLine":132,"groupId":"102299","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"drain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/50/98b589fd08115a6d4448f3c9518d6456e6fe3c.src","preCode":"        void drain() {\n            if (wip.getAndIncrement() == 0) {\n                Subscriber<? super T> a = downstream;\n                long r = requested.get();\n                do {\n                    if (cancelled) {\n                        return;\n                    }\n                    if (done) {\n                        long e = 0L;\n\n                        while (e != r) {\n                            if (cancelled) {\n                                return;\n                            }\n                            T v = poll();\n                            if (v == null) {\n                                a.onComplete();\n                                return;\n                            }\n                            a.onNext(v);\n                            e++;\n                        }\n                        if (e != 0L && r != Long.MAX_VALUE) {\n                            r = requested.addAndGet(-e);\n                        }\n                    }\n                } while (wip.decrementAndGet() != 0);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeLast.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
