[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Subscriber<String> subscriber = serializedSubscriber(ts);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        subscriber.onSubscribe(new BooleanSubscription());\n        ResourceSubscriber<String> as1 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        ResourceSubscriber<String> as2 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","date":"2019-08-16 20:51:17","endLine":431,"groupId":"12561","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"threadStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ac/541e2bcdbde01675daa13ab67989e84acf53b2.src","preCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Subscriber<String> subscriber = serializedSubscriber(ts);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        subscriber.onSubscribe(new BooleanSubscription());\n        ResourceSubscriber<String> as1 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        ResourceSubscriber<String> as2 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/SerializedSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Observer<String> o = serializedObserver(to);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        o.onSubscribe(Disposables.empty());\n        DisposableObserver<String> as1 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        DisposableObserver<String> as2 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","date":"2019-08-16 20:51:17","endLine":430,"groupId":"3642","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"threadStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/b86d8417dc3c7ac992dd9447d4af86ee4d0bcb.src","preCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Observer<String> o = serializedObserver(to);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        o.onSubscribe(Disposables.empty());\n        DisposableObserver<String> as1 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        DisposableObserver<String> as2 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/SerializedObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Subscriber<String> subscriber = serializedSubscriber(ts);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        subscriber.onSubscribe(new BooleanSubscription());\n        ResourceSubscriber<String> as1 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        ResourceSubscriber<String> as2 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","date":"2019-08-16 20:51:17","endLine":431,"groupId":"12561","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"threadStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ac/541e2bcdbde01675daa13ab67989e84acf53b2.src","preCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Subscriber<String> subscriber = serializedSubscriber(ts);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        subscriber.onSubscribe(new BooleanSubscription());\n        ResourceSubscriber<String> as1 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        ResourceSubscriber<String> as2 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/SerializedSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"N"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Observer<String> o = serializedObserver(to);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        o.onSubscribe(Disposable.empty());\n        DisposableObserver<String> as1 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        DisposableObserver<String> as2 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","date":"2019-12-20 02:39:40","endLine":431,"groupId":"6551","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"threadStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/84/fa4348797dadfa9f21d91391f190799d103f39.src","preCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Observer<String> o = serializedObserver(to);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        o.onSubscribe(Disposables.empty());\n        DisposableObserver<String> as1 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        DisposableObserver<String> as2 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/SerializedObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<>(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Subscriber<String> subscriber = serializedSubscriber(ts);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        subscriber.onSubscribe(new BooleanSubscription());\n        ResourceSubscriber<String> as1 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        ResourceSubscriber<String> as2 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","date":"2019-12-22 19:17:37","endLine":432,"groupId":"108058","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"threadStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/00/c7ae21038069d649adb076fcfdc8e00838e3cd.src","preCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestSubscriber<String> ts = new TestSubscriber<String>(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Subscriber<String> subscriber = serializedSubscriber(ts);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        subscriber.onSubscribe(new BooleanSubscription());\n        ResourceSubscriber<String> as1 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        ResourceSubscriber<String> as2 = new ResourceSubscriber<String>() {\n            @Override\n            public void onNext(String t) {\n                subscriber.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/SerializedSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<>(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Observer<String> o = serializedObserver(to);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        o.onSubscribe(Disposable.empty());\n        DisposableObserver<String> as1 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        DisposableObserver<String> as2 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","date":"2019-12-22 19:17:37","endLine":431,"groupId":"108058","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"threadStarvation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e5/81012d9bc73cdcf9768536a5765f2e23a5855d.src","preCode":"    public void threadStarvation() throws InterruptedException {\n\n        TestObserver<String> to = new TestObserver<String>(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String t) {\n                \r\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                }\n            }\n\n        });\n        final Observer<String> o = serializedObserver(to);\n\n        AtomicInteger p1 = new AtomicInteger();\n        AtomicInteger p2 = new AtomicInteger();\n\n        o.onSubscribe(Disposable.empty());\n        DisposableObserver<String> as1 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        DisposableObserver<String> as2 = new DisposableObserver<String>() {\n            @Override\n            public void onNext(String t) {\n                o.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                RxJavaPlugins.onError(t);\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        };\n\n        infinite(p1).subscribe(as1);\n        infinite(p2).subscribe(as2);\n\n        Thread.sleep(100);\n\n        System.out.println(\"p1: \" + p1.get() + \" p2: \" + p2.get() + \" => should be close to each other unless we have thread starvation\");\n        assertEquals(p1.get(), p2.get(), 10000); \r\n\n        as1.dispose();\n        as2.dispose();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/SerializedObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
