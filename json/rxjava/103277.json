[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Observable<Long> o = synchronousInterval()\n                .doOnSubscribe(new Consumer<Disposable>() {\n                    @Override\n                    public void accept(Disposable d) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestObserverEx<Long> observer = new TestObserverEx<Long>();\n        o.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(observer);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        observer.dispose();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + observer.errors());\n            if (observer.errors().size() > 0) {\n                observer.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        observer.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":252,"groupId":"12284","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"connectUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/747c480a90d6b4b716b7ce66cfb96d52316ec7.src","preCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Observable<Long> o = synchronousInterval()\n                .doOnSubscribe(new Consumer<Disposable>() {\n                    @Override\n                    public void accept(Disposable d) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestObserverEx<Long> observer = new TestObserverEx<Long>();\n        o.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(observer);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        observer.dispose();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + observer.errors());\n            if (observer.errors().size() > 0) {\n                observer.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        observer.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Flowable<Long> f = synchronousInterval()\n                .doOnSubscribe(new Consumer<Subscription>() {\n                    @Override\n                    public void accept(Subscription s) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestSubscriberEx<Long> s = new TestSubscriberEx<Long>();\n        f.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(s);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        s.cancel();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + s.errors());\n            if (s.errors().size() > 0) {\n                s.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        s.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":267,"groupId":"10309","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"connectUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/b38ff272c5ac364c7d2bea65b54206088a6700.src","preCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Flowable<Long> f = synchronousInterval()\n                .doOnSubscribe(new Consumer<Subscription>() {\n                    @Override\n                    public void accept(Subscription s) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestSubscriberEx<Long> s = new TestSubscriberEx<Long>();\n        f.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(s);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        s.cancel();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + s.errors());\n            if (s.errors().size() > 0) {\n                s.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        s.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Observable<Long> o = synchronousInterval()\n                .doOnSubscribe(new Consumer<Disposable>() {\n                    @Override\n                    public void accept(Disposable d) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestObserverEx<Long> observer = new TestObserverEx<Long>();\n        o.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(observer);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        observer.dispose();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + observer.errors());\n            if (observer.errors().size() > 0) {\n                observer.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        observer.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":252,"groupId":"12284","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"connectUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/747c480a90d6b4b716b7ce66cfb96d52316ec7.src","preCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Observable<Long> o = synchronousInterval()\n                .doOnSubscribe(new Consumer<Disposable>() {\n                    @Override\n                    public void accept(Disposable d) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestObserverEx<Long> observer = new TestObserverEx<Long>();\n        o.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(observer);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        observer.dispose();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + observer.errors());\n            if (observer.errors().size() > 0) {\n                observer.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        observer.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Flowable<Long> f = synchronousInterval()\n                .doOnSubscribe(new Consumer<Subscription>() {\n                    @Override\n                    public void accept(Subscription s) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestSubscriberEx<Long> s = new TestSubscriberEx<>();\n        f.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(s);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        s.cancel();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + s.errors());\n            if (s.errors().size() > 0) {\n                s.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        s.assertNoErrors();\n    }\n","date":"2019-12-22 18:39:23","endLine":267,"groupId":"10309","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"connectUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/9409ed1b42179daaf4a95577464551fd0383e0.src","preCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Flowable<Long> f = synchronousInterval()\n                .doOnSubscribe(new Consumer<Subscription>() {\n                    @Override\n                    public void accept(Subscription s) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestSubscriberEx<Long> s = new TestSubscriberEx<Long>();\n        f.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(s);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        s.cancel();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + s.errors());\n            if (s.errors().size() > 0) {\n                s.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        s.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Observable<Long> o = synchronousInterval()\n                .doOnSubscribe(new Consumer<Disposable>() {\n                    @Override\n                    public void accept(Disposable d) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestObserverEx<Long> observer = new TestObserverEx<>();\n        o.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(observer);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        observer.dispose();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + observer.errors());\n            if (observer.errors().size() > 0) {\n                observer.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        observer.assertNoErrors();\n    }\n","date":"2019-12-22 18:59:44","endLine":252,"groupId":"103277","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"connectUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d9/b98de8f9a21c077c76ae73d0336fd4963c589f.src","preCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Observable<Long> o = synchronousInterval()\n                .doOnSubscribe(new Consumer<Disposable>() {\n                    @Override\n                    public void accept(Disposable d) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestObserverEx<Long> observer = new TestObserverEx<Long>();\n        o.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(observer);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        observer.dispose();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + observer.errors());\n            if (observer.errors().size() > 0) {\n                observer.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        observer.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Flowable<Long> f = synchronousInterval()\n                .doOnSubscribe(new Consumer<Subscription>() {\n                    @Override\n                    public void accept(Subscription s) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestSubscriberEx<Long> s = new TestSubscriberEx<>();\n        f.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(s);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        s.cancel();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + s.errors());\n            if (s.errors().size() > 0) {\n                s.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        s.assertNoErrors();\n    }\n","date":"2019-12-22 18:39:23","endLine":267,"groupId":"103277","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"connectUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/9409ed1b42179daaf4a95577464551fd0383e0.src","preCode":"    public void connectUnsubscribe() throws InterruptedException {\n        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);\n        final CountDownLatch subscribeLatch = new CountDownLatch(1);\n\n        Flowable<Long> f = synchronousInterval()\n                .doOnSubscribe(new Consumer<Subscription>() {\n                    @Override\n                    public void accept(Subscription s) {\n                            System.out.println(\"******************************* Subscribe received\");\n                            \r\n                            subscribeLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                            System.out.println(\"******************************* Unsubscribe received\");\n                            \r\n                            unsubscribeLatch.countDown();\n                    }\n                });\n\n        TestSubscriberEx<Long> s = new TestSubscriberEx<>();\n        f.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(s);\n        System.out.println(\"send unsubscribe\");\n        \r\n        subscribeLatch.await();\n        \r\n        s.cancel();\n        System.out.println(\"DONE sending unsubscribe ... now waiting\");\n        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {\n            System.out.println(\"Errors: \" + s.errors());\n            if (s.errors().size() > 0) {\n                s.errors().get(0).printStackTrace();\n            }\n            fail(\"timed out waiting for unsubscribe\");\n        }\n        s.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
