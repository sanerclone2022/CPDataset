[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void repeatTakeWithSubscribeOn() throws InterruptedException {\n\n        final AtomicInteger counter = new AtomicInteger();\n        Observable<Integer> oi = Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposables.empty());\n                counter.incrementAndGet();\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n        }).subscribeOn(Schedulers.newThread());\n\n        Object[] ys = oi.repeat().subscribeOn(Schedulers.newThread()).map(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1) {\n                try {\n                    Thread.sleep(50);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return t1;\n            }\n\n        }).take(4).toList().blockingGet().toArray();\n\n        assertEquals(2, counter.get());\n        assertArrayEquals(new Object[] { 1, 2, 1, 2 }, ys);\n    }\n","date":"2019-08-16 20:51:17","endLine":101,"groupId":"4783","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"repeatTakeWithSubscribeOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/55/906d121494683613b73c9c7268991618c412a1.src","preCode":"    public void repeatTakeWithSubscribeOn() throws InterruptedException {\n\n        final AtomicInteger counter = new AtomicInteger();\n        Observable<Integer> oi = Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposables.empty());\n                counter.incrementAndGet();\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n        }).subscribeOn(Schedulers.newThread());\n\n        Object[] ys = oi.repeat().subscribeOn(Schedulers.newThread()).map(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1) {\n                try {\n                    Thread.sleep(50);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return t1;\n            }\n\n        }).take(4).toList().blockingGet().toArray();\n\n        assertEquals(2, counter.get());\n        assertArrayEquals(new Object[] { 1, 2, 1, 2 }, ys);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void repeatTakeWithSubscribeOn() throws InterruptedException {\n\n        final AtomicInteger counter = new AtomicInteger();\n        Flowable<Integer> oi = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                counter.incrementAndGet();\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n        }).subscribeOn(Schedulers.newThread());\n\n        Object[] ys = oi.repeat().subscribeOn(Schedulers.newThread()).map(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1) {\n                try {\n                    Thread.sleep(50);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return t1;\n            }\n\n        }).take(4).toList().blockingGet().toArray();\n\n        assertEquals(2, counter.get());\n        assertArrayEquals(new Object[] { 1, 2, 1, 2 }, ys);\n    }\n","date":"2019-08-16 20:51:17","endLine":101,"groupId":"4783","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"repeatTakeWithSubscribeOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c9/9e09a45af2f1b0287f7efc3cef5a47b79e7099.src","preCode":"    public void repeatTakeWithSubscribeOn() throws InterruptedException {\n\n        final AtomicInteger counter = new AtomicInteger();\n        Flowable<Integer> oi = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                counter.incrementAndGet();\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n        }).subscribeOn(Schedulers.newThread());\n\n        Object[] ys = oi.repeat().subscribeOn(Schedulers.newThread()).map(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1) {\n                try {\n                    Thread.sleep(50);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return t1;\n            }\n\n        }).take(4).toList().blockingGet().toArray();\n\n        assertEquals(2, counter.get());\n        assertArrayEquals(new Object[] { 1, 2, 1, 2 }, ys);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void repeatTakeWithSubscribeOn() throws InterruptedException {\n\n        final AtomicInteger counter = new AtomicInteger();\n        Observable<Integer> oi = Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposable.empty());\n                counter.incrementAndGet();\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n        }).subscribeOn(Schedulers.newThread());\n\n        Object[] ys = oi.repeat().subscribeOn(Schedulers.newThread()).map(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1) {\n                try {\n                    Thread.sleep(50);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return t1;\n            }\n\n        }).take(4).toList().blockingGet().toArray();\n\n        assertEquals(2, counter.get());\n        assertArrayEquals(new Object[] { 1, 2, 1, 2 }, ys);\n    }\n","date":"2019-12-20 02:39:40","endLine":101,"groupId":"105388","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"repeatTakeWithSubscribeOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f7/b1d93b0be954ae8f0029980036721bf23a2a54.src","preCode":"    public void repeatTakeWithSubscribeOn() throws InterruptedException {\n\n        final AtomicInteger counter = new AtomicInteger();\n        Observable<Integer> oi = Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposables.empty());\n                counter.incrementAndGet();\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n        }).subscribeOn(Schedulers.newThread());\n\n        Object[] ys = oi.repeat().subscribeOn(Schedulers.newThread()).map(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1) {\n                try {\n                    Thread.sleep(50);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return t1;\n            }\n\n        }).take(4).toList().blockingGet().toArray();\n\n        assertEquals(2, counter.get());\n        assertArrayEquals(new Object[] { 1, 2, 1, 2 }, ys);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void repeatTakeWithSubscribeOn() throws InterruptedException {\n\n        final AtomicInteger counter = new AtomicInteger();\n        Flowable<Integer> oi = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                counter.incrementAndGet();\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n        }).subscribeOn(Schedulers.newThread());\n\n        Object[] ys = oi.repeat().subscribeOn(Schedulers.newThread()).map(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1) {\n                try {\n                    Thread.sleep(50);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return t1;\n            }\n\n        }).take(4).toList().blockingGet().toArray();\n\n        assertEquals(2, counter.get());\n        assertArrayEquals(new Object[] { 1, 2, 1, 2 }, ys);\n    }\n","date":"2019-08-16 20:51:17","endLine":101,"groupId":"105388","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"repeatTakeWithSubscribeOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c9/9e09a45af2f1b0287f7efc3cef5a47b79e7099.src","preCode":"    public void repeatTakeWithSubscribeOn() throws InterruptedException {\n\n        final AtomicInteger counter = new AtomicInteger();\n        Flowable<Integer> oi = Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                counter.incrementAndGet();\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n        }).subscribeOn(Schedulers.newThread());\n\n        Object[] ys = oi.repeat().subscribeOn(Schedulers.newThread()).map(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t1) {\n                try {\n                    Thread.sleep(50);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return t1;\n            }\n\n        }).take(4).toList().blockingGet().toArray();\n\n        assertEquals(2, counter.get());\n        assertArrayEquals(new Object[] { 1, 2, 1, 2 }, ys);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
