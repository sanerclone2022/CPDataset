[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void onSubscribe(Subscription s) {\n            if (SubscriptionHelper.setOnce(this.upstream, s)) {\n                if (s instanceof QueueSubscription) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueSubscription<T> qs = (QueueSubscription<T>) s;\n\n                    int m = qs.requestFusion(QueueSubscription.ANY);\n                    if (m == QueueSubscription.SYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        done = true;\n                        drain();\n                        return;\n                    }\n                    if (m == QueueSubscription.ASYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        QueueDrainHelper.request(s, prefetch);\n                        return;\n                    }\n                }\n\n                queue = QueueDrainHelper.createQueue(prefetch);\n\n                QueueDrainHelper.request(s, prefetch);\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":193,"groupId":"11768","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onSubscribe","params":"(Subscriptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/36e86821b1b34da0c92e45df2a33038aca3a72.src","preCode":"        public void onSubscribe(Subscription s) {\n            if (SubscriptionHelper.setOnce(this.upstream, s)) {\n                if (s instanceof QueueSubscription) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueSubscription<T> qs = (QueueSubscription<T>) s;\n\n                    int m = qs.requestFusion(QueueSubscription.ANY);\n                    if (m == QueueSubscription.SYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        done = true;\n                        drain();\n                        return;\n                    }\n                    if (m == QueueSubscription.ASYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        QueueDrainHelper.request(s, prefetch);\n                        return;\n                    }\n                }\n\n                queue = QueueDrainHelper.createQueue(prefetch);\n\n                QueueDrainHelper.request(s, prefetch);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void onSubscribe(Subscription s) {\n            if (SubscriptionHelper.setOnce(this.upstream, s)) {\n                if (s instanceof QueueSubscription) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueSubscription<T> qs = (QueueSubscription<T>) s;\n\n                    int m = qs.requestFusion(QueueSubscription.ANY | QueueSubscription.BOUNDARY);\n                    if (m == QueueSubscription.SYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        done = true;\n                        drain();\n                        return;\n                    }\n                    if (m == QueueSubscription.ASYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        s.request(bufferSize);\n                        return;\n                    }\n                }\n\n                queue = new SpscArrayQueue<T>(bufferSize);\n\n                s.request(bufferSize);\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":229,"groupId":"7848","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onSubscribe","params":"(Subscriptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/45/2dc83cce344f1c581f8a2188e1a67d1991ae70.src","preCode":"        public void onSubscribe(Subscription s) {\n            if (SubscriptionHelper.setOnce(this.upstream, s)) {\n                if (s instanceof QueueSubscription) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueSubscription<T> qs = (QueueSubscription<T>) s;\n\n                    int m = qs.requestFusion(QueueSubscription.ANY | QueueSubscription.BOUNDARY);\n                    if (m == QueueSubscription.SYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        done = true;\n                        drain();\n                        return;\n                    }\n                    if (m == QueueSubscription.ASYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        s.request(bufferSize);\n                        return;\n                    }\n                }\n\n                queue = new SpscArrayQueue<T>(bufferSize);\n\n                s.request(bufferSize);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublish.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        public void onSubscribe(Subscription s) {\n            if (SubscriptionHelper.setOnce(this.upstream, s)) {\n                if (s instanceof QueueSubscription) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueSubscription<T> qs = (QueueSubscription<T>) s;\n\n                    int m = qs.requestFusion(QueueSubscription.ANY);\n                    if (m == QueueSubscription.SYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        done = true;\n                        drain();\n                        return;\n                    }\n                    if (m == QueueSubscription.ASYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        QueueDrainHelper.request(s, prefetch);\n                        return;\n                    }\n                }\n\n                queue = QueueDrainHelper.createQueue(prefetch);\n\n                QueueDrainHelper.request(s, prefetch);\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":193,"groupId":"102814","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onSubscribe","params":"(Subscriptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/36e86821b1b34da0c92e45df2a33038aca3a72.src","preCode":"        public void onSubscribe(Subscription s) {\n            if (SubscriptionHelper.setOnce(this.upstream, s)) {\n                if (s instanceof QueueSubscription) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueSubscription<T> qs = (QueueSubscription<T>) s;\n\n                    int m = qs.requestFusion(QueueSubscription.ANY);\n                    if (m == QueueSubscription.SYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        done = true;\n                        drain();\n                        return;\n                    }\n                    if (m == QueueSubscription.ASYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        QueueDrainHelper.request(s, prefetch);\n                        return;\n                    }\n                }\n\n                queue = QueueDrainHelper.createQueue(prefetch);\n\n                QueueDrainHelper.request(s, prefetch);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishMulticast.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"N"},{"authorDate":"2019-12-28 03:01:34","commitOrder":2,"curCode":"        public void onSubscribe(Subscription s) {\n            if (SubscriptionHelper.setOnce(this.upstream, s)) {\n                if (s instanceof QueueSubscription) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueSubscription<T> qs = (QueueSubscription<T>) s;\n\n                    int m = qs.requestFusion(QueueSubscription.ANY | QueueSubscription.BOUNDARY);\n                    if (m == QueueSubscription.SYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        done = true;\n                        drain();\n                        return;\n                    }\n                    if (m == QueueSubscription.ASYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        s.request(bufferSize);\n                        return;\n                    }\n                }\n\n                queue = new SpscArrayQueue<>(bufferSize);\n\n                s.request(bufferSize);\n            }\n        }\n","date":"2019-12-28 03:01:34","endLine":229,"groupId":"102814","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onSubscribe","params":"(Subscriptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/49/e75fc1fd473b9d4b99a5bfe5cef0f56db18841.src","preCode":"        public void onSubscribe(Subscription s) {\n            if (SubscriptionHelper.setOnce(this.upstream, s)) {\n                if (s instanceof QueueSubscription) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueSubscription<T> qs = (QueueSubscription<T>) s;\n\n                    int m = qs.requestFusion(QueueSubscription.ANY | QueueSubscription.BOUNDARY);\n                    if (m == QueueSubscription.SYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        done = true;\n                        drain();\n                        return;\n                    }\n                    if (m == QueueSubscription.ASYNC) {\n                        sourceMode = m;\n                        queue = qs;\n                        s.request(bufferSize);\n                        return;\n                    }\n                }\n\n                queue = new SpscArrayQueue<T>(bufferSize);\n\n                s.request(bufferSize);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublish.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
