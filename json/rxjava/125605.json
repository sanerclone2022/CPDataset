[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposables.empty());\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        observer.onError(e);\n                    }\n                    observer.onNext(\"hello\");\n                    observer.onComplete();\n                }\n\n            });\n            t.start();\n        }\n","date":"2019-08-16 20:51:17","endLine":499,"groupId":"8736","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/fd2e28fa07ba91b169bdc8b07c39e2c8e66676.src","preCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposables.empty());\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        observer.onError(e);\n                    }\n                    observer.onNext(\"hello\");\n                    observer.onComplete();\n                }\n\n            });\n            t.start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeDelayErrorTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Subscriber<? super String> subscriber) {\n            subscriber.onSubscribe(new BooleanSubscription());\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        subscriber.onError(e);\n                    }\n                    subscriber.onNext(\"hello\");\n                    subscriber.onComplete();\n                }\n\n            });\n            t.start();\n        }\n","date":"2019-08-16 20:51:17","endLine":504,"groupId":"8736","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalSubscriber<?superString>subscriber)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f8/0323abdd4eb2474cb0a6709855e4cbef7602e2.src","preCode":"        public void subscribe(final Subscriber<? super String> subscriber) {\n            subscriber.onSubscribe(new BooleanSubscription());\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        subscriber.onError(e);\n                    }\n                    subscriber.onNext(\"hello\");\n                    subscriber.onComplete();\n                }\n\n            });\n            t.start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeDelayErrorTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposable.empty());\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        observer.onError(e);\n                    }\n                    observer.onNext(\"hello\");\n                    observer.onComplete();\n                }\n\n            });\n            t.start();\n        }\n","date":"2019-12-20 02:39:40","endLine":499,"groupId":"125605","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/87/7b75b70a71a55ad5ac6c39d8e5112c7d1eaca1.src","preCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposables.empty());\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        observer.onError(e);\n                    }\n                    observer.onNext(\"hello\");\n                    observer.onComplete();\n                }\n\n            });\n            t.start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeDelayErrorTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        public void subscribe(final Subscriber<? super String> subscriber) {\n            subscriber.onSubscribe(new BooleanSubscription());\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        subscriber.onError(e);\n                    }\n                    subscriber.onNext(\"hello\");\n                    subscriber.onComplete();\n                }\n\n            });\n            t.start();\n        }\n","date":"2019-08-16 20:51:17","endLine":504,"groupId":"125605","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalSubscriber<?superString>subscriber)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f8/0323abdd4eb2474cb0a6709855e4cbef7602e2.src","preCode":"        public void subscribe(final Subscriber<? super String> subscriber) {\n            subscriber.onSubscribe(new BooleanSubscription());\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        subscriber.onError(e);\n                    }\n                    subscriber.onNext(\"hello\");\n                    subscriber.onComplete();\n                }\n\n            });\n            t.start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeDelayErrorTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
