[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Observable<Observable<String>> observableOfObservables = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n\n            @Override\n            public void subscribe(final Observer<? super Observable<String>> observer) {\n                final Disposable d = Disposables.empty();\n                observer.onSubscribe(d);\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                observer.onNext(Observable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                observer.onNext(Observable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                observer.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                observer.onNext(Observable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            observer.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Observable\");\n                            observer.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Observable.concat(observableOfObservables).subscribe(observer);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onNext(\"five\");\n        inOrder.verify(observer, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(observer, never()).onNext(\"seven\");\n        inOrder.verify(observer, never()).onNext(\"eight\");\n        inOrder.verify(observer, never()).onNext(\"nine\");\n        \r\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"seven\");\n        inOrder.verify(observer, times(1)).onNext(\"eight\");\n        inOrder.verify(observer, times(1)).onNext(\"nine\");\n\n        verify(observer, never()).onError(any(Throwable.class));\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":262,"groupId":"2982","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"nestedAsyncConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6f/436a56ccf266c9cc57c65783686ad7824a74fd.src","preCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Observable<Observable<String>> observableOfObservables = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n\n            @Override\n            public void subscribe(final Observer<? super Observable<String>> observer) {\n                final Disposable d = Disposables.empty();\n                observer.onSubscribe(d);\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                observer.onNext(Observable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                observer.onNext(Observable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                observer.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                observer.onNext(Observable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            observer.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Observable\");\n                            observer.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Observable.concat(observableOfObservables).subscribe(observer);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onNext(\"five\");\n        inOrder.verify(observer, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(observer, never()).onNext(\"seven\");\n        inOrder.verify(observer, never()).onNext(\"eight\");\n        inOrder.verify(observer, never()).onNext(\"nine\");\n        \r\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"seven\");\n        inOrder.verify(observer, times(1)).onNext(\"eight\");\n        inOrder.verify(observer, times(1)).onNext(\"nine\");\n\n        verify(observer, never()).onError(any(Throwable.class));\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Flowable<Flowable<String>> observableOfObservables = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Flowable<String>> subscriber) {\n                final Disposable d = Disposables.empty();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        d.dispose();\n                    }\n                });\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                subscriber.onNext(Flowable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                subscriber.onNext(Flowable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                subscriber.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                subscriber.onNext(Flowable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            subscriber.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Flowable\");\n                            subscriber.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Flowable.concat(observableOfObservables).subscribe(subscriber);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onNext(\"five\");\n        inOrder.verify(subscriber, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(subscriber, never()).onNext(\"seven\");\n        inOrder.verify(subscriber, never()).onNext(\"eight\");\n        inOrder.verify(subscriber, never()).onNext(\"nine\");\n        \r\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"seven\");\n        inOrder.verify(subscriber, times(1)).onNext(\"eight\");\n        inOrder.verify(subscriber, times(1)).onNext(\"nine\");\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":274,"groupId":"2982","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"nestedAsyncConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/8f5cd043ac8f418600f4d33396a8d5cfa0943d.src","preCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Flowable<Flowable<String>> observableOfObservables = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Flowable<String>> subscriber) {\n                final Disposable d = Disposables.empty();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        d.dispose();\n                    }\n                });\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                subscriber.onNext(Flowable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                subscriber.onNext(Flowable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                subscriber.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                subscriber.onNext(Flowable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            subscriber.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Flowable\");\n                            subscriber.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Flowable.concat(observableOfObservables).subscribe(subscriber);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onNext(\"five\");\n        inOrder.verify(subscriber, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(subscriber, never()).onNext(\"seven\");\n        inOrder.verify(subscriber, never()).onNext(\"eight\");\n        inOrder.verify(subscriber, never()).onNext(\"nine\");\n        \r\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"seven\");\n        inOrder.verify(subscriber, times(1)).onNext(\"eight\");\n        inOrder.verify(subscriber, times(1)).onNext(\"nine\");\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Observable<Observable<String>> observableOfObservables = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n\n            @Override\n            public void subscribe(final Observer<? super Observable<String>> observer) {\n                final Disposable d = Disposable.empty();\n                observer.onSubscribe(d);\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                observer.onNext(Observable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                observer.onNext(Observable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                observer.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                observer.onNext(Observable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            observer.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Observable\");\n                            observer.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Observable.concat(observableOfObservables).subscribe(observer);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onNext(\"five\");\n        inOrder.verify(observer, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(observer, never()).onNext(\"seven\");\n        inOrder.verify(observer, never()).onNext(\"eight\");\n        inOrder.verify(observer, never()).onNext(\"nine\");\n        \r\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"seven\");\n        inOrder.verify(observer, times(1)).onNext(\"eight\");\n        inOrder.verify(observer, times(1)).onNext(\"nine\");\n\n        verify(observer, never()).onError(any(Throwable.class));\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","date":"2019-12-20 02:39:40","endLine":262,"groupId":"2982","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"nestedAsyncConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/35/4c2afc27ec3237ecd8c9501466a260653e5c0a.src","preCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Observable<Observable<String>> observableOfObservables = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n\n            @Override\n            public void subscribe(final Observer<? super Observable<String>> observer) {\n                final Disposable d = Disposables.empty();\n                observer.onSubscribe(d);\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                observer.onNext(Observable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                observer.onNext(Observable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                observer.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                observer.onNext(Observable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            observer.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Observable\");\n                            observer.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Observable.concat(observableOfObservables).subscribe(observer);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onNext(\"five\");\n        inOrder.verify(observer, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(observer, never()).onNext(\"seven\");\n        inOrder.verify(observer, never()).onNext(\"eight\");\n        inOrder.verify(observer, never()).onNext(\"nine\");\n        \r\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"seven\");\n        inOrder.verify(observer, times(1)).onNext(\"eight\");\n        inOrder.verify(observer, times(1)).onNext(\"nine\");\n\n        verify(observer, never()).onError(any(Throwable.class));\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Flowable<Flowable<String>> observableOfObservables = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Flowable<String>> subscriber) {\n                final Disposable d = Disposable.empty();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        d.dispose();\n                    }\n                });\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                subscriber.onNext(Flowable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                subscriber.onNext(Flowable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                subscriber.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                subscriber.onNext(Flowable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            subscriber.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Flowable\");\n                            subscriber.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Flowable.concat(observableOfObservables).subscribe(subscriber);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onNext(\"five\");\n        inOrder.verify(subscriber, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(subscriber, never()).onNext(\"seven\");\n        inOrder.verify(subscriber, never()).onNext(\"eight\");\n        inOrder.verify(subscriber, never()).onNext(\"nine\");\n        \r\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"seven\");\n        inOrder.verify(subscriber, times(1)).onNext(\"eight\");\n        inOrder.verify(subscriber, times(1)).onNext(\"nine\");\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","date":"2019-12-20 02:39:40","endLine":274,"groupId":"2982","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"nestedAsyncConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a0/b14ead5a8960f45c7c44fad9bed2061c2ca911.src","preCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Flowable<Flowable<String>> observableOfObservables = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Flowable<String>> subscriber) {\n                final Disposable d = Disposables.empty();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        d.dispose();\n                    }\n                });\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                subscriber.onNext(Flowable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                subscriber.onNext(Flowable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                subscriber.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                subscriber.onNext(Flowable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            subscriber.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Flowable\");\n                            subscriber.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Flowable.concat(observableOfObservables).subscribe(subscriber);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onNext(\"five\");\n        inOrder.verify(subscriber, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(subscriber, never()).onNext(\"seven\");\n        inOrder.verify(subscriber, never()).onNext(\"eight\");\n        inOrder.verify(subscriber, never()).onNext(\"nine\");\n        \r\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"seven\");\n        inOrder.verify(subscriber, times(1)).onNext(\"eight\");\n        inOrder.verify(subscriber, times(1)).onNext(\"nine\");\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Observable<Observable<String>> observableOfObservables = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n\n            @Override\n            public void subscribe(final Observer<? super Observable<String>> observer) {\n                final Disposable d = Disposable.empty();\n                observer.onSubscribe(d);\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                observer.onNext(Observable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                observer.onNext(Observable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                observer.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                observer.onNext(Observable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            observer.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Observable\");\n                            observer.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Observable.concat(observableOfObservables).subscribe(observer);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onNext(\"five\");\n        inOrder.verify(observer, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(observer, never()).onNext(\"seven\");\n        inOrder.verify(observer, never()).onNext(\"eight\");\n        inOrder.verify(observer, never()).onNext(\"nine\");\n        \r\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"seven\");\n        inOrder.verify(observer, times(1)).onNext(\"eight\");\n        inOrder.verify(observer, times(1)).onNext(\"nine\");\n\n        verify(observer, never()).onError(any(Throwable.class));\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","date":"2019-12-20 02:39:40","endLine":262,"groupId":"2982","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"nestedAsyncConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/35/4c2afc27ec3237ecd8c9501466a260653e5c0a.src","preCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Observable<Observable<String>> observableOfObservables = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n\n            @Override\n            public void subscribe(final Observer<? super Observable<String>> observer) {\n                final Disposable d = Disposable.empty();\n                observer.onSubscribe(d);\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                observer.onNext(Observable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                observer.onNext(Observable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                observer.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                observer.onNext(Observable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            observer.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Observable\");\n                            observer.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Observable.concat(observableOfObservables).subscribe(observer);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onNext(\"five\");\n        inOrder.verify(observer, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(observer, never()).onNext(\"seven\");\n        inOrder.verify(observer, never()).onNext(\"eight\");\n        inOrder.verify(observer, never()).onNext(\"nine\");\n        \r\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"seven\");\n        inOrder.verify(observer, times(1)).onNext(\"eight\");\n        inOrder.verify(observer, times(1)).onNext(\"nine\");\n\n        verify(observer, never()).onError(any(Throwable.class));\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        final TestObservable<String> o1 = new TestObservable<>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Flowable<Flowable<String>> observableOfObservables = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Flowable<String>> subscriber) {\n                final Disposable d = Disposable.empty();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        d.dispose();\n                    }\n                });\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                subscriber.onNext(Flowable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                subscriber.onNext(Flowable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                subscriber.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                subscriber.onNext(Flowable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            subscriber.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Flowable\");\n                            subscriber.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Flowable.concat(observableOfObservables).subscribe(subscriber);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onNext(\"five\");\n        inOrder.verify(subscriber, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(subscriber, never()).onNext(\"seven\");\n        inOrder.verify(subscriber, never()).onNext(\"eight\");\n        inOrder.verify(subscriber, never()).onNext(\"nine\");\n        \r\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"seven\");\n        inOrder.verify(subscriber, times(1)).onNext(\"eight\");\n        inOrder.verify(subscriber, times(1)).onNext(\"nine\");\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":274,"groupId":"2982","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"nestedAsyncConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/451d6097833e4984eb0cf4dd726ac9ebc97cfa.src","preCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Flowable<Flowable<String>> observableOfObservables = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Flowable<String>> subscriber) {\n                final Disposable d = Disposable.empty();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        d.dispose();\n                    }\n                });\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                subscriber.onNext(Flowable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                subscriber.onNext(Flowable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                subscriber.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                subscriber.onNext(Flowable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            subscriber.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Flowable\");\n                            subscriber.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Flowable.concat(observableOfObservables).subscribe(subscriber);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onNext(\"five\");\n        inOrder.verify(subscriber, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(subscriber, never()).onNext(\"seven\");\n        inOrder.verify(subscriber, never()).onNext(\"eight\");\n        inOrder.verify(subscriber, never()).onNext(\"nine\");\n        \r\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"seven\");\n        inOrder.verify(subscriber, times(1)).onNext(\"eight\");\n        inOrder.verify(subscriber, times(1)).onNext(\"nine\");\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n\n        final TestObservable<String> o1 = new TestObservable<>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Observable<Observable<String>> observableOfObservables = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n\n            @Override\n            public void subscribe(final Observer<? super Observable<String>> observer) {\n                final Disposable d = Disposable.empty();\n                observer.onSubscribe(d);\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                observer.onNext(Observable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                observer.onNext(Observable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                observer.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                observer.onNext(Observable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            observer.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Observable\");\n                            observer.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Observable.concat(observableOfObservables).subscribe(observer);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onNext(\"five\");\n        inOrder.verify(observer, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(observer, never()).onNext(\"seven\");\n        inOrder.verify(observer, never()).onNext(\"eight\");\n        inOrder.verify(observer, never()).onNext(\"nine\");\n        \r\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"seven\");\n        inOrder.verify(observer, times(1)).onNext(\"eight\");\n        inOrder.verify(observer, times(1)).onNext(\"nine\");\n\n        verify(observer, never()).onError(any(Throwable.class));\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","date":"2019-12-22 18:59:44","endLine":262,"groupId":"105447","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"nestedAsyncConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/b00fdf7c961a4606a8134779a8f75268955a19.src","preCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n\n        final TestObservable<String> o1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<String>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<String>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<Thread>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Observable<Observable<String>> observableOfObservables = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n\n            @Override\n            public void subscribe(final Observer<? super Observable<String>> observer) {\n                final Disposable d = Disposable.empty();\n                observer.onSubscribe(d);\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                observer.onNext(Observable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                observer.onNext(Observable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                observer.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                observer.onNext(Observable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            observer.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Observable\");\n                            observer.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Observable.concat(observableOfObservables).subscribe(observer);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onNext(\"five\");\n        inOrder.verify(observer, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(observer, never()).onNext(\"seven\");\n        inOrder.verify(observer, never()).onNext(\"eight\");\n        inOrder.verify(observer, never()).onNext(\"nine\");\n        \r\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(observer, times(1)).onNext(\"seven\");\n        inOrder.verify(observer, times(1)).onNext(\"eight\");\n        inOrder.verify(observer, times(1)).onNext(\"nine\");\n\n        verify(observer, never()).onError(any(Throwable.class));\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        final TestObservable<String> o1 = new TestObservable<>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Flowable<Flowable<String>> observableOfObservables = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Flowable<String>> subscriber) {\n                final Disposable d = Disposable.empty();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        d.dispose();\n                    }\n                });\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                subscriber.onNext(Flowable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                subscriber.onNext(Flowable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                subscriber.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                subscriber.onNext(Flowable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            subscriber.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Flowable\");\n                            subscriber.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Flowable.concat(observableOfObservables).subscribe(subscriber);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onNext(\"five\");\n        inOrder.verify(subscriber, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(subscriber, never()).onNext(\"seven\");\n        inOrder.verify(subscriber, never()).onNext(\"eight\");\n        inOrder.verify(subscriber, never()).onNext(\"nine\");\n        \r\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"seven\");\n        inOrder.verify(subscriber, times(1)).onNext(\"eight\");\n        inOrder.verify(subscriber, times(1)).onNext(\"nine\");\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":274,"groupId":"105447","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"nestedAsyncConcat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/451d6097833e4984eb0cf4dd726ac9ebc97cfa.src","preCode":"    public void nestedAsyncConcat() throws InterruptedException {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        final TestObservable<String> o1 = new TestObservable<>(\"one\", \"two\", \"three\");\n        final TestObservable<String> o2 = new TestObservable<>(\"four\", \"five\", \"six\");\n        final TestObservable<String> o3 = new TestObservable<>(\"seven\", \"eight\", \"nine\");\n        final CountDownLatch allowThird = new CountDownLatch(1);\n\n        final AtomicReference<Thread> parent = new AtomicReference<>();\n        final CountDownLatch parentHasStarted = new CountDownLatch(1);\n        final CountDownLatch parentHasFinished = new CountDownLatch(1);\n\n        Flowable<Flowable<String>> observableOfObservables = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Flowable<String>> subscriber) {\n                final Disposable d = Disposable.empty();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        d.dispose();\n                    }\n                });\n                parent.set(new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        try {\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o1\");\n                                subscriber.onNext(Flowable.unsafeCreate(o1));\n                            }\n                            \r\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o2\");\n                                subscriber.onNext(Flowable.unsafeCreate(o2));\n                            }\n\n                            \r\n                            try {\n                                allowThird.await();\n                            } catch (InterruptedException e) {\n                                subscriber.onError(e);\n                            }\n                            if (!d.isDisposed()) {\n                                System.out.println(\"Emit o3\");\n                                subscriber.onNext(Flowable.unsafeCreate(o3));\n                            }\n\n                        } catch (Throwable e) {\n                            subscriber.onError(e);\n                        } finally {\n                            System.out.println(\"Done parent Flowable\");\n                            subscriber.onComplete();\n                            parentHasFinished.countDown();\n                        }\n                    }\n                }));\n                parent.get().start();\n                parentHasStarted.countDown();\n            }\n        });\n\n        Flowable.concat(observableOfObservables).subscribe(subscriber);\n\n        \r\n        parentHasStarted.await();\n\n        try {\n            \r\n            System.out.println(\"Thread1 is starting ... waiting for it to complete ...\");\n            o1.waitForThreadDone();\n            System.out.println(\"Thread2 is starting ... waiting for it to complete ...\");\n            o2.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onNext(\"five\");\n        inOrder.verify(subscriber, times(1)).onNext(\"six\");\n        \r\n        inOrder.verify(subscriber, never()).onNext(\"seven\");\n        inOrder.verify(subscriber, never()).onNext(\"eight\");\n        inOrder.verify(subscriber, never()).onNext(\"nine\");\n        \r\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        \r\n        allowThird.countDown();\n\n        try {\n            \r\n            o3.waitForThreadDone();\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        try {\n            \r\n            if (!parentHasFinished.await(5, TimeUnit.SECONDS)) {\n                fail(\"Parent didn't finish within the time limit\");\n            }\n        } catch (Throwable e) {\n            throw new RuntimeException(\"failed waiting on threads\", e);\n        }\n\n        inOrder.verify(subscriber, times(1)).onNext(\"seven\");\n        inOrder.verify(subscriber, times(1)).onNext(\"eight\");\n        inOrder.verify(subscriber, times(1)).onNext(\"nine\");\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
