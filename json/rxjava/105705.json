[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Observer<? super String> t1) {\n            t1.onSubscribe(Disposables.empty());\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    if (subscriptionCount.incrementAndGet() > maxConcurrent) {\n                        failed = true;\n                    }\n                    t1.onNext(\"one\");\n                    t1.onNext(\"two\");\n                    t1.onNext(\"three\");\n                    t1.onNext(\"four\");\n                    t1.onNext(\"five\");\n                    \r\n                    \r\n                    subscriptionCount.decrementAndGet();\n                    t1.onComplete();\n                }\n\n            }).start();\n        }\n","date":"2019-08-16 20:51:17","endLine":122,"groupId":"4276","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>t1)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/32fbe229df2d5372684750fb39ecee938fa04b.src","preCode":"        public void subscribe(final Observer<? super String> t1) {\n            t1.onSubscribe(Disposables.empty());\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    if (subscriptionCount.incrementAndGet() > maxConcurrent) {\n                        failed = true;\n                    }\n                    t1.onNext(\"one\");\n                    t1.onNext(\"two\");\n                    t1.onNext(\"three\");\n                    t1.onNext(\"four\");\n                    t1.onNext(\"five\");\n                    \r\n                    \r\n                    subscriptionCount.decrementAndGet();\n                    t1.onComplete();\n                }\n\n            }).start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Subscriber<? super String> t1) {\n            t1.onSubscribe(new BooleanSubscription());\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    if (subscriptionCount.incrementAndGet() > maxConcurrent) {\n                        failed = true;\n                    }\n                    t1.onNext(\"one\");\n                    t1.onNext(\"two\");\n                    t1.onNext(\"three\");\n                    t1.onNext(\"four\");\n                    t1.onNext(\"five\");\n                    \r\n                    \r\n                    subscriptionCount.decrementAndGet();\n                    t1.onComplete();\n                }\n\n            }).start();\n        }\n","date":"2019-08-16 20:51:17","endLine":114,"groupId":"4276","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalSubscriber<?superString>t1)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/97/9c29a9aaf174c698a663ae5cacc38106c200d2.src","preCode":"        public void subscribe(final Subscriber<? super String> t1) {\n            t1.onSubscribe(new BooleanSubscription());\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    if (subscriptionCount.incrementAndGet() > maxConcurrent) {\n                        failed = true;\n                    }\n                    t1.onNext(\"one\");\n                    t1.onNext(\"two\");\n                    t1.onNext(\"three\");\n                    t1.onNext(\"four\");\n                    t1.onNext(\"five\");\n                    \r\n                    \r\n                    subscriptionCount.decrementAndGet();\n                    t1.onComplete();\n                }\n\n            }).start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"        public void subscribe(final Observer<? super String> t1) {\n            t1.onSubscribe(Disposable.empty());\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    if (subscriptionCount.incrementAndGet() > maxConcurrent) {\n                        failed = true;\n                    }\n                    t1.onNext(\"one\");\n                    t1.onNext(\"two\");\n                    t1.onNext(\"three\");\n                    t1.onNext(\"four\");\n                    t1.onNext(\"five\");\n                    \r\n                    \r\n                    subscriptionCount.decrementAndGet();\n                    t1.onComplete();\n                }\n\n            }).start();\n        }\n","date":"2019-12-20 02:39:40","endLine":122,"groupId":"105705","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>t1)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ac/69ffbaa78a31b76f15f28de0af742fcd3e4e4f.src","preCode":"        public void subscribe(final Observer<? super String> t1) {\n            t1.onSubscribe(Disposables.empty());\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    if (subscriptionCount.incrementAndGet() > maxConcurrent) {\n                        failed = true;\n                    }\n                    t1.onNext(\"one\");\n                    t1.onNext(\"two\");\n                    t1.onNext(\"three\");\n                    t1.onNext(\"four\");\n                    t1.onNext(\"five\");\n                    \r\n                    \r\n                    subscriptionCount.decrementAndGet();\n                    t1.onComplete();\n                }\n\n            }).start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        public void subscribe(final Subscriber<? super String> t1) {\n            t1.onSubscribe(new BooleanSubscription());\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    if (subscriptionCount.incrementAndGet() > maxConcurrent) {\n                        failed = true;\n                    }\n                    t1.onNext(\"one\");\n                    t1.onNext(\"two\");\n                    t1.onNext(\"three\");\n                    t1.onNext(\"four\");\n                    t1.onNext(\"five\");\n                    \r\n                    \r\n                    subscriptionCount.decrementAndGet();\n                    t1.onComplete();\n                }\n\n            }).start();\n        }\n","date":"2019-08-16 20:51:17","endLine":114,"groupId":"105705","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalSubscriber<?superString>t1)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/97/9c29a9aaf174c698a663ae5cacc38106c200d2.src","preCode":"        public void subscribe(final Subscriber<? super String> t1) {\n            t1.onSubscribe(new BooleanSubscription());\n            new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    if (subscriptionCount.incrementAndGet() > maxConcurrent) {\n                        failed = true;\n                    }\n                    t1.onNext(\"one\");\n                    t1.onNext(\"two\");\n                    t1.onNext(\"three\");\n                    t1.onNext(\"four\");\n                    t1.onNext(\"five\");\n                    \r\n                    \r\n                    subscriptionCount.decrementAndGet();\n                    t1.onComplete();\n                }\n\n            }).start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
