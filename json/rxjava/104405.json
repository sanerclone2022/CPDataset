[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void debounceNeverEmits() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                \r\n                publishNext(observer, 100, \"a\");    \r\n                publishNext(observer, 200, \"b\");    \r\n                publishNext(observer, 300, \"c\");    \r\n                publishNext(observer, 400, \"d\");    \r\n                publishNext(observer, 500, \"e\");    \r\n                publishNext(observer, 600, \"f\");    \r\n                publishNext(observer, 700, \"g\");    \r\n                publishNext(observer, 800, \"h\");    \r\n                publishCompleted(observer, 900);     \r\n            }\n        });\n\n        Observable<String> sampled = source.debounce(200, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        scheduler.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(0)).onNext(anyString());\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":107,"groupId":"6846","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"debounceNeverEmits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d6/6de923f84dee61c0f6aa64c46a1884ff8ac1ec.src","preCode":"    public void debounceNeverEmits() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                \r\n                publishNext(observer, 100, \"a\");    \r\n                publishNext(observer, 200, \"b\");    \r\n                publishNext(observer, 300, \"c\");    \r\n                publishNext(observer, 400, \"d\");    \r\n                publishNext(observer, 500, \"e\");    \r\n                publishNext(observer, 600, \"f\");    \r\n                publishNext(observer, 700, \"g\");    \r\n                publishNext(observer, 800, \"h\");    \r\n                publishCompleted(observer, 900);     \r\n            }\n        });\n\n        Observable<String> sampled = source.debounce(200, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        scheduler.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(0)).onNext(anyString());\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void debounceNeverEmits() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                \r\n                publishNext(subscriber, 100, \"a\");    \r\n                publishNext(subscriber, 200, \"b\");    \r\n                publishNext(subscriber, 300, \"c\");    \r\n                publishNext(subscriber, 400, \"d\");    \r\n                publishNext(subscriber, 500, \"e\");    \r\n                publishNext(subscriber, 600, \"f\");    \r\n                publishNext(subscriber, 700, \"g\");    \r\n                publishNext(subscriber, 800, \"h\");    \r\n                publishCompleted(subscriber, 900);     \r\n            }\n        });\n\n        Flowable<String> sampled = source.debounce(200, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(Subscriber);\n\n        scheduler.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        InOrder inOrder = inOrder(Subscriber);\n        inOrder.verify(Subscriber, times(0)).onNext(anyString());\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(Subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":108,"groupId":"6846","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"debounceNeverEmits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/ae8ef6543ca6ec2c21ebcf22a4d8efc828178c.src","preCode":"    public void debounceNeverEmits() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                \r\n                publishNext(subscriber, 100, \"a\");    \r\n                publishNext(subscriber, 200, \"b\");    \r\n                publishNext(subscriber, 300, \"c\");    \r\n                publishNext(subscriber, 400, \"d\");    \r\n                publishNext(subscriber, 500, \"e\");    \r\n                publishNext(subscriber, 600, \"f\");    \r\n                publishNext(subscriber, 700, \"g\");    \r\n                publishNext(subscriber, 800, \"h\");    \r\n                publishCompleted(subscriber, 900);     \r\n            }\n        });\n\n        Flowable<String> sampled = source.debounce(200, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(Subscriber);\n\n        scheduler.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        InOrder inOrder = inOrder(Subscriber);\n        inOrder.verify(Subscriber, times(0)).onNext(anyString());\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(Subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void debounceNeverEmits() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposable.empty());\n                \r\n                publishNext(observer, 100, \"a\");    \r\n                publishNext(observer, 200, \"b\");    \r\n                publishNext(observer, 300, \"c\");    \r\n                publishNext(observer, 400, \"d\");    \r\n                publishNext(observer, 500, \"e\");    \r\n                publishNext(observer, 600, \"f\");    \r\n                publishNext(observer, 700, \"g\");    \r\n                publishNext(observer, 800, \"h\");    \r\n                publishCompleted(observer, 900);     \r\n            }\n        });\n\n        Observable<String> sampled = source.debounce(200, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        scheduler.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(0)).onNext(anyString());\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-20 02:39:40","endLine":107,"groupId":"104405","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"debounceNeverEmits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/af/60b930189d962b014aa972a23ef287506c5e83.src","preCode":"    public void debounceNeverEmits() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                \r\n                publishNext(observer, 100, \"a\");    \r\n                publishNext(observer, 200, \"b\");    \r\n                publishNext(observer, 300, \"c\");    \r\n                publishNext(observer, 400, \"d\");    \r\n                publishNext(observer, 500, \"e\");    \r\n                publishNext(observer, 600, \"f\");    \r\n                publishNext(observer, 700, \"g\");    \r\n                publishNext(observer, 800, \"h\");    \r\n                publishCompleted(observer, 900);     \r\n            }\n        });\n\n        Observable<String> sampled = source.debounce(200, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        scheduler.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(0)).onNext(anyString());\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void debounceNeverEmits() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                \r\n                publishNext(subscriber, 100, \"a\");    \r\n                publishNext(subscriber, 200, \"b\");    \r\n                publishNext(subscriber, 300, \"c\");    \r\n                publishNext(subscriber, 400, \"d\");    \r\n                publishNext(subscriber, 500, \"e\");    \r\n                publishNext(subscriber, 600, \"f\");    \r\n                publishNext(subscriber, 700, \"g\");    \r\n                publishNext(subscriber, 800, \"h\");    \r\n                publishCompleted(subscriber, 900);     \r\n            }\n        });\n\n        Flowable<String> sampled = source.debounce(200, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(Subscriber);\n\n        scheduler.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        InOrder inOrder = inOrder(Subscriber);\n        inOrder.verify(Subscriber, times(0)).onNext(anyString());\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(Subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":108,"groupId":"104405","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"debounceNeverEmits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/ae8ef6543ca6ec2c21ebcf22a4d8efc828178c.src","preCode":"    public void debounceNeverEmits() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                \r\n                publishNext(subscriber, 100, \"a\");    \r\n                publishNext(subscriber, 200, \"b\");    \r\n                publishNext(subscriber, 300, \"c\");    \r\n                publishNext(subscriber, 400, \"d\");    \r\n                publishNext(subscriber, 500, \"e\");    \r\n                publishNext(subscriber, 600, \"f\");    \r\n                publishNext(subscriber, 700, \"g\");    \r\n                publishNext(subscriber, 800, \"h\");    \r\n                publishCompleted(subscriber, 900);     \r\n            }\n        });\n\n        Flowable<String> sampled = source.debounce(200, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(Subscriber);\n\n        scheduler.advanceTimeTo(0, TimeUnit.MILLISECONDS);\n        InOrder inOrder = inOrder(Subscriber);\n        inOrder.verify(Subscriber, times(0)).onNext(anyString());\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(Subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
