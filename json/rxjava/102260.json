[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public boolean tryOnError(Throwable t) {\n            if (emitter.isDisposed() || done) {\n                return false;\n            }\n            if (t == null) {\n                t = new NullPointerException(\"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n            }\n            if (error.addThrowable(t)) {\n                done = true;\n                drain();\n                return true;\n            }\n            return false;\n        }\n","date":"2019-08-16 20:51:17","endLine":207,"groupId":"611","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"tryOnError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7d/44ca2c4560a8a7938a81a90cbda8e26da68f9d.src","preCode":"        public boolean tryOnError(Throwable t) {\n            if (emitter.isDisposed() || done) {\n                return false;\n            }\n            if (t == null) {\n                t = new NullPointerException(\"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n            }\n            if (error.addThrowable(t)) {\n                done = true;\n                drain();\n                return true;\n            }\n            return false;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCreate.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public boolean tryOnError(Throwable t) {\n           if (emitter.isCancelled() || done) {\n               return false;\n           }\n           if (t == null) {\n               t = new NullPointerException(\"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n           }\n           if (error.addThrowable(t)) {\n               done = true;\n               drain();\n               return true;\n           }\n           return false;\n        }\n","date":"2019-08-16 20:51:17","endLine":150,"groupId":"611","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"tryOnError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1a/e39ef326a7a07107198c58fcc6cee888904874.src","preCode":"        public boolean tryOnError(Throwable t) {\n           if (emitter.isCancelled() || done) {\n               return false;\n           }\n           if (t == null) {\n               t = new NullPointerException(\"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n           }\n           if (error.addThrowable(t)) {\n               done = true;\n               drain();\n               return true;\n           }\n           return false;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-28 22:07:44","codes":[{"authorDate":"2019-08-28 22:07:44","commitOrder":2,"curCode":"        public boolean tryOnError(Throwable t) {\n            if (emitter.isDisposed() || done) {\n                return false;\n            }\n            if (t == null) {\n                t = ExceptionHelper.createNullPointerException(\"onError called with a null Throwable.\");\n            }\n            if (errors.tryAddThrowable(t)) {\n                done = true;\n                drain();\n                return true;\n            }\n            return false;\n        }\n","date":"2019-08-28 22:07:44","endLine":207,"groupId":"9303","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"tryOnError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fe/1f394ff34631c7512f70f5e81172e0a4406949.src","preCode":"        public boolean tryOnError(Throwable t) {\n            if (emitter.isDisposed() || done) {\n                return false;\n            }\n            if (t == null) {\n                t = new NullPointerException(\"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n            }\n            if (error.addThrowable(t)) {\n                done = true;\n                drain();\n                return true;\n            }\n            return false;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCreate.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2019-08-28 22:07:44","commitOrder":2,"curCode":"        public boolean tryOnError(Throwable t) {\n           if (emitter.isCancelled() || done) {\n               return false;\n           }\n           if (t == null) {\n               t = ExceptionHelper.createNullPointerException(\"onError called with a null Throwable.\");\n           }\n           if (errors.tryAddThrowable(t)) {\n               done = true;\n               drain();\n               return true;\n           }\n           return false;\n        }\n","date":"2019-08-28 22:07:44","endLine":150,"groupId":"9303","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"tryOnError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/66/cbd7409b43692d68f399db47282ad73b87d473.src","preCode":"        public boolean tryOnError(Throwable t) {\n           if (emitter.isCancelled() || done) {\n               return false;\n           }\n           if (t == null) {\n               t = new NullPointerException(\"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n           }\n           if (error.addThrowable(t)) {\n               done = true;\n               drain();\n               return true;\n           }\n           return false;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"a07c45eeeb68b1cfc24f913c75edbc2820aadb76","commitMessage":"@@@3.x: Cleanup addThrowable.  \"2.x\" and null-value error messages (#6639)\n\n","date":"2019-08-28 22:07:44","modifiedFileCount":"106","status":"M","submitter":"David Karnok"},{"authorTime":"2019-08-28 22:07:44","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"        public boolean tryOnError(Throwable t) {\n            if (done || emitter.isDisposed()) {\n                return false;\n            }\n            if (t == null) {\n                t = ExceptionHelper.createNullPointerException(\"onError called with a null Throwable.\");\n            }\n            if (errors.tryAddThrowable(t)) {\n                done = true;\n                drain();\n                return true;\n            }\n            return false;\n        }\n","date":"2020-02-12 23:26:52","endLine":207,"groupId":"102260","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"tryOnError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f0/5faf7eda7d8ae493ad0daacd6d01ee2500af53.src","preCode":"        public boolean tryOnError(Throwable t) {\n            if (emitter.isDisposed() || done) {\n                return false;\n            }\n            if (t == null) {\n                t = ExceptionHelper.createNullPointerException(\"onError called with a null Throwable.\");\n            }\n            if (errors.tryAddThrowable(t)) {\n                done = true;\n                drain();\n                return true;\n            }\n            return false;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCreate.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2019-08-28 22:07:44","commitOrder":3,"curCode":"        public boolean tryOnError(Throwable t) {\n           if (emitter.isCancelled() || done) {\n               return false;\n           }\n           if (t == null) {\n               t = ExceptionHelper.createNullPointerException(\"onError called with a null Throwable.\");\n           }\n           if (errors.tryAddThrowable(t)) {\n               done = true;\n               drain();\n               return true;\n           }\n           return false;\n        }\n","date":"2019-08-28 22:07:44","endLine":150,"groupId":"102260","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"tryOnError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/66/cbd7409b43692d68f399db47282ad73b87d473.src","preCode":"        public boolean tryOnError(Throwable t) {\n           if (emitter.isCancelled() || done) {\n               return false;\n           }\n           if (t == null) {\n               t = ExceptionHelper.createNullPointerException(\"onError called with a null Throwable.\");\n           }\n           if (errors.tryAddThrowable(t)) {\n               done = true;\n               drain();\n               return true;\n           }\n           return false;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCreate.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
