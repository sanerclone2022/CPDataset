[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Observer<Integer> observer = TestHelper.mockObserver();\n        TestObserver<Integer> to = new TestObserver<Integer>(observer);\n\n        Observable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(to);\n\n        to.dispose();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, never()).onNext(anyInt());\n        inOrder.verify(observer, never()).onError(any(Exception.class));\n        inOrder.verify(observer, never()).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":404,"groupId":"8946","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"afterUnsubscribeCalledThenObserverOnNextNeverCalled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/1d36f0d09319680f4c13968eea2d99c5e72ad9.src","preCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Observer<Integer> observer = TestHelper.mockObserver();\n        TestObserver<Integer> to = new TestObserver<Integer>(observer);\n\n        Observable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(to);\n\n        to.dispose();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, never()).onNext(anyInt());\n        inOrder.verify(observer, never()).onError(any(Exception.class));\n        inOrder.verify(observer, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(subscriber);\n\n        Flowable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(ts);\n\n        ts.cancel();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onError(any(Exception.class));\n        inOrder.verify(subscriber, never()).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":400,"groupId":"12845","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"afterUnsubscribeCalledThenObserverOnNextNeverCalled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ce/81203a840d057eb88c3fed181fbf06af9e57dc.src","preCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(subscriber);\n\n        Flowable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(ts);\n\n        ts.cancel();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onError(any(Exception.class));\n        inOrder.verify(subscriber, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Observer<Integer> observer = TestHelper.mockObserver();\n        TestObserver<Integer> to = new TestObserver<Integer>(observer);\n\n        Observable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(to);\n\n        to.dispose();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, never()).onNext(anyInt());\n        inOrder.verify(observer, never()).onError(any(Exception.class));\n        inOrder.verify(observer, never()).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":404,"groupId":"8946","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"afterUnsubscribeCalledThenObserverOnNextNeverCalled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/1d36f0d09319680f4c13968eea2d99c5e72ad9.src","preCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Observer<Integer> observer = TestHelper.mockObserver();\n        TestObserver<Integer> to = new TestObserver<Integer>(observer);\n\n        Observable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(to);\n\n        to.dispose();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, never()).onNext(anyInt());\n        inOrder.verify(observer, never()).onError(any(Exception.class));\n        inOrder.verify(observer, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<Integer> ts = new TestSubscriber<>(subscriber);\n\n        Flowable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(ts);\n\n        ts.cancel();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onError(any(Exception.class));\n        inOrder.verify(subscriber, never()).onComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":401,"groupId":"12845","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"afterUnsubscribeCalledThenObserverOnNextNeverCalled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/73/efdfc426fc765de22359eb2867b467bac65b15.src","preCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(subscriber);\n\n        Flowable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(ts);\n\n        ts.cancel();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onError(any(Exception.class));\n        inOrder.verify(subscriber, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Observer<Integer> observer = TestHelper.mockObserver();\n        TestObserver<Integer> to = new TestObserver<>(observer);\n\n        Observable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(to);\n\n        to.dispose();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, never()).onNext(anyInt());\n        inOrder.verify(observer, never()).onError(any(Exception.class));\n        inOrder.verify(observer, never()).onComplete();\n    }\n","date":"2019-12-22 18:59:44","endLine":404,"groupId":"103590","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"afterUnsubscribeCalledThenObserverOnNextNeverCalled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/57/9b713313f3932bdce293ecbf8bbc8df2f74ed5.src","preCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Observer<Integer> observer = TestHelper.mockObserver();\n        TestObserver<Integer> to = new TestObserver<Integer>(observer);\n\n        Observable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(to);\n\n        to.dispose();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, never()).onNext(anyInt());\n        inOrder.verify(observer, never()).onError(any(Exception.class));\n        inOrder.verify(observer, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<Integer> ts = new TestSubscriber<>(subscriber);\n\n        Flowable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(ts);\n\n        ts.cancel();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onError(any(Exception.class));\n        inOrder.verify(subscriber, never()).onComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":401,"groupId":"103590","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"afterUnsubscribeCalledThenObserverOnNextNeverCalled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/73/efdfc426fc765de22359eb2867b467bac65b15.src","preCode":"    public void afterUnsubscribeCalledThenObserverOnNextNeverCalled() {\n        final TestScheduler testScheduler = new TestScheduler();\n\n        final Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<Integer> ts = new TestSubscriber<>(subscriber);\n\n        Flowable.just(1, 2, 3)\n                .observeOn(testScheduler)\n                .subscribe(ts);\n\n        ts.cancel();\n        testScheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        final InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onError(any(Exception.class));\n        inOrder.verify(subscriber, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
