[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestObserverEx<Integer> inner1 = new TestObserverEx<Integer>();\n        final TestObserverEx<Integer> inner2 = new TestObserverEx<Integer>();\n\n        final TestObserverEx<GroupedObservable<Integer, Integer>> outer\n                = new TestObserverEx<GroupedObservable<Integer, Integer>>(new DefaultObserver<GroupedObservable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedObservable<Integer, Integer> o) {\n                if (o.getKey() == 0) {\n                    o.subscribe(inner1);\n                } else {\n                    o.subscribe(inner2);\n                }\n            }\n        });\n        Observable.unsafeCreate(\n                new ObservableSource<Integer>() {\n                    @Override\n                    public void subscribe(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        observer.onNext(0);\n                        observer.onNext(1);\n                        observer.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","date":"2019-08-16 20:51:17","endLine":1444,"groupId":"2287","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByShouldPropagateError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestObserverEx<Integer> inner1 = new TestObserverEx<Integer>();\n        final TestObserverEx<Integer> inner2 = new TestObserverEx<Integer>();\n\n        final TestObserverEx<GroupedObservable<Integer, Integer>> outer\n                = new TestObserverEx<GroupedObservable<Integer, Integer>>(new DefaultObserver<GroupedObservable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedObservable<Integer, Integer> o) {\n                if (o.getKey() == 0) {\n                    o.subscribe(inner1);\n                } else {\n                    o.subscribe(inner2);\n                }\n            }\n        });\n        Observable.unsafeCreate(\n                new ObservableSource<Integer>() {\n                    @Override\n                    public void subscribe(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        observer.onNext(0);\n                        observer.onNext(1);\n                        observer.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1399,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestSubscriberEx<Integer> inner1 = new TestSubscriberEx<Integer>();\n        final TestSubscriberEx<Integer> inner2 = new TestSubscriberEx<Integer>();\n\n        final TestSubscriberEx<GroupedFlowable<Integer, Integer>> outer\n                = new TestSubscriberEx<GroupedFlowable<Integer, Integer>>(new DefaultSubscriber<GroupedFlowable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedFlowable<Integer, Integer> f) {\n                if (f.getKey() == 0) {\n                    f.subscribe(inner1);\n                } else {\n                    f.subscribe(inner2);\n                }\n            }\n        });\n        Flowable.unsafeCreate(\n                new Publisher<Integer>() {\n                    @Override\n                    public void subscribe(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        subscriber.onNext(0);\n                        subscriber.onNext(1);\n                        subscriber.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","date":"2019-08-16 20:51:17","endLine":1458,"groupId":"7178","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByShouldPropagateError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestSubscriberEx<Integer> inner1 = new TestSubscriberEx<Integer>();\n        final TestSubscriberEx<Integer> inner2 = new TestSubscriberEx<Integer>();\n\n        final TestSubscriberEx<GroupedFlowable<Integer, Integer>> outer\n                = new TestSubscriberEx<GroupedFlowable<Integer, Integer>>(new DefaultSubscriber<GroupedFlowable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedFlowable<Integer, Integer> f) {\n                if (f.getKey() == 0) {\n                    f.subscribe(inner1);\n                } else {\n                    f.subscribe(inner2);\n                }\n            }\n        });\n        Flowable.unsafeCreate(\n                new Publisher<Integer>() {\n                    @Override\n                    public void subscribe(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        subscriber.onNext(0);\n                        subscriber.onNext(1);\n                        subscriber.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1413,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestObserverEx<Integer> inner1 = new TestObserverEx<Integer>();\n        final TestObserverEx<Integer> inner2 = new TestObserverEx<Integer>();\n\n        final TestObserverEx<GroupedObservable<Integer, Integer>> outer\n                = new TestObserverEx<GroupedObservable<Integer, Integer>>(new DefaultObserver<GroupedObservable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedObservable<Integer, Integer> o) {\n                if (o.getKey() == 0) {\n                    o.subscribe(inner1);\n                } else {\n                    o.subscribe(inner2);\n                }\n            }\n        });\n        Observable.unsafeCreate(\n                new ObservableSource<Integer>() {\n                    @Override\n                    public void subscribe(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        observer.onNext(0);\n                        observer.onNext(1);\n                        observer.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","date":"2019-12-20 02:39:40","endLine":1446,"groupId":"1350","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByShouldPropagateError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/af76cda815824554eb565ba74f759a34755749.src","preCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestObserverEx<Integer> inner1 = new TestObserverEx<Integer>();\n        final TestObserverEx<Integer> inner2 = new TestObserverEx<Integer>();\n\n        final TestObserverEx<GroupedObservable<Integer, Integer>> outer\n                = new TestObserverEx<GroupedObservable<Integer, Integer>>(new DefaultObserver<GroupedObservable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedObservable<Integer, Integer> o) {\n                if (o.getKey() == 0) {\n                    o.subscribe(inner1);\n                } else {\n                    o.subscribe(inner2);\n                }\n            }\n        });\n        Observable.unsafeCreate(\n                new ObservableSource<Integer>() {\n                    @Override\n                    public void subscribe(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposables.empty());\n                        observer.onNext(0);\n                        observer.onNext(1);\n                        observer.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1401,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestSubscriberEx<Integer> inner1 = new TestSubscriberEx<Integer>();\n        final TestSubscriberEx<Integer> inner2 = new TestSubscriberEx<Integer>();\n\n        final TestSubscriberEx<GroupedFlowable<Integer, Integer>> outer\n                = new TestSubscriberEx<GroupedFlowable<Integer, Integer>>(new DefaultSubscriber<GroupedFlowable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedFlowable<Integer, Integer> f) {\n                if (f.getKey() == 0) {\n                    f.subscribe(inner1);\n                } else {\n                    f.subscribe(inner2);\n                }\n            }\n        });\n        Flowable.unsafeCreate(\n                new Publisher<Integer>() {\n                    @Override\n                    public void subscribe(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        subscriber.onNext(0);\n                        subscriber.onNext(1);\n                        subscriber.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","date":"2019-08-16 20:51:17","endLine":1458,"groupId":"7178","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByShouldPropagateError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestSubscriberEx<Integer> inner1 = new TestSubscriberEx<Integer>();\n        final TestSubscriberEx<Integer> inner2 = new TestSubscriberEx<Integer>();\n\n        final TestSubscriberEx<GroupedFlowable<Integer, Integer>> outer\n                = new TestSubscriberEx<GroupedFlowable<Integer, Integer>>(new DefaultSubscriber<GroupedFlowable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedFlowable<Integer, Integer> f) {\n                if (f.getKey() == 0) {\n                    f.subscribe(inner1);\n                } else {\n                    f.subscribe(inner2);\n                }\n            }\n        });\n        Flowable.unsafeCreate(\n                new Publisher<Integer>() {\n                    @Override\n                    public void subscribe(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        subscriber.onNext(0);\n                        subscriber.onNext(1);\n                        subscriber.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1413,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestObserverEx<Integer> inner1 = new TestObserverEx<Integer>();\n        final TestObserverEx<Integer> inner2 = new TestObserverEx<Integer>();\n\n        final TestObserverEx<GroupedObservable<Integer, Integer>> outer\n                = new TestObserverEx<GroupedObservable<Integer, Integer>>(new DefaultObserver<GroupedObservable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedObservable<Integer, Integer> o) {\n                if (o.getKey() == 0) {\n                    o.subscribe(inner1);\n                } else {\n                    o.subscribe(inner2);\n                }\n            }\n        });\n        Observable.unsafeCreate(\n                new ObservableSource<Integer>() {\n                    @Override\n                    public void subscribe(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        observer.onNext(0);\n                        observer.onNext(1);\n                        observer.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","date":"2019-12-20 02:39:40","endLine":1446,"groupId":"1350","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByShouldPropagateError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/af76cda815824554eb565ba74f759a34755749.src","preCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestObserverEx<Integer> inner1 = new TestObserverEx<Integer>();\n        final TestObserverEx<Integer> inner2 = new TestObserverEx<Integer>();\n\n        final TestObserverEx<GroupedObservable<Integer, Integer>> outer\n                = new TestObserverEx<GroupedObservable<Integer, Integer>>(new DefaultObserver<GroupedObservable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedObservable<Integer, Integer> o) {\n                if (o.getKey() == 0) {\n                    o.subscribe(inner1);\n                } else {\n                    o.subscribe(inner2);\n                }\n            }\n        });\n        Observable.unsafeCreate(\n                new ObservableSource<Integer>() {\n                    @Override\n                    public void subscribe(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        observer.onNext(0);\n                        observer.onNext(1);\n                        observer.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1401,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestSubscriberEx<Integer> inner1 = new TestSubscriberEx<>();\n        final TestSubscriberEx<Integer> inner2 = new TestSubscriberEx<>();\n\n        final TestSubscriberEx<GroupedFlowable<Integer, Integer>> outer\n                = new TestSubscriberEx<>(new DefaultSubscriber<GroupedFlowable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedFlowable<Integer, Integer> f) {\n                if (f.getKey() == 0) {\n                    f.subscribe(inner1);\n                } else {\n                    f.subscribe(inner2);\n                }\n            }\n        });\n        Flowable.unsafeCreate(\n                new Publisher<Integer>() {\n                    @Override\n                    public void subscribe(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        subscriber.onNext(0);\n                        subscriber.onNext(1);\n                        subscriber.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","date":"2019-12-22 18:39:23","endLine":1462,"groupId":"7178","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByShouldPropagateError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestSubscriberEx<Integer> inner1 = new TestSubscriberEx<Integer>();\n        final TestSubscriberEx<Integer> inner2 = new TestSubscriberEx<Integer>();\n\n        final TestSubscriberEx<GroupedFlowable<Integer, Integer>> outer\n                = new TestSubscriberEx<GroupedFlowable<Integer, Integer>>(new DefaultSubscriber<GroupedFlowable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedFlowable<Integer, Integer> f) {\n                if (f.getKey() == 0) {\n                    f.subscribe(inner1);\n                } else {\n                    f.subscribe(inner2);\n                }\n            }\n        });\n        Flowable.unsafeCreate(\n                new Publisher<Integer>() {\n                    @Override\n                    public void subscribe(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        subscriber.onNext(0);\n                        subscriber.onNext(1);\n                        subscriber.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1417,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestObserverEx<Integer> inner1 = new TestObserverEx<>();\n        final TestObserverEx<Integer> inner2 = new TestObserverEx<>();\n\n        final TestObserverEx<GroupedObservable<Integer, Integer>> outer\n                = new TestObserverEx<>(new DefaultObserver<GroupedObservable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedObservable<Integer, Integer> o) {\n                if (o.getKey() == 0) {\n                    o.subscribe(inner1);\n                } else {\n                    o.subscribe(inner2);\n                }\n            }\n        });\n        Observable.unsafeCreate(\n                new ObservableSource<Integer>() {\n                    @Override\n                    public void subscribe(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        observer.onNext(0);\n                        observer.onNext(1);\n                        observer.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","date":"2019-12-22 18:59:44","endLine":1446,"groupId":"102919","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByShouldPropagateError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/d3f2d6432c67ffdd0df5bbb6960b138ae6f15a.src","preCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestObserverEx<Integer> inner1 = new TestObserverEx<Integer>();\n        final TestObserverEx<Integer> inner2 = new TestObserverEx<Integer>();\n\n        final TestObserverEx<GroupedObservable<Integer, Integer>> outer\n                = new TestObserverEx<GroupedObservable<Integer, Integer>>(new DefaultObserver<GroupedObservable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedObservable<Integer, Integer> o) {\n                if (o.getKey() == 0) {\n                    o.subscribe(inner1);\n                } else {\n                    o.subscribe(inner2);\n                }\n            }\n        });\n        Observable.unsafeCreate(\n                new ObservableSource<Integer>() {\n                    @Override\n                    public void subscribe(Observer<? super Integer> observer) {\n                        observer.onSubscribe(Disposable.empty());\n                        observer.onNext(0);\n                        observer.onNext(1);\n                        observer.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1401,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestSubscriberEx<Integer> inner1 = new TestSubscriberEx<>();\n        final TestSubscriberEx<Integer> inner2 = new TestSubscriberEx<>();\n\n        final TestSubscriberEx<GroupedFlowable<Integer, Integer>> outer\n                = new TestSubscriberEx<>(new DefaultSubscriber<GroupedFlowable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedFlowable<Integer, Integer> f) {\n                if (f.getKey() == 0) {\n                    f.subscribe(inner1);\n                } else {\n                    f.subscribe(inner2);\n                }\n            }\n        });\n        Flowable.unsafeCreate(\n                new Publisher<Integer>() {\n                    @Override\n                    public void subscribe(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        subscriber.onNext(0);\n                        subscriber.onNext(1);\n                        subscriber.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","date":"2019-12-22 18:39:23","endLine":1462,"groupId":"102919","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByShouldPropagateError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void groupByShouldPropagateError() {\n        final Throwable e = new RuntimeException(\"Oops\");\n        final TestSubscriberEx<Integer> inner1 = new TestSubscriberEx<>();\n        final TestSubscriberEx<Integer> inner2 = new TestSubscriberEx<>();\n\n        final TestSubscriberEx<GroupedFlowable<Integer, Integer>> outer\n                = new TestSubscriberEx<>(new DefaultSubscriber<GroupedFlowable<Integer, Integer>>() {\n\n            @Override\n            public void onComplete() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(GroupedFlowable<Integer, Integer> f) {\n                if (f.getKey() == 0) {\n                    f.subscribe(inner1);\n                } else {\n                    f.subscribe(inner2);\n                }\n            }\n        });\n        Flowable.unsafeCreate(\n                new Publisher<Integer>() {\n                    @Override\n                    public void subscribe(Subscriber<? super Integer> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        subscriber.onNext(0);\n                        subscriber.onNext(1);\n                        subscriber.onError(e);\n                    }\n                }\n        ).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer i) {\n                return i % 2;\n            }\n        }).subscribe(outer);\n        assertEquals(Arrays.asList(e), outer.errors());\n        assertEquals(Arrays.asList(e), inner1.errors());\n        assertEquals(Arrays.asList(e), inner2.errors());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1417,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
