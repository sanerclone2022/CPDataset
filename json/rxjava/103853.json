[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onError(Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new NullPointerException(\"onSubscribe not called in proper order\"));\n            }\n        }\n        try {\n            lastThread = Thread.currentThread();\n            errors.add(t);\n\n            if (t == null) {\n                errors.add(new IllegalStateException(\"onError received a null Throwable\"));\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":194,"groupId":"7039","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/07337b3668b8c5e014c3dd5769f8c5de4e75e9.src","preCode":"    public void onError(Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new NullPointerException(\"onSubscribe not called in proper order\"));\n            }\n        }\n        try {\n            lastThread = Thread.currentThread();\n            errors.add(t);\n\n            if (t == null) {\n                errors.add(new IllegalStateException(\"onError received a null Throwable\"));\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subscribers/TestSubscriber.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onError(Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new IllegalStateException(\"onSubscribe not called in proper order\"));\n            }\n        }\n\n        try {\n            lastThread = Thread.currentThread();\n            if (t == null) {\n                errors.add(new NullPointerException(\"onError received a null Throwable\"));\n            } else {\n                errors.add(t);\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":134,"groupId":"12611","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ea/e4fe113ef2a24c5c025dc3b20cce363671e58e.src","preCode":"    public void onError(Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new IllegalStateException(\"onSubscribe not called in proper order\"));\n            }\n        }\n\n        try {\n            lastThread = Thread.currentThread();\n            if (t == null) {\n                errors.add(new NullPointerException(\"onError received a null Throwable\"));\n            } else {\n                errors.add(t);\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/observers/TestObserver.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-21 18:08:34","codes":[{"authorDate":"2019-12-21 18:08:34","commitOrder":2,"curCode":"    public void onError(@NonNull Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new NullPointerException(\"onSubscribe not called in proper order\"));\n            }\n        }\n        try {\n            lastThread = Thread.currentThread();\n            errors.add(t);\n\n            if (t == null) {\n                errors.add(new IllegalStateException(\"onError received a null Throwable\"));\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","date":"2019-12-21 18:08:34","endLine":197,"groupId":"7039","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onError","params":"(@NonNullThrowablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cb/c9d10320228ec3ea2ee8f5338317af309e695e.src","preCode":"    public void onError(Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new NullPointerException(\"onSubscribe not called in proper order\"));\n            }\n        }\n        try {\n            lastThread = Thread.currentThread();\n            errors.add(t);\n\n            if (t == null) {\n                errors.add(new IllegalStateException(\"onError received a null Throwable\"));\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subscribers/TestSubscriber.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2019-12-21 18:08:34","commitOrder":2,"curCode":"    public void onError(@NonNull Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new IllegalStateException(\"onSubscribe not called in proper order\"));\n            }\n        }\n\n        try {\n            lastThread = Thread.currentThread();\n            if (t == null) {\n                errors.add(new NullPointerException(\"onError received a null Throwable\"));\n            } else {\n                errors.add(t);\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","date":"2019-12-21 18:08:34","endLine":141,"groupId":"12611","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onError","params":"(@NonNullThrowablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/44/b129fdab419b3d4766f22da6441f005734052b.src","preCode":"    public void onError(Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new IllegalStateException(\"onSubscribe not called in proper order\"));\n            }\n        }\n\n        try {\n            lastThread = Thread.currentThread();\n            if (t == null) {\n                errors.add(new NullPointerException(\"onError received a null Throwable\"));\n            } else {\n                errors.add(t);\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/observers/TestObserver.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"dba670554c69d6c09d28643505880c1a468af3db","commitMessage":"@@@3.x: Cleanup and prettify Javadocs.  widen XOperator throws (#6785)\n\n* 3.x: Cleanup and prettify Javadocs.  widen XOperator throws\n\n* Fix encoding of ? in javadoc\n\n* Fix a wrong tag name\n","date":"2019-12-21 18:08:34","modifiedFileCount":"75","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-21 18:08:34","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"    public void onError(@NonNull Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new IllegalStateException(\"onSubscribe not called in proper order\"));\n            }\n        }\n        try {\n            lastThread = Thread.currentThread();\n\n            if (t == null) {\n                errors.add(new NullPointerException(\"onError received a null Throwable\"));\n            } else {\n                errors.add(t);\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","date":"2020-02-12 23:26:52","endLine":198,"groupId":"103853","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onError","params":"(@NonNullThrowablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b3/a67a89fea2cd64e2a39f039d379befae308c51.src","preCode":"    public void onError(@NonNull Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new NullPointerException(\"onSubscribe not called in proper order\"));\n            }\n        }\n        try {\n            lastThread = Thread.currentThread();\n            errors.add(t);\n\n            if (t == null) {\n                errors.add(new IllegalStateException(\"onError received a null Throwable\"));\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subscribers/TestSubscriber.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2019-12-21 18:08:34","commitOrder":3,"curCode":"    public void onError(@NonNull Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new IllegalStateException(\"onSubscribe not called in proper order\"));\n            }\n        }\n\n        try {\n            lastThread = Thread.currentThread();\n            if (t == null) {\n                errors.add(new NullPointerException(\"onError received a null Throwable\"));\n            } else {\n                errors.add(t);\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","date":"2019-12-21 18:08:34","endLine":141,"groupId":"103853","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onError","params":"(@NonNullThrowablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/44/b129fdab419b3d4766f22da6441f005734052b.src","preCode":"    public void onError(@NonNull Throwable t) {\n        if (!checkSubscriptionOnce) {\n            checkSubscriptionOnce = true;\n            if (upstream.get() == null) {\n                errors.add(new IllegalStateException(\"onSubscribe not called in proper order\"));\n            }\n        }\n\n        try {\n            lastThread = Thread.currentThread();\n            if (t == null) {\n                errors.add(new NullPointerException(\"onError received a null Throwable\"));\n            } else {\n                errors.add(t);\n            }\n\n            downstream.onError(t);\n        } finally {\n            done.countDown();\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/observers/TestObserver.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
