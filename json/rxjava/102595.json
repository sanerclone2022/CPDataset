[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable\n        .unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(\n                    final Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposables.empty());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    observer.onComplete();\n                } catch (Throwable e) {\n                    observer.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(to);\n\n        \r\n        scheduled.await();\n        \r\n        to.dispose();\n        latch.countDown();\n        doneLatch.await();\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":73,"groupId":"2696","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"issue813","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8d/2a1706bab813c26b914cbcfebd13b2b2e6bffe.src","preCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable\n        .unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(\n                    final Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposables.empty());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    observer.onComplete();\n                } catch (Throwable e) {\n                    observer.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(to);\n\n        \r\n        scheduled.await();\n        \r\n        to.dispose();\n        latch.countDown();\n        doneLatch.await();\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable\n        .unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(\n                    final Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    subscriber.onComplete();\n                } catch (Throwable e) {\n                    subscriber.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        \r\n        scheduled.await();\n        \r\n        ts.cancel();\n        latch.countDown();\n        doneLatch.await();\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":78,"groupId":"12065","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"issue813","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/0283358ec4e767b9741280259cca8cf4bef162.src","preCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable\n        .unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(\n                    final Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    subscriber.onComplete();\n                } catch (Throwable e) {\n                    subscriber.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        \r\n        scheduled.await();\n        \r\n        ts.cancel();\n        latch.countDown();\n        doneLatch.await();\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable\n        .unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(\n                    final Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    observer.onComplete();\n                } catch (Throwable e) {\n                    observer.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(to);\n\n        \r\n        scheduled.await();\n        \r\n        to.dispose();\n        latch.countDown();\n        doneLatch.await();\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","date":"2019-12-20 02:39:40","endLine":73,"groupId":"2696","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"issue813","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/ffe95a71bd3fed4be982199e2cfa0440080f26.src","preCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable\n        .unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(\n                    final Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposables.empty());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    observer.onComplete();\n                } catch (Throwable e) {\n                    observer.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(to);\n\n        \r\n        scheduled.await();\n        \r\n        to.dispose();\n        latch.countDown();\n        doneLatch.await();\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable\n        .unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(\n                    final Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    subscriber.onComplete();\n                } catch (Throwable e) {\n                    subscriber.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        \r\n        scheduled.await();\n        \r\n        ts.cancel();\n        latch.countDown();\n        doneLatch.await();\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":78,"groupId":"12065","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"issue813","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/0283358ec4e767b9741280259cca8cf4bef162.src","preCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable\n        .unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(\n                    final Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    subscriber.onComplete();\n                } catch (Throwable e) {\n                    subscriber.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        \r\n        scheduled.await();\n        \r\n        ts.cancel();\n        latch.countDown();\n        doneLatch.await();\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable\n        .unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(\n                    final Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    observer.onComplete();\n                } catch (Throwable e) {\n                    observer.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(to);\n\n        \r\n        scheduled.await();\n        \r\n        to.dispose();\n        latch.countDown();\n        doneLatch.await();\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","date":"2019-12-20 02:39:40","endLine":73,"groupId":"2696","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"issue813","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/ffe95a71bd3fed4be982199e2cfa0440080f26.src","preCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable\n        .unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(\n                    final Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    observer.onComplete();\n                } catch (Throwable e) {\n                    observer.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(to);\n\n        \r\n        scheduled.await();\n        \r\n        to.dispose();\n        latch.countDown();\n        doneLatch.await();\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        Flowable\n        .unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(\n                    final Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    subscriber.onComplete();\n                } catch (Throwable e) {\n                    subscriber.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        \r\n        scheduled.await();\n        \r\n        ts.cancel();\n        latch.countDown();\n        doneLatch.await();\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":78,"groupId":"12065","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"issue813","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a9/f66d733ebd7728ff7dfe80b67deb0003a2ee41.src","preCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable\n        .unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(\n                    final Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    subscriber.onComplete();\n                } catch (Throwable e) {\n                    subscriber.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        \r\n        scheduled.await();\n        \r\n        ts.cancel();\n        latch.countDown();\n        doneLatch.await();\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestObserver<Integer> to = new TestObserver<>();\n\n        Observable\n        .unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(\n                    final Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    observer.onComplete();\n                } catch (Throwable e) {\n                    observer.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(to);\n\n        \r\n        scheduled.await();\n        \r\n        to.dispose();\n        latch.countDown();\n        doneLatch.await();\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","date":"2019-12-22 18:59:44","endLine":73,"groupId":"102595","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"issue813","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/53/ccf2b3a694f150f4cebe2037b14a6ade8e58a1.src","preCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable\n        .unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(\n                    final Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    observer.onComplete();\n                } catch (Throwable e) {\n                    observer.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(to);\n\n        \r\n        scheduled.await();\n        \r\n        to.dispose();\n        latch.countDown();\n        doneLatch.await();\n        to.assertNoErrors();\n        to.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSubscribeOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        Flowable\n        .unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(\n                    final Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    subscriber.onComplete();\n                } catch (Throwable e) {\n                    subscriber.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        \r\n        scheduled.await();\n        \r\n        ts.cancel();\n        latch.countDown();\n        doneLatch.await();\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":78,"groupId":"102595","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"issue813","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a9/f66d733ebd7728ff7dfe80b67deb0003a2ee41.src","preCode":"    public void issue813() throws InterruptedException {\n        \r\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        Flowable\n        .unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(\n                    final Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                scheduled.countDown();\n                try {\n                    try {\n                        latch.await();\n                    } catch (InterruptedException e) {\n                        \r\n                        \r\n                    }\n\n                    subscriber.onComplete();\n                } catch (Throwable e) {\n                    subscriber.onError(e);\n                } finally {\n                    doneLatch.countDown();\n                }\n            }\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        \r\n        scheduled.await();\n        \r\n        ts.cancel();\n        latch.countDown();\n        doneLatch.await();\n        ts.assertNoErrors();\n        ts.assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSubscribeOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
