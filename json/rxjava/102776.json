[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    protected void subscribeActual(Subscriber<? super U> s) {\n        U u;\n        try {\n            u = ObjectHelper.requireNonNull(initialSupplier.get(), \"The initial value supplied is null\");\n        } catch (Throwable e) {\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(s, u, collector));\n    }\n","date":"2019-08-16 20:51:17","endLine":46,"groupId":"11121","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superU>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d5/b4dd82331774bb82d3d52b18a3b03f91da298f.src","preCode":"    protected void subscribeActual(Subscriber<? super U> s) {\n        U u;\n        try {\n            u = ObjectHelper.requireNonNull(initialSupplier.get(), \"The initial value supplied is null\");\n        } catch (Throwable e) {\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(s, u, collector));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCollect.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    protected void subscribeActual(Subscriber<? super R> s) {\n        R r;\n\n        try {\n            r = ObjectHelper.requireNonNull(seedSupplier.get(), \"The seed supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new ScanSeedSubscriber<T, R>(s, accumulator, r, bufferSize()));\n    }\n","date":"2019-08-16 20:51:17","endLine":52,"groupId":"5253","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superR>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/875f307059103a95894fb3f1625ffc5512a8ef.src","preCode":"    protected void subscribeActual(Subscriber<? super R> s) {\n        R r;\n\n        try {\n            r = ObjectHelper.requireNonNull(seedSupplier.get(), \"The seed supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new ScanSeedSubscriber<T, R>(s, accumulator, r, bufferSize()));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    protected void subscribeActual(Subscriber<? super U> s) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initial value supplied is null\");\n        } catch (Throwable e) {\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(s, u, collector));\n    }\n","date":"2019-12-18 03:06:44","endLine":47,"groupId":"11121","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superU>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/80/345f2f3b487411e1dadeb172708a81bf2c5af6.src","preCode":"    protected void subscribeActual(Subscriber<? super U> s) {\n        U u;\n        try {\n            u = ObjectHelper.requireNonNull(initialSupplier.get(), \"The initial value supplied is null\");\n        } catch (Throwable e) {\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(s, u, collector));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCollect.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    protected void subscribeActual(Subscriber<? super R> s) {\n        R r;\n\n        try {\n            r = Objects.requireNonNull(seedSupplier.get(), \"The seed supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new ScanSeedSubscriber<T, R>(s, accumulator, r, bufferSize()));\n    }\n","date":"2019-12-18 03:06:44","endLine":52,"groupId":"5253","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superR>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/0b1870da583c884fe337e87635960a5db012da.src","preCode":"    protected void subscribeActual(Subscriber<? super R> s) {\n        R r;\n\n        try {\n            r = ObjectHelper.requireNonNull(seedSupplier.get(), \"The seed supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new ScanSeedSubscriber<T, R>(s, accumulator, r, bufferSize()));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-27 07:55:36","commitOrder":3,"curCode":"    protected void subscribeActual(Subscriber<? super U> s) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initial value supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(s, u, collector));\n    }\n","date":"2019-12-27 07:55:36","endLine":48,"groupId":"5253","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superU>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c2/560cf6e391be37fa73098bffe7faa3793c5f36.src","preCode":"    protected void subscribeActual(Subscriber<? super U> s) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initial value supplied is null\");\n        } catch (Throwable e) {\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(s, u, collector));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCollect.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":3,"curCode":"    protected void subscribeActual(Subscriber<? super R> s) {\n        R r;\n\n        try {\n            r = Objects.requireNonNull(seedSupplier.get(), \"The seed supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new ScanSeedSubscriber<T, R>(s, accumulator, r, bufferSize()));\n    }\n","date":"2019-12-18 03:06:44","endLine":52,"groupId":"5253","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superR>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/0b1870da583c884fe337e87635960a5db012da.src","preCode":"    protected void subscribeActual(Subscriber<? super R> s) {\n        R r;\n\n        try {\n            r = Objects.requireNonNull(seedSupplier.get(), \"The seed supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new ScanSeedSubscriber<T, R>(s, accumulator, r, bufferSize()));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"}],"commitId":"a97d871ee7161fc9f4684d95cae3e94340cd0ccf","commitMessage":"@@@3.x: Add missing throwIfFatal calls (#6801)\n\n","date":"2019-12-27 07:55:36","modifiedFileCount":"21","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":4,"curCode":"    protected void subscribeActual(Subscriber<? super U> s) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initial value supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<>(s, u, collector));\n    }\n","date":"2019-12-28 03:01:34","endLine":48,"groupId":"102776","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superU>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b8/751a23f9060113be86ec624d1a16c40f5da023.src","preCode":"    protected void subscribeActual(Subscriber<? super U> s) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initial value supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(s, u, collector));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCollect.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-12-28 03:01:34","commitOrder":4,"curCode":"    protected void subscribeActual(Subscriber<? super R> s) {\n        R r;\n\n        try {\n            r = Objects.requireNonNull(seedSupplier.get(), \"The seed supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new ScanSeedSubscriber<>(s, accumulator, r, bufferSize()));\n    }\n","date":"2019-12-28 03:01:34","endLine":52,"groupId":"102776","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superR>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/21/c88ab7bfe06047240a1aca59740a6d38ec8cac.src","preCode":"    protected void subscribeActual(Subscriber<? super R> s) {\n        R r;\n\n        try {\n            r = Objects.requireNonNull(seedSupplier.get(), \"The seed supplied is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptySubscription.error(e, s);\n            return;\n        }\n\n        source.subscribe(new ScanSeedSubscriber<T, R>(s, accumulator, r, bufferSize()));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanSeed.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
