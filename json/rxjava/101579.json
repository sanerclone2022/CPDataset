[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void observerSingle() throws Exception {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestObserver<Integer> to = Observable.just(1)\n            .subscribeOn(Schedulers.io())\n            .flatMapSingle(new Function<Integer, Single<Integer>>() {\n                @Override\n                public Single<Integer> apply(Integer v) throws Exception {\n                    sleep();\n                    return Single.<Integer>error(new TestException());\n                }\n            })\n            .test();\n\n            cb.await();\n\n            beforeCancelSleep(to);\n\n            to.dispose();\n\n            Thread.sleep(SLEEP_AFTER_CANCEL);\n\n            to.assertEmpty();\n\n            assertTrue(errors.toString(), errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":286,"groupId":"11006","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"observerSingle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7e/feee401db94e827faf2164d1eae7bcd65d668e.src","preCode":"    public void observerSingle() throws Exception {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestObserver<Integer> to = Observable.just(1)\n            .subscribeOn(Schedulers.io())\n            .flatMapSingle(new Function<Integer, Single<Integer>>() {\n                @Override\n                public Single<Integer> apply(Integer v) throws Exception {\n                    sleep();\n                    return Single.<Integer>error(new TestException());\n                }\n            })\n            .test();\n\n            cb.await();\n\n            beforeCancelSleep(to);\n\n            to.dispose();\n\n            Thread.sleep(SLEEP_AFTER_CANCEL);\n\n            to.assertEmpty();\n\n            assertTrue(errors.toString(), errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/core/XFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void maybeSingle() throws Exception {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestObserver<Integer> to = Maybe.just(1)\n            .subscribeOn(Schedulers.io())\n            .flatMapSingle(new Function<Integer, Single<Integer>>() {\n                @Override\n                public Single<Integer> apply(Integer v) throws Exception {\n                    sleep();\n                    return Single.<Integer>error(new TestException());\n                }\n            })\n            .test();\n\n            cb.await();\n\n            beforeCancelSleep(to);\n\n            to.dispose();\n\n            Thread.sleep(SLEEP_AFTER_CANCEL);\n\n            to.assertEmpty();\n\n            assertTrue(errors.toString(), errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":536,"groupId":"11006","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"maybeSingle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7e/feee401db94e827faf2164d1eae7bcd65d668e.src","preCode":"    public void maybeSingle() throws Exception {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestObserver<Integer> to = Maybe.just(1)\n            .subscribeOn(Schedulers.io())\n            .flatMapSingle(new Function<Integer, Single<Integer>>() {\n                @Override\n                public Single<Integer> apply(Integer v) throws Exception {\n                    sleep();\n                    return Single.<Integer>error(new TestException());\n                }\n            })\n            .test();\n\n            cb.await();\n\n            beforeCancelSleep(to);\n\n            to.dispose();\n\n            Thread.sleep(SLEEP_AFTER_CANCEL);\n\n            to.assertEmpty();\n\n            assertTrue(errors.toString(), errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/core/XFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2020-01-29 04:32:19","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void observerSingle() throws Exception {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestObserver<Integer> to = Observable.just(1)\n            .subscribeOn(Schedulers.io())\n            .flatMapSingle(new Function<Integer, Single<Integer>>() {\n                @Override\n                public Single<Integer> apply(Integer v) throws Exception {\n                    sleep();\n                    return Single.<Integer>error(new TestException());\n                }\n            })\n            .test();\n\n            cb.await();\n\n            beforeCancelSleep(to);\n\n            to.dispose();\n\n            Thread.sleep(SLEEP_AFTER_CANCEL);\n\n            to.assertEmpty();\n\n            assertTrue(errors.toString(), errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":286,"groupId":"101579","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"observerSingle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7e/feee401db94e827faf2164d1eae7bcd65d668e.src","preCode":"    public void observerSingle() throws Exception {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestObserver<Integer> to = Observable.just(1)\n            .subscribeOn(Schedulers.io())\n            .flatMapSingle(new Function<Integer, Single<Integer>>() {\n                @Override\n                public Single<Integer> apply(Integer v) throws Exception {\n                    sleep();\n                    return Single.<Integer>error(new TestException());\n                }\n            })\n            .test();\n\n            cb.await();\n\n            beforeCancelSleep(to);\n\n            to.dispose();\n\n            Thread.sleep(SLEEP_AFTER_CANCEL);\n\n            to.assertEmpty();\n\n            assertTrue(errors.toString(), errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/core/XFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"N"},{"authorDate":"2020-01-29 04:32:19","commitOrder":2,"curCode":"    public void maybeSingle() throws Exception {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestObserver<Integer> to = Maybe.just(1)\n            .subscribeOn(Schedulers.io())\n            .flatMapSingle(new Function<Integer, Single<Integer>>() {\n                @Override\n                public Single<Integer> apply(Integer v) throws Exception {\n                    sleep();\n                    return Single.<Integer>error(new TestException());\n                }\n            })\n            .toSingle()\n            .test();\n\n            cb.await();\n\n            beforeCancelSleep(to);\n\n            to.dispose();\n\n            Thread.sleep(SLEEP_AFTER_CANCEL);\n\n            to.assertEmpty();\n\n            assertTrue(errors.toString(), errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2020-01-29 04:32:19","endLine":538,"groupId":"101579","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"maybeSingle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6e/80b57904cb0bebc6bfcedc372d7f542e828657.src","preCode":"    public void maybeSingle() throws Exception {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestObserver<Integer> to = Maybe.just(1)\n            .subscribeOn(Schedulers.io())\n            .flatMapSingle(new Function<Integer, Single<Integer>>() {\n                @Override\n                public Single<Integer> apply(Integer v) throws Exception {\n                    sleep();\n                    return Single.<Integer>error(new TestException());\n                }\n            })\n            .test();\n\n            cb.await();\n\n            beforeCancelSleep(to);\n\n            to.dispose();\n\n            Thread.sleep(SLEEP_AFTER_CANCEL);\n\n            to.assertEmpty();\n\n            assertTrue(errors.toString(), errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/core/XFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"M"}],"commitId":"f1a795da0d4cdfb3133206ad8e3887bdb8ba948b","commitMessage":"@@@3.x: Swap Maybe.flatMapSingle and Maybe.flatMapSingleElement (#6891)\n\n* Deleted Maybe.flatMapSingle\n\nAnd replaced tests with flatMapSingle().toSingle()\n\n* Renamed Maybe.flatMapSingleElement to flatMapSingle\n\n* Deleted unused MaybeFlatMapSingle operator\n\n* Renamed operator MaybeFlatMapSingleElement to MaybeFlatMapSingle\n\n* Add Ignore to XFlatMapTest.maybeSingle\n","date":"2020-01-29 04:32:19","modifiedFileCount":"5","status":"M","submitter":"slisaasquatch"}]
