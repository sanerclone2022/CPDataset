[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public ObservableCache(Observable<T> source, int capacityHint) {\n        super(source);\n        this.capacityHint = capacityHint;\n        this.once = new AtomicBoolean();\n        Node<T> n = new Node<T>(capacityHint);\n        this.head = n;\n        this.tail = n;\n        this.observers = new AtomicReference<CacheDisposable<T>[]>(EMPTY);\n    }\n","date":"2019-08-16 20:51:17","endLine":102,"groupId":"12501","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ObservableCache","params":"(Observable<T>source@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d0/3ad2008ef174112b02c1e540380b1fbef40b80.src","preCode":"    public ObservableCache(Observable<T> source, int capacityHint) {\n        super(source);\n        this.capacityHint = capacityHint;\n        this.once = new AtomicBoolean();\n        Node<T> n = new Node<T>(capacityHint);\n        this.head = n;\n        this.tail = n;\n        this.observers = new AtomicReference<CacheDisposable<T>[]>(EMPTY);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCache.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public FlowableCache(Flowable<T> source, int capacityHint) {\n        super(source);\n        this.capacityHint = capacityHint;\n        this.once = new AtomicBoolean();\n        Node<T> n = new Node<T>(capacityHint);\n        this.head = n;\n        this.tail = n;\n        this.subscribers = new AtomicReference<CacheSubscription<T>[]>(EMPTY);\n    }\n","date":"2019-08-16 20:51:17","endLine":106,"groupId":"12501","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"FlowableCache","params":"(Flowable<T>source@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ae/a0b3150d2817c6ce3338c9b15ec57f4557499f.src","preCode":"    public FlowableCache(Flowable<T> source, int capacityHint) {\n        super(source);\n        this.capacityHint = capacityHint;\n        this.once = new AtomicBoolean();\n        Node<T> n = new Node<T>(capacityHint);\n        this.head = n;\n        this.tail = n;\n        this.subscribers = new AtomicReference<CacheSubscription<T>[]>(EMPTY);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCache.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":2,"curCode":"    public ObservableCache(Observable<T> source, int capacityHint) {\n        super(source);\n        this.capacityHint = capacityHint;\n        this.once = new AtomicBoolean();\n        Node<T> n = new Node<>(capacityHint);\n        this.head = n;\n        this.tail = n;\n        this.observers = new AtomicReference<>(EMPTY);\n    }\n","date":"2019-12-28 03:01:34","endLine":102,"groupId":"102427","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ObservableCache","params":"(Observable<T>source@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/e7447e6e305c393aa6b450c77f0098e4292501.src","preCode":"    public ObservableCache(Observable<T> source, int capacityHint) {\n        super(source);\n        this.capacityHint = capacityHint;\n        this.once = new AtomicBoolean();\n        Node<T> n = new Node<T>(capacityHint);\n        this.head = n;\n        this.tail = n;\n        this.observers = new AtomicReference<CacheDisposable<T>[]>(EMPTY);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCache.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2019-12-28 03:01:34","commitOrder":2,"curCode":"    public FlowableCache(Flowable<T> source, int capacityHint) {\n        super(source);\n        this.capacityHint = capacityHint;\n        this.once = new AtomicBoolean();\n        Node<T> n = new Node<>(capacityHint);\n        this.head = n;\n        this.tail = n;\n        this.subscribers = new AtomicReference<>(EMPTY);\n    }\n","date":"2019-12-28 03:01:34","endLine":106,"groupId":"102427","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"FlowableCache","params":"(Flowable<T>source@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/25/d5fb71a32f252cfba8eacdce6389dcc68f7366.src","preCode":"    public FlowableCache(Flowable<T> source, int capacityHint) {\n        super(source);\n        this.capacityHint = capacityHint;\n        this.once = new AtomicBoolean();\n        Node<T> n = new Node<T>(capacityHint);\n        this.head = n;\n        this.tail = n;\n        this.subscribers = new AtomicReference<CacheSubscription<T>[]>(EMPTY);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCache.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
