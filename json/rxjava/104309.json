[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n            Observable.range(0, 1000)\n            .flatMap(new Function<Integer, Observable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Observable<Integer> apply(Integer t) {\n                    Observable<Integer> r = Observable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(to);\n\n            to.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (to.completions() == 0) {\n                System.out.println(to.values().size());\n            }\n            to.assertTerminated();\n            to.assertNoErrors();\n            List<Integer> list = to.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<Integer>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":476,"groupId":"1635","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"flatMapRangeMixedAsyncLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cf/31f26c3a1aecce24678eb1752dabfa676d5d76.src","preCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n            Observable.range(0, 1000)\n            .flatMap(new Function<Integer, Observable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Observable<Integer> apply(Integer t) {\n                    Observable<Integer> r = Observable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(to);\n\n            to.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (to.completions() == 0) {\n                System.out.println(to.values().size());\n            }\n            to.assertTerminated();\n            to.assertNoErrors();\n            List<Integer> list = to.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<Integer>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n            Flowable.range(0, 1000)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Flowable<Integer> apply(Integer t) {\n                    Flowable<Integer> r = Flowable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(ts);\n\n            ts.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (ts.completions() == 0) {\n                System.out.println(ts.values().size());\n            }\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            List<Integer> list = ts.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<Integer>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":483,"groupId":"7103","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapRangeMixedAsyncLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/48/3d92062ab3c06726b978bb2ce9773ac0842cbc.src","preCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n            Flowable.range(0, 1000)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Flowable<Integer> apply(Integer t) {\n                    Flowable<Integer> r = Flowable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(ts);\n\n            ts.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (ts.completions() == 0) {\n                System.out.println(ts.values().size());\n            }\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            List<Integer> list = ts.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<Integer>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n            Observable.range(0, 1000)\n            .flatMap(new Function<Integer, Observable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Observable<Integer> apply(Integer t) {\n                    Observable<Integer> r = Observable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(to);\n\n            to.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (to.completions() == 0) {\n                System.out.println(to.values().size());\n            }\n            to.assertTerminated();\n            to.assertNoErrors();\n            List<Integer> list = to.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<Integer>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":476,"groupId":"1635","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"flatMapRangeMixedAsyncLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cf/31f26c3a1aecce24678eb1752dabfa676d5d76.src","preCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n            Observable.range(0, 1000)\n            .flatMap(new Function<Integer, Observable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Observable<Integer> apply(Integer t) {\n                    Observable<Integer> r = Observable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(to);\n\n            to.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (to.completions() == 0) {\n                System.out.println(to.values().size());\n            }\n            to.assertTerminated();\n            to.assertNoErrors();\n            List<Integer> list = to.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<Integer>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n            Flowable.range(0, 1000)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Flowable<Integer> apply(Integer t) {\n                    Flowable<Integer> r = Flowable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(ts);\n\n            ts.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (ts.completions() == 0) {\n                System.out.println(ts.values().size());\n            }\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            List<Integer> list = ts.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":483,"groupId":"7103","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapRangeMixedAsyncLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/06/8f652db0609596493a6b998b494f4b3705bd3d.src","preCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n            Flowable.range(0, 1000)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Flowable<Integer> apply(Integer t) {\n                    Flowable<Integer> r = Flowable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(ts);\n\n            ts.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (ts.completions() == 0) {\n                System.out.println(ts.values().size());\n            }\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            List<Integer> list = ts.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<Integer>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestObserverEx<Integer> to = new TestObserverEx<>();\n            Observable.range(0, 1000)\n            .flatMap(new Function<Integer, Observable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Observable<Integer> apply(Integer t) {\n                    Observable<Integer> r = Observable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(to);\n\n            to.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (to.completions() == 0) {\n                System.out.println(to.values().size());\n            }\n            to.assertTerminated();\n            to.assertNoErrors();\n            List<Integer> list = to.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":476,"groupId":"104309","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"flatMapRangeMixedAsyncLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/00/f2523a332da7473bd33e1a028269c8cac6b424.src","preCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n            Observable.range(0, 1000)\n            .flatMap(new Function<Integer, Observable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Observable<Integer> apply(Integer t) {\n                    Observable<Integer> r = Observable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(to);\n\n            to.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (to.completions() == 0) {\n                System.out.println(to.values().size());\n            }\n            to.assertTerminated();\n            to.assertNoErrors();\n            List<Integer> list = to.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<Integer>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n            Flowable.range(0, 1000)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Flowable<Integer> apply(Integer t) {\n                    Flowable<Integer> r = Flowable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(ts);\n\n            ts.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (ts.completions() == 0) {\n                System.out.println(ts.values().size());\n            }\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            List<Integer> list = ts.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":483,"groupId":"104309","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapRangeMixedAsyncLoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/06/8f652db0609596493a6b998b494f4b3705bd3d.src","preCode":"    public void flatMapRangeMixedAsyncLoop() {\n        for (int i = 0; i < 2000; i++) {\n            if (i % 10 == 0) {\n                System.out.println(\"flatMapRangeAsyncLoop > \" + i);\n            }\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n            Flowable.range(0, 1000)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n                final Random rnd = new Random();\n                @Override\n                public Flowable<Integer> apply(Integer t) {\n                    Flowable<Integer> r = Flowable.just(t);\n                    if (rnd.nextBoolean()) {\n                        r = r.hide();\n                    }\n                    return r;\n                }\n            })\n            .observeOn(Schedulers.computation())\n            .subscribe(ts);\n\n            ts.awaitDone(2500, TimeUnit.MILLISECONDS);\n            if (ts.completions() == 0) {\n                System.out.println(ts.values().size());\n            }\n            ts.assertTerminated();\n            ts.assertNoErrors();\n            List<Integer> list = ts.values();\n            if (list.size() < 1000) {\n                Set<Integer> set = new HashSet<>(list);\n                for (int j = 0; j < 1000; j++) {\n                    if (!set.contains(j)) {\n                        System.out.println(j + \" missing\");\n                    }\n                }\n            }\n            assertEquals(1000, list.size());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
