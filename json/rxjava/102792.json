[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void delayEmitsEverything() {\n        Observable<Integer> source = Observable.range(1, 5);\n        Observable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestObserver<Integer> observer = new TestObserver<Integer>();\n        delayed.subscribe(observer);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        observer.assertValues(1, 2, 3, 4, 5);\n    }\n","date":"2019-08-16 20:51:17","endLine":640,"groupId":"10750","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"delayEmitsEverything","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/93594bb8862bb8577060372407594fa68e56c6.src","preCode":"    public void delayEmitsEverything() {\n        Observable<Integer> source = Observable.range(1, 5);\n        Observable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestObserver<Integer> observer = new TestObserver<Integer>();\n        delayed.subscribe(observer);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        observer.assertValues(1, 2, 3, 4, 5);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":624,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void delayEmitsEverything() {\n        Flowable<Integer> source = Flowable.range(1, 5);\n        Flowable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        delayed.subscribe(ts);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        ts.assertValues(1, 2, 3, 4, 5);\n    }\n","date":"2019-08-16 20:51:17","endLine":633,"groupId":"10266","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"delayEmitsEverything","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/167f4fcd4138eced4e41de2d1bc081f38b555d.src","preCode":"    public void delayEmitsEverything() {\n        Flowable<Integer> source = Flowable.range(1, 5);\n        Flowable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        delayed.subscribe(ts);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        ts.assertValues(1, 2, 3, 4, 5);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void delayEmitsEverything() {\n        Observable<Integer> source = Observable.range(1, 5);\n        Observable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestObserver<Integer> observer = new TestObserver<Integer>();\n        delayed.subscribe(observer);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        observer.assertValues(1, 2, 3, 4, 5);\n    }\n","date":"2019-08-16 20:51:17","endLine":640,"groupId":"10750","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"delayEmitsEverything","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/93594bb8862bb8577060372407594fa68e56c6.src","preCode":"    public void delayEmitsEverything() {\n        Observable<Integer> source = Observable.range(1, 5);\n        Observable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestObserver<Integer> observer = new TestObserver<Integer>();\n        delayed.subscribe(observer);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        observer.assertValues(1, 2, 3, 4, 5);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":624,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void delayEmitsEverything() {\n        Flowable<Integer> source = Flowable.range(1, 5);\n        Flowable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        delayed.subscribe(ts);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        ts.assertValues(1, 2, 3, 4, 5);\n    }\n","date":"2019-12-22 18:39:23","endLine":633,"groupId":"10266","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"delayEmitsEverything","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/79/740ee44c9cb3ebbabcb5916819126f273ea375.src","preCode":"    public void delayEmitsEverything() {\n        Flowable<Integer> source = Flowable.range(1, 5);\n        Flowable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        delayed.subscribe(ts);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        ts.assertValues(1, 2, 3, 4, 5);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void delayEmitsEverything() {\n        Observable<Integer> source = Observable.range(1, 5);\n        Observable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestObserver<Integer> observer = new TestObserver<>();\n        delayed.subscribe(observer);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        observer.assertValues(1, 2, 3, 4, 5);\n    }\n","date":"2019-12-22 18:59:44","endLine":640,"groupId":"102792","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"delayEmitsEverything","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/b60d4701d65876ffa994bfac462d88f884f8f6.src","preCode":"    public void delayEmitsEverything() {\n        Observable<Integer> source = Observable.range(1, 5);\n        Observable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestObserver<Integer> observer = new TestObserver<Integer>();\n        delayed.subscribe(observer);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        observer.assertValues(1, 2, 3, 4, 5);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":624,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void delayEmitsEverything() {\n        Flowable<Integer> source = Flowable.range(1, 5);\n        Flowable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        delayed.subscribe(ts);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        ts.assertValues(1, 2, 3, 4, 5);\n    }\n","date":"2019-12-22 18:39:23","endLine":633,"groupId":"102792","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"delayEmitsEverything","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/79/740ee44c9cb3ebbabcb5916819126f273ea375.src","preCode":"    public void delayEmitsEverything() {\n        Flowable<Integer> source = Flowable.range(1, 5);\n        Flowable<Integer> delayed = source.delay(500L, TimeUnit.MILLISECONDS, scheduler);\n        delayed = delayed.doOnEach(new Consumer<Notification<Integer>>() {\n\n            @Override\n            public void accept(Notification<Integer> t1) {\n                System.out.println(t1);\n            }\n\n        });\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        delayed.subscribe(ts);\n        \r\n        scheduler.advanceTimeBy(500L, TimeUnit.MILLISECONDS);\n        ts.assertValues(1, 2, 3, 4, 5);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
