[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badInnerSource() {\n        @SuppressWarnings(\"rawtypes\")\n        final Observer[] ts0 = { null };\n        TestObserverEx<Integer> to = Observable.just(1).hide().concatMap(Functions.justFunction(new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> o) {\n                ts0[0] = o;\n                o.onSubscribe(Disposables.empty());\n                o.onError(new TestException(\"First\"));\n            }\n        }), 2, ImmediateThinScheduler.INSTANCE)\n        .to(TestHelper.<Integer>testConsumer());\n\n        to.assertFailureAndMessage(TestException.class, \"First\");\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            ts0[0].onError(new TestException(\"Second\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":682,"groupId":"12736","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"badInnerSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1b/7bb0d8b82be57d4fabd68bfde810dd4ba1c083.src","preCode":"    public void badInnerSource() {\n        @SuppressWarnings(\"rawtypes\")\n        final Observer[] ts0 = { null };\n        TestObserverEx<Integer> to = Observable.just(1).hide().concatMap(Functions.justFunction(new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> o) {\n                ts0[0] = o;\n                o.onSubscribe(Disposables.empty());\n                o.onError(new TestException(\"First\"));\n            }\n        }), 2, ImmediateThinScheduler.INSTANCE)\n        .to(TestHelper.<Integer>testConsumer());\n\n        to.assertFailureAndMessage(TestException.class, \"First\");\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            ts0[0].onError(new TestException(\"Second\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":659,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badInnerSource() {\n        @SuppressWarnings(\"rawtypes\")\n        final Subscriber[] ts0 = { null };\n        TestSubscriberEx<Integer> ts = Flowable.just(1).hide().concatMap(Functions.justFunction(new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> s) {\n                ts0[0] = s;\n                s.onSubscribe(new BooleanSubscription());\n                s.onError(new TestException(\"First\"));\n            }\n        }), 2, ImmediateThinScheduler.INSTANCE)\n        .to(TestHelper.<Integer>testConsumer());\n\n        ts.assertFailureAndMessage(TestException.class, \"First\");\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            ts0[0].onError(new TestException(\"Second\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":689,"groupId":"8093","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"badInnerSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/93d7aec7a976aa4572ddd2bee6d535a6d1ec5b.src","preCode":"    public void badInnerSource() {\n        @SuppressWarnings(\"rawtypes\")\n        final Subscriber[] ts0 = { null };\n        TestSubscriberEx<Integer> ts = Flowable.just(1).hide().concatMap(Functions.justFunction(new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> s) {\n                ts0[0] = s;\n                s.onSubscribe(new BooleanSubscription());\n                s.onError(new TestException(\"First\"));\n            }\n        }), 2, ImmediateThinScheduler.INSTANCE)\n        .to(TestHelper.<Integer>testConsumer());\n\n        ts.assertFailureAndMessage(TestException.class, \"First\");\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            ts0[0].onError(new TestException(\"Second\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void badInnerSource() {\n        @SuppressWarnings(\"rawtypes\")\n        final Observer[] ts0 = { null };\n        TestObserverEx<Integer> to = Observable.just(1).hide().concatMap(Functions.justFunction(new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> o) {\n                ts0[0] = o;\n                o.onSubscribe(Disposable.empty());\n                o.onError(new TestException(\"First\"));\n            }\n        }), 2, ImmediateThinScheduler.INSTANCE)\n        .to(TestHelper.<Integer>testConsumer());\n\n        to.assertFailureAndMessage(TestException.class, \"First\");\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            ts0[0].onError(new TestException(\"Second\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":682,"groupId":"104136","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"badInnerSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/72be7ac65569497fc97341dd2418cf538e5334.src","preCode":"    public void badInnerSource() {\n        @SuppressWarnings(\"rawtypes\")\n        final Observer[] ts0 = { null };\n        TestObserverEx<Integer> to = Observable.just(1).hide().concatMap(Functions.justFunction(new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> o) {\n                ts0[0] = o;\n                o.onSubscribe(Disposables.empty());\n                o.onError(new TestException(\"First\"));\n            }\n        }), 2, ImmediateThinScheduler.INSTANCE)\n        .to(TestHelper.<Integer>testConsumer());\n\n        to.assertFailureAndMessage(TestException.class, \"First\");\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            ts0[0].onError(new TestException(\"Second\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":659,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void badInnerSource() {\n        @SuppressWarnings(\"rawtypes\")\n        final Subscriber[] ts0 = { null };\n        TestSubscriberEx<Integer> ts = Flowable.just(1).hide().concatMap(Functions.justFunction(new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> s) {\n                ts0[0] = s;\n                s.onSubscribe(new BooleanSubscription());\n                s.onError(new TestException(\"First\"));\n            }\n        }), 2, ImmediateThinScheduler.INSTANCE)\n        .to(TestHelper.<Integer>testConsumer());\n\n        ts.assertFailureAndMessage(TestException.class, \"First\");\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            ts0[0].onError(new TestException(\"Second\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":689,"groupId":"104136","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"badInnerSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/93d7aec7a976aa4572ddd2bee6d535a6d1ec5b.src","preCode":"    public void badInnerSource() {\n        @SuppressWarnings(\"rawtypes\")\n        final Subscriber[] ts0 = { null };\n        TestSubscriberEx<Integer> ts = Flowable.just(1).hide().concatMap(Functions.justFunction(new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> s) {\n                ts0[0] = s;\n                s.onSubscribe(new BooleanSubscription());\n                s.onError(new TestException(\"First\"));\n            }\n        }), 2, ImmediateThinScheduler.INSTANCE)\n        .to(TestHelper.<Integer>testConsumer());\n\n        ts.assertFailureAndMessage(TestException.class, \"First\");\n\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            ts0[0].onError(new TestException(\"Second\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
