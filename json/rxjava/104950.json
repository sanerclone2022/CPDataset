[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void collectToList() {\n        Single<List<Integer>> o = Observable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        });\n\n        List<Integer> list =  o.blockingGet();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  o.blockingGet();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","date":"2019-08-16 20:51:17","endLine":188,"groupId":"3986","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"collectToList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e3/1a2299becfca4d7528e69d6b32d0baf1881b84.src","preCode":"    public void collectToList() {\n        Single<List<Integer>> o = Observable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        });\n\n        List<Integer> list =  o.blockingGet();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  o.blockingGet();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void collectToListFlowable() {\n        Flowable<List<Integer>> f = Flowable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        }).toFlowable();\n\n        List<Integer> list =  f.blockingLast();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  f.blockingLast();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","date":"2019-08-16 20:51:17","endLine":62,"groupId":"10868","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"collectToListFlowable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f0/f93c6453be569455685e54ebc71b53f28922f6.src","preCode":"    public void collectToListFlowable() {\n        Flowable<List<Integer>> f = Flowable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        }).toFlowable();\n\n        List<Integer> list =  f.blockingLast();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  f.blockingLast();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void collectToList() {\n        Single<List<Integer>> o = Observable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        });\n\n        List<Integer> list =  o.blockingGet();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  o.blockingGet();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","date":"2019-12-22 18:59:44","endLine":188,"groupId":"3986","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"collectToList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d2/8bd20e97ffb2058a19b22c7dcbf8c2ee40d769.src","preCode":"    public void collectToList() {\n        Single<List<Integer>> o = Observable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        });\n\n        List<Integer> list =  o.blockingGet();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  o.blockingGet();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void collectToListFlowable() {\n        Flowable<List<Integer>> f = Flowable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        }).toFlowable();\n\n        List<Integer> list =  f.blockingLast();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  f.blockingLast();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","date":"2019-08-16 20:51:17","endLine":62,"groupId":"10868","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"collectToListFlowable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f0/f93c6453be569455685e54ebc71b53f28922f6.src","preCode":"    public void collectToListFlowable() {\n        Flowable<List<Integer>> f = Flowable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        }).toFlowable();\n\n        List<Integer> list =  f.blockingLast();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  f.blockingLast();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void collectToList() {\n        Single<List<Integer>> o = Observable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        });\n\n        List<Integer> list =  o.blockingGet();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  o.blockingGet();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","date":"2019-12-22 18:59:44","endLine":188,"groupId":"104950","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"collectToList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d2/8bd20e97ffb2058a19b22c7dcbf8c2ee40d769.src","preCode":"    public void collectToList() {\n        Single<List<Integer>> o = Observable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        });\n\n        List<Integer> list =  o.blockingGet();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  o.blockingGet();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void collectToListFlowable() {\n        Flowable<List<Integer>> f = Flowable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        }).toFlowable();\n\n        List<Integer> list =  f.blockingLast();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  f.blockingLast();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","date":"2019-12-22 19:17:37","endLine":62,"groupId":"104950","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"collectToListFlowable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ae/3cd0c906ee3c32eb7570d5cca6aaf2a1cc0932.src","preCode":"    public void collectToListFlowable() {\n        Flowable<List<Integer>> f = Flowable.just(1, 2, 3)\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> list, Integer v) {\n                list.add(v);\n            }\n        }).toFlowable();\n\n        List<Integer> list =  f.blockingLast();\n\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0).intValue());\n        assertEquals(2, list.get(1).intValue());\n        assertEquals(3, list.get(2).intValue());\n\n        \r\n        List<Integer> list2 =  f.blockingLast();\n\n        assertEquals(3, list2.size());\n        assertEquals(1, list2.get(0).intValue());\n        assertEquals(2, list2.get(1).intValue());\n        assertEquals(3, list2.get(2).intValue());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
