[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badSourceDelayError() {\n        TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>, Object>() {\n            @Override\n            public Object apply(Flowable<Integer> f) throws Exception {\n                return f.concatMapDelayError(Functions.justFunction(Flowable.just(1).hide()), 2, true, ImmediateThinScheduler.INSTANCE);\n            }\n        }, true, 1, 1, 1);\n    }\n","date":"2019-08-16 20:51:17","endLine":725,"groupId":"895","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"badSourceDelayError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/93d7aec7a976aa4572ddd2bee6d535a6d1ec5b.src","preCode":"    public void badSourceDelayError() {\n        TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>, Object>() {\n            @Override\n            public Object apply(Flowable<Integer> f) throws Exception {\n                return f.concatMapDelayError(Functions.justFunction(Flowable.just(1).hide()), 2, true, ImmediateThinScheduler.INSTANCE);\n            }\n        }, true, 1, 1, 1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":718,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badSourceDelayError() {\n        TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>, Object>() {\n            @Override\n            public Object apply(Flowable<Integer> f) throws Exception {\n                return f.concatMapDelayError(Functions.justFunction(Flowable.just(1).hide()));\n            }\n        }, true, 1, 1, 1);\n    }\n","date":"2019-08-16 20:51:17","endLine":1450,"groupId":"895","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"badSourceDelayError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/8f5cd043ac8f418600f4d33396a8d5cfa0943d.src","preCode":"    public void badSourceDelayError() {\n        TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>, Object>() {\n            @Override\n            public Object apply(Flowable<Integer> f) throws Exception {\n                return f.concatMapDelayError(Functions.justFunction(Flowable.just(1).hide()));\n            }\n        }, true, 1, 1, 1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1443,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-28 19:19:49","commitOrder":2,"curCode":"    public void badSourceDelayError() {\n        TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>, Object>() {\n            @Override\n            public Object apply(Flowable<Integer> f) throws Exception {\n                return f.concatMapDelayError(Functions.justFunction(Flowable.just(1).hide()), true, 2, ImmediateThinScheduler.INSTANCE);\n            }\n        }, true, 1, 1, 1);\n    }\n","date":"2019-08-28 19:19:49","endLine":725,"groupId":"104152","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"badSourceDelayError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fc/8d665559789fd6f6f18479a8ae7d0e90e429ed.src","preCode":"    public void badSourceDelayError() {\n        TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>, Object>() {\n            @Override\n            public Object apply(Flowable<Integer> f) throws Exception {\n                return f.concatMapDelayError(Functions.justFunction(Flowable.just(1).hide()), 2, true, ImmediateThinScheduler.INSTANCE);\n            }\n        }, true, 1, 1, 1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":718,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void badSourceDelayError() {\n        TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>, Object>() {\n            @Override\n            public Object apply(Flowable<Integer> f) throws Exception {\n                return f.concatMapDelayError(Functions.justFunction(Flowable.just(1).hide()));\n            }\n        }, true, 1, 1, 1);\n    }\n","date":"2019-08-16 20:51:17","endLine":1450,"groupId":"104152","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"badSourceDelayError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/8f5cd043ac8f418600f4d33396a8d5cfa0943d.src","preCode":"    public void badSourceDelayError() {\n        TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>, Object>() {\n            @Override\n            public Object apply(Flowable<Integer> f) throws Exception {\n                return f.concatMapDelayError(Functions.justFunction(Flowable.just(1).hide()));\n            }\n        }, true, 1, 1, 1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1443,"status":"N"}],"commitId":"f1441b00f3cc174ab5ef47e3339156d8a7c2a1f5","commitMessage":"@@@3.x: Rename zipIterable.  remove zip(O(O)).  adjust concatMapX arg order (#6638)\n\n","date":"2019-08-28 19:19:49","modifiedFileCount":"12","status":"M","submitter":"David Karnok"}]
