[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void onSubscribe(Disposable d) {\n            if (DisposableHelper.validate(this.upstream, d)) {\n                this.upstream = d;\n                if (d instanceof QueueDisposable) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueDisposable<T> qd = (QueueDisposable<T>) d;\n\n                    int m = qd.requestFusion(QueueDisposable.ANY);\n                    if (m == QueueDisposable.SYNC) {\n                        fusionMode = m;\n                        queue = qd;\n                        done = true;\n\n                        downstream.onSubscribe(this);\n\n                        drain();\n                        return;\n                    }\n\n                    if (m == QueueDisposable.ASYNC) {\n                        fusionMode = m;\n                        queue = qd;\n\n                        downstream.onSubscribe(this);\n\n                        return;\n                    }\n                }\n\n                queue = new SpscLinkedArrayQueue<T>(bufferSize);\n\n                downstream.onSubscribe(this);\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":122,"groupId":"7331","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onSubscribe","params":"(Disposabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/70/b115dabbcc496db9cf60791d892e3bea858b60.src","preCode":"        public void onSubscribe(Disposable d) {\n            if (DisposableHelper.validate(this.upstream, d)) {\n                this.upstream = d;\n                if (d instanceof QueueDisposable) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueDisposable<T> qd = (QueueDisposable<T>) d;\n\n                    int m = qd.requestFusion(QueueDisposable.ANY);\n                    if (m == QueueDisposable.SYNC) {\n                        fusionMode = m;\n                        queue = qd;\n                        done = true;\n\n                        downstream.onSubscribe(this);\n\n                        drain();\n                        return;\n                    }\n\n                    if (m == QueueDisposable.ASYNC) {\n                        fusionMode = m;\n                        queue = qd;\n\n                        downstream.onSubscribe(this);\n\n                        return;\n                    }\n                }\n\n                queue = new SpscLinkedArrayQueue<T>(bufferSize);\n\n                downstream.onSubscribe(this);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void onSubscribe(Disposable d) {\n            if (DisposableHelper.validate(this.upstream, d)) {\n                this.upstream = d;\n\n                if (d instanceof QueueDisposable) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueDisposable<T> qd = (QueueDisposable<T>) d;\n\n                    int m = qd.requestFusion(QueueDisposable.ANY);\n                    if (m == QueueDisposable.SYNC) {\n                        sourceMode = m;\n                        queue = qd;\n                        done = true;\n\n                        downstream.onSubscribe(this);\n\n                        drain();\n                        return;\n                    }\n                    if (m == QueueDisposable.ASYNC) {\n                        sourceMode = m;\n                        queue = qd;\n\n                        downstream.onSubscribe(this);\n\n                        return;\n                    }\n                }\n\n                queue = new SpscLinkedArrayQueue<T>(bufferSize);\n\n                downstream.onSubscribe(this);\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":359,"groupId":"7331","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onSubscribe","params":"(Disposabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/70/b115dabbcc496db9cf60791d892e3bea858b60.src","preCode":"        public void onSubscribe(Disposable d) {\n            if (DisposableHelper.validate(this.upstream, d)) {\n                this.upstream = d;\n\n                if (d instanceof QueueDisposable) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueDisposable<T> qd = (QueueDisposable<T>) d;\n\n                    int m = qd.requestFusion(QueueDisposable.ANY);\n                    if (m == QueueDisposable.SYNC) {\n                        sourceMode = m;\n                        queue = qd;\n                        done = true;\n\n                        downstream.onSubscribe(this);\n\n                        drain();\n                        return;\n                    }\n                    if (m == QueueDisposable.ASYNC) {\n                        sourceMode = m;\n                        queue = qd;\n\n                        downstream.onSubscribe(this);\n\n                        return;\n                    }\n                }\n\n                queue = new SpscLinkedArrayQueue<T>(bufferSize);\n\n                downstream.onSubscribe(this);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":2,"curCode":"        public void onSubscribe(Disposable d) {\n            if (DisposableHelper.validate(this.upstream, d)) {\n                this.upstream = d;\n                if (d instanceof QueueDisposable) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueDisposable<T> qd = (QueueDisposable<T>) d;\n\n                    int m = qd.requestFusion(QueueDisposable.ANY);\n                    if (m == QueueDisposable.SYNC) {\n                        fusionMode = m;\n                        queue = qd;\n                        done = true;\n\n                        downstream.onSubscribe(this);\n\n                        drain();\n                        return;\n                    }\n\n                    if (m == QueueDisposable.ASYNC) {\n                        fusionMode = m;\n                        queue = qd;\n\n                        downstream.onSubscribe(this);\n\n                        return;\n                    }\n                }\n\n                queue = new SpscLinkedArrayQueue<>(bufferSize);\n\n                downstream.onSubscribe(this);\n            }\n        }\n","date":"2019-12-28 03:01:34","endLine":122,"groupId":"112045","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onSubscribe","params":"(Disposabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b4/cd8352b5b0050bf56467d6d4454f2809b63533.src","preCode":"        public void onSubscribe(Disposable d) {\n            if (DisposableHelper.validate(this.upstream, d)) {\n                this.upstream = d;\n                if (d instanceof QueueDisposable) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueDisposable<T> qd = (QueueDisposable<T>) d;\n\n                    int m = qd.requestFusion(QueueDisposable.ANY);\n                    if (m == QueueDisposable.SYNC) {\n                        fusionMode = m;\n                        queue = qd;\n                        done = true;\n\n                        downstream.onSubscribe(this);\n\n                        drain();\n                        return;\n                    }\n\n                    if (m == QueueDisposable.ASYNC) {\n                        fusionMode = m;\n                        queue = qd;\n\n                        downstream.onSubscribe(this);\n\n                        return;\n                    }\n                }\n\n                queue = new SpscLinkedArrayQueue<T>(bufferSize);\n\n                downstream.onSubscribe(this);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2019-12-28 03:01:34","commitOrder":2,"curCode":"        public void onSubscribe(Disposable d) {\n            if (DisposableHelper.validate(this.upstream, d)) {\n                this.upstream = d;\n\n                if (d instanceof QueueDisposable) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueDisposable<T> qd = (QueueDisposable<T>) d;\n\n                    int m = qd.requestFusion(QueueDisposable.ANY);\n                    if (m == QueueDisposable.SYNC) {\n                        sourceMode = m;\n                        queue = qd;\n                        done = true;\n\n                        downstream.onSubscribe(this);\n\n                        drain();\n                        return;\n                    }\n                    if (m == QueueDisposable.ASYNC) {\n                        sourceMode = m;\n                        queue = qd;\n\n                        downstream.onSubscribe(this);\n\n                        return;\n                    }\n                }\n\n                queue = new SpscLinkedArrayQueue<>(bufferSize);\n\n                downstream.onSubscribe(this);\n            }\n        }\n","date":"2019-12-28 03:01:34","endLine":359,"groupId":"112045","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onSubscribe","params":"(Disposabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b4/cd8352b5b0050bf56467d6d4454f2809b63533.src","preCode":"        public void onSubscribe(Disposable d) {\n            if (DisposableHelper.validate(this.upstream, d)) {\n                this.upstream = d;\n\n                if (d instanceof QueueDisposable) {\n                    @SuppressWarnings(\"unchecked\")\n                    QueueDisposable<T> qd = (QueueDisposable<T>) d;\n\n                    int m = qd.requestFusion(QueueDisposable.ANY);\n                    if (m == QueueDisposable.SYNC) {\n                        sourceMode = m;\n                        queue = qd;\n                        done = true;\n\n                        downstream.onSubscribe(this);\n\n                        drain();\n                        return;\n                    }\n                    if (m == QueueDisposable.ASYNC) {\n                        sourceMode = m;\n                        queue = qd;\n\n                        downstream.onSubscribe(this);\n\n                        return;\n                    }\n                }\n\n                queue = new SpscLinkedArrayQueue<T>(bufferSize);\n\n                downstream.onSubscribe(this);\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatMapScheduler.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
