[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue1812() {\n        \r\n        Observable<Integer> zip1 = Observable.zip(Observable.range(0, 1026), Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Observable<Integer> zip2 = Observable.zip(zip1, Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<Integer>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","date":"2019-08-16 20:51:17","endLine":1097,"groupId":"150","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"issue1812","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/9840cbc7c7812d8ee108dd9a4c3715b6377080.src","preCode":"    public void issue1812() {\n        \r\n        Observable<Integer> zip1 = Observable.zip(Observable.range(0, 1026), Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Observable<Integer> zip2 = Observable.zip(zip1, Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<Integer>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1074,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue1812() {\n        \r\n        Flowable<Integer> zip1 = Flowable.zip(Flowable.range(0, 1026), Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Flowable<Integer> zip2 = Flowable.zip(zip1, Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<Integer>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","date":"2019-08-16 20:51:17","endLine":1197,"groupId":"150","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"issue1812","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7a/a44b75348b67c5b5b9dadfe159d380003d1562.src","preCode":"    public void issue1812() {\n        \r\n        Flowable<Integer> zip1 = Flowable.zip(Flowable.range(0, 1026), Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Flowable<Integer> zip2 = Flowable.zip(zip1, Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<Integer>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1174,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void issue1812() {\n        \r\n        Observable<Integer> zip1 = Observable.zip(Observable.range(0, 1026), Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Observable<Integer> zip2 = Observable.zip(zip1, Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<Integer>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","date":"2019-08-16 20:51:17","endLine":1097,"groupId":"150","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"issue1812","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/9840cbc7c7812d8ee108dd9a4c3715b6377080.src","preCode":"    public void issue1812() {\n        \r\n        Observable<Integer> zip1 = Observable.zip(Observable.range(0, 1026), Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Observable<Integer> zip2 = Observable.zip(zip1, Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<Integer>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1074,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void issue1812() {\n        \r\n        Flowable<Integer> zip1 = Flowable.zip(Flowable.range(0, 1026), Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Flowable<Integer> zip2 = Flowable.zip(zip1, Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","date":"2019-12-22 18:39:23","endLine":1197,"groupId":"150","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"issue1812","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/0b3908c9313d06737a2cbb475d4e8a048f0aac.src","preCode":"    public void issue1812() {\n        \r\n        Flowable<Integer> zip1 = Flowable.zip(Flowable.range(0, 1026), Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Flowable<Integer> zip2 = Flowable.zip(zip1, Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<Integer>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1174,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void issue1812() {\n        \r\n        Observable<Integer> zip1 = Observable.zip(Observable.range(0, 1026), Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Observable<Integer> zip2 = Observable.zip(zip1, Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","date":"2019-12-22 18:59:44","endLine":1097,"groupId":"104558","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"issue1812","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d8/c153a2859031c697469b6942be9605fc4ed33c.src","preCode":"    public void issue1812() {\n        \r\n        Observable<Integer> zip1 = Observable.zip(Observable.range(0, 1026), Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Observable<Integer> zip2 = Observable.zip(zip1, Observable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<Integer>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1074,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void issue1812() {\n        \r\n        Flowable<Integer> zip1 = Flowable.zip(Flowable.range(0, 1026), Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Flowable<Integer> zip2 = Flowable.zip(zip1, Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","date":"2019-12-22 18:39:23","endLine":1197,"groupId":"104558","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"issue1812","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/0b3908c9313d06737a2cbb475d4e8a048f0aac.src","preCode":"    public void issue1812() {\n        \r\n        Flowable<Integer> zip1 = Flowable.zip(Flowable.range(0, 1026), Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        Flowable<Integer> zip2 = Flowable.zip(zip1, Flowable.range(0, 1026),\n                new BiFunction<Integer, Integer, Integer>() {\n\n                    @Override\n                    public Integer apply(Integer i1, Integer i2) {\n                        return i1 + i2;\n                    }\n                });\n        List<Integer> expected = new ArrayList<>();\n        for (int i = 0; i < 1026; i++) {\n            expected.add(i * 3);\n        }\n        assertEquals(expected, zip2.toList().blockingGet());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1174,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
