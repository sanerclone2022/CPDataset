[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        void innerComplete(InnerObserver inner) {\n            set.delete(inner);\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                boolean d = active.decrementAndGet() == 0;\n                SpscLinkedArrayQueue<R> q = queue.get();\n\n                if (d && (q == null || q.isEmpty())) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n                drainLoop();\n            } else {\n                active.decrementAndGet();\n                drain();\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":223,"groupId":"988","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"innerComplete","params":"(InnerObserverinner)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1c/f9d3799f68c4fbbac6d0be3eefae5408ebc368.src","preCode":"        void innerComplete(InnerObserver inner) {\n            set.delete(inner);\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                boolean d = active.decrementAndGet() == 0;\n                SpscLinkedArrayQueue<R> q = queue.get();\n\n                if (d && (q == null || q.isEmpty())) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n                drainLoop();\n            } else {\n                active.decrementAndGet();\n                drain();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        void innerComplete(InnerObserver inner) {\n            set.delete(inner);\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                boolean d = active.decrementAndGet() == 0;\n                SpscLinkedArrayQueue<R> q = queue.get();\n\n                if (d && (q == null || q.isEmpty())) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n\n                if (maxConcurrency != Integer.MAX_VALUE) {\n                    upstream.request(1);\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n                drainLoop();\n            } else {\n                active.decrementAndGet();\n                if (maxConcurrency != Integer.MAX_VALUE) {\n                    upstream.request(1);\n                }\n                drain();\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":267,"groupId":"988","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"innerComplete","params":"(InnerObserverinner)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/10/b4b48978193f049968fcb2515caa3b4de6f2bb.src","preCode":"        void innerComplete(InnerObserver inner) {\n            set.delete(inner);\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                boolean d = active.decrementAndGet() == 0;\n                SpscLinkedArrayQueue<R> q = queue.get();\n\n                if (d && (q == null || q.isEmpty())) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n\n                if (maxConcurrency != Integer.MAX_VALUE) {\n                    upstream.request(1);\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n                drainLoop();\n            } else {\n                active.decrementAndGet();\n                if (maxConcurrency != Integer.MAX_VALUE) {\n                    upstream.request(1);\n                }\n                drain();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2020-02-12 23:26:52","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        void innerComplete(InnerObserver inner) {\n            set.delete(inner);\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                boolean d = active.decrementAndGet() == 0;\n                SpscLinkedArrayQueue<R> q = queue.get();\n\n                if (d && (q == null || q.isEmpty())) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n                drainLoop();\n            } else {\n                active.decrementAndGet();\n                drain();\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":223,"groupId":"102250","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"innerComplete","params":"(InnerObserverinner)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1c/f9d3799f68c4fbbac6d0be3eefae5408ebc368.src","preCode":"        void innerComplete(InnerObserver inner) {\n            set.delete(inner);\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                boolean d = active.decrementAndGet() == 0;\n                SpscLinkedArrayQueue<R> q = queue.get();\n\n                if (d && (q == null || q.isEmpty())) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n                drainLoop();\n            } else {\n                active.decrementAndGet();\n                drain();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapMaybe.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"},{"authorDate":"2020-02-12 23:26:52","commitOrder":2,"curCode":"        void innerComplete(InnerObserver inner) {\n            set.delete(inner);\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                boolean d = active.decrementAndGet() == 0;\n                SpscLinkedArrayQueue<R> q = queue.get();\n\n                if (checkTerminate(d, q)) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n\n                if (maxConcurrency != Integer.MAX_VALUE) {\n                    upstream.request(1);\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n                drainLoop();\n            } else {\n                active.decrementAndGet();\n                if (maxConcurrency != Integer.MAX_VALUE) {\n                    upstream.request(1);\n                }\n                drain();\n            }\n        }\n","date":"2020-02-12 23:26:52","endLine":261,"groupId":"102250","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"innerComplete","params":"(InnerObserverinner)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ff/b5763f1440844dd9aa5c1cff807a9e63d67c97.src","preCode":"        void innerComplete(InnerObserver inner) {\n            set.delete(inner);\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                boolean d = active.decrementAndGet() == 0;\n                SpscLinkedArrayQueue<R> q = queue.get();\n\n                if (d && (q == null || q.isEmpty())) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n\n                if (maxConcurrency != Integer.MAX_VALUE) {\n                    upstream.request(1);\n                }\n                if (decrementAndGet() == 0) {\n                    return;\n                }\n                drainLoop();\n            } else {\n                active.decrementAndGet();\n                if (maxConcurrency != Integer.MAX_VALUE) {\n                    upstream.request(1);\n                }\n                drain();\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybe.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
