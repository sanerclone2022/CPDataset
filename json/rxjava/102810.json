[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<Thread>();\n\n        Observable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Observable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":886,"groupId":"10592","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onErrorCalledOnScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/93594bb8862bb8577060372407594fa68e56c6.src","preCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<Thread>();\n\n        Observable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Observable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":867,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<Thread>();\n\n        Flowable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Flowable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":938,"groupId":"10592","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onErrorCalledOnScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/167f4fcd4138eced4e41de2d1bc081f38b555d.src","preCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<Thread>();\n\n        Flowable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Flowable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<Thread>();\n\n        Observable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Observable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":886,"groupId":"10592","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onErrorCalledOnScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/93594bb8862bb8577060372407594fa68e56c6.src","preCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<Thread>();\n\n        Observable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Observable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":867,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<>();\n\n        Flowable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Flowable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":938,"groupId":"10592","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onErrorCalledOnScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/79/740ee44c9cb3ebbabcb5916819126f273ea375.src","preCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<Thread>();\n\n        Flowable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Flowable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<>();\n\n        Observable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Observable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","date":"2019-12-22 18:59:44","endLine":886,"groupId":"102810","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onErrorCalledOnScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/b60d4701d65876ffa994bfac462d88f884f8f6.src","preCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<Thread>();\n\n        Observable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Observable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":867,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<>();\n\n        Flowable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Flowable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":938,"groupId":"102810","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onErrorCalledOnScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/79/740ee44c9cb3ebbabcb5916819126f273ea375.src","preCode":"    public void onErrorCalledOnScheduler() throws Exception {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicReference<Thread> thread = new AtomicReference<>();\n\n        Flowable.<String>error(new Exception())\n                .delay(0, TimeUnit.MILLISECONDS, Schedulers.newThread())\n                .doOnError(new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable throwable) throws Exception {\n                        thread.set(Thread.currentThread());\n                        latch.countDown();\n                    }\n                })\n                .onErrorResumeWith(Flowable.<String>empty())\n                .subscribe();\n\n        latch.await();\n\n        assertNotEquals(Thread.currentThread(), thread.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
