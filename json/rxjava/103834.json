[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void sample() {\n        Observable<Long> source = Observable.unsafeCreate(new ObservableSource<Long>() {\n            @Override\n            public void subscribe(final Observer<? super Long> observer1) {\n                observer1.onSubscribe(Disposables.empty());\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onNext(1L);\n                    }\n                }, 1, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onNext(2L);\n                    }\n                }, 2, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onComplete();\n                    }\n                }, 3, TimeUnit.SECONDS);\n            }\n        });\n\n        Observable<Long> sampled = source.sample(400L, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(800L, TimeUnit.MILLISECONDS);\n        verify(observer, never()).onNext(any(Long.class));\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1200L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onNext(1L);\n        verify(observer, never()).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1600L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        verify(observer, never()).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(2000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        inOrder.verify(observer, times(1)).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(3000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        inOrder.verify(observer, never()).onNext(2L);\n        verify(observer, times(1)).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":108,"groupId":"4794","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sample","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/53/35a754750d13da3f4330e343ddb1a95288bfba.src","preCode":"    public void sample() {\n        Observable<Long> source = Observable.unsafeCreate(new ObservableSource<Long>() {\n            @Override\n            public void subscribe(final Observer<? super Long> observer1) {\n                observer1.onSubscribe(Disposables.empty());\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onNext(1L);\n                    }\n                }, 1, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onNext(2L);\n                    }\n                }, 2, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onComplete();\n                    }\n                }, 3, TimeUnit.SECONDS);\n            }\n        });\n\n        Observable<Long> sampled = source.sample(400L, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(800L, TimeUnit.MILLISECONDS);\n        verify(observer, never()).onNext(any(Long.class));\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1200L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onNext(1L);\n        verify(observer, never()).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1600L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        verify(observer, never()).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(2000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        inOrder.verify(observer, times(1)).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(3000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        inOrder.verify(observer, never()).onNext(2L);\n        verify(observer, times(1)).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSampleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void sample() {\n        Flowable<Long> source = Flowable.unsafeCreate(new Publisher<Long>() {\n            @Override\n            public void subscribe(final Subscriber<? super Long> subscriber1) {\n                subscriber1.onSubscribe(new BooleanSubscription());\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onNext(1L);\n                    }\n                }, 1, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onNext(2L);\n                    }\n                }, 2, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onComplete();\n                    }\n                }, 3, TimeUnit.SECONDS);\n            }\n        });\n\n        Flowable<Long> sampled = source.sample(400L, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(800L, TimeUnit.MILLISECONDS);\n        verify(subscriber, never()).onNext(any(Long.class));\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1200L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, times(1)).onNext(1L);\n        verify(subscriber, never()).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1600L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        verify(subscriber, never()).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(2000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        inOrder.verify(subscriber, times(1)).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(3000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        inOrder.verify(subscriber, never()).onNext(2L);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":110,"groupId":"4794","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sample","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f9/ed6509dbc8e0b15c66e35c049a85f0ab90e08d.src","preCode":"    public void sample() {\n        Flowable<Long> source = Flowable.unsafeCreate(new Publisher<Long>() {\n            @Override\n            public void subscribe(final Subscriber<? super Long> subscriber1) {\n                subscriber1.onSubscribe(new BooleanSubscription());\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onNext(1L);\n                    }\n                }, 1, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onNext(2L);\n                    }\n                }, 2, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onComplete();\n                    }\n                }, 3, TimeUnit.SECONDS);\n            }\n        });\n\n        Flowable<Long> sampled = source.sample(400L, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(800L, TimeUnit.MILLISECONDS);\n        verify(subscriber, never()).onNext(any(Long.class));\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1200L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, times(1)).onNext(1L);\n        verify(subscriber, never()).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1600L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        verify(subscriber, never()).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(2000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        inOrder.verify(subscriber, times(1)).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(3000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        inOrder.verify(subscriber, never()).onNext(2L);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void sample() {\n        Observable<Long> source = Observable.unsafeCreate(new ObservableSource<Long>() {\n            @Override\n            public void subscribe(final Observer<? super Long> observer1) {\n                observer1.onSubscribe(Disposable.empty());\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onNext(1L);\n                    }\n                }, 1, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onNext(2L);\n                    }\n                }, 2, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onComplete();\n                    }\n                }, 3, TimeUnit.SECONDS);\n            }\n        });\n\n        Observable<Long> sampled = source.sample(400L, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(800L, TimeUnit.MILLISECONDS);\n        verify(observer, never()).onNext(any(Long.class));\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1200L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onNext(1L);\n        verify(observer, never()).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1600L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        verify(observer, never()).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(2000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        inOrder.verify(observer, times(1)).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(3000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        inOrder.verify(observer, never()).onNext(2L);\n        verify(observer, times(1)).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n    }\n","date":"2019-12-20 02:39:40","endLine":108,"groupId":"103834","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sample","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/08/61fc2596f40d9ec6f6ebaf1ae6c7bfe604afcc.src","preCode":"    public void sample() {\n        Observable<Long> source = Observable.unsafeCreate(new ObservableSource<Long>() {\n            @Override\n            public void subscribe(final Observer<? super Long> observer1) {\n                observer1.onSubscribe(Disposables.empty());\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onNext(1L);\n                    }\n                }, 1, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onNext(2L);\n                    }\n                }, 2, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        observer1.onComplete();\n                    }\n                }, 3, TimeUnit.SECONDS);\n            }\n        });\n\n        Observable<Long> sampled = source.sample(400L, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(800L, TimeUnit.MILLISECONDS);\n        verify(observer, never()).onNext(any(Long.class));\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1200L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onNext(1L);\n        verify(observer, never()).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1600L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        verify(observer, never()).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(2000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        inOrder.verify(observer, times(1)).onNext(2L);\n        verify(observer, never()).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(3000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(1L);\n        inOrder.verify(observer, never()).onNext(2L);\n        verify(observer, times(1)).onComplete();\n        verify(observer, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSampleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void sample() {\n        Flowable<Long> source = Flowable.unsafeCreate(new Publisher<Long>() {\n            @Override\n            public void subscribe(final Subscriber<? super Long> subscriber1) {\n                subscriber1.onSubscribe(new BooleanSubscription());\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onNext(1L);\n                    }\n                }, 1, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onNext(2L);\n                    }\n                }, 2, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onComplete();\n                    }\n                }, 3, TimeUnit.SECONDS);\n            }\n        });\n\n        Flowable<Long> sampled = source.sample(400L, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(800L, TimeUnit.MILLISECONDS);\n        verify(subscriber, never()).onNext(any(Long.class));\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1200L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, times(1)).onNext(1L);\n        verify(subscriber, never()).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1600L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        verify(subscriber, never()).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(2000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        inOrder.verify(subscriber, times(1)).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(3000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        inOrder.verify(subscriber, never()).onNext(2L);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":110,"groupId":"103834","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sample","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f9/ed6509dbc8e0b15c66e35c049a85f0ab90e08d.src","preCode":"    public void sample() {\n        Flowable<Long> source = Flowable.unsafeCreate(new Publisher<Long>() {\n            @Override\n            public void subscribe(final Subscriber<? super Long> subscriber1) {\n                subscriber1.onSubscribe(new BooleanSubscription());\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onNext(1L);\n                    }\n                }, 1, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onNext(2L);\n                    }\n                }, 2, TimeUnit.SECONDS);\n                innerScheduler.schedule(new Runnable() {\n                    @Override\n                    public void run() {\n                        subscriber1.onComplete();\n                    }\n                }, 3, TimeUnit.SECONDS);\n            }\n        });\n\n        Flowable<Long> sampled = source.sample(400L, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(800L, TimeUnit.MILLISECONDS);\n        verify(subscriber, never()).onNext(any(Long.class));\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1200L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, times(1)).onNext(1L);\n        verify(subscriber, never()).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(1600L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        verify(subscriber, never()).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(2000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        inOrder.verify(subscriber, times(1)).onNext(2L);\n        verify(subscriber, never()).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n\n        scheduler.advanceTimeTo(3000L, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(1L);\n        inOrder.verify(subscriber, never()).onNext(2L);\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSampleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
