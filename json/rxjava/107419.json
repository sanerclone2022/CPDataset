[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void drainMaxLoopMissingBackpressureWithResource() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 0;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        Disposable d = Disposables.empty();\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, d, qd);\n\n        ts.assertFailure(MissingBackpressureException.class);\n\n        assertTrue(d.isDisposed());\n    }\n","date":"2019-08-16 20:51:17","endLine":327,"groupId":"2379","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"drainMaxLoopMissingBackpressureWithResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/90/60e85c453902873a86538513db6b901907863d.src","preCode":"    public void drainMaxLoopMissingBackpressureWithResource() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 0;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        Disposable d = Disposables.empty();\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, d, qd);\n\n        ts.assertFailure(MissingBackpressureException.class);\n\n        assertTrue(d.isDisposed());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void drainMaxLoopDontAccept() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 1;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, null, qd);\n\n        ts.assertEmpty();\n    }\n","date":"2019-08-16 20:51:17","endLine":382,"groupId":"2379","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"drainMaxLoopDontAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/90/60e85c453902873a86538513db6b901907863d.src","preCode":"    public void drainMaxLoopDontAccept() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 1;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, null, qd);\n\n        ts.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void drainMaxLoopMissingBackpressureWithResource() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 0;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        Disposable d = Disposable.empty();\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, d, qd);\n\n        ts.assertFailure(MissingBackpressureException.class);\n\n        assertTrue(d.isDisposed());\n    }\n","date":"2019-12-20 02:39:40","endLine":327,"groupId":"2379","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"drainMaxLoopMissingBackpressureWithResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f2/ace8d2355a8e8434744fdd4c2ef32928146525.src","preCode":"    public void drainMaxLoopMissingBackpressureWithResource() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 0;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        Disposable d = Disposables.empty();\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, d, qd);\n\n        ts.assertFailure(MissingBackpressureException.class);\n\n        assertTrue(d.isDisposed());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void drainMaxLoopDontAccept() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 1;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, null, qd);\n\n        ts.assertEmpty();\n    }\n","date":"2019-08-16 20:51:17","endLine":382,"groupId":"2379","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"drainMaxLoopDontAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/90/60e85c453902873a86538513db6b901907863d.src","preCode":"    public void drainMaxLoopDontAccept() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 1;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, null, qd);\n\n        ts.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 19:17:23","codes":[{"authorDate":"2019-12-22 19:17:23","commitOrder":3,"curCode":"    public void drainMaxLoopMissingBackpressureWithResource() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 0;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<>(32);\n        q.offer(1);\n\n        Disposable d = Disposable.empty();\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, d, qd);\n\n        ts.assertFailure(MissingBackpressureException.class);\n\n        assertTrue(d.isDisposed());\n    }\n","date":"2019-12-22 19:17:23","endLine":327,"groupId":"107419","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"drainMaxLoopMissingBackpressureWithResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5f/ac86182a52a528cec8ce56480959090e87b9a2.src","preCode":"    public void drainMaxLoopMissingBackpressureWithResource() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 0;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        Disposable d = Disposable.empty();\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, d, qd);\n\n        ts.assertFailure(MissingBackpressureException.class);\n\n        assertTrue(d.isDisposed());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2019-12-22 19:17:23","commitOrder":3,"curCode":"    public void drainMaxLoopDontAccept() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 1;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<>(32);\n        q.offer(1);\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, null, qd);\n\n        ts.assertEmpty();\n    }\n","date":"2019-12-22 19:17:23","endLine":382,"groupId":"107419","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"drainMaxLoopDontAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5f/ac86182a52a528cec8ce56480959090e87b9a2.src","preCode":"    public void drainMaxLoopDontAccept() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ts.onSubscribe(new BooleanSubscription());\n\n        QueueDrain<Integer, Integer> qd = new QueueDrain<Integer, Integer>() {\n            @Override\n            public boolean cancelled() {\n                return false;\n            }\n\n            @Override\n            public boolean done() {\n                return false;\n            }\n\n            @Override\n            public Throwable error() {\n                return null;\n            }\n\n            @Override\n            public boolean enter() {\n                return true;\n            }\n\n            @Override\n            public long requested() {\n                return 1;\n            }\n\n            @Override\n            public long produced(long n) {\n                return 0;\n            }\n\n            @Override\n            public int leave(int m) {\n                return 0;\n            }\n\n            @Override\n            public boolean accept(Subscriber<? super Integer> a, Integer v) {\n                return false;\n            }\n        };\n\n        SpscArrayQueue<Integer> q = new SpscArrayQueue<Integer>(32);\n        q.offer(1);\n\n        QueueDrainHelper.drainMaxLoop(q, ts, false, null, qd);\n\n        ts.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"75da4b504a52466b455a49a342747514fa0dffab","commitMessage":"@@@Diamond operators in tests (#6788)\n\n* diamond operators in unit tests.  small packages in internal/\n\n* diamond operators in unit tests.  small packages in internal/operators\n","date":"2019-12-22 19:17:23","modifiedFileCount":"92","status":"M","submitter":"Dmitry Volkov"}]
