[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<String>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Observable<String>> observableFactory = new Function<Resource, Observable<String>>() {\n            @Override\n            public Observable<String> apply(Resource resource) {\n                return Observable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Observable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        Observable<String> o = Observable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnDispose(unsub)\n        .doOnError(onError);\n\n        o.safeSubscribe(observer);\n\n        assertEquals(Arrays.asList(\"error\",  \"disposed\"), events);\n    }\n","date":"2019-08-16 20:51:17","endLine":340,"groupId":"2332","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"usingDoesNotDisposesEagerlyBeforeError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/e89862923759b56b9286c71a628191a199769c.src","preCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<String>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Observable<String>> observableFactory = new Function<Resource, Observable<String>>() {\n            @Override\n            public Observable<String> apply(Resource resource) {\n                return Observable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Observable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        Observable<String> o = Observable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnDispose(unsub)\n        .doOnError(onError);\n\n        o.safeSubscribe(observer);\n\n        assertEquals(Arrays.asList(\"error\",  \"disposed\"), events);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableUsingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<String>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Flowable<String>> observableFactory = new Function<Resource, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(Resource resource) {\n                return Flowable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Flowable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        Flowable<String> flowable = Flowable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnCancel(unsub)\n        .doOnError(onError);\n\n        flowable.safeSubscribe(subscriber);\n\n        assertEquals(Arrays.asList(\"error\", \"disposed\"), events);\n    }\n","date":"2019-08-16 20:51:17","endLine":341,"groupId":"2332","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"usingDoesNotDisposesEagerlyBeforeError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/04/22a24db26fc4e6810330f7d93470c1d1730631.src","preCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<String>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Flowable<String>> observableFactory = new Function<Resource, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(Resource resource) {\n                return Flowable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Flowable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        Flowable<String> flowable = Flowable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnCancel(unsub)\n        .doOnError(onError);\n\n        flowable.safeSubscribe(subscriber);\n\n        assertEquals(Arrays.asList(\"error\", \"disposed\"), events);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableUsingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<String>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Observable<String>> observableFactory = new Function<Resource, Observable<String>>() {\n            @Override\n            public Observable<String> apply(Resource resource) {\n                return Observable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Observable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        Observable<String> o = Observable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnDispose(unsub)\n        .doOnError(onError);\n\n        o.safeSubscribe(observer);\n\n        assertEquals(Arrays.asList(\"error\",  \"disposed\"), events);\n    }\n","date":"2019-08-16 20:51:17","endLine":340,"groupId":"2332","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"usingDoesNotDisposesEagerlyBeforeError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/e89862923759b56b9286c71a628191a199769c.src","preCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<String>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Observable<String>> observableFactory = new Function<Resource, Observable<String>>() {\n            @Override\n            public Observable<String> apply(Resource resource) {\n                return Observable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Observable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        Observable<String> o = Observable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnDispose(unsub)\n        .doOnError(onError);\n\n        o.safeSubscribe(observer);\n\n        assertEquals(Arrays.asList(\"error\",  \"disposed\"), events);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableUsingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Flowable<String>> observableFactory = new Function<Resource, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(Resource resource) {\n                return Flowable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Flowable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        Flowable<String> flowable = Flowable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnCancel(unsub)\n        .doOnError(onError);\n\n        flowable.safeSubscribe(subscriber);\n\n        assertEquals(Arrays.asList(\"error\", \"disposed\"), events);\n    }\n","date":"2019-12-22 18:39:23","endLine":341,"groupId":"2332","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"usingDoesNotDisposesEagerlyBeforeError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f3/2b599df44af7c613f8aef711cf95c01fae97e4.src","preCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<String>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Flowable<String>> observableFactory = new Function<Resource, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(Resource resource) {\n                return Flowable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Flowable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        Flowable<String> flowable = Flowable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnCancel(unsub)\n        .doOnError(onError);\n\n        flowable.safeSubscribe(subscriber);\n\n        assertEquals(Arrays.asList(\"error\", \"disposed\"), events);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableUsingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Observable<String>> observableFactory = new Function<Resource, Observable<String>>() {\n            @Override\n            public Observable<String> apply(Resource resource) {\n                return Observable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Observable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        Observable<String> o = Observable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnDispose(unsub)\n        .doOnError(onError);\n\n        o.safeSubscribe(observer);\n\n        assertEquals(Arrays.asList(\"error\",  \"disposed\"), events);\n    }\n","date":"2019-12-22 18:59:44","endLine":340,"groupId":"103081","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"usingDoesNotDisposesEagerlyBeforeError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/3524319d15b79c73bde36dd60dc13128020b96.src","preCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<String>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Observable<String>> observableFactory = new Function<Resource, Observable<String>>() {\n            @Override\n            public Observable<String> apply(Resource resource) {\n                return Observable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Observable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        Observable<String> o = Observable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnDispose(unsub)\n        .doOnError(onError);\n\n        o.safeSubscribe(observer);\n\n        assertEquals(Arrays.asList(\"error\",  \"disposed\"), events);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableUsingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Flowable<String>> observableFactory = new Function<Resource, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(Resource resource) {\n                return Flowable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Flowable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        Flowable<String> flowable = Flowable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnCancel(unsub)\n        .doOnError(onError);\n\n        flowable.safeSubscribe(subscriber);\n\n        assertEquals(Arrays.asList(\"error\", \"disposed\"), events);\n    }\n","date":"2019-12-22 18:39:23","endLine":341,"groupId":"103081","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"usingDoesNotDisposesEagerlyBeforeError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f3/2b599df44af7c613f8aef711cf95c01fae97e4.src","preCode":"    public void usingDoesNotDisposesEagerlyBeforeError() {\n        final List<String> events = new ArrayList<>();\n        final Supplier<Resource> resourceFactory = createResourceFactory(events);\n        final Consumer<Throwable> onError = createOnErrorAction(events);\n        final Action unsub = createUnsubAction(events);\n\n        Function<Resource, Flowable<String>> observableFactory = new Function<Resource, Flowable<String>>() {\n            @Override\n            public Flowable<String> apply(Resource resource) {\n                return Flowable.fromArray(resource.getTextFromWeb().split(\" \"))\n                        .concatWith(Flowable.<String>error(new RuntimeException()));\n            }\n        };\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        Flowable<String> flowable = Flowable.using(resourceFactory, observableFactory,\n                new DisposeAction(), false)\n        .doOnCancel(unsub)\n        .doOnError(onError);\n\n        flowable.safeSubscribe(subscriber);\n\n        assertEquals(Arrays.asList(\"error\", \"disposed\"), events);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableUsingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
