[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Observable<Observable<Integer>> source = Observable.range(0, n).map(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Observable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":626,"groupId":"1197","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"concatVeryLongObservableOfObservables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6f/436a56ccf266c9cc57c65783686ad7824a74fd.src","preCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Observable<Observable<Integer>> source = Observable.range(0, n).map(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Observable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Flowable<Flowable<Integer>> source = Flowable.range(0, n).map(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Flowable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":639,"groupId":"1197","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"concatVeryLongObservableOfObservables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/8f5cd043ac8f418600f4d33396a8d5cfa0943d.src","preCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Flowable<Flowable<Integer>> source = Flowable.range(0, n).map(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Flowable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Observable<Observable<Integer>> source = Observable.range(0, n).map(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Observable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":626,"groupId":"1197","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"concatVeryLongObservableOfObservables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6f/436a56ccf266c9cc57c65783686ad7824a74fd.src","preCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Observable<Observable<Integer>> source = Observable.range(0, n).map(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Observable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Flowable<Flowable<Integer>> source = Flowable.range(0, n).map(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Flowable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","date":"2019-12-22 18:39:23","endLine":639,"groupId":"1197","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"concatVeryLongObservableOfObservables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/451d6097833e4984eb0cf4dd726ac9ebc97cfa.src","preCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Flowable<Flowable<Integer>> source = Flowable.range(0, n).map(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Flowable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Observable<Observable<Integer>> source = Observable.range(0, n).map(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Observable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","date":"2019-12-22 18:59:44","endLine":626,"groupId":"105459","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"concatVeryLongObservableOfObservables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/b00fdf7c961a4606a8134779a8f75268955a19.src","preCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Observable<Observable<Integer>> source = Observable.range(0, n).map(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer v) {\n                return Observable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Observable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Flowable<Flowable<Integer>> source = Flowable.range(0, n).map(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Flowable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","date":"2019-12-22 18:39:23","endLine":639,"groupId":"105459","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"concatVeryLongObservableOfObservables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/451d6097833e4984eb0cf4dd726ac9ebc97cfa.src","preCode":"    public void concatVeryLongObservableOfObservables() {\n        final int n = 10000;\n        Flowable<Flowable<Integer>> source = Flowable.range(0, n).map(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer v) {\n                return Flowable.just(v);\n            }\n        });\n\n        Single<List<Integer>> result = Flowable.concat(source).toList();\n\n        SingleObserver<List<Integer>> o = TestHelper.mockSingleObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        List<Integer> list = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        inOrder.verify(o).onSuccess(list);\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
