[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        boolean tryEmitScalar(Supplier<? extends U> value) {\n            U u;\n            try {\n                u = value.get();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                errors.addThrowable(ex);\n                drain();\n                return true;\n            }\n\n            if (u == null) {\n                return true;\n            }\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                downstream.onNext(u);\n                if (decrementAndGet() == 0) {\n                    return true;\n                }\n            } else {\n                SimplePlainQueue<U> q = queue;\n                if (q == null) {\n                    if (maxConcurrency == Integer.MAX_VALUE) {\n                        q = new SpscLinkedArrayQueue<U>(bufferSize);\n                    } else {\n                        q = new SpscArrayQueue<U>(maxConcurrency);\n                    }\n                    queue = q;\n                }\n\n                if (!q.offer(u)) {\n                    onError(new IllegalStateException(\"Scalar queue full?!\"));\n                    return true;\n                }\n                if (getAndIncrement() != 0) {\n                    return false;\n                }\n            }\n            drainLoop();\n            return true;\n        }\n","date":"2019-08-16 20:51:17","endLine":260,"groupId":"4386","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"tryEmitScalar","params":"(Supplier<?extendsU>value)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0d/8c124f83abfd42f49b45fb0576946867a065e1.src","preCode":"        boolean tryEmitScalar(Supplier<? extends U> value) {\n            U u;\n            try {\n                u = value.get();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                errors.addThrowable(ex);\n                drain();\n                return true;\n            }\n\n            if (u == null) {\n                return true;\n            }\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                downstream.onNext(u);\n                if (decrementAndGet() == 0) {\n                    return true;\n                }\n            } else {\n                SimplePlainQueue<U> q = queue;\n                if (q == null) {\n                    if (maxConcurrency == Integer.MAX_VALUE) {\n                        q = new SpscLinkedArrayQueue<U>(bufferSize);\n                    } else {\n                        q = new SpscArrayQueue<U>(maxConcurrency);\n                    }\n                    queue = q;\n                }\n\n                if (!q.offer(u)) {\n                    onError(new IllegalStateException(\"Scalar queue full?!\"));\n                    return true;\n                }\n                if (getAndIncrement() != 0) {\n                    return false;\n                }\n            }\n            drainLoop();\n            return true;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        SimpleQueue<U> getMainQueue() {\n            SimplePlainQueue<U> q = queue;\n            if (q == null) {\n                if (maxConcurrency == Integer.MAX_VALUE) {\n                    q = new SpscLinkedArrayQueue<U>(bufferSize);\n                } else {\n                    q = new SpscArrayQueue<U>(maxConcurrency);\n                }\n                queue = q;\n            }\n            return q;\n        }\n","date":"2019-08-16 20:51:17","endLine":226,"groupId":"4386","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMainQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/1339c5c0e1897563c02a6adc2dc5217335349b.src","preCode":"        SimpleQueue<U> getMainQueue() {\n            SimplePlainQueue<U> q = queue;\n            if (q == null) {\n                if (maxConcurrency == Integer.MAX_VALUE) {\n                    q = new SpscLinkedArrayQueue<U>(bufferSize);\n                } else {\n                    q = new SpscArrayQueue<U>(maxConcurrency);\n                }\n                queue = q;\n            }\n            return q;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-28 22:07:44","commitOrder":2,"curCode":"        boolean tryEmitScalar(Supplier<? extends U> value) {\n            U u;\n            try {\n                u = value.get();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                errors.tryAddThrowableOrReport(ex);\n                drain();\n                return true;\n            }\n\n            if (u == null) {\n                return true;\n            }\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                downstream.onNext(u);\n                if (decrementAndGet() == 0) {\n                    return true;\n                }\n            } else {\n                SimplePlainQueue<U> q = queue;\n                if (q == null) {\n                    if (maxConcurrency == Integer.MAX_VALUE) {\n                        q = new SpscLinkedArrayQueue<U>(bufferSize);\n                    } else {\n                        q = new SpscArrayQueue<U>(maxConcurrency);\n                    }\n                    queue = q;\n                }\n\n                if (!q.offer(u)) {\n                    onError(new IllegalStateException(\"Scalar queue full?!\"));\n                    return true;\n                }\n                if (getAndIncrement() != 0) {\n                    return false;\n                }\n            }\n            drainLoop();\n            return true;\n        }\n","date":"2019-08-28 22:07:44","endLine":260,"groupId":"4386","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"tryEmitScalar","params":"(Supplier<?extendsU>value)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/59/6719176e4f1e2b7ce8b08133ba7a22fd68bfd4.src","preCode":"        boolean tryEmitScalar(Supplier<? extends U> value) {\n            U u;\n            try {\n                u = value.get();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                errors.addThrowable(ex);\n                drain();\n                return true;\n            }\n\n            if (u == null) {\n                return true;\n            }\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                downstream.onNext(u);\n                if (decrementAndGet() == 0) {\n                    return true;\n                }\n            } else {\n                SimplePlainQueue<U> q = queue;\n                if (q == null) {\n                    if (maxConcurrency == Integer.MAX_VALUE) {\n                        q = new SpscLinkedArrayQueue<U>(bufferSize);\n                    } else {\n                        q = new SpscArrayQueue<U>(maxConcurrency);\n                    }\n                    queue = q;\n                }\n\n                if (!q.offer(u)) {\n                    onError(new IllegalStateException(\"Scalar queue full?!\"));\n                    return true;\n                }\n                if (getAndIncrement() != 0) {\n                    return false;\n                }\n            }\n            drainLoop();\n            return true;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        SimpleQueue<U> getMainQueue() {\n            SimplePlainQueue<U> q = queue;\n            if (q == null) {\n                if (maxConcurrency == Integer.MAX_VALUE) {\n                    q = new SpscLinkedArrayQueue<U>(bufferSize);\n                } else {\n                    q = new SpscArrayQueue<U>(maxConcurrency);\n                }\n                queue = q;\n            }\n            return q;\n        }\n","date":"2019-08-16 20:51:17","endLine":226,"groupId":"4386","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getMainQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/1339c5c0e1897563c02a6adc2dc5217335349b.src","preCode":"        SimpleQueue<U> getMainQueue() {\n            SimplePlainQueue<U> q = queue;\n            if (q == null) {\n                if (maxConcurrency == Integer.MAX_VALUE) {\n                    q = new SpscLinkedArrayQueue<U>(bufferSize);\n                } else {\n                    q = new SpscArrayQueue<U>(maxConcurrency);\n                }\n                queue = q;\n            }\n            return q;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"N"}],"commitId":"a07c45eeeb68b1cfc24f913c75edbc2820aadb76","commitMessage":"@@@3.x: Cleanup addThrowable.  \"2.x\" and null-value error messages (#6639)\n\n","date":"2019-08-28 22:07:44","modifiedFileCount":"106","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":3,"curCode":"        boolean tryEmitScalar(Supplier<? extends U> value) {\n            U u;\n            try {\n                u = value.get();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                errors.tryAddThrowableOrReport(ex);\n                drain();\n                return true;\n            }\n\n            if (u == null) {\n                return true;\n            }\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                downstream.onNext(u);\n                if (decrementAndGet() == 0) {\n                    return true;\n                }\n            } else {\n                SimplePlainQueue<U> q = queue;\n                if (q == null) {\n                    if (maxConcurrency == Integer.MAX_VALUE) {\n                        q = new SpscLinkedArrayQueue<>(bufferSize);\n                    } else {\n                        q = new SpscArrayQueue<>(maxConcurrency);\n                    }\n                    queue = q;\n                }\n\n                if (!q.offer(u)) {\n                    onError(new IllegalStateException(\"Scalar queue full?!\"));\n                    return true;\n                }\n                if (getAndIncrement() != 0) {\n                    return false;\n                }\n            }\n            drainLoop();\n            return true;\n        }\n","date":"2019-12-28 03:01:34","endLine":259,"groupId":"4386","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"tryEmitScalar","params":"(Supplier<?extendsU>value)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/69627ed308b891fac09f23bcaa2bba2c4e1090.src","preCode":"        boolean tryEmitScalar(Supplier<? extends U> value) {\n            U u;\n            try {\n                u = value.get();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                errors.tryAddThrowableOrReport(ex);\n                drain();\n                return true;\n            }\n\n            if (u == null) {\n                return true;\n            }\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                downstream.onNext(u);\n                if (decrementAndGet() == 0) {\n                    return true;\n                }\n            } else {\n                SimplePlainQueue<U> q = queue;\n                if (q == null) {\n                    if (maxConcurrency == Integer.MAX_VALUE) {\n                        q = new SpscLinkedArrayQueue<U>(bufferSize);\n                    } else {\n                        q = new SpscArrayQueue<U>(maxConcurrency);\n                    }\n                    queue = q;\n                }\n\n                if (!q.offer(u)) {\n                    onError(new IllegalStateException(\"Scalar queue full?!\"));\n                    return true;\n                }\n                if (getAndIncrement() != 0) {\n                    return false;\n                }\n            }\n            drainLoop();\n            return true;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2019-12-28 03:01:34","commitOrder":3,"curCode":"        SimpleQueue<U> getMainQueue() {\n            SimplePlainQueue<U> q = queue;\n            if (q == null) {\n                if (maxConcurrency == Integer.MAX_VALUE) {\n                    q = new SpscLinkedArrayQueue<>(bufferSize);\n                } else {\n                    q = new SpscArrayQueue<>(maxConcurrency);\n                }\n                queue = q;\n            }\n            return q;\n        }\n","date":"2019-12-28 03:01:34","endLine":226,"groupId":"4386","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getMainQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ea/6a4f76ed6ef4f10607fcc4d00424188395a025.src","preCode":"        SimpleQueue<U> getMainQueue() {\n            SimplePlainQueue<U> q = queue;\n            if (q == null) {\n                if (maxConcurrency == Integer.MAX_VALUE) {\n                    q = new SpscLinkedArrayQueue<U>(bufferSize);\n                } else {\n                    q = new SpscArrayQueue<U>(maxConcurrency);\n                }\n                queue = q;\n            }\n            return q;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":4,"curCode":"        boolean tryEmitScalar(Supplier<? extends U> value) {\n            U u;\n            try {\n                u = value.get();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                errors.tryAddThrowableOrReport(ex);\n                drain();\n                return true;\n            }\n\n            if (u == null) {\n                return true;\n            }\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                downstream.onNext(u);\n                if (decrementAndGet() == 0) {\n                    return true;\n                }\n            } else {\n                SimplePlainQueue<U> q = queue;\n                if (q == null) {\n                    if (maxConcurrency == Integer.MAX_VALUE) {\n                        q = new SpscLinkedArrayQueue<>(bufferSize);\n                    } else {\n                        q = new SpscArrayQueue<>(maxConcurrency);\n                    }\n                    queue = q;\n                }\n\n                q.offer(u);\n                if (getAndIncrement() != 0) {\n                    return false;\n                }\n            }\n            drainLoop();\n            return true;\n        }\n","date":"2020-02-12 23:26:52","endLine":252,"groupId":"102190","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"tryEmitScalar","params":"(Supplier<?extendsU>value)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d2/ca19c31a8de68733ce3710d46a0001a4378cca.src","preCode":"        boolean tryEmitScalar(Supplier<? extends U> value) {\n            U u;\n            try {\n                u = value.get();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                errors.tryAddThrowableOrReport(ex);\n                drain();\n                return true;\n            }\n\n            if (u == null) {\n                return true;\n            }\n\n            if (get() == 0 && compareAndSet(0, 1)) {\n                downstream.onNext(u);\n                if (decrementAndGet() == 0) {\n                    return true;\n                }\n            } else {\n                SimplePlainQueue<U> q = queue;\n                if (q == null) {\n                    if (maxConcurrency == Integer.MAX_VALUE) {\n                        q = new SpscLinkedArrayQueue<>(bufferSize);\n                    } else {\n                        q = new SpscArrayQueue<>(maxConcurrency);\n                    }\n                    queue = q;\n                }\n\n                if (!q.offer(u)) {\n                    onError(new IllegalStateException(\"Scalar queue full?!\"));\n                    return true;\n                }\n                if (getAndIncrement() != 0) {\n                    return false;\n                }\n            }\n            drainLoop();\n            return true;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2019-12-28 03:01:34","commitOrder":4,"curCode":"        SimpleQueue<U> getMainQueue() {\n            SimplePlainQueue<U> q = queue;\n            if (q == null) {\n                if (maxConcurrency == Integer.MAX_VALUE) {\n                    q = new SpscLinkedArrayQueue<>(bufferSize);\n                } else {\n                    q = new SpscArrayQueue<>(maxConcurrency);\n                }\n                queue = q;\n            }\n            return q;\n        }\n","date":"2019-12-28 03:01:34","endLine":226,"groupId":"102190","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getMainQueue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ea/6a4f76ed6ef4f10607fcc4d00424188395a025.src","preCode":"        SimpleQueue<U> getMainQueue() {\n            SimplePlainQueue<U> q = queue;\n            if (q == null) {\n                if (maxConcurrency == Integer.MAX_VALUE) {\n                    q = new SpscLinkedArrayQueue<>(bufferSize);\n                } else {\n                    q = new SpscArrayQueue<>(maxConcurrency);\n                }\n                queue = q;\n            }\n            return q;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"N"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
