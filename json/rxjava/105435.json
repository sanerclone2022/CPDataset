[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(observer);\n        observable.subscribe(observer);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        subject.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        subject.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        subject.onNext(3);\n        subject.onComplete();\n\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(1, 1000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(2, 2000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(3, 3000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":70,"groupId":"12276","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"timeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7e/ecc75fb5666a3e80926aed4b426bdd1b76f5ab.src","preCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(observer);\n        observable.subscribe(observer);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        subject.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        subject.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        subject.onNext(3);\n        subject.onComplete();\n\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(1, 1000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(2, 2000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(3, 3000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTimeIntervalTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(subscriber);\n        flowable.subscribe(subscriber);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        processor.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        processor.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        processor.onNext(3);\n        processor.onComplete();\n\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<Integer>(1, 1000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<Integer>(2, 2000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<Integer>(3, 3000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":71,"groupId":"12276","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ac/517661cbf2a810c52d1eefbd12bbe54b0b7c6e.src","preCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(subscriber);\n        flowable.subscribe(subscriber);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        processor.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        processor.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        processor.onNext(3);\n        processor.onComplete();\n\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<Integer>(1, 1000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<Integer>(2, 2000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<Integer>(3, 3000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTimeIntervalTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(observer);\n        observable.subscribe(observer);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        subject.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        subject.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        subject.onNext(3);\n        subject.onComplete();\n\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(1, 1000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(2, 2000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(3, 3000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":70,"groupId":"12276","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"timeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7e/ecc75fb5666a3e80926aed4b426bdd1b76f5ab.src","preCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(observer);\n        observable.subscribe(observer);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        subject.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        subject.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        subject.onNext(3);\n        subject.onComplete();\n\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(1, 1000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(2, 2000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(3, 3000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTimeIntervalTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(subscriber);\n        flowable.subscribe(subscriber);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        processor.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        processor.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        processor.onNext(3);\n        processor.onComplete();\n\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<>(1, 1000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<>(2, 2000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<>(3, 3000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":71,"groupId":"10852","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/49/6bce4a38a972cec7b5e9b70e70316900f6c303.src","preCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(subscriber);\n        flowable.subscribe(subscriber);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        processor.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        processor.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        processor.onNext(3);\n        processor.onComplete();\n\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<Integer>(1, 1000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<Integer>(2, 2000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<Integer>(3, 3000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTimeIntervalTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(observer);\n        observable.subscribe(observer);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        subject.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        subject.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        subject.onNext(3);\n        subject.onComplete();\n\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<>(1, 1000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<>(2, 2000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<>(3, 3000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:59:44","endLine":70,"groupId":"105435","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"timeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3b/849ab978cb4df4d464f5ae27db10aade68ae1f.src","preCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(observer);\n        observable.subscribe(observer);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        subject.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        subject.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        subject.onNext(3);\n        subject.onComplete();\n\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(1, 1000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(2, 2000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onNext(\n                new Timed<Integer>(3, 3000, TIME_UNIT));\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTimeIntervalTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(subscriber);\n        flowable.subscribe(subscriber);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        processor.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        processor.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        processor.onNext(3);\n        processor.onComplete();\n\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<>(1, 1000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<>(2, 2000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<>(3, 3000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":71,"groupId":"105435","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"timeInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/49/6bce4a38a972cec7b5e9b70e70316900f6c303.src","preCode":"    public void timeInterval() {\n        InOrder inOrder = inOrder(subscriber);\n        flowable.subscribe(subscriber);\n\n        testScheduler.advanceTimeBy(1000, TIME_UNIT);\n        processor.onNext(1);\n        testScheduler.advanceTimeBy(2000, TIME_UNIT);\n        processor.onNext(2);\n        testScheduler.advanceTimeBy(3000, TIME_UNIT);\n        processor.onNext(3);\n        processor.onComplete();\n\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<>(1, 1000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<>(2, 2000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onNext(\n                new Timed<>(3, 3000, TIME_UNIT));\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTimeIntervalTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
