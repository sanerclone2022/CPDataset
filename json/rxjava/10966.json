[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mainTimedOut() {\n        Single\n                .never()\n                .timeout(1, TimeUnit.NANOSECONDS)\n                .to(TestHelper.<Object>testConsumer())\n                .awaitDone(5, TimeUnit.SECONDS)\n                .assertFailureAndMessage(TimeoutException.class, timeoutMessage(1, TimeUnit.NANOSECONDS));\n    }\n","date":"2019-08-16 20:51:17","endLine":223,"groupId":"4321","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mainTimedOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7c/51e8be91378219a5bff390f181e9808d49ffd7.src","preCode":"    public void mainTimedOut() {\n        Single\n                .never()\n                .timeout(1, TimeUnit.NANOSECONDS)\n                .to(TestHelper.<Object>testConsumer())\n                .awaitDone(5, TimeUnit.SECONDS)\n                .assertFailureAndMessage(TimeoutException.class, timeoutMessage(1, TimeUnit.NANOSECONDS));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleTimeoutTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timeoutException() throws Exception {\n\n        Completable.never()\n        .timeout(100, TimeUnit.MILLISECONDS, Schedulers.io())\n        .to(TestHelper.<Void>testConsumer())\n        .awaitDone(5, TimeUnit.SECONDS)\n        .assertFailureAndMessage(TimeoutException.class, timeoutMessage(100, TimeUnit.MILLISECONDS));\n    }\n","date":"2019-08-16 20:51:17","endLine":46,"groupId":"8913","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timeoutException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/615622208bd37ffed7a3bbf4079f9658c02e67.src","preCode":"    public void timeoutException() throws Exception {\n\n        Completable.never()\n        .timeout(100, TimeUnit.MILLISECONDS, Schedulers.io())\n        .to(TestHelper.<Void>testConsumer())\n        .awaitDone(5, TimeUnit.SECONDS)\n        .assertFailureAndMessage(TimeoutException.class, timeoutMessage(100, TimeUnit.MILLISECONDS));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/completable/CompletableTimeoutTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":2,"curCode":"    public void mainTimedOut() {\n        Single\n                .never()\n                .timeout(1, TimeUnit.MILLISECONDS)\n                .to(TestHelper.<Object>testConsumer())\n                .awaitDone(5, TimeUnit.SECONDS)\n                .assertFailureAndMessage(TimeoutException.class, timeoutMessage(1, TimeUnit.MILLISECONDS));\n    }\n","date":"2020-02-12 23:26:52","endLine":225,"groupId":"10966","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mainTimedOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/44fd3ae9a30b725b555f05cee0800936686119.src","preCode":"    public void mainTimedOut() {\n        Single\n                .never()\n                .timeout(1, TimeUnit.NANOSECONDS)\n                .to(TestHelper.<Object>testConsumer())\n                .awaitDone(5, TimeUnit.SECONDS)\n                .assertFailureAndMessage(TimeoutException.class, timeoutMessage(1, TimeUnit.NANOSECONDS));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleTimeoutTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void timeoutException() throws Exception {\n\n        Completable.never()\n        .timeout(100, TimeUnit.MILLISECONDS, Schedulers.io())\n        .to(TestHelper.<Void>testConsumer())\n        .awaitDone(5, TimeUnit.SECONDS)\n        .assertFailureAndMessage(TimeoutException.class, timeoutMessage(100, TimeUnit.MILLISECONDS));\n    }\n","date":"2019-08-16 20:51:17","endLine":46,"groupId":"10966","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timeoutException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/615622208bd37ffed7a3bbf4079f9658c02e67.src","preCode":"    public void timeoutException() throws Exception {\n\n        Completable.never()\n        .timeout(100, TimeUnit.MILLISECONDS, Schedulers.io())\n        .to(TestHelper.<Void>testConsumer())\n        .awaitDone(5, TimeUnit.SECONDS)\n        .assertFailureAndMessage(TimeoutException.class, timeoutMessage(100, TimeUnit.MILLISECONDS));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/completable/CompletableTimeoutTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
