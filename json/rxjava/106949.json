[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2020-01-27 03:13:17","commitOrder":2,"curCode":"    public void concatMapError() {\n        RuntimeException exception = new RuntimeException(\"test\");\n\n        Single.error(exception).concatMap(new Function<Object, SingleSource<Object>>() {\n            @Override public SingleSource<Object> apply(final Object integer) throws Exception {\n                return Single.just(new Object());\n            }\n        })\n            .test()\n            .assertError(exception);\n    }\n","date":"2020-01-27 03:13:17","endLine":92,"groupId":"980","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"concatMapError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b0/b5af17a64f7b4bf533cc31be17c007ddf9415c.src","preCode":"    public void concatMapError() {\n        RuntimeException exception = new RuntimeException(\"test\");\n\n        Single.error(exception).concatMap(new Function<Object, SingleSource<Object>>() {\n            @Override public SingleSource<Object> apply(final Object integer) throws Exception {\n                return Single.just(new Object());\n            }\n        })\n            .test()\n            .assertError(exception);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleConcatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void flatMapSingleError() {\n        RuntimeException exception = new RuntimeException(\"test\");\n\n        Maybe.error(exception).flatMapSingle(new Function<Object, SingleSource<Object>>() {\n            @Override public SingleSource<Object> apply(final Object integer) throws Exception {\n                return Single.just(new Object());\n            }\n        })\n            .test()\n            .assertError(exception);\n    }\n","date":"2019-08-16 20:51:17","endLine":99,"groupId":"980","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapSingleError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/60/b1a98f3b87c33f27c5821fc6544e6fe139fcba.src","preCode":"    public void flatMapSingleError() {\n        RuntimeException exception = new RuntimeException(\"test\");\n\n        Maybe.error(exception).flatMapSingle(new Function<Object, SingleSource<Object>>() {\n            @Override public SingleSource<Object> apply(final Object integer) throws Exception {\n                return Single.just(new Object());\n            }\n        })\n            .test()\n            .assertError(exception);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"NB"}],"commitId":"57bd1a9272464a1b4b201faa2bab7a929a0ae7f3","commitMessage":"@@@3.x: Add concatMapX operators (aliases) (#6879)\n\n","date":"2020-01-27 03:13:17","modifiedFileCount":"3","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-29 04:32:19","codes":[{"authorDate":"2020-01-27 03:13:17","commitOrder":3,"curCode":"    public void concatMapError() {\n        RuntimeException exception = new RuntimeException(\"test\");\n\n        Single.error(exception).concatMap(new Function<Object, SingleSource<Object>>() {\n            @Override public SingleSource<Object> apply(final Object integer) throws Exception {\n                return Single.just(new Object());\n            }\n        })\n            .test()\n            .assertError(exception);\n    }\n","date":"2020-01-27 03:13:17","endLine":92,"groupId":"106949","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"concatMapError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b0/b5af17a64f7b4bf533cc31be17c007ddf9415c.src","preCode":"    public void concatMapError() {\n        RuntimeException exception = new RuntimeException(\"test\");\n\n        Single.error(exception).concatMap(new Function<Object, SingleSource<Object>>() {\n            @Override public SingleSource<Object> apply(final Object integer) throws Exception {\n                return Single.just(new Object());\n            }\n        })\n            .test()\n            .assertError(exception);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleConcatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"},{"authorDate":"2020-01-29 04:32:19","commitOrder":3,"curCode":"    public void flatMapSingleError() {\n        RuntimeException exception = new RuntimeException(\"test\");\n\n        Maybe.error(exception).flatMapSingle(new Function<Object, SingleSource<Object>>() {\n            @Override public SingleSource<Object> apply(final Object integer) throws Exception {\n                return Single.just(new Object());\n            }\n        })\n            .toSingle()\n            .test()\n            .assertError(exception);\n    }\n","date":"2020-01-29 04:32:19","endLine":98,"groupId":"106949","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapSingleError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/49/04678a61a912adda1167512359529e401aa26b.src","preCode":"    public void flatMapSingleError() {\n        RuntimeException exception = new RuntimeException(\"test\");\n\n        Maybe.error(exception).flatMapSingle(new Function<Object, SingleSource<Object>>() {\n            @Override public SingleSource<Object> apply(final Object integer) throws Exception {\n                return Single.just(new Object());\n            }\n        })\n            .test()\n            .assertError(exception);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"f1a795da0d4cdfb3133206ad8e3887bdb8ba948b","commitMessage":"@@@3.x: Swap Maybe.flatMapSingle and Maybe.flatMapSingleElement (#6891)\n\n* Deleted Maybe.flatMapSingle\n\nAnd replaced tests with flatMapSingle().toSingle()\n\n* Renamed Maybe.flatMapSingleElement to flatMapSingle\n\n* Deleted unused MaybeFlatMapSingle operator\n\n* Renamed operator MaybeFlatMapSingleElement to MaybeFlatMapSingle\n\n* Add Ignore to XFlatMapTest.maybeSingle\n","date":"2020-01-29 04:32:19","modifiedFileCount":"5","status":"M","submitter":"slisaasquatch"}]
