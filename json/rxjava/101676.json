[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onError(Throwable t) {\n        ObjectHelper.requireNonNull(t, \"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncDisposable<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":173,"groupId":"13020","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/51/90d7501379fa7edc875c4f5f61465b02d883e3.src","preCode":"    public void onError(Throwable t) {\n        ObjectHelper.requireNonNull(t, \"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncDisposable<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subjects/AsyncSubject.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onError(Throwable t) {\n        ObjectHelper.requireNonNull(t, \"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncSubscription<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":184,"groupId":"13020","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7d/5e84a8f2863a90c204bb05b456dc5d6973bf87.src","preCode":"    public void onError(Throwable t) {\n        ObjectHelper.requireNonNull(t, \"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncSubscription<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/processors/AsyncProcessor.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-28 22:07:44","codes":[{"authorDate":"2019-08-28 22:07:44","commitOrder":2,"curCode":"    public void onError(Throwable t) {\n        ExceptionHelper.nullCheck(t, \"onError called with a null Throwable.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncDisposable<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","date":"2019-08-28 22:07:44","endLine":173,"groupId":"13020","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/4c98c4f52aa0fca93609b4744baa06fb9a66d6.src","preCode":"    public void onError(Throwable t) {\n        ObjectHelper.requireNonNull(t, \"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncDisposable<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subjects/AsyncSubject.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2019-08-28 22:07:44","commitOrder":2,"curCode":"    public void onError(Throwable t) {\n        ExceptionHelper.nullCheck(t, \"onError called with a null Throwable.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncSubscription<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","date":"2019-08-28 22:07:44","endLine":184,"groupId":"13020","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9a/75a1f4cae4c6e2c3ae8ca5087d6952ea1a3ef1.src","preCode":"    public void onError(Throwable t) {\n        ObjectHelper.requireNonNull(t, \"onError called with null. Null values are generally not allowed in 2.x operators and sources.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncSubscription<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/processors/AsyncProcessor.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"a07c45eeeb68b1cfc24f913c75edbc2820aadb76","commitMessage":"@@@3.x: Cleanup addThrowable.  \"2.x\" and null-value error messages (#6639)\n\n","date":"2019-08-28 22:07:44","modifiedFileCount":"106","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-14 15:49:53","codes":[{"authorDate":"2019-08-28 22:07:44","commitOrder":3,"curCode":"    public void onError(Throwable t) {\n        ExceptionHelper.nullCheck(t, \"onError called with a null Throwable.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncDisposable<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","date":"2019-08-28 22:07:44","endLine":173,"groupId":"101676","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onError","params":"(Throwablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/4c98c4f52aa0fca93609b4744baa06fb9a66d6.src","preCode":"    public void onError(Throwable t) {\n        ExceptionHelper.nullCheck(t, \"onError called with a null Throwable.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncDisposable<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subjects/AsyncSubject.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2020-01-14 15:49:53","commitOrder":3,"curCode":"    public void onError(@NonNull Throwable t) {\n        ExceptionHelper.nullCheck(t, \"onError called with a null Throwable.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncSubscription<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","date":"2020-01-14 15:49:53","endLine":184,"groupId":"101676","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onError","params":"(@NonNullThrowablet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/80/37c67ffefaf0f5ceef8221ff2c4f3b0d263f49.src","preCode":"    public void onError(Throwable t) {\n        ExceptionHelper.nullCheck(t, \"onError called with a null Throwable.\");\n        if (subscribers.get() == TERMINATED) {\n            RxJavaPlugins.onError(t);\n            return;\n        }\n        value = null;\n        error = t;\n        for (AsyncSubscription<T> as : subscribers.getAndSet(TERMINATED)) {\n            as.onError(t);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/processors/AsyncProcessor.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"fb6dab6847d858b22fe6a36558cf3b62dc10627d","commitMessage":"@@@3.x: Add nullability annotations to type arguments (#6840)\n\n","date":"2020-01-14 15:49:53","modifiedFileCount":"75","status":"M","submitter":"David Karnok"}]
