[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribeAll() {\n        PublishSubject<Integer> source = PublishSubject.create();\n\n        PublishSubject<Integer> open = PublishSubject.create();\n        final PublishSubject<Integer> close = PublishSubject.create();\n\n        TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>();\n\n        source.window(open, new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t) {\n                return close;\n            }\n        }).subscribe(to);\n\n        open.onNext(1);\n\n        assertTrue(open.hasObservers());\n        assertTrue(close.hasObservers());\n\n        to.dispose();\n\n        \r\n        assertFalse(open.hasObservers());\n        \r\n        assertTrue(close.hasObservers());\n    }\n","date":"2019-08-16 20:51:17","endLine":215,"groupId":"11493","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/90/732ddf1e7255e40562819eb3f1f77dbc4a650f.src","preCode":"    public void unsubscribeAll() {\n        PublishSubject<Integer> source = PublishSubject.create();\n\n        PublishSubject<Integer> open = PublishSubject.create();\n        final PublishSubject<Integer> close = PublishSubject.create();\n\n        TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>();\n\n        source.window(open, new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t) {\n                return close;\n            }\n        }).subscribe(to);\n\n        open.onNext(1);\n\n        assertTrue(open.hasObservers());\n        assertTrue(close.hasObservers());\n\n        to.dispose();\n\n        \r\n        assertFalse(open.hasObservers());\n        \r\n        assertTrue(close.hasObservers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribeAll() {\n        PublishProcessor<Integer> source = PublishProcessor.create();\n\n        PublishProcessor<Integer> open = PublishProcessor.create();\n        final PublishProcessor<Integer> close = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<Flowable<Integer>>();\n\n        source.window(open, new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t) {\n                return close;\n            }\n        }).subscribe(ts);\n\n        open.onNext(1);\n\n        assertTrue(open.hasSubscribers());\n        assertTrue(close.hasSubscribers());\n\n        ts.cancel();\n\n        \r\n        assertFalse(open.hasSubscribers());\n        \r\n        assertTrue(close.hasSubscribers());\n    }\n","date":"2019-08-16 20:51:17","endLine":213,"groupId":"7984","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3a/76a4c7a8f2a96d3c50c50b4442fd78f75290ac.src","preCode":"    public void unsubscribeAll() {\n        PublishProcessor<Integer> source = PublishProcessor.create();\n\n        PublishProcessor<Integer> open = PublishProcessor.create();\n        final PublishProcessor<Integer> close = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<Flowable<Integer>>();\n\n        source.window(open, new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t) {\n                return close;\n            }\n        }).subscribe(ts);\n\n        open.onNext(1);\n\n        assertTrue(open.hasSubscribers());\n        assertTrue(close.hasSubscribers());\n\n        ts.cancel();\n\n        \r\n        assertFalse(open.hasSubscribers());\n        \r\n        assertTrue(close.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-17 17:19:08","codes":[{"authorDate":"2019-12-17 17:19:08","commitOrder":2,"curCode":"    public void unsubscribeAll() {\n        PublishSubject<Integer> source = PublishSubject.create();\n\n        PublishSubject<Integer> open = PublishSubject.create();\n        final PublishSubject<Integer> close = PublishSubject.create();\n\n        TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>();\n\n        source.window(open, new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Observable<Integer>>() {\n            @Override\n            public void accept(Observable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(to);\n\n        open.onNext(1);\n\n        assertTrue(open.hasObservers());\n        assertTrue(close.hasObservers());\n\n        to.dispose();\n\n        \r\n        assertFalse(open.hasObservers());\n        \r\n        assertTrue(close.hasObservers());\n    }\n","date":"2019-12-17 17:19:08","endLine":229,"groupId":"9166","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/02116cd99ec3143950dad11fdbb8d47529deff.src","preCode":"    public void unsubscribeAll() {\n        PublishSubject<Integer> source = PublishSubject.create();\n\n        PublishSubject<Integer> open = PublishSubject.create();\n        final PublishSubject<Integer> close = PublishSubject.create();\n\n        TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>();\n\n        source.window(open, new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t) {\n                return close;\n            }\n        }).subscribe(to);\n\n        open.onNext(1);\n\n        assertTrue(open.hasObservers());\n        assertTrue(close.hasObservers());\n\n        to.dispose();\n\n        \r\n        assertFalse(open.hasObservers());\n        \r\n        assertTrue(close.hasObservers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2019-12-17 17:19:08","commitOrder":2,"curCode":"    public void unsubscribeAll() {\n        PublishProcessor<Integer> source = PublishProcessor.create();\n\n        PublishProcessor<Integer> open = PublishProcessor.create();\n        final PublishProcessor<Integer> close = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<Flowable<Integer>>();\n\n        source.window(open, new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Flowable<Integer>>() {\n            @Override\n            public void accept(Flowable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(ts);\n\n        open.onNext(1);\n\n        assertTrue(open.hasSubscribers());\n        assertTrue(close.hasSubscribers());\n\n        ts.cancel();\n\n        \r\n        assertFalse(open.hasSubscribers());\n        \r\n        assertTrue(close.hasSubscribers());\n    }\n","date":"2019-12-17 17:19:08","endLine":227,"groupId":"983","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/94/20794dc530f13e557b64a0bbafffaa551f352c.src","preCode":"    public void unsubscribeAll() {\n        PublishProcessor<Integer> source = PublishProcessor.create();\n\n        PublishProcessor<Integer> open = PublishProcessor.create();\n        final PublishProcessor<Integer> close = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<Flowable<Integer>>();\n\n        source.window(open, new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t) {\n                return close;\n            }\n        }).subscribe(ts);\n\n        open.onNext(1);\n\n        assertTrue(open.hasSubscribers());\n        assertTrue(close.hasSubscribers());\n\n        ts.cancel();\n\n        \r\n        assertFalse(open.hasSubscribers());\n        \r\n        assertTrue(close.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"f96821f14c91752d323877a7874f480fd6b02f12","commitMessage":"@@@3.x: Fix window (boundary.  start/end) cancel and abandonment (#6762)\n\n","date":"2019-12-17 17:19:08","modifiedFileCount":"12","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-17 17:19:08","commitOrder":3,"curCode":"    public void unsubscribeAll() {\n        PublishSubject<Integer> source = PublishSubject.create();\n\n        PublishSubject<Integer> open = PublishSubject.create();\n        final PublishSubject<Integer> close = PublishSubject.create();\n\n        TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>();\n\n        source.window(open, new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Observable<Integer>>() {\n            @Override\n            public void accept(Observable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(to);\n\n        open.onNext(1);\n\n        assertTrue(open.hasObservers());\n        assertTrue(close.hasObservers());\n\n        to.dispose();\n\n        \r\n        assertFalse(open.hasObservers());\n        \r\n        assertTrue(close.hasObservers());\n    }\n","date":"2019-12-17 17:19:08","endLine":229,"groupId":"9166","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/02116cd99ec3143950dad11fdbb8d47529deff.src","preCode":"    public void unsubscribeAll() {\n        PublishSubject<Integer> source = PublishSubject.create();\n\n        PublishSubject<Integer> open = PublishSubject.create();\n        final PublishSubject<Integer> close = PublishSubject.create();\n\n        TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>();\n\n        source.window(open, new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Observable<Integer>>() {\n            @Override\n            public void accept(Observable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(to);\n\n        open.onNext(1);\n\n        assertTrue(open.hasObservers());\n        assertTrue(close.hasObservers());\n\n        to.dispose();\n\n        \r\n        assertFalse(open.hasObservers());\n        \r\n        assertTrue(close.hasObservers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void unsubscribeAll() {\n        PublishProcessor<Integer> source = PublishProcessor.create();\n\n        PublishProcessor<Integer> open = PublishProcessor.create();\n        final PublishProcessor<Integer> close = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<>();\n\n        source.window(open, new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Flowable<Integer>>() {\n            @Override\n            public void accept(Flowable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(ts);\n\n        open.onNext(1);\n\n        assertTrue(open.hasSubscribers());\n        assertTrue(close.hasSubscribers());\n\n        ts.cancel();\n\n        \r\n        assertFalse(open.hasSubscribers());\n        \r\n        assertTrue(close.hasSubscribers());\n    }\n","date":"2019-12-22 18:39:23","endLine":227,"groupId":"983","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/55/db25f654030911d342b24289648a1617f3e05d.src","preCode":"    public void unsubscribeAll() {\n        PublishProcessor<Integer> source = PublishProcessor.create();\n\n        PublishProcessor<Integer> open = PublishProcessor.create();\n        final PublishProcessor<Integer> close = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<Flowable<Integer>>();\n\n        source.window(open, new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Flowable<Integer>>() {\n            @Override\n            public void accept(Flowable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(ts);\n\n        open.onNext(1);\n\n        assertTrue(open.hasSubscribers());\n        assertTrue(close.hasSubscribers());\n\n        ts.cancel();\n\n        \r\n        assertFalse(open.hasSubscribers());\n        \r\n        assertTrue(close.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void unsubscribeAll() {\n        PublishSubject<Integer> source = PublishSubject.create();\n\n        PublishSubject<Integer> open = PublishSubject.create();\n        final PublishSubject<Integer> close = PublishSubject.create();\n\n        TestObserver<Observable<Integer>> to = new TestObserver<>();\n\n        source.window(open, new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Observable<Integer>>() {\n            @Override\n            public void accept(Observable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(to);\n\n        open.onNext(1);\n\n        assertTrue(open.hasObservers());\n        assertTrue(close.hasObservers());\n\n        to.dispose();\n\n        \r\n        assertFalse(open.hasObservers());\n        \r\n        assertTrue(close.hasObservers());\n    }\n","date":"2019-12-22 18:59:44","endLine":229,"groupId":"102028","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0c/7dc8056ba95845df9c6f2f5260efaf347e1aa4.src","preCode":"    public void unsubscribeAll() {\n        PublishSubject<Integer> source = PublishSubject.create();\n\n        PublishSubject<Integer> open = PublishSubject.create();\n        final PublishSubject<Integer> close = PublishSubject.create();\n\n        TestObserver<Observable<Integer>> to = new TestObserver<Observable<Integer>>();\n\n        source.window(open, new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Observable<Integer>>() {\n            @Override\n            public void accept(Observable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(to);\n\n        open.onNext(1);\n\n        assertTrue(open.hasObservers());\n        assertTrue(close.hasObservers());\n\n        to.dispose();\n\n        \r\n        assertFalse(open.hasObservers());\n        \r\n        assertTrue(close.hasObservers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithStartEndObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void unsubscribeAll() {\n        PublishProcessor<Integer> source = PublishProcessor.create();\n\n        PublishProcessor<Integer> open = PublishProcessor.create();\n        final PublishProcessor<Integer> close = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<>();\n\n        source.window(open, new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Flowable<Integer>>() {\n            @Override\n            public void accept(Flowable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(ts);\n\n        open.onNext(1);\n\n        assertTrue(open.hasSubscribers());\n        assertTrue(close.hasSubscribers());\n\n        ts.cancel();\n\n        \r\n        assertFalse(open.hasSubscribers());\n        \r\n        assertTrue(close.hasSubscribers());\n    }\n","date":"2019-12-22 18:39:23","endLine":227,"groupId":"102028","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/55/db25f654030911d342b24289648a1617f3e05d.src","preCode":"    public void unsubscribeAll() {\n        PublishProcessor<Integer> source = PublishProcessor.create();\n\n        PublishProcessor<Integer> open = PublishProcessor.create();\n        final PublishProcessor<Integer> close = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = new TestSubscriber<>();\n\n        source.window(open, new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t) {\n                return close;\n            }\n        })\n        .doOnNext(new Consumer<Flowable<Integer>>() {\n            @Override\n            public void accept(Flowable<Integer> w) throws Throwable {\n                w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n            }\n        })\n        .subscribe(ts);\n\n        open.onNext(1);\n\n        assertTrue(open.hasSubscribers());\n        assertTrue(close.hasSubscribers());\n\n        ts.cancel();\n\n        \r\n        assertFalse(open.hasSubscribers());\n        \r\n        assertTrue(close.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithStartEndFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
