[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<Integer>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Observable<Integer> o = Observable.range(1, list.size());\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        o.subscribe(to);\n\n        to.assertValueSequence(list);\n        to.assertTerminated();\n    }\n","date":"2019-08-16 20:51:17","endLine":110,"groupId":"9276","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"noBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2f/9374ad5a64819ceb6d20e8ba7833e4e11b631e.src","preCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<Integer>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Observable<Integer> o = Observable.range(1, list.size());\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        o.subscribe(to);\n\n        to.assertValueSequence(list);\n        to.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRangeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<Integer>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Flowable<Integer> f = Flowable.range(1, list.size());\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0L);\n\n        ts.assertNoValues();\n        ts.request(Long.MAX_VALUE); \r\n\n        f.subscribe(ts);\n\n        ts.assertValueSequence(list);\n        ts.assertTerminated();\n    }\n","date":"2019-08-16 20:51:17","endLine":138,"groupId":"5104","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"noBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a8/d42213c9e7790336927bcceff662beb155f253.src","preCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<Integer>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Flowable<Integer> f = Flowable.range(1, list.size());\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0L);\n\n        ts.assertNoValues();\n        ts.request(Long.MAX_VALUE); \r\n\n        f.subscribe(ts);\n\n        ts.assertValueSequence(list);\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRangeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<Integer>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Observable<Integer> o = Observable.range(1, list.size());\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        o.subscribe(to);\n\n        to.assertValueSequence(list);\n        to.assertTerminated();\n    }\n","date":"2019-08-16 20:51:17","endLine":110,"groupId":"9276","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"noBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2f/9374ad5a64819ceb6d20e8ba7833e4e11b631e.src","preCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<Integer>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Observable<Integer> o = Observable.range(1, list.size());\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        o.subscribe(to);\n\n        to.assertValueSequence(list);\n        to.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRangeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Flowable<Integer> f = Flowable.range(1, list.size());\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0L);\n\n        ts.assertNoValues();\n        ts.request(Long.MAX_VALUE); \r\n\n        f.subscribe(ts);\n\n        ts.assertValueSequence(list);\n        ts.assertTerminated();\n    }\n","date":"2019-12-22 18:39:23","endLine":138,"groupId":"5104","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"noBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/39/ab84ad63de93522116172a8298ec588c37726c.src","preCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<Integer>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Flowable<Integer> f = Flowable.range(1, list.size());\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0L);\n\n        ts.assertNoValues();\n        ts.request(Long.MAX_VALUE); \r\n\n        f.subscribe(ts);\n\n        ts.assertValueSequence(list);\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRangeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Observable<Integer> o = Observable.range(1, list.size());\n\n        TestObserverEx<Integer> to = new TestObserverEx<>();\n\n        o.subscribe(to);\n\n        to.assertValueSequence(list);\n        to.assertTerminated();\n    }\n","date":"2019-12-22 18:59:44","endLine":110,"groupId":"105692","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"noBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e7/89b55093c55a52bbf01db744927be0a53d23d6.src","preCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<Integer>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Observable<Integer> o = Observable.range(1, list.size());\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        o.subscribe(to);\n\n        to.assertValueSequence(list);\n        to.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRangeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Flowable<Integer> f = Flowable.range(1, list.size());\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0L);\n\n        ts.assertNoValues();\n        ts.request(Long.MAX_VALUE); \r\n\n        f.subscribe(ts);\n\n        ts.assertValueSequence(list);\n        ts.assertTerminated();\n    }\n","date":"2019-12-22 18:39:23","endLine":138,"groupId":"105692","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"noBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/39/ab84ad63de93522116172a8298ec588c37726c.src","preCode":"    public void noBackpressure() {\n        ArrayList<Integer> list = new ArrayList<>(Flowable.bufferSize() * 2);\n        for (int i = 1; i <= Flowable.bufferSize() * 2 + 1; i++) {\n            list.add(i);\n        }\n\n        Flowable<Integer> f = Flowable.range(1, list.size());\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0L);\n\n        ts.assertNoValues();\n        ts.request(Long.MAX_VALUE); \r\n\n        f.subscribe(ts);\n\n        ts.assertValueSequence(list);\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRangeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
