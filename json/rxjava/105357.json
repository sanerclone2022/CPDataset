[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Observable<Long> cached = source.replay().autoConnect();\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserverEx<Long>> list = new ArrayList<TestObserverEx<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserverEx<Long> to = new TestObserverEx<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserverEx<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1023,"groupId":"12687","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e1/c0bf6f8c72da0eba6ff2a796813c00c6d576fe.src","preCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Observable<Long> cached = source.replay().autoConnect();\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserverEx<Long>> list = new ArrayList<TestObserverEx<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserverEx<Long> to = new TestObserverEx<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserverEx<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":990,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Flowable<Long> cached = source.replay().autoConnect();\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);\n\n        List<TestSubscriberEx<Long>> list = new ArrayList<TestSubscriberEx<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriberEx<Long> ts = new TestSubscriberEx<Long>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriberEx<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1034,"groupId":"11296","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b8/a7ba3e9d68c8c3b833fc9119e2c2d1d2a766db.src","preCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Flowable<Long> cached = source.replay().autoConnect();\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);\n\n        List<TestSubscriberEx<Long>> list = new ArrayList<TestSubscriberEx<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriberEx<Long> ts = new TestSubscriberEx<Long>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriberEx<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1001,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Observable<Long> cached = source.replay().autoConnect();\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserverEx<Long>> list = new ArrayList<TestObserverEx<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserverEx<Long> to = new TestObserverEx<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserverEx<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1023,"groupId":"12687","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e1/c0bf6f8c72da0eba6ff2a796813c00c6d576fe.src","preCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Observable<Long> cached = source.replay().autoConnect();\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserverEx<Long>> list = new ArrayList<TestObserverEx<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserverEx<Long> to = new TestObserverEx<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserverEx<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":990,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Flowable<Long> cached = source.replay().autoConnect();\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);\n\n        List<TestSubscriberEx<Long>> list = new ArrayList<>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriberEx<Long> ts = new TestSubscriberEx<>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriberEx<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":1034,"groupId":"11296","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/763fce0b9a18eb3c241128915b6ca3ffe87597.src","preCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Flowable<Long> cached = source.replay().autoConnect();\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);\n\n        List<TestSubscriberEx<Long>> list = new ArrayList<TestSubscriberEx<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriberEx<Long> ts = new TestSubscriberEx<Long>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriberEx<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1001,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Observable<Long> cached = source.replay().autoConnect();\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserverEx<Long>> list = new ArrayList<>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserverEx<Long> to = new TestObserverEx<>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserverEx<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":1023,"groupId":"105357","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fe/2c59d088b76f0f51aa0c5547202c92e190e659.src","preCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Observable<Long> cached = source.replay().autoConnect();\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserverEx<Long>> list = new ArrayList<TestObserverEx<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserverEx<Long> to = new TestObserverEx<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserverEx<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":990,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Flowable<Long> cached = source.replay().autoConnect();\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);\n\n        List<TestSubscriberEx<Long>> list = new ArrayList<>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriberEx<Long> ts = new TestSubscriberEx<>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriberEx<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":1034,"groupId":"105357","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/763fce0b9a18eb3c241128915b6ca3ffe87597.src","preCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        Flowable<Long> cached = source.replay().autoConnect();\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation(), false, 1024);\n\n        List<TestSubscriberEx<Long>> list = new ArrayList<>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriberEx<Long> ts = new TestSubscriberEx<>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriberEx<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertTerminated();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1001,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
