[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposables.empty());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedObservable<Integer, Integer>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","date":"2019-08-16 20:51:17","endLine":948,"groupId":"6416","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"groupsWithNestedObserveOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposables.empty());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedObservable<Integer, Integer>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":902,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","date":"2019-08-16 20:51:17","endLine":955,"groupId":"6416","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"groupsWithNestedObserveOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":909,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposable.empty());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedObservable<Integer, Integer>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","date":"2019-12-20 02:39:40","endLine":950,"groupId":"6416","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"groupsWithNestedObserveOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/af76cda815824554eb565ba74f759a34755749.src","preCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposables.empty());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedObservable<Integer, Integer>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":904,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","date":"2019-08-16 20:51:17","endLine":955,"groupId":"6416","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"groupsWithNestedObserveOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":909,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposable.empty());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedObservable<Integer, Integer>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","date":"2019-12-20 02:39:40","endLine":950,"groupId":"6416","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"groupsWithNestedObserveOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/af76cda815824554eb565ba74f759a34755749.src","preCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposable.empty());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedObservable<Integer, Integer>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":904,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<>();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","date":"2019-12-22 18:39:23","endLine":958,"groupId":"6416","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"groupsWithNestedObserveOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":912,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<>();\n        Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposable.empty());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedObservable<Integer, Integer>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","date":"2019-12-22 18:59:44","endLine":950,"groupId":"102905","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"groupsWithNestedObserveOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/d3f2d6432c67ffdd0df5bbb6960b138ae6f15a.src","preCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<String>();\n        Observable.unsafeCreate(new ObservableSource<Integer>() {\n\n            @Override\n            public void subscribe(Observer<? super Integer> sub) {\n                sub.onSubscribe(Disposable.empty());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedObservable<Integer, Integer>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":904,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<>();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","date":"2019-12-22 18:39:23","endLine":958,"groupId":"102905","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"groupsWithNestedObserveOn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void groupsWithNestedObserveOn() throws InterruptedException {\n        final ArrayList<String> results = new ArrayList<>();\n        Flowable.unsafeCreate(new Publisher<Integer>() {\n\n            @Override\n            public void subscribe(Subscriber<? super Integer> sub) {\n                sub.onSubscribe(new BooleanSubscription());\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onNext(1);\n                sub.onNext(2);\n                sub.onComplete();\n            }\n\n        }).groupBy(new Function<Integer, Integer>() {\n\n            @Override\n            public Integer apply(Integer t) {\n                return t;\n            }\n\n        }).flatMap(new Function<GroupedFlowable<Integer, Integer>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, Integer> group) {\n                return group.observeOn(Schedulers.newThread()).delay(400, TimeUnit.MILLISECONDS).map(new Function<Integer, String>() {\n\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"first groups: \" + t1;\n                    }\n\n                });\n            }\n\n        }).blockingForEach(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                results.add(s);\n            }\n\n        });\n\n        System.out.println(\"Results: \" + results);\n        assertEquals(4, results.size());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":912,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
