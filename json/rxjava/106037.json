[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<Integer>(true);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<Integer>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n    }\n","date":"2019-08-16 20:51:17","endLine":760,"groupId":"5153","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"boundedReplayBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d1/7526e47b1a0bf164ed6e2248c17db718d21651.src","preCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<Integer>(true);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<Integer>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<Integer>(false);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<Integer>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n\n    }\n","date":"2019-08-16 20:51:17","endLine":761,"groupId":"5153","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"boundedReplayBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b8/a7ba3e9d68c8c3b833fc9119e2c2d1d2a766db.src","preCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<Integer>(false);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<Integer>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<>(true);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n    }\n","date":"2019-12-22 18:39:23","endLine":760,"groupId":"5153","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"boundedReplayBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f2/63b98f6699b9366523e26e1da3cd1a840e3081.src","preCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<Integer>(true);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<Integer>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<>(false);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n\n    }\n","date":"2019-12-22 18:39:23","endLine":761,"groupId":"5153","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"boundedReplayBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/763fce0b9a18eb3c241128915b6ca3ffe87597.src","preCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<Integer>(false);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<Integer>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2020-02-12 23:26:52","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<Integer>(true) {\n            private static final long serialVersionUID = -9081211580719235896L;\n\n            @Override\n            void truncate() {\n            }\n        };\n\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n    }\n","date":"2020-02-12 23:26:52","endLine":767,"groupId":"106037","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"boundedReplayBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ce/2cf5a5649e4e98a24b223069cc4411a6abc990.src","preCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<>(true);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"},{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<Integer>(false) {\n            private static final long serialVersionUID = -9081211580719235896L;\n\n            @Override\n            void truncate() {\n            }\n        };\n\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n\n    }\n","date":"2020-02-12 23:26:52","endLine":771,"groupId":"106037","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"boundedReplayBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e1/51dd07f1c62db4f0cbfe98e514f53fc2e6141b.src","preCode":"    public void boundedReplayBuffer() {\n        BoundedReplayBuffer<Integer> buf = new BoundedReplayBuffer<>(false);\n        buf.addLast(new Node(1, 0));\n        buf.addLast(new Node(2, 1));\n        buf.addLast(new Node(3, 2));\n        buf.addLast(new Node(4, 3));\n        buf.addLast(new Node(5, 4));\n\n        List<Integer> values = new ArrayList<>();\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(1, 2, 3, 4, 5), values);\n\n        buf.removeSome(2);\n        buf.removeFirst();\n        buf.removeSome(2);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        buf.addLast(new Node(5, 5));\n        buf.addLast(new Node(6, 6));\n        buf.collect(values);\n\n        Assert.assertEquals(Arrays.asList(5, 6), values);\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":737,"status":"M"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
