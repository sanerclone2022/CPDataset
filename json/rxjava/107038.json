[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void cancelWhileRunning() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        FutureTask<Object> ft = new FutureTask<Object>(new Runnable() {\n            @Override\n            public void run() {\n                to.dispose();\n            }\n        }, null);\n\n        Schedulers.single().scheduleDirect(ft, 100, TimeUnit.MILLISECONDS);\n\n        Maybe.fromFuture(ft)\n        .subscribeWith(to)\n        .assertEmpty();\n\n        assertTrue(to.isDisposed());\n    }\n","date":"2019-08-16 20:51:17","endLine":85,"groupId":"2510","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelWhileRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/ed2f9b3534f92425d713652e9d95c59a402385.src","preCode":"    public void cancelWhileRunning() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        FutureTask<Object> ft = new FutureTask<Object>(new Runnable() {\n            @Override\n            public void run() {\n                to.dispose();\n            }\n        }, null);\n\n        Schedulers.single().scheduleDirect(ft, 100, TimeUnit.MILLISECONDS);\n\n        Maybe.fromFuture(ft)\n        .subscribeWith(to)\n        .assertEmpty();\n\n        assertTrue(to.isDisposed());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFromFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void futureNull() {\n        FutureTask<Object> ft = new FutureTask<Object>(new Runnable() {\n            @Override\n            public void run() {\n            }\n        }, null);\n\n        Schedulers.single().scheduleDirect(ft, 100, TimeUnit.MILLISECONDS);\n\n        Maybe.fromFuture(ft)\n        .test()\n        .assertResult();\n    }\n","date":"2019-08-16 20:51:17","endLine":121,"groupId":"2511","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"futureNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/ed2f9b3534f92425d713652e9d95c59a402385.src","preCode":"    public void futureNull() {\n        FutureTask<Object> ft = new FutureTask<Object>(new Runnable() {\n            @Override\n            public void run() {\n            }\n        }, null);\n\n        Schedulers.single().scheduleDirect(ft, 100, TimeUnit.MILLISECONDS);\n\n        Maybe.fromFuture(ft)\n        .test()\n        .assertResult();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFromFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:23","codes":[{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void cancelWhileRunning() {\n        final TestObserver<Object> to = new TestObserver<>();\n\n        FutureTask<Object> ft = new FutureTask<>(new Runnable() {\n            @Override\n            public void run() {\n                to.dispose();\n            }\n        }, null);\n\n        Schedulers.single().scheduleDirect(ft, 100, TimeUnit.MILLISECONDS);\n\n        Maybe.fromFuture(ft)\n        .subscribeWith(to)\n        .assertEmpty();\n\n        assertTrue(to.isDisposed());\n    }\n","date":"2019-12-22 19:17:23","endLine":85,"groupId":"107038","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelWhileRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/98/ea62255e0132619f6127b8ecd41b58b29a7a7e.src","preCode":"    public void cancelWhileRunning() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        FutureTask<Object> ft = new FutureTask<Object>(new Runnable() {\n            @Override\n            public void run() {\n                to.dispose();\n            }\n        }, null);\n\n        Schedulers.single().scheduleDirect(ft, 100, TimeUnit.MILLISECONDS);\n\n        Maybe.fromFuture(ft)\n        .subscribeWith(to)\n        .assertEmpty();\n\n        assertTrue(to.isDisposed());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFromFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void futureNull() {\n        FutureTask<Object> ft = new FutureTask<>(new Runnable() {\n            @Override\n            public void run() {\n            }\n        }, null);\n\n        Schedulers.single().scheduleDirect(ft, 100, TimeUnit.MILLISECONDS);\n\n        Maybe.fromFuture(ft)\n        .test()\n        .assertResult();\n    }\n","date":"2019-12-22 19:17:23","endLine":121,"groupId":"107038","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"futureNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/98/ea62255e0132619f6127b8ecd41b58b29a7a7e.src","preCode":"    public void futureNull() {\n        FutureTask<Object> ft = new FutureTask<Object>(new Runnable() {\n            @Override\n            public void run() {\n            }\n        }, null);\n\n        Schedulers.single().scheduleDirect(ft, 100, TimeUnit.MILLISECONDS);\n\n        Maybe.fromFuture(ft)\n        .test()\n        .assertResult();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFromFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"75da4b504a52466b455a49a342747514fa0dffab","commitMessage":"@@@Diamond operators in tests (#6788)\n\n* diamond operators in unit tests.  small packages in internal/\n\n* diamond operators in unit tests.  small packages in internal/operators\n","date":"2019-12-22 19:17:23","modifiedFileCount":"92","status":"M","submitter":"Dmitry Volkov"}]
