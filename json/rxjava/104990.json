[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badSource() {\n        TestHelper.checkBadSourceObservable(new Function<Observable<Integer>, Object>() {\n            @Override\n            public Object apply(Observable<Integer> o) throws Exception {\n                return o.collect(new Supplier<List<Integer>>() {\n                    @Override\n                    public List<Integer> get() throws Exception {\n                        return new ArrayList<Integer>();\n                    }\n                }, new BiConsumer<List<Integer>, Integer>() {\n                    @Override\n                    public void accept(List<Integer> a, Integer b) throws Exception {\n                        a.add(b);\n                    }\n                }).toObservable();\n            }\n        }, false, 1, 2, Arrays.asList(1));\n    }\n","date":"2019-08-16 20:51:17","endLine":365,"groupId":"11213","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"badSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e3/1a2299becfca4d7528e69d6b32d0baf1881b84.src","preCode":"    public void badSource() {\n        TestHelper.checkBadSourceObservable(new Function<Observable<Integer>, Object>() {\n            @Override\n            public Object apply(Observable<Integer> o) throws Exception {\n                return o.collect(new Supplier<List<Integer>>() {\n                    @Override\n                    public List<Integer> get() throws Exception {\n                        return new ArrayList<Integer>();\n                    }\n                }, new BiConsumer<List<Integer>, Integer>() {\n                    @Override\n                    public void accept(List<Integer> a, Integer b) throws Exception {\n                        a.add(b);\n                    }\n                }).toObservable();\n            }\n        }, false, 1, 2, Arrays.asList(1));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void subscriberCount() {\n        ParallelFlowableTest.checkSubscriberCount(Flowable.range(1, 5).parallel()\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n            }\n        }));\n    }\n","date":"2019-08-16 20:51:17","endLine":46,"groupId":"11213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscriberCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/04/4c429d6cf9747e7fc1209cb376cdddcdad7cef.src","preCode":"    public void subscriberCount() {\n        ParallelFlowableTest.checkSubscriberCount(Flowable.range(1, 5).parallel()\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n            }\n        }));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void badSource() {\n        TestHelper.checkBadSourceObservable(new Function<Observable<Integer>, Object>() {\n            @Override\n            public Object apply(Observable<Integer> o) throws Exception {\n                return o.collect(new Supplier<List<Integer>>() {\n                    @Override\n                    public List<Integer> get() throws Exception {\n                        return new ArrayList<>();\n                    }\n                }, new BiConsumer<List<Integer>, Integer>() {\n                    @Override\n                    public void accept(List<Integer> a, Integer b) throws Exception {\n                        a.add(b);\n                    }\n                }).toObservable();\n            }\n        }, false, 1, 2, Arrays.asList(1));\n    }\n","date":"2019-12-22 18:59:44","endLine":365,"groupId":"11213","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"badSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d2/8bd20e97ffb2058a19b22c7dcbf8c2ee40d769.src","preCode":"    public void badSource() {\n        TestHelper.checkBadSourceObservable(new Function<Observable<Integer>, Object>() {\n            @Override\n            public Object apply(Observable<Integer> o) throws Exception {\n                return o.collect(new Supplier<List<Integer>>() {\n                    @Override\n                    public List<Integer> get() throws Exception {\n                        return new ArrayList<Integer>();\n                    }\n                }, new BiConsumer<List<Integer>, Integer>() {\n                    @Override\n                    public void accept(List<Integer> a, Integer b) throws Exception {\n                        a.add(b);\n                    }\n                }).toObservable();\n            }\n        }, false, 1, 2, Arrays.asList(1));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void subscriberCount() {\n        ParallelFlowableTest.checkSubscriberCount(Flowable.range(1, 5).parallel()\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n            }\n        }));\n    }\n","date":"2019-08-16 20:51:17","endLine":46,"groupId":"11213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscriberCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/04/4c429d6cf9747e7fc1209cb376cdddcdad7cef.src","preCode":"    public void subscriberCount() {\n        ParallelFlowableTest.checkSubscriberCount(Flowable.range(1, 5).parallel()\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n            }\n        }));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void badSource() {\n        TestHelper.checkBadSourceObservable(new Function<Observable<Integer>, Object>() {\n            @Override\n            public Object apply(Observable<Integer> o) throws Exception {\n                return o.collect(new Supplier<List<Integer>>() {\n                    @Override\n                    public List<Integer> get() throws Exception {\n                        return new ArrayList<>();\n                    }\n                }, new BiConsumer<List<Integer>, Integer>() {\n                    @Override\n                    public void accept(List<Integer> a, Integer b) throws Exception {\n                        a.add(b);\n                    }\n                }).toObservable();\n            }\n        }, false, 1, 2, Arrays.asList(1));\n    }\n","date":"2019-12-22 18:59:44","endLine":365,"groupId":"104990","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"badSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d2/8bd20e97ffb2058a19b22c7dcbf8c2ee40d769.src","preCode":"    public void badSource() {\n        TestHelper.checkBadSourceObservable(new Function<Observable<Integer>, Object>() {\n            @Override\n            public Object apply(Observable<Integer> o) throws Exception {\n                return o.collect(new Supplier<List<Integer>>() {\n                    @Override\n                    public List<Integer> get() throws Exception {\n                        return new ArrayList<>();\n                    }\n                }, new BiConsumer<List<Integer>, Integer>() {\n                    @Override\n                    public void accept(List<Integer> a, Integer b) throws Exception {\n                        a.add(b);\n                    }\n                }).toObservable();\n            }\n        }, false, 1, 2, Arrays.asList(1));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"N"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void subscriberCount() {\n        ParallelFlowableTest.checkSubscriberCount(Flowable.range(1, 5).parallel()\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n            }\n        }));\n    }\n","date":"2019-12-22 19:17:37","endLine":46,"groupId":"104990","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscriberCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/d5af8628e33979306e033e3f1b6bb0c12a743a.src","preCode":"    public void subscriberCount() {\n        ParallelFlowableTest.checkSubscriberCount(Flowable.range(1, 5).parallel()\n        .collect(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<Integer>();\n            }\n        }, new BiConsumer<List<Integer>, Integer>() {\n            @Override\n            public void accept(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n            }\n        }));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
