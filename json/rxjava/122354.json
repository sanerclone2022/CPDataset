[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Observer<? super Long> observer) {\n            final AtomicBoolean terminate = new AtomicBoolean(false);\n            observer.onSubscribe(Disposables.fromRunnable(new Runnable() {\n                @Override\n                public void run() {\n                        terminate.set(true);\n                        active.decrementAndGet();\n                }\n            }));\n            efforts.getAndIncrement();\n            active.getAndIncrement();\n            maxActive.set(Math.max(active.get(), maxActive.get()));\n            final Thread thread = new Thread(context) {\n                @Override\n                public void run() {\n                    long nr = 0;\n                    try {\n                        while (!terminate.get()) {\n                            Thread.sleep(emitDelay);\n                            if (nextBeforeFailure.getAndDecrement() > 0) {\n                                observer.onNext(nr++);\n                            } else {\n                                active.decrementAndGet();\n                                observer.onError(new RuntimeException(\"expected-failed\"));\n                                break;\n                            }\n                        }\n                    } catch (InterruptedException t) {\n                    }\n                }\n            };\n            thread.start();\n        }\n","date":"2019-08-16 20:51:17","endLine":572,"groupId":"8968","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superLong>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/377c742c77d0f71be68a43c5e61734117ad6c6.src","preCode":"        public void subscribe(final Observer<? super Long> observer) {\n            final AtomicBoolean terminate = new AtomicBoolean(false);\n            observer.onSubscribe(Disposables.fromRunnable(new Runnable() {\n                @Override\n                public void run() {\n                        terminate.set(true);\n                        active.decrementAndGet();\n                }\n            }));\n            efforts.getAndIncrement();\n            active.getAndIncrement();\n            maxActive.set(Math.max(active.get(), maxActive.get()));\n            final Thread thread = new Thread(context) {\n                @Override\n                public void run() {\n                    long nr = 0;\n                    try {\n                        while (!terminate.get()) {\n                            Thread.sleep(emitDelay);\n                            if (nextBeforeFailure.getAndDecrement() > 0) {\n                                observer.onNext(nr++);\n                            } else {\n                                active.decrementAndGet();\n                                observer.onError(new RuntimeException(\"expected-failed\"));\n                                break;\n                            }\n                        }\n                    } catch (InterruptedException t) {\n                    }\n                }\n            };\n            thread.start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Subscriber<? super Long> subscriber) {\n            final AtomicBoolean terminate = new AtomicBoolean(false);\n            subscriber.onSubscribe(new Subscription() {\n                @Override\n                public void request(long n) {\n                    \r\n\n                }\n\n                @Override\n                public void cancel() {\n                    terminate.set(true);\n                    active.decrementAndGet();\n                }\n            });\n            efforts.getAndIncrement();\n            active.getAndIncrement();\n            maxActive.set(Math.max(active.get(), maxActive.get()));\n            final Thread thread = new Thread(context) {\n                @Override\n                public void run() {\n                    long nr = 0;\n                    try {\n                        while (!terminate.get()) {\n                            Thread.sleep(emitDelay);\n                            if (nextBeforeFailure.getAndDecrement() > 0) {\n                                subscriber.onNext(nr++);\n                            } else {\n                                active.decrementAndGet();\n                                subscriber.onError(new RuntimeException(\"expected-failed\"));\n                                break;\n                            }\n                        }\n                    } catch (InterruptedException t) {\n                    }\n                }\n            };\n            thread.start();\n        }\n","date":"2019-08-16 20:51:17","endLine":621,"groupId":"8968","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalSubscriber<?superLong>subscriber)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/6b37be8498fd805faa5ed1fcc2721995dd4e60.src","preCode":"        public void subscribe(final Subscriber<? super Long> subscriber) {\n            final AtomicBoolean terminate = new AtomicBoolean(false);\n            subscriber.onSubscribe(new Subscription() {\n                @Override\n                public void request(long n) {\n                    \r\n\n                }\n\n                @Override\n                public void cancel() {\n                    terminate.set(true);\n                    active.decrementAndGet();\n                }\n            });\n            efforts.getAndIncrement();\n            active.getAndIncrement();\n            maxActive.set(Math.max(active.get(), maxActive.get()));\n            final Thread thread = new Thread(context) {\n                @Override\n                public void run() {\n                    long nr = 0;\n                    try {\n                        while (!terminate.get()) {\n                            Thread.sleep(emitDelay);\n                            if (nextBeforeFailure.getAndDecrement() > 0) {\n                                subscriber.onNext(nr++);\n                            } else {\n                                active.decrementAndGet();\n                                subscriber.onError(new RuntimeException(\"expected-failed\"));\n                                break;\n                            }\n                        }\n                    } catch (InterruptedException t) {\n                    }\n                }\n            };\n            thread.start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"        public void subscribe(final Observer<? super Long> observer) {\n            final AtomicBoolean terminate = new AtomicBoolean(false);\n            observer.onSubscribe(Disposable.fromRunnable(new Runnable() {\n                @Override\n                public void run() {\n                        terminate.set(true);\n                        active.decrementAndGet();\n                }\n            }));\n            efforts.getAndIncrement();\n            active.getAndIncrement();\n            maxActive.set(Math.max(active.get(), maxActive.get()));\n            final Thread thread = new Thread(context) {\n                @Override\n                public void run() {\n                    long nr = 0;\n                    try {\n                        while (!terminate.get()) {\n                            Thread.sleep(emitDelay);\n                            if (nextBeforeFailure.getAndDecrement() > 0) {\n                                observer.onNext(nr++);\n                            } else {\n                                active.decrementAndGet();\n                                observer.onError(new RuntimeException(\"expected-failed\"));\n                                break;\n                            }\n                        }\n                    } catch (InterruptedException t) {\n                    }\n                }\n            };\n            thread.start();\n        }\n","date":"2019-12-20 02:39:40","endLine":572,"groupId":"122354","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superLong>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/d96dc5d7b83880f95273c37765c05c13afd27a.src","preCode":"        public void subscribe(final Observer<? super Long> observer) {\n            final AtomicBoolean terminate = new AtomicBoolean(false);\n            observer.onSubscribe(Disposables.fromRunnable(new Runnable() {\n                @Override\n                public void run() {\n                        terminate.set(true);\n                        active.decrementAndGet();\n                }\n            }));\n            efforts.getAndIncrement();\n            active.getAndIncrement();\n            maxActive.set(Math.max(active.get(), maxActive.get()));\n            final Thread thread = new Thread(context) {\n                @Override\n                public void run() {\n                    long nr = 0;\n                    try {\n                        while (!terminate.get()) {\n                            Thread.sleep(emitDelay);\n                            if (nextBeforeFailure.getAndDecrement() > 0) {\n                                observer.onNext(nr++);\n                            } else {\n                                active.decrementAndGet();\n                                observer.onError(new RuntimeException(\"expected-failed\"));\n                                break;\n                            }\n                        }\n                    } catch (InterruptedException t) {\n                    }\n                }\n            };\n            thread.start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        public void subscribe(final Subscriber<? super Long> subscriber) {\n            final AtomicBoolean terminate = new AtomicBoolean(false);\n            subscriber.onSubscribe(new Subscription() {\n                @Override\n                public void request(long n) {\n                    \r\n\n                }\n\n                @Override\n                public void cancel() {\n                    terminate.set(true);\n                    active.decrementAndGet();\n                }\n            });\n            efforts.getAndIncrement();\n            active.getAndIncrement();\n            maxActive.set(Math.max(active.get(), maxActive.get()));\n            final Thread thread = new Thread(context) {\n                @Override\n                public void run() {\n                    long nr = 0;\n                    try {\n                        while (!terminate.get()) {\n                            Thread.sleep(emitDelay);\n                            if (nextBeforeFailure.getAndDecrement() > 0) {\n                                subscriber.onNext(nr++);\n                            } else {\n                                active.decrementAndGet();\n                                subscriber.onError(new RuntimeException(\"expected-failed\"));\n                                break;\n                            }\n                        }\n                    } catch (InterruptedException t) {\n                    }\n                }\n            };\n            thread.start();\n        }\n","date":"2019-08-16 20:51:17","endLine":621,"groupId":"122354","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalSubscriber<?superLong>subscriber)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/6b37be8498fd805faa5ed1fcc2721995dd4e60.src","preCode":"        public void subscribe(final Subscriber<? super Long> subscriber) {\n            final AtomicBoolean terminate = new AtomicBoolean(false);\n            subscriber.onSubscribe(new Subscription() {\n                @Override\n                public void request(long n) {\n                    \r\n\n                }\n\n                @Override\n                public void cancel() {\n                    terminate.set(true);\n                    active.decrementAndGet();\n                }\n            });\n            efforts.getAndIncrement();\n            active.getAndIncrement();\n            maxActive.set(Math.max(active.get(), maxActive.get()));\n            final Thread thread = new Thread(context) {\n                @Override\n                public void run() {\n                    long nr = 0;\n                    try {\n                        while (!terminate.get()) {\n                            Thread.sleep(emitDelay);\n                            if (nextBeforeFailure.getAndDecrement() > 0) {\n                                subscriber.onNext(nr++);\n                            } else {\n                                active.decrementAndGet();\n                                subscriber.onError(new RuntimeException(\"expected-failed\"));\n                                break;\n                            }\n                        }\n                    } catch (InterruptedException t) {\n                    }\n                }\n            };\n            thread.start();\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
