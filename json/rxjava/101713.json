[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    void remove(BehaviorDisposable<T> rs) {\n        for (;;) {\n            BehaviorDisposable<T>[] a = subscribers.get();\n            int len = a.length;\n            if (len == 0) {\n                return;\n            }\n            int j = -1;\n            for (int i = 0; i < len; i++) {\n                if (a[i] == rs) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            BehaviorDisposable<T>[] b;\n            if (len == 1) {\n                b = EMPTY;\n            } else {\n                b = new BehaviorDisposable[len - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, len - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":392,"groupId":"12417","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"remove","params":"(BehaviorDisposable<T>rs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f8/f4bb3848400610542c03a57acbb4591f03decb.src","preCode":"    void remove(BehaviorDisposable<T> rs) {\n        for (;;) {\n            BehaviorDisposable<T>[] a = subscribers.get();\n            int len = a.length;\n            if (len == 0) {\n                return;\n            }\n            int j = -1;\n            for (int i = 0; i < len; i++) {\n                if (a[i] == rs) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            BehaviorDisposable<T>[] b;\n            if (len == 1) {\n                b = EMPTY;\n            } else {\n                b = new BehaviorDisposable[len - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, len - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subjects/BehaviorSubject.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    void remove(ReplaySubscription<T> rs) {\n        for (;;) {\n            ReplaySubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n            int len = a.length;\n            int j = -1;\n            for (int i = 0; i < len; i++) {\n                if (a[i] == rs) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            ReplaySubscription<T>[] b;\n            if (len == 1) {\n                b = EMPTY;\n            } else {\n                b = new ReplaySubscription[len - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, len - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":553,"groupId":"10121","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(ReplaySubscription<T>rs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/98/8ff4418da943e0583847d21efa116fae6d428a.src","preCode":"    void remove(ReplaySubscription<T> rs) {\n        for (;;) {\n            ReplaySubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n            int len = a.length;\n            int j = -1;\n            for (int i = 0; i < len; i++) {\n                if (a[i] == rs) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            ReplaySubscription<T>[] b;\n            if (len == 1) {\n                b = EMPTY;\n            } else {\n                b = new ReplaySubscription[len - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, len - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/processors/ReplayProcessor.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":2,"curCode":"    void remove(BehaviorDisposable<T> rs) {\n        for (;;) {\n            BehaviorDisposable<T>[] a = observers.get();\n            int len = a.length;\n            if (len == 0) {\n                return;\n            }\n            int j = -1;\n            for (int i = 0; i < len; i++) {\n                if (a[i] == rs) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            BehaviorDisposable<T>[] b;\n            if (len == 1) {\n                b = EMPTY;\n            } else {\n                b = new BehaviorDisposable[len - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, len - j - 1);\n            }\n            if (observers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n","date":"2020-02-12 23:26:52","endLine":391,"groupId":"101713","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"remove","params":"(BehaviorDisposable<T>rs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/61/cf92cba381375e3fecd11fd69291171f7abf0f.src","preCode":"    void remove(BehaviorDisposable<T> rs) {\n        for (;;) {\n            BehaviorDisposable<T>[] a = subscribers.get();\n            int len = a.length;\n            if (len == 0) {\n                return;\n            }\n            int j = -1;\n            for (int i = 0; i < len; i++) {\n                if (a[i] == rs) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            BehaviorDisposable<T>[] b;\n            if (len == 1) {\n                b = EMPTY;\n            } else {\n                b = new BehaviorDisposable[len - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, len - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/subjects/BehaviorSubject.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    void remove(ReplaySubscription<T> rs) {\n        for (;;) {\n            ReplaySubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n            int len = a.length;\n            int j = -1;\n            for (int i = 0; i < len; i++) {\n                if (a[i] == rs) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            ReplaySubscription<T>[] b;\n            if (len == 1) {\n                b = EMPTY;\n            } else {\n                b = new ReplaySubscription[len - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, len - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":553,"groupId":"101713","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(ReplaySubscription<T>rs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/98/8ff4418da943e0583847d21efa116fae6d428a.src","preCode":"    void remove(ReplaySubscription<T> rs) {\n        for (;;) {\n            ReplaySubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n            int len = a.length;\n            int j = -1;\n            for (int i = 0; i < len; i++) {\n                if (a[i] == rs) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            ReplaySubscription<T>[] b;\n            if (len == 1) {\n                b = EMPTY;\n            } else {\n                b = new ReplaySubscription[len - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, len - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/processors/ReplayProcessor.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"N"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
