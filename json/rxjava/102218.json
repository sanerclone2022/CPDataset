[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void switchWhenInnerCompleteBeforeOuter() {\n        Observable<Observable<String>> source = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n            @Override\n            public void subscribe(Observer<? super Observable<String>> outerObserver) {\n                outerObserver.onSubscribe(Disposables.empty());\n                publishNext(outerObserver, 10, Observable.unsafeCreate(new ObservableSource<String>() {\n                    @Override\n                    public void subscribe(Observer<? super String> innerObserver) {\n                        innerObserver.onSubscribe(Disposables.empty());\n                        publishNext(innerObserver, 0, \"one\");\n                        publishNext(innerObserver, 10, \"two\");\n                        publishCompleted(innerObserver, 20);\n                    }\n                }));\n\n                publishNext(outerObserver, 100, Observable.unsafeCreate(new ObservableSource<String>() {\n                    @Override\n                    public void subscribe(Observer<? super String> innerObserver) {\n                        innerObserver.onSubscribe(Disposables.empty());\n                        publishNext(innerObserver, 0, \"three\");\n                        publishNext(innerObserver, 10, \"four\");\n                        publishCompleted(innerObserver, 20);\n                    }\n                }));\n                publishCompleted(outerObserver, 200);\n            }\n        });\n\n        Observable<String> sampled = Observable.switchOnNext(source);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(150, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onComplete();\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n\n        scheduler.advanceTimeTo(250, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(anyString());\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":128,"groupId":"10418","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"switchWhenInnerCompleteBeforeOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/dabeeea333224355dd83e4bbb36c28484b4352.src","preCode":"    public void switchWhenInnerCompleteBeforeOuter() {\n        Observable<Observable<String>> source = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n            @Override\n            public void subscribe(Observer<? super Observable<String>> outerObserver) {\n                outerObserver.onSubscribe(Disposables.empty());\n                publishNext(outerObserver, 10, Observable.unsafeCreate(new ObservableSource<String>() {\n                    @Override\n                    public void subscribe(Observer<? super String> innerObserver) {\n                        innerObserver.onSubscribe(Disposables.empty());\n                        publishNext(innerObserver, 0, \"one\");\n                        publishNext(innerObserver, 10, \"two\");\n                        publishCompleted(innerObserver, 20);\n                    }\n                }));\n\n                publishNext(outerObserver, 100, Observable.unsafeCreate(new ObservableSource<String>() {\n                    @Override\n                    public void subscribe(Observer<? super String> innerObserver) {\n                        innerObserver.onSubscribe(Disposables.empty());\n                        publishNext(innerObserver, 0, \"three\");\n                        publishNext(innerObserver, 10, \"four\");\n                        publishCompleted(innerObserver, 20);\n                    }\n                }));\n                publishCompleted(outerObserver, 200);\n            }\n        });\n\n        Observable<String> sampled = Observable.switchOnNext(source);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(150, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onComplete();\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n\n        scheduler.advanceTimeTo(250, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(anyString());\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void switchWhenInnerCompleteBeforeOuter() {\n        Flowable<Flowable<String>> source = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n            @Override\n            public void subscribe(Subscriber<? super Flowable<String>> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                publishNext(subscriber, 10, Flowable.unsafeCreate(new Publisher<String>() {\n                    @Override\n                    public void subscribe(Subscriber<? super String> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        publishNext(subscriber, 0, \"one\");\n                        publishNext(subscriber, 10, \"two\");\n                        publishCompleted(subscriber, 20);\n                    }\n                }));\n\n                publishNext(subscriber, 100, Flowable.unsafeCreate(new Publisher<String>() {\n                    @Override\n                    public void subscribe(Subscriber<? super String> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        publishNext(subscriber, 0, \"three\");\n                        publishNext(subscriber, 10, \"four\");\n                        publishCompleted(subscriber, 20);\n                    }\n                }));\n                publishCompleted(subscriber, 200);\n            }\n        });\n\n        Flowable<String> sampled = Flowable.switchOnNext(source);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(150, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onComplete();\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n\n        scheduler.advanceTimeTo(250, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(anyString());\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":126,"groupId":"10418","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"switchWhenInnerCompleteBeforeOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/832135991c0e343b95e1644ae803d91a62f3e6.src","preCode":"    public void switchWhenInnerCompleteBeforeOuter() {\n        Flowable<Flowable<String>> source = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n            @Override\n            public void subscribe(Subscriber<? super Flowable<String>> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                publishNext(subscriber, 10, Flowable.unsafeCreate(new Publisher<String>() {\n                    @Override\n                    public void subscribe(Subscriber<? super String> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        publishNext(subscriber, 0, \"one\");\n                        publishNext(subscriber, 10, \"two\");\n                        publishCompleted(subscriber, 20);\n                    }\n                }));\n\n                publishNext(subscriber, 100, Flowable.unsafeCreate(new Publisher<String>() {\n                    @Override\n                    public void subscribe(Subscriber<? super String> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        publishNext(subscriber, 0, \"three\");\n                        publishNext(subscriber, 10, \"four\");\n                        publishCompleted(subscriber, 20);\n                    }\n                }));\n                publishCompleted(subscriber, 200);\n            }\n        });\n\n        Flowable<String> sampled = Flowable.switchOnNext(source);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(150, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onComplete();\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n\n        scheduler.advanceTimeTo(250, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(anyString());\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void switchWhenInnerCompleteBeforeOuter() {\n        Observable<Observable<String>> source = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n            @Override\n            public void subscribe(Observer<? super Observable<String>> outerObserver) {\n                outerObserver.onSubscribe(Disposable.empty());\n                publishNext(outerObserver, 10, Observable.unsafeCreate(new ObservableSource<String>() {\n                    @Override\n                    public void subscribe(Observer<? super String> innerObserver) {\n                        innerObserver.onSubscribe(Disposable.empty());\n                        publishNext(innerObserver, 0, \"one\");\n                        publishNext(innerObserver, 10, \"two\");\n                        publishCompleted(innerObserver, 20);\n                    }\n                }));\n\n                publishNext(outerObserver, 100, Observable.unsafeCreate(new ObservableSource<String>() {\n                    @Override\n                    public void subscribe(Observer<? super String> innerObserver) {\n                        innerObserver.onSubscribe(Disposable.empty());\n                        publishNext(innerObserver, 0, \"three\");\n                        publishNext(innerObserver, 10, \"four\");\n                        publishCompleted(innerObserver, 20);\n                    }\n                }));\n                publishCompleted(outerObserver, 200);\n            }\n        });\n\n        Observable<String> sampled = Observable.switchOnNext(source);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(150, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onComplete();\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n\n        scheduler.advanceTimeTo(250, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(anyString());\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","date":"2019-12-20 02:39:40","endLine":128,"groupId":"102218","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"switchWhenInnerCompleteBeforeOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5e/b40104fc91e81826d46af4c53c83ff608a7600.src","preCode":"    public void switchWhenInnerCompleteBeforeOuter() {\n        Observable<Observable<String>> source = Observable.unsafeCreate(new ObservableSource<Observable<String>>() {\n            @Override\n            public void subscribe(Observer<? super Observable<String>> outerObserver) {\n                outerObserver.onSubscribe(Disposables.empty());\n                publishNext(outerObserver, 10, Observable.unsafeCreate(new ObservableSource<String>() {\n                    @Override\n                    public void subscribe(Observer<? super String> innerObserver) {\n                        innerObserver.onSubscribe(Disposables.empty());\n                        publishNext(innerObserver, 0, \"one\");\n                        publishNext(innerObserver, 10, \"two\");\n                        publishCompleted(innerObserver, 20);\n                    }\n                }));\n\n                publishNext(outerObserver, 100, Observable.unsafeCreate(new ObservableSource<String>() {\n                    @Override\n                    public void subscribe(Observer<? super String> innerObserver) {\n                        innerObserver.onSubscribe(Disposables.empty());\n                        publishNext(innerObserver, 0, \"three\");\n                        publishNext(innerObserver, 10, \"four\");\n                        publishCompleted(innerObserver, 20);\n                    }\n                }));\n                publishCompleted(outerObserver, 200);\n            }\n        });\n\n        Observable<String> sampled = Observable.switchOnNext(source);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(150, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onComplete();\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n\n        scheduler.advanceTimeTo(250, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, never()).onNext(anyString());\n        inOrder.verify(observer, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void switchWhenInnerCompleteBeforeOuter() {\n        Flowable<Flowable<String>> source = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n            @Override\n            public void subscribe(Subscriber<? super Flowable<String>> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                publishNext(subscriber, 10, Flowable.unsafeCreate(new Publisher<String>() {\n                    @Override\n                    public void subscribe(Subscriber<? super String> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        publishNext(subscriber, 0, \"one\");\n                        publishNext(subscriber, 10, \"two\");\n                        publishCompleted(subscriber, 20);\n                    }\n                }));\n\n                publishNext(subscriber, 100, Flowable.unsafeCreate(new Publisher<String>() {\n                    @Override\n                    public void subscribe(Subscriber<? super String> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        publishNext(subscriber, 0, \"three\");\n                        publishNext(subscriber, 10, \"four\");\n                        publishCompleted(subscriber, 20);\n                    }\n                }));\n                publishCompleted(subscriber, 200);\n            }\n        });\n\n        Flowable<String> sampled = Flowable.switchOnNext(source);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(150, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onComplete();\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n\n        scheduler.advanceTimeTo(250, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(anyString());\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":126,"groupId":"102218","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"switchWhenInnerCompleteBeforeOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/832135991c0e343b95e1644ae803d91a62f3e6.src","preCode":"    public void switchWhenInnerCompleteBeforeOuter() {\n        Flowable<Flowable<String>> source = Flowable.unsafeCreate(new Publisher<Flowable<String>>() {\n            @Override\n            public void subscribe(Subscriber<? super Flowable<String>> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                publishNext(subscriber, 10, Flowable.unsafeCreate(new Publisher<String>() {\n                    @Override\n                    public void subscribe(Subscriber<? super String> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        publishNext(subscriber, 0, \"one\");\n                        publishNext(subscriber, 10, \"two\");\n                        publishCompleted(subscriber, 20);\n                    }\n                }));\n\n                publishNext(subscriber, 100, Flowable.unsafeCreate(new Publisher<String>() {\n                    @Override\n                    public void subscribe(Subscriber<? super String> subscriber) {\n                        subscriber.onSubscribe(new BooleanSubscription());\n                        publishNext(subscriber, 0, \"three\");\n                        publishNext(subscriber, 10, \"four\");\n                        publishCompleted(subscriber, 20);\n                    }\n                }));\n                publishCompleted(subscriber, 200);\n            }\n        });\n\n        Flowable<String> sampled = Flowable.switchOnNext(source);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(150, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onComplete();\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n\n        scheduler.advanceTimeTo(250, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, never()).onNext(anyString());\n        inOrder.verify(subscriber, times(1)).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
