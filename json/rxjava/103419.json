[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    void dispose(List<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        for (Disposable o : set) {\n            try {\n                o.dispose();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                if (errors == null) {\n                    errors = new ArrayList<Throwable>();\n                }\n                errors.add(ex);\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":186,"groupId":"4533","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"dispose","params":"(List<Disposable>set)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/233577b22e5e814fd7a0017ff08fac607f691d.src","preCode":"    void dispose(List<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        for (Disposable o : set) {\n            try {\n                o.dispose();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                if (errors == null) {\n                    errors = new ArrayList<Throwable>();\n                }\n                errors.add(ex);\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/disposables/ListCompositeDisposable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    void dispose(OpenHashSet<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        Object[] array = set.keys();\n        for (Object o : array) {\n            if (o instanceof Disposable) {\n                try {\n                    ((Disposable) o).dispose();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    if (errors == null) {\n                        errors = new ArrayList<Throwable>();\n                    }\n                    errors.add(ex);\n                }\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":256,"groupId":"4533","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"dispose","params":"(OpenHashSet<Disposable>set)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2d/35b8d6be94f4be9c329d537920e70ee02ab65d.src","preCode":"    void dispose(OpenHashSet<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        Object[] array = set.keys();\n        for (Object o : array) {\n            if (o instanceof Disposable) {\n                try {\n                    ((Disposable) o).dispose();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    if (errors == null) {\n                        errors = new ArrayList<Throwable>();\n                    }\n                    errors.add(ex);\n                }\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/disposables/CompositeDisposable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-26 06:52:13","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    void dispose(List<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        for (Disposable o : set) {\n            try {\n                o.dispose();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                if (errors == null) {\n                    errors = new ArrayList<Throwable>();\n                }\n                errors.add(ex);\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":186,"groupId":"4533","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"dispose","params":"(List<Disposable>set)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/233577b22e5e814fd7a0017ff08fac607f691d.src","preCode":"    void dispose(List<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        for (Disposable o : set) {\n            try {\n                o.dispose();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                if (errors == null) {\n                    errors = new ArrayList<Throwable>();\n                }\n                errors.add(ex);\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/disposables/ListCompositeDisposable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"},{"authorDate":"2019-12-26 06:52:13","commitOrder":2,"curCode":"    void dispose(OpenHashSet<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        Object[] array = set.keys();\n        for (Object o : array) {\n            if (o instanceof Disposable) {\n                try {\n                    ((Disposable) o).dispose();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    if (errors == null) {\n                        errors = new ArrayList<>();\n                    }\n                    errors.add(ex);\n                }\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","date":"2019-12-26 06:52:13","endLine":254,"groupId":"9790","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"dispose","params":"(OpenHashSet<Disposable>set)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ea/f067c1777ffee5844dbf7744edefb5f1a86402.src","preCode":"    void dispose(OpenHashSet<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        Object[] array = set.keys();\n        for (Object o : array) {\n            if (o instanceof Disposable) {\n                try {\n                    ((Disposable) o).dispose();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    if (errors == null) {\n                        errors = new ArrayList<Throwable>();\n                    }\n                    errors.add(ex);\n                }\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/disposables/CompositeDisposable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"480889c58d3b762b073ef80229bf27f9d9429dd7","commitMessage":"@@@3.x: Add missing annotations.  fix many diamonds (#6795)\n\n* 3.x: Add missing annotations.  fix many diamonds\n\n* Fix accidental JDK 9 API usage\n\n* Fix NPE in unicast due to null-cleanup\n","date":"2019-12-26 06:52:13","modifiedFileCount":"52","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-26 06:52:13","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":3,"curCode":"    void dispose(List<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        for (Disposable o : set) {\n            try {\n                o.dispose();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                if (errors == null) {\n                    errors = new ArrayList<>();\n                }\n                errors.add(ex);\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","date":"2019-12-28 03:01:34","endLine":185,"groupId":"9790","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"dispose","params":"(List<Disposable>set)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8a/6d4dd9923198bc839931ec5cd7532538a3b1cf.src","preCode":"    void dispose(List<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        for (Disposable o : set) {\n            try {\n                o.dispose();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                if (errors == null) {\n                    errors = new ArrayList<Throwable>();\n                }\n                errors.add(ex);\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/disposables/ListCompositeDisposable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2019-12-26 06:52:13","commitOrder":3,"curCode":"    void dispose(OpenHashSet<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        Object[] array = set.keys();\n        for (Object o : array) {\n            if (o instanceof Disposable) {\n                try {\n                    ((Disposable) o).dispose();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    if (errors == null) {\n                        errors = new ArrayList<>();\n                    }\n                    errors.add(ex);\n                }\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","date":"2019-12-26 06:52:13","endLine":254,"groupId":"9790","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"dispose","params":"(OpenHashSet<Disposable>set)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ea/f067c1777ffee5844dbf7744edefb5f1a86402.src","preCode":"    void dispose(OpenHashSet<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        Object[] array = set.keys();\n        for (Object o : array) {\n            if (o instanceof Disposable) {\n                try {\n                    ((Disposable) o).dispose();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    if (errors == null) {\n                        errors = new ArrayList<>();\n                    }\n                    errors.add(ex);\n                }\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/disposables/CompositeDisposable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-11 19:24:55","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":4,"curCode":"    void dispose(List<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        for (Disposable o : set) {\n            try {\n                o.dispose();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                if (errors == null) {\n                    errors = new ArrayList<>();\n                }\n                errors.add(ex);\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","date":"2019-12-28 03:01:34","endLine":185,"groupId":"103419","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"dispose","params":"(List<Disposable>set)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8a/6d4dd9923198bc839931ec5cd7532538a3b1cf.src","preCode":"    void dispose(List<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        for (Disposable o : set) {\n            try {\n                o.dispose();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                if (errors == null) {\n                    errors = new ArrayList<>();\n                }\n                errors.add(ex);\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/disposables/ListCompositeDisposable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"N"},{"authorDate":"2020-01-11 19:24:55","commitOrder":4,"curCode":"    void dispose(@Nullable OpenHashSet<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        Object[] array = set.keys();\n        for (Object o : array) {\n            if (o instanceof Disposable) {\n                try {\n                    ((Disposable) o).dispose();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    if (errors == null) {\n                        errors = new ArrayList<>();\n                    }\n                    errors.add(ex);\n                }\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","date":"2020-01-11 19:24:55","endLine":256,"groupId":"103419","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"dispose","params":"(@NullableOpenHashSet<Disposable>set)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f8/77dc13810b155df802fb62e007fa767e724e9f.src","preCode":"    void dispose(OpenHashSet<Disposable> set) {\n        if (set == null) {\n            return;\n        }\n        List<Throwable> errors = null;\n        Object[] array = set.keys();\n        for (Object o : array) {\n            if (o instanceof Disposable) {\n                try {\n                    ((Disposable) o).dispose();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    if (errors == null) {\n                        errors = new ArrayList<>();\n                    }\n                    errors.add(ex);\n                }\n            }\n        }\n        if (errors != null) {\n            if (errors.size() == 1) {\n                throw ExceptionHelper.wrapOrThrow(errors.get(0));\n            }\n            throw new CompositeException(errors);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/disposables/CompositeDisposable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"c67263fffe26a0c4970fd34789766fb18a7411a8","commitMessage":"@@@3.x: Cleanup javadoc for parameter validation all around (#6835)\n\n* 3.x: Cleanup javadoc for parameter validation all around\n\n* More cleanup\n\n* Last set of intended changes\n","date":"2020-01-11 19:24:55","modifiedFileCount":"20","status":"M","submitter":"David Karnok"}]
