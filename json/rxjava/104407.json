[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestObserverEx<Integer> observer = new TestObserverEx<Integer>();\n\n        Observable.merge(\n                Observable.just(1),\n                Observable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(observer);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        observer.assertValue(2);\n        observer.assertTerminated();\n        observer.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":303,"groupId":"9081","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"debounceWithTimeBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d6/6de923f84dee61c0f6aa64c46a1884ff8ac1ec.src","preCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestObserverEx<Integer> observer = new TestObserverEx<Integer>();\n\n        Observable.merge(\n                Observable.just(1),\n                Observable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(observer);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        observer.assertValue(2);\n        observer.assertTerminated();\n        observer.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<Integer>();\n        Flowable.merge(\n                Flowable.just(1),\n                Flowable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(subscriber);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        subscriber.assertValue(2);\n        subscriber.assertTerminated();\n        subscriber.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":303,"groupId":"9081","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"debounceWithTimeBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/ae8ef6543ca6ec2c21ebcf22a4d8efc828178c.src","preCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<Integer>();\n        Flowable.merge(\n                Flowable.just(1),\n                Flowable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(subscriber);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        subscriber.assertValue(2);\n        subscriber.assertTerminated();\n        subscriber.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestObserverEx<Integer> observer = new TestObserverEx<Integer>();\n\n        Observable.merge(\n                Observable.just(1),\n                Observable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(observer);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        observer.assertValue(2);\n        observer.assertTerminated();\n        observer.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":303,"groupId":"9081","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"debounceWithTimeBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d6/6de923f84dee61c0f6aa64c46a1884ff8ac1ec.src","preCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestObserverEx<Integer> observer = new TestObserverEx<Integer>();\n\n        Observable.merge(\n                Observable.just(1),\n                Observable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(observer);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        observer.assertValue(2);\n        observer.assertTerminated();\n        observer.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<>();\n        Flowable.merge(\n                Flowable.just(1),\n                Flowable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(subscriber);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        subscriber.assertValue(2);\n        subscriber.assertTerminated();\n        subscriber.assertNoErrors();\n    }\n","date":"2019-12-22 18:39:23","endLine":303,"groupId":"9081","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"debounceWithTimeBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bf/b33f0e8e2f78180436cfe177365ea6d5236703.src","preCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<Integer>();\n        Flowable.merge(\n                Flowable.just(1),\n                Flowable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(subscriber);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        subscriber.assertValue(2);\n        subscriber.assertTerminated();\n        subscriber.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestObserverEx<Integer> observer = new TestObserverEx<>();\n\n        Observable.merge(\n                Observable.just(1),\n                Observable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(observer);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        observer.assertValue(2);\n        observer.assertTerminated();\n        observer.assertNoErrors();\n    }\n","date":"2019-12-22 18:59:44","endLine":303,"groupId":"104407","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"debounceWithTimeBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d5/9431a6775abe63c090e2dfee48f7a28a6a4c9a.src","preCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestObserverEx<Integer> observer = new TestObserverEx<Integer>();\n\n        Observable.merge(\n                Observable.just(1),\n                Observable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(observer);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        observer.assertValue(2);\n        observer.assertTerminated();\n        observer.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<>();\n        Flowable.merge(\n                Flowable.just(1),\n                Flowable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(subscriber);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        subscriber.assertValue(2);\n        subscriber.assertTerminated();\n        subscriber.assertNoErrors();\n    }\n","date":"2019-12-22 18:39:23","endLine":303,"groupId":"104407","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"debounceWithTimeBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bf/b33f0e8e2f78180436cfe177365ea6d5236703.src","preCode":"    public void debounceWithTimeBackpressure() throws InterruptedException {\n        TestScheduler scheduler = new TestScheduler();\n        TestSubscriberEx<Integer> subscriber = new TestSubscriberEx<>();\n        Flowable.merge(\n                Flowable.just(1),\n                Flowable.just(2).delay(10, TimeUnit.MILLISECONDS, scheduler)\n        ).debounce(20, TimeUnit.MILLISECONDS, scheduler).take(1).subscribe(subscriber);\n\n        scheduler.advanceTimeBy(30, TimeUnit.MILLISECONDS);\n\n        subscriber.assertValue(2);\n        subscriber.assertTerminated();\n        subscriber.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDebounceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
