[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Observable<Long> timer = Observable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestObserver<Long> to = new TestObserver<Long>();\n\n        Observable.combineLatest(timer, Observable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(to);\n\n        if (!latch.await(SIZE + 1000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":770,"groupId":"8439","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"withCombineLatestIssue1717","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bb/27338d843fdf8ea09e0e1c117cee59cfb5c7b6.src","preCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Observable<Long> timer = Observable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestObserver<Long> to = new TestObserver<Long>();\n\n        Observable.combineLatest(timer, Observable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(to);\n\n        if (!latch.await(SIZE + 1000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":740,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Flowable<Long> timer = Flowable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestSubscriber<Long> ts = new TestSubscriber<Long>();\n\n        Flowable.combineLatest(timer, Flowable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(ts);\n\n        if (!latch.await(SIZE + 2000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":801,"groupId":"8139","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"withCombineLatestIssue1717","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bb/ffd97ee457fba272e7ee1c19226e6ba9b1aa23.src","preCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Flowable<Long> timer = Flowable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestSubscriber<Long> ts = new TestSubscriber<Long>();\n\n        Flowable.combineLatest(timer, Flowable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(ts);\n\n        if (!latch.await(SIZE + 2000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":771,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Observable<Long> timer = Observable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestObserver<Long> to = new TestObserver<Long>();\n\n        Observable.combineLatest(timer, Observable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(to);\n\n        if (!latch.await(SIZE + 1000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":770,"groupId":"8439","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"withCombineLatestIssue1717","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bb/27338d843fdf8ea09e0e1c117cee59cfb5c7b6.src","preCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Observable<Long> timer = Observable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestObserver<Long> to = new TestObserver<Long>();\n\n        Observable.combineLatest(timer, Observable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(to);\n\n        if (!latch.await(SIZE + 1000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":740,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Flowable<Long> timer = Flowable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestSubscriber<Long> ts = new TestSubscriber<>();\n\n        Flowable.combineLatest(timer, Flowable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(ts);\n\n        if (!latch.await(SIZE + 2000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":801,"groupId":"3564","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"withCombineLatestIssue1717","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8e/d819713817eec94b29a3d993b09d2ae9ddaccf.src","preCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Flowable<Long> timer = Flowable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestSubscriber<Long> ts = new TestSubscriber<Long>();\n\n        Flowable.combineLatest(timer, Flowable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(ts);\n\n        if (!latch.await(SIZE + 2000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":771,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Observable<Long> timer = Observable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestObserver<Long> to = new TestObserver<>();\n\n        Observable.combineLatest(timer, Observable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(to);\n\n        if (!latch.await(SIZE + 1000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","date":"2019-12-22 18:59:44","endLine":770,"groupId":"105562","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"withCombineLatestIssue1717","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/f93d422237de286dd33973d34106ea7632b396.src","preCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Observable<Long> timer = Observable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestObserver<Long> to = new TestObserver<Long>();\n\n        Observable.combineLatest(timer, Observable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(to);\n\n        if (!latch.await(SIZE + 1000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":740,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Flowable<Long> timer = Flowable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestSubscriber<Long> ts = new TestSubscriber<>();\n\n        Flowable.combineLatest(timer, Flowable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(ts);\n\n        if (!latch.await(SIZE + 2000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":801,"groupId":"105562","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"withCombineLatestIssue1717","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8e/d819713817eec94b29a3d993b09d2ae9ddaccf.src","preCode":"    public void withCombineLatestIssue1717() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final AtomicInteger count = new AtomicInteger();\n        final int SIZE = 2000;\n        Flowable<Long> timer = Flowable.interval(0, 1, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.newThread())\n                .doOnEach(new Consumer<Notification<Long>>() {\n                    @Override\n                    public void accept(Notification<Long> n) {\n                            \r\n                            if (count.incrementAndGet() >= SIZE) {\n                                latch.countDown();\n                            }\n                    }\n                }).take(SIZE);\n\n        TestSubscriber<Long> ts = new TestSubscriber<>();\n\n        Flowable.combineLatest(timer, Flowable.<Integer> never(), new BiFunction<Long, Integer, Long>() {\n            @Override\n            public Long apply(Long t1, Integer t2) {\n                return t1;\n            }\n        }).subscribe(ts);\n\n        if (!latch.await(SIZE + 2000, TimeUnit.MILLISECONDS)) {\n            fail(\"timed out\");\n        }\n\n        assertEquals(SIZE, count.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":771,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
