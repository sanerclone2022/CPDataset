[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void doesntRequestMoreThanNeededFromUpstream() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong();\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n            \r\n            .doOnRequest(new LongConsumer() {\n                @Override\n                public void accept(long n) {\n                    System.out.println(n);\n                    requests.addAndGet(n);\n            }})\n            \r\n            .take(2)\n            \r\n            .subscribe(ts);\n        Thread.sleep(50);\n        ts.request(1);\n        ts.request(1);\n        ts.request(1);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        ts.assertNoErrors();\n        assertEquals(3, requests.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":387,"groupId":"8724","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntRequestMoreThanNeededFromUpstream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7a/f0002bf7b2f0a51ec763510aa06861a392af7f.src","preCode":"    public void doesntRequestMoreThanNeededFromUpstream() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong();\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n            \r\n            .doOnRequest(new LongConsumer() {\n                @Override\n                public void accept(long n) {\n                    System.out.println(n);\n                    requests.addAndGet(n);\n            }})\n            \r\n            .take(2)\n            \r\n            .subscribe(ts);\n        Thread.sleep(50);\n        ts.request(1);\n        ts.request(1);\n        ts.request(1);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        ts.assertNoErrors();\n        assertEquals(3, requests.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void backpressureMultipleSmallAsyncRequests() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong(0);\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n                .doOnRequest(new LongConsumer() {\n                    @Override\n                    public void accept(long n) {\n                        requests.addAndGet(n);\n                    }\n                }).skip(4).subscribe(ts);\n        Thread.sleep(100);\n        ts.request(1);\n        ts.request(1);\n        Thread.sleep(100);\n        ts.cancel();\n        ts.assertNoErrors();\n        assertEquals(6, requests.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":161,"groupId":"5154","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureMultipleSmallAsyncRequests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/128e5889df3b13bcbbf9984b5c1c89b521494d.src","preCode":"    public void backpressureMultipleSmallAsyncRequests() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong(0);\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n                .doOnRequest(new LongConsumer() {\n                    @Override\n                    public void accept(long n) {\n                        requests.addAndGet(n);\n                    }\n                }).skip(4).subscribe(ts);\n        Thread.sleep(100);\n        ts.request(1);\n        ts.request(1);\n        Thread.sleep(100);\n        ts.cancel();\n        ts.assertNoErrors();\n        assertEquals(6, requests.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSkipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-09-13 19:53:16","commitOrder":2,"curCode":"    public void doesntRequestMoreThanNeededFromUpstream() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong();\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n            \r\n            .doOnRequest(new LongConsumer() {\n                @Override\n                public void accept(long n) {\n                    System.out.println(n);\n                    requests.addAndGet(n);\n            }})\n            \r\n            .take(2)\n            \r\n            .subscribe(ts);\n        Thread.sleep(50);\n        ts.request(1);\n        ts.request(1);\n        ts.request(1);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        ts.assertNoErrors();\n        assertEquals(2, requests.get());\n    }\n","date":"2019-09-13 19:53:16","endLine":408,"groupId":"8724","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntRequestMoreThanNeededFromUpstream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/85446438bbbf44ae03823230ee9def780a7fe8.src","preCode":"    public void doesntRequestMoreThanNeededFromUpstream() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong();\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n            \r\n            .doOnRequest(new LongConsumer() {\n                @Override\n                public void accept(long n) {\n                    System.out.println(n);\n                    requests.addAndGet(n);\n            }})\n            \r\n            .take(2)\n            \r\n            .subscribe(ts);\n        Thread.sleep(50);\n        ts.request(1);\n        ts.request(1);\n        ts.request(1);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        ts.assertNoErrors();\n        assertEquals(3, requests.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void backpressureMultipleSmallAsyncRequests() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong(0);\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n                .doOnRequest(new LongConsumer() {\n                    @Override\n                    public void accept(long n) {\n                        requests.addAndGet(n);\n                    }\n                }).skip(4).subscribe(ts);\n        Thread.sleep(100);\n        ts.request(1);\n        ts.request(1);\n        Thread.sleep(100);\n        ts.cancel();\n        ts.assertNoErrors();\n        assertEquals(6, requests.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":161,"groupId":"5154","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureMultipleSmallAsyncRequests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/128e5889df3b13bcbbf9984b5c1c89b521494d.src","preCode":"    public void backpressureMultipleSmallAsyncRequests() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong(0);\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n                .doOnRequest(new LongConsumer() {\n                    @Override\n                    public void accept(long n) {\n                        requests.addAndGet(n);\n                    }\n                }).skip(4).subscribe(ts);\n        Thread.sleep(100);\n        ts.request(1);\n        ts.request(1);\n        Thread.sleep(100);\n        ts.cancel();\n        ts.assertNoErrors();\n        assertEquals(6, requests.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSkipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"}],"commitId":"0c50f0ab1bcfe9bdb1c8cd13ef1dc214c405e580","commitMessage":"@@@3.x: constrain upstream requests from take (#6569) (#6650)\n\n","date":"2019-09-13 19:53:16","modifiedFileCount":"13","status":"M","submitter":"Dave Moten"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void doesntRequestMoreThanNeededFromUpstream() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong();\n        TestSubscriber<Long> ts = new TestSubscriber<>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n            \r\n            .doOnRequest(new LongConsumer() {\n                @Override\n                public void accept(long n) {\n                    System.out.println(n);\n                    requests.addAndGet(n);\n            }})\n            \r\n            .take(2)\n            \r\n            .subscribe(ts);\n        Thread.sleep(50);\n        ts.request(1);\n        ts.request(1);\n        ts.request(1);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        ts.assertNoErrors();\n        assertEquals(2, requests.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":408,"groupId":"105915","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doesntRequestMoreThanNeededFromUpstream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/9ea0725d83defa2d0597c60bf1cdd78f4a3c09.src","preCode":"    public void doesntRequestMoreThanNeededFromUpstream() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong();\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n            \r\n            .doOnRequest(new LongConsumer() {\n                @Override\n                public void accept(long n) {\n                    System.out.println(n);\n                    requests.addAndGet(n);\n            }})\n            \r\n            .take(2)\n            \r\n            .subscribe(ts);\n        Thread.sleep(50);\n        ts.request(1);\n        ts.request(1);\n        ts.request(1);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        ts.assertNoErrors();\n        assertEquals(2, requests.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTakeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void backpressureMultipleSmallAsyncRequests() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong(0);\n        TestSubscriber<Long> ts = new TestSubscriber<>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n                .doOnRequest(new LongConsumer() {\n                    @Override\n                    public void accept(long n) {\n                        requests.addAndGet(n);\n                    }\n                }).skip(4).subscribe(ts);\n        Thread.sleep(100);\n        ts.request(1);\n        ts.request(1);\n        Thread.sleep(100);\n        ts.cancel();\n        ts.assertNoErrors();\n        assertEquals(6, requests.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":161,"groupId":"105915","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"backpressureMultipleSmallAsyncRequests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/de/b672124a5dc2a8785dfdf30f30469d9e714df9.src","preCode":"    public void backpressureMultipleSmallAsyncRequests() throws InterruptedException {\n        final AtomicLong requests = new AtomicLong(0);\n        TestSubscriber<Long> ts = new TestSubscriber<Long>(0L);\n        Flowable.interval(100, TimeUnit.MILLISECONDS)\n                .doOnRequest(new LongConsumer() {\n                    @Override\n                    public void accept(long n) {\n                        requests.addAndGet(n);\n                    }\n                }).skip(4).subscribe(ts);\n        Thread.sleep(100);\n        ts.request(1);\n        ts.request(1);\n        Thread.sleep(100);\n        ts.cancel();\n        ts.assertNoErrors();\n        assertEquals(6, requests.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSkipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"}]
