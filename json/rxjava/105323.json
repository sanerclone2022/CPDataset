[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Observable<Long> longs = Observable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestObserver<Long>> subscribers = new ArrayList<TestObserver<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestObserver<Long> observer = new TestObserver<Long>();\n            longs.subscribe(observer);\n            subscriptions.add(observer);\n            subscribers.add(observer);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n            \r\n\r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":156,"groupId":"2895","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doOnUnSubscribeWorksWithRefCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c9/0105fb045927dd1435c1f5ea32894ec82526c4.src","preCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Observable<Long> longs = Observable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestObserver<Long>> subscribers = new ArrayList<TestObserver<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestObserver<Long> observer = new TestObserver<Long>();\n            longs.subscribe(observer);\n            subscriptions.add(observer);\n            subscribers.add(observer);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n            \r\n\r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnUnsubscribeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Flowable<Long> longs = Flowable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestSubscriber<Long>> subscribers = new ArrayList<TestSubscriber<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestSubscriber<Long> subscriber = new TestSubscriber<Long>();\n            longs.subscribe(subscriber);\n            subscriptions.add(Disposables.fromSubscription(subscriber));\n            subscribers.add(subscriber);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":151,"groupId":"7740","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doOnUnSubscribeWorksWithRefCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/34/0b3f22d911994763b4acafa6717fbdfa52684c.src","preCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Flowable<Long> longs = Flowable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestSubscriber<Long>> subscribers = new ArrayList<TestSubscriber<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestSubscriber<Long> subscriber = new TestSubscriber<Long>();\n            longs.subscribe(subscriber);\n            subscriptions.add(Disposables.fromSubscription(subscriber));\n            subscribers.add(subscriber);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnUnsubscribeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Observable<Long> longs = Observable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestObserver<Long>> subscribers = new ArrayList<TestObserver<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestObserver<Long> observer = new TestObserver<Long>();\n            longs.subscribe(observer);\n            subscriptions.add(observer);\n            subscribers.add(observer);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n            \r\n\r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":156,"groupId":"2895","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doOnUnSubscribeWorksWithRefCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c9/0105fb045927dd1435c1f5ea32894ec82526c4.src","preCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Observable<Long> longs = Observable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestObserver<Long>> subscribers = new ArrayList<TestObserver<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestObserver<Long> observer = new TestObserver<Long>();\n            longs.subscribe(observer);\n            subscriptions.add(observer);\n            subscribers.add(observer);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n            \r\n\r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnUnsubscribeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Flowable<Long> longs = Flowable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestSubscriber<Long>> subscribers = new ArrayList<TestSubscriber<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestSubscriber<Long> subscriber = new TestSubscriber<Long>();\n            longs.subscribe(subscriber);\n            subscriptions.add(Disposable.fromSubscription(subscriber));\n            subscribers.add(subscriber);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","date":"2019-12-20 02:39:40","endLine":151,"groupId":"7740","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doOnUnSubscribeWorksWithRefCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0a/37faae1e07b9fe84ee246bd9fd470245474a71.src","preCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Flowable<Long> longs = Flowable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestSubscriber<Long>> subscribers = new ArrayList<TestSubscriber<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestSubscriber<Long> subscriber = new TestSubscriber<Long>();\n            longs.subscribe(subscriber);\n            subscriptions.add(Disposables.fromSubscription(subscriber));\n            subscribers.add(subscriber);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnUnsubscribeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":3,"curCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Observable<Long> longs = Observable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestObserver<Long>> subscribers = new ArrayList<TestObserver<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestObserver<Long> observer = new TestObserver<Long>();\n            longs.subscribe(observer);\n            subscriptions.add(observer);\n            subscribers.add(observer);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n            \r\n\r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":156,"groupId":"2895","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doOnUnSubscribeWorksWithRefCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c9/0105fb045927dd1435c1f5ea32894ec82526c4.src","preCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Observable<Long> longs = Observable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestObserver<Long>> subscribers = new ArrayList<TestObserver<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestObserver<Long> observer = new TestObserver<Long>();\n            longs.subscribe(observer);\n            subscriptions.add(observer);\n            subscribers.add(observer);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n            \r\n\r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnUnsubscribeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Flowable<Long> longs = Flowable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<>();\n        List<TestSubscriber<Long>> subscribers = new ArrayList<>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestSubscriber<Long> subscriber = new TestSubscriber<>();\n            longs.subscribe(subscriber);\n            subscriptions.add(Disposable.fromSubscription(subscriber));\n            subscribers.add(subscriber);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":151,"groupId":"7740","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doOnUnSubscribeWorksWithRefCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ea/b0324ba85beeb7c77d7768ec2aca54384c0add.src","preCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Flowable<Long> longs = Flowable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestSubscriber<Long>> subscribers = new ArrayList<TestSubscriber<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestSubscriber<Long> subscriber = new TestSubscriber<Long>();\n            longs.subscribe(subscriber);\n            subscriptions.add(Disposable.fromSubscription(subscriber));\n            subscribers.add(subscriber);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnUnsubscribeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Observable<Long> longs = Observable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<>();\n        List<TestObserver<Long>> subscribers = new ArrayList<>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestObserver<Long> observer = new TestObserver<>();\n            longs.subscribe(observer);\n            subscriptions.add(observer);\n            subscribers.add(observer);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n            \r\n\r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","date":"2019-12-22 18:59:44","endLine":156,"groupId":"105323","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doOnUnSubscribeWorksWithRefCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a9/5f372d183504a9c9d965d6ea613fc41caf0672.src","preCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Observable<Long> longs = Observable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnDispose(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<Disposable>();\n        List<TestObserver<Long>> subscribers = new ArrayList<TestObserver<Long>>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestObserver<Long> observer = new TestObserver<Long>();\n            longs.subscribe(observer);\n            subscriptions.add(observer);\n            subscribers.add(observer);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n            \r\n\r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnUnsubscribeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Flowable<Long> longs = Flowable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<>();\n        List<TestSubscriber<Long>> subscribers = new ArrayList<>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestSubscriber<Long> subscriber = new TestSubscriber<>();\n            longs.subscribe(subscriber);\n            subscriptions.add(Disposable.fromSubscription(subscriber));\n            subscribers.add(subscriber);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","date":"2019-12-22 18:39:23","endLine":151,"groupId":"105323","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doOnUnSubscribeWorksWithRefCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ea/b0324ba85beeb7c77d7768ec2aca54384c0add.src","preCode":"    public void doOnUnSubscribeWorksWithRefCount() throws Exception {\n        int subCount = 3;\n        final CountDownLatch upperLatch = new CountDownLatch(1);\n        final CountDownLatch lowerLatch = new CountDownLatch(1);\n        final CountDownLatch onNextLatch = new CountDownLatch(subCount);\n\n        final AtomicInteger upperCount = new AtomicInteger();\n        final AtomicInteger lowerCount = new AtomicInteger();\n        Flowable<Long> longs = Flowable\n                \r\n                \r\n                .interval(50, TimeUnit.MILLISECONDS)\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            upperLatch.countDown();\n                            upperCount.incrementAndGet();\n                    }\n                })\n                .doOnNext(new Consumer<Long>() {\n                    @Override\n                    public void accept(Long aLong) {\n                            \r\n                            onNextLatch.countDown();\n                    }\n                })\n                .doOnCancel(new Action() {\n                    @Override\n                    public void run() {\n                        \r\n                            lowerLatch.countDown();\n                            lowerCount.incrementAndGet();\n                    }\n                })\n                .publish()\n                .refCount();\n\n        List<Disposable> subscriptions = new ArrayList<>();\n        List<TestSubscriber<Long>> subscribers = new ArrayList<>();\n\n        for (int i = 0; i < subCount; ++i) {\n            TestSubscriber<Long> subscriber = new TestSubscriber<>();\n            longs.subscribe(subscriber);\n            subscriptions.add(Disposable.fromSubscription(subscriber));\n            subscribers.add(subscriber);\n        }\n\n        onNextLatch.await();\n        for (int i = 0; i < subCount; ++i) {\n            subscriptions.get(i).dispose();\n            \r\n        }\n\n        upperLatch.await();\n        lowerLatch.await();\n        assertEquals(\"There should exactly 1 un-subscription events for upper stream\", 1, upperCount.get());\n        assertEquals(\"There should exactly 1 un-subscription events for lower stream\", 1, lowerCount.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnUnsubscribeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
