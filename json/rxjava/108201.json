[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":86,"groupId":"1504","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4f/693bd02c89c2de171b8b1d296289c8f30b77ea.src","preCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/TextualAorAn.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void checkAndUpdateLicenses() throws Exception {\n        if (System.getenv(\"CI\") != null) {\n            \r\n            return;\n        }\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/perf/java\")));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            if (!lines.get(0).equals(header[0]) && !lines.get(1).equals(header[1])) {\n                                fail.append(\"java.lang.RuntimeException: missing header added, refresh and re-run tests!\\r\\n\")\n                                .append(\" at \")\n                                ;\n\n                                String fn = u.toString().replace('\\\\', '/');\n\n                                int idx = fn.indexOf(\"io/reactivex/\");\n\n                                fn = fn.substring(idx).replace('/', '.').replace(\".java\", \"\");\n\n                                fail.append(fn).append(\" (\")\n                                ;\n\n                                int jdx = fn.lastIndexOf('.');\n\n                                fail.append(fn.substring(jdx + 1));\n\n                                fail.append(\".java:1)\\r\\n\\r\\n\");\n\n                                lines.addAll(0, Arrays.asList(header));\n\n                                PrintWriter w = new PrintWriter(new FileWriter(u));\n\n                                try {\n                                    for (String s : lines) {\n                                        w.println(s);\n                                    }\n                                } finally {\n                                    w.close();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":133,"groupId":"5608","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAndUpdateLicenses","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f0/69ec43cf88491199721a4c1379d73cab7f0b8e.src","preCode":"    public void checkAndUpdateLicenses() throws Exception {\n        if (System.getenv(\"CI\") != null) {\n            \r\n            return;\n        }\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/perf/java\")));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            if (!lines.get(0).equals(header[0]) && !lines.get(1).equals(header[1])) {\n                                fail.append(\"java.lang.RuntimeException: missing header added, refresh and re-run tests!\\r\\n\")\n                                .append(\" at \")\n                                ;\n\n                                String fn = u.toString().replace('\\\\', '/');\n\n                                int idx = fn.indexOf(\"io/reactivex/\");\n\n                                fn = fn.substring(idx).replace('/', '.').replace(\".java\", \"\");\n\n                                fail.append(fn).append(\" (\")\n                                ;\n\n                                int jdx = fn.lastIndexOf('.');\n\n                                fail.append(fn.substring(jdx + 1));\n\n                                fail.append(\".java:1)\\r\\n\\r\\n\");\n\n                                lines.addAll(0, Arrays.asList(header));\n\n                                PrintWriter w = new PrintWriter(new FileWriter(u));\n\n                                try {\n                                    for (String s : lines) {\n                                        w.println(s);\n                                    }\n                                } finally {\n                                    w.close();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/FixLicenseHeaders.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":86,"groupId":"791","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6a/ff9cc10e1c6ced7e5d98df8be72404dce81ef3.src","preCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/TextualAorAn.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void checkAndUpdateLicenses() throws Exception {\n        if (System.getenv(\"CI\") != null) {\n            \r\n            return;\n        }\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/perf/java\")));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            if (!lines.get(0).equals(header[0]) && !lines.get(1).equals(header[1])) {\n                                fail.append(\"java.lang.RuntimeException: missing header added, refresh and re-run tests!\\r\\n\")\n                                .append(\" at \")\n                                ;\n\n                                String fn = u.toString().replace('\\\\', '/');\n\n                                int idx = fn.indexOf(\"io/reactivex/\");\n\n                                fn = fn.substring(idx).replace('/', '.').replace(\".java\", \"\");\n\n                                fail.append(fn).append(\" (\")\n                                ;\n\n                                int jdx = fn.lastIndexOf('.');\n\n                                fail.append(fn.substring(jdx + 1));\n\n                                fail.append(\".java:1)\\r\\n\\r\\n\");\n\n                                lines.addAll(0, Arrays.asList(header));\n\n                                PrintWriter w = new PrintWriter(new FileWriter(u));\n\n                                try {\n                                    for (String s : lines) {\n                                        w.println(s);\n                                    }\n                                } finally {\n                                    w.close();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":133,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkAndUpdateLicenses","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/e601d017f2f2f13b42441fbf34f0b9efebd973.src","preCode":"    public void checkAndUpdateLicenses() throws Exception {\n        if (System.getenv(\"CI\") != null) {\n            \r\n            return;\n        }\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<File>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/perf/java\")));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<String>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            if (!lines.get(0).equals(header[0]) && !lines.get(1).equals(header[1])) {\n                                fail.append(\"java.lang.RuntimeException: missing header added, refresh and re-run tests!\\r\\n\")\n                                .append(\" at \")\n                                ;\n\n                                String fn = u.toString().replace('\\\\', '/');\n\n                                int idx = fn.indexOf(\"io/reactivex/\");\n\n                                fn = fn.substring(idx).replace('/', '.').replace(\".java\", \"\");\n\n                                fail.append(fn).append(\" (\")\n                                ;\n\n                                int jdx = fn.lastIndexOf('.');\n\n                                fail.append(fn.substring(jdx + 1));\n\n                                fail.append(\".java:1)\\r\\n\\r\\n\");\n\n                                lines.addAll(0, Arrays.asList(header));\n\n                                PrintWriter w = new PrintWriter(new FileWriter(u));\n\n                                try {\n                                    for (String s : lines) {\n                                        w.println(s);\n                                    }\n                                } finally {\n                                    w.close();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/FixLicenseHeaders.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2021-03-05 17:23:17","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":86,"groupId":"108201","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkFiles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6a/ff9cc10e1c6ced7e5d98df8be72404dce81ef3.src","preCode":"    public void checkFiles() throws Exception {\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n\r\n\r\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            String clazz = u.getAbsolutePath().replace('\\\\', '/');\n                            int idx = clazz.indexOf(\"/io/reactivex/\");\n                            clazz = clazz.substring(idx + 14).replace(\".java\", \"\");\n\n                            processFile(fail, lines, clazz, u.getName());\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/TextualAorAn.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"N"},{"authorDate":"2021-03-05 17:23:17","commitOrder":3,"curCode":"    public void checkAndUpdateLicenses() throws Exception {\n        if (System.getenv(\"CI\") != null) {\n            \r\n            return;\n        }\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/perf/java\")));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            if (!lines.get(0).equals(header[0]) || !lines.get(1).equals(header[1])) {\n                                fail.append(\"java.lang.RuntimeException: missing header added, refresh and re-run tests!\\r\\n\")\n                                .append(\" at \")\n                                ;\n\n                                String fn = u.toString().replace('\\\\', '/');\n\n                                int idx = fn.indexOf(\"io/reactivex/\");\n\n                                fn = fn.substring(idx).replace('/', '.').replace(\".java\", \"\");\n\n                                fail.append(fn).append(\" (\")\n                                ;\n\n                                int jdx = fn.lastIndexOf('.');\n\n                                fail.append(fn.substring(jdx + 1));\n\n                                fail.append(\".java:1)\\r\\n\\r\\n\");\n\n                                lines.addAll(0, Arrays.asList(header));\n\n                                PrintWriter w = new PrintWriter(new FileWriter(u));\n\n                                try {\n                                    for (String s : lines) {\n                                        w.println(s);\n                                    }\n                                } finally {\n                                    w.close();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","date":"2021-03-05 17:23:17","endLine":133,"groupId":"108201","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"checkAndUpdateLicenses","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5d/7223cbd1a8163d9800d4230d8dd486a0dc804f.src","preCode":"    public void checkAndUpdateLicenses() throws Exception {\n        if (System.getenv(\"CI\") != null) {\n            \r\n            return;\n        }\n        File f = TestHelper.findSource(\"Flowable\");\n        if (f == null) {\n            return;\n        }\n\n        Queue<File> dirs = new ArrayDeque<>();\n\n        File parent = f.getParentFile().getParentFile();\n        dirs.offer(parent);\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/perf/java\")));\n        dirs.offer(new File(parent.getAbsolutePath().replace('\\\\', '/').replace(\"src/main/java\", \"src/test/java\")));\n\n        StringBuilder fail = new StringBuilder();\n\n        while (!dirs.isEmpty()) {\n            f = dirs.poll();\n\n            File[] list = f.listFiles();\n            if (list != null && list.length != 0) {\n\n                for (File u : list) {\n                    if (u.isDirectory()) {\n                        dirs.offer(u);\n                    } else {\n                        if (u.getName().endsWith(\".java\")) {\n\n                            List<String> lines = new ArrayList<>();\n                            BufferedReader in = new BufferedReader(new FileReader(u));\n                            try {\n                                for (;;) {\n                                    String line = in.readLine();\n                                    if (line == null) {\n                                        break;\n                                    }\n\n                                    lines.add(line);\n                                }\n                            } finally {\n                                in.close();\n                            }\n\n                            if (!lines.get(0).equals(header[0]) && !lines.get(1).equals(header[1])) {\n                                fail.append(\"java.lang.RuntimeException: missing header added, refresh and re-run tests!\\r\\n\")\n                                .append(\" at \")\n                                ;\n\n                                String fn = u.toString().replace('\\\\', '/');\n\n                                int idx = fn.indexOf(\"io/reactivex/\");\n\n                                fn = fn.substring(idx).replace('/', '.').replace(\".java\", \"\");\n\n                                fail.append(fn).append(\" (\")\n                                ;\n\n                                int jdx = fn.lastIndexOf('.');\n\n                                fail.append(fn.substring(jdx + 1));\n\n                                fail.append(\".java:1)\\r\\n\\r\\n\");\n\n                                lines.addAll(0, Arrays.asList(header));\n\n                                PrintWriter w = new PrintWriter(new FileWriter(u));\n\n                                try {\n                                    for (String s : lines) {\n                                        w.println(s);\n                                    }\n                                } finally {\n                                    w.close();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (fail.length() != 0) {\n            System.out.println(fail);\n            throw new AssertionError(fail.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/FixLicenseHeaders.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"1c3594c214db82e4e85c33af7ad6bb315fa477a5","commitMessage":"@@@Standardize java source headers (#7205)\n\n* Create and validate standardized java source header\n\nUpdate Checkstyle to validate all java source files have a standard\nheader. Remove FixLiscenseHeaders.java unit test as it duplicates\nCheckstyle functionality. Standard header is block java comment.  instead\nof dangling Javadoc comment. Create standard header template\n(HEADER_JAVA) in project root. Reference header template in\nbuild.gradle. Update CONTRIBUTING.md to exact text of header template.\n\n* Convert Licenses from dangling Javadoc to block comment\n\nStandardize License based off of HEADER_JAVA file. All headers are block\nJava comments.\n\n* Restoring FixLicenseHeaders.java and updating CONTRIBUTING date\n\n* Updated License dates to 2016\n\nSeveral files had 2017 dates for License. Checkstyle now specifically\nlooks for 2016 date in License comments.\n\n* Fix bad logic for header check in FixLicenseHeaders test","date":"2021-03-05 17:23:17","modifiedFileCount":"1870","status":"M","submitter":"benjamintboyle"}]
