[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n            Observable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    to.dispose();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer v) throws Throwable {\n                    return Observable.just(v).hide();\n                }\n            })\n            .subscribe(to);\n\n            to.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1230,"groupId":"12104","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"undeliverableUponCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/dabeeea333224355dd83e4bbb36c28484b4352.src","preCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n            Observable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    to.dispose();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer v) throws Throwable {\n                    return Observable.just(v).hide();\n                }\n            })\n            .subscribe(to);\n\n            to.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1203,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n\n            Flowable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    ts.cancel();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer v) throws Throwable {\n                    return Flowable.just(v).hide();\n                }\n            })\n            .subscribe(ts);\n\n            ts.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1203,"groupId":"9971","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"undeliverableUponCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/832135991c0e343b95e1644ae803d91a62f3e6.src","preCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n\n            Flowable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    ts.cancel();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer v) throws Throwable {\n                    return Flowable.just(v).hide();\n                }\n            })\n            .subscribe(ts);\n\n            ts.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1176,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n            Observable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    to.dispose();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer v) throws Throwable {\n                    return Observable.just(v).hide();\n                }\n            })\n            .subscribe(to);\n\n            to.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1230,"groupId":"12104","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"undeliverableUponCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/dabeeea333224355dd83e4bbb36c28484b4352.src","preCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n            Observable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    to.dispose();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer v) throws Throwable {\n                    return Observable.just(v).hide();\n                }\n            })\n            .subscribe(to);\n\n            to.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1203,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n\n            Flowable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    ts.cancel();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer v) throws Throwable {\n                    return Flowable.just(v).hide();\n                }\n            })\n            .subscribe(ts);\n\n            ts.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":1203,"groupId":"9971","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"undeliverableUponCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fb/571c110923b8383eaab94c48b86f3b627bb662.src","preCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n\n            Flowable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    ts.cancel();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer v) throws Throwable {\n                    return Flowable.just(v).hide();\n                }\n            })\n            .subscribe(ts);\n\n            ts.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1176,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestObserverEx<Integer> to = new TestObserverEx<>();\n\n            Observable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    to.dispose();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer v) throws Throwable {\n                    return Observable.just(v).hide();\n                }\n            })\n            .subscribe(to);\n\n            to.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":1230,"groupId":"102272","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"undeliverableUponCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/88/f43e74523ec59fef9a8bc1958d53fdab991d67.src","preCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n            Observable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    to.dispose();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Observable<Integer>>() {\n                @Override\n                public Observable<Integer> apply(Integer v) throws Throwable {\n                    return Observable.just(v).hide();\n                }\n            })\n            .subscribe(to);\n\n            to.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1203,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n\n            Flowable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    ts.cancel();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer v) throws Throwable {\n                    return Flowable.just(v).hide();\n                }\n            })\n            .subscribe(ts);\n\n            ts.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":1203,"groupId":"102272","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"undeliverableUponCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fb/571c110923b8383eaab94c48b86f3b627bb662.src","preCode":"    public void undeliverableUponCancel() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n\n            Flowable.just(1)\n            .map(new Function<Integer, Integer>() {\n                @Override\n                public Integer apply(Integer v) throws Throwable {\n                    ts.cancel();\n                    throw new TestException();\n                }\n            })\n            .switchMap(new Function<Integer, Publisher<Integer>>() {\n                @Override\n                public Publisher<Integer> apply(Integer v) throws Throwable {\n                    return Flowable.just(v).hide();\n                }\n            })\n            .subscribe(ts);\n\n            ts.assertEmpty();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1176,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
