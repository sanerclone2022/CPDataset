[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void eventsAfterDematerializedTerminal() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Notification<Object>>() {\n                @Override\n                protected void subscribeActual(Observer<? super Notification<Object>> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    observer.onNext(Notification.createOnComplete());\n                    observer.onNext(Notification.<Object>createOnNext(1));\n                    observer.onNext(Notification.createOnError(new TestException(\"First\")));\n                    observer.onError(new TestException(\"Second\"));\n                }\n            }\n            .dematerialize(Functions.<Notification<Object>>identity())\n            .test()\n            .assertResult();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"First\");\n            TestHelper.assertUndeliverable(errors, 1, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":221,"groupId":"4853","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"eventsAfterDematerializedTerminal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/84/a6b06b0616faa3f3c800896997b26a8c67d326.src","preCode":"    public void eventsAfterDematerializedTerminal() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Notification<Object>>() {\n                @Override\n                protected void subscribeActual(Observer<? super Notification<Object>> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    observer.onNext(Notification.createOnComplete());\n                    observer.onNext(Notification.<Object>createOnNext(1));\n                    observer.onNext(Notification.createOnError(new TestException(\"First\")));\n                    observer.onError(new TestException(\"Second\"));\n                }\n            }\n            .dematerialize(Functions.<Notification<Object>>identity())\n            .test()\n            .assertResult();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"First\");\n            TestHelper.assertUndeliverable(errors, 1, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void eventsAfterDematerializedTerminal() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Notification<Object>>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Notification<Object>> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    subscriber.onNext(Notification.createOnComplete());\n                    subscriber.onNext(Notification.<Object>createOnNext(1));\n                    subscriber.onNext(Notification.createOnError(new TestException(\"First\")));\n                    subscriber.onError(new TestException(\"Second\"));\n                }\n            }\n            .dematerialize(Functions.<Notification<Object>>identity())\n            .test()\n            .assertResult();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"First\");\n            TestHelper.assertUndeliverable(errors, 1, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":223,"groupId":"4853","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"eventsAfterDematerializedTerminal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/75/a05cbd23ca64fb3fe24b9971559a95ec17ee9e.src","preCode":"    public void eventsAfterDematerializedTerminal() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Notification<Object>>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Notification<Object>> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    subscriber.onNext(Notification.createOnComplete());\n                    subscriber.onNext(Notification.<Object>createOnNext(1));\n                    subscriber.onNext(Notification.createOnError(new TestException(\"First\")));\n                    subscriber.onError(new TestException(\"Second\"));\n                }\n            }\n            .dematerialize(Functions.<Notification<Object>>identity())\n            .test()\n            .assertResult();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"First\");\n            TestHelper.assertUndeliverable(errors, 1, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void eventsAfterDematerializedTerminal() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Notification<Object>>() {\n                @Override\n                protected void subscribeActual(Observer<? super Notification<Object>> observer) {\n                    observer.onSubscribe(Disposable.empty());\n                    observer.onNext(Notification.createOnComplete());\n                    observer.onNext(Notification.<Object>createOnNext(1));\n                    observer.onNext(Notification.createOnError(new TestException(\"First\")));\n                    observer.onError(new TestException(\"Second\"));\n                }\n            }\n            .dematerialize(Functions.<Notification<Object>>identity())\n            .test()\n            .assertResult();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"First\");\n            TestHelper.assertUndeliverable(errors, 1, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":221,"groupId":"102654","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"eventsAfterDematerializedTerminal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5d/3e2b6be10ebfdb3fc6ab7041be7e06842204c7.src","preCode":"    public void eventsAfterDematerializedTerminal() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Notification<Object>>() {\n                @Override\n                protected void subscribeActual(Observer<? super Notification<Object>> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    observer.onNext(Notification.createOnComplete());\n                    observer.onNext(Notification.<Object>createOnNext(1));\n                    observer.onNext(Notification.createOnError(new TestException(\"First\")));\n                    observer.onError(new TestException(\"Second\"));\n                }\n            }\n            .dematerialize(Functions.<Notification<Object>>identity())\n            .test()\n            .assertResult();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"First\");\n            TestHelper.assertUndeliverable(errors, 1, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void eventsAfterDematerializedTerminal() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Notification<Object>>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Notification<Object>> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    subscriber.onNext(Notification.createOnComplete());\n                    subscriber.onNext(Notification.<Object>createOnNext(1));\n                    subscriber.onNext(Notification.createOnError(new TestException(\"First\")));\n                    subscriber.onError(new TestException(\"Second\"));\n                }\n            }\n            .dematerialize(Functions.<Notification<Object>>identity())\n            .test()\n            .assertResult();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"First\");\n            TestHelper.assertUndeliverable(errors, 1, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":223,"groupId":"102654","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"eventsAfterDematerializedTerminal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/75/a05cbd23ca64fb3fe24b9971559a95ec17ee9e.src","preCode":"    public void eventsAfterDematerializedTerminal() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Flowable<Notification<Object>>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Notification<Object>> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    subscriber.onNext(Notification.createOnComplete());\n                    subscriber.onNext(Notification.<Object>createOnNext(1));\n                    subscriber.onNext(Notification.createOnError(new TestException(\"First\")));\n                    subscriber.onError(new TestException(\"Second\"));\n                }\n            }\n            .dematerialize(Functions.<Notification<Object>>identity())\n            .test()\n            .assertResult();\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"First\");\n            TestHelper.assertUndeliverable(errors, 1, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
