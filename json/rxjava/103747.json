[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    ref.set(observer);\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":395,"groupId":"9178","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1a/c8c7209bdade6651e578b64bad8746c84b2a6a.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    ref.set(observer);\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":435,"groupId":"5880","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fc/d2390f7eb783c491660a856266d1abbb8c0607.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-17 17:19:08","codes":[{"authorDate":"2019-12-17 17:19:08","commitOrder":2,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    ref.set(observer);\n                }\n            })\n            .doOnNext(new Consumer<Observable<Object>>() {\n                @Override\n                public void accept(Observable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-17 17:19:08","endLine":401,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e6/804ddcaba839aa185967820ae985a2e74ee0c4.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    ref.set(observer);\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"},{"authorDate":"2019-12-17 17:19:08","commitOrder":2,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Object>>() {\n                @Override\n                public void accept(Flowable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-17 17:19:08","endLine":441,"groupId":"6798","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/001803c0e1fb53478861b5bbbea8ef2f658597.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"f96821f14c91752d323877a7874f480fd6b02f12","commitMessage":"@@@3.x: Fix window (boundary.  start/end) cancel and abandonment (#6762)\n\n","date":"2019-12-17 17:19:08","modifiedFileCount":"12","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-17 17:19:08","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposable.empty());\n                    ref.set(observer);\n                }\n            })\n            .doOnNext(new Consumer<Observable<Object>>() {\n                @Override\n                public void accept(Observable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":401,"groupId":"9178","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/63/bb37eafa516a8625ca7fe49515653a9aeb4383.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    ref.set(observer);\n                }\n            })\n            .doOnNext(new Consumer<Observable<Object>>() {\n                @Override\n                public void accept(Observable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"},{"authorDate":"2019-12-17 17:19:08","commitOrder":3,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Object>>() {\n                @Override\n                public void accept(Flowable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-17 17:19:08","endLine":441,"groupId":"6798","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/001803c0e1fb53478861b5bbbea8ef2f658597.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Object>>() {\n                @Override\n                public void accept(Flowable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":4,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposable.empty());\n                    ref.set(observer);\n                }\n            })\n            .doOnNext(new Consumer<Observable<Object>>() {\n                @Override\n                public void accept(Observable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":401,"groupId":"9178","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/63/bb37eafa516a8625ca7fe49515653a9aeb4383.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposable.empty());\n                    ref.set(observer);\n                }\n            })\n            .doOnNext(new Consumer<Observable<Object>>() {\n                @Override\n                public void accept(Observable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Object>>() {\n                @Override\n                public void accept(Flowable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":441,"groupId":"6798","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/7e2ccfaed51dba55813263a726fa6efa86d6ef.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<Subscriber<? super Object>>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Object>>() {\n                @Override\n                public void accept(Flowable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":5,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposable.empty());\n                    ref.set(observer);\n                }\n            })\n            .doOnNext(new Consumer<Observable<Object>>() {\n                @Override\n                public void accept(Observable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":401,"groupId":"103747","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bf/b972626bcbbe393e06c03bee8ff46e15bf283d.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Observer<? super Object>> ref = new AtomicReference<Observer<? super Object>>();\n\n            TestObserverEx<Observable<Object>> to = Observable.error(new TestException(\"main\"))\n            .window(new Observable<Object>() {\n                @Override\n                protected void subscribeActual(Observer<? super Object> observer) {\n                    observer.onSubscribe(Disposable.empty());\n                    ref.set(observer);\n                }\n            })\n            .doOnNext(new Consumer<Observable<Object>>() {\n                @Override\n                public void accept(Observable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Observable<Object>>testConsumer());\n\n            to\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithObservableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":5,"curCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Object>>() {\n                @Override\n                public void accept(Flowable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":441,"groupId":"103747","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"mainAndBoundaryBothError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/7e2ccfaed51dba55813263a726fa6efa86d6ef.src","preCode":"    public void mainAndBoundaryBothError() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<? super Object>> ref = new AtomicReference<>();\n\n            TestSubscriberEx<Flowable<Object>> ts = Flowable.error(new TestException(\"main\"))\n            .window(new Flowable<Object>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super Object> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n                    ref.set(subscriber);\n                }\n            })\n            .doOnNext(new Consumer<Flowable<Object>>() {\n                @Override\n                public void accept(Flowable<Object> w) throws Throwable {\n                    w.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()); \r\n                }\n            })\n            .to(TestHelper.<Flowable<Object>>testConsumer());\n\n            ts\n            .assertValueCount(1)\n            .assertError(TestException.class)\n            .assertErrorMessage(\"main\")\n            .assertNotComplete();\n\n            ref.get().onError(new TestException(\"inner\"));\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"inner\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithFlowableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
