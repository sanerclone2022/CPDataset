[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<String>();\n\n        Observable.error(new TestException())\n        .doOnDispose(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"dispose\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":485,"groupId":"7832","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"eventOrdering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9f/d860816aa6fe78e9b29710fe3e41c5569f387f.src","preCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<String>();\n\n        Observable.error(new TestException())\n        .doOnDispose(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"dispose\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoFinallyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<String>();\n\n        Flowable.error(new TestException())\n        .doOnCancel(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"cancel\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":479,"groupId":"7832","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"eventOrdering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/76/62162d221106e1cbe7129467b5591365b071ae.src","preCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<String>();\n\n        Flowable.error(new TestException())\n        .doOnCancel(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"cancel\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinallyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<String>();\n\n        Observable.error(new TestException())\n        .doOnDispose(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"dispose\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":485,"groupId":"7832","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"eventOrdering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9f/d860816aa6fe78e9b29710fe3e41c5569f387f.src","preCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<String>();\n\n        Observable.error(new TestException())\n        .doOnDispose(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"dispose\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoFinallyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<>();\n\n        Flowable.error(new TestException())\n        .doOnCancel(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"cancel\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","date":"2019-12-22 18:39:23","endLine":479,"groupId":"7832","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"eventOrdering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/49383dca31f7c8667948dde1204ac097e31a61.src","preCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<String>();\n\n        Flowable.error(new TestException())\n        .doOnCancel(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"cancel\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinallyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<>();\n\n        Observable.error(new TestException())\n        .doOnDispose(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"dispose\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","date":"2019-12-22 18:59:44","endLine":485,"groupId":"104697","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"eventOrdering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a0/eeccb4058ca1245e2f36a6d838573955ee6317.src","preCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<String>();\n\n        Observable.error(new TestException())\n        .doOnDispose(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"dispose\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoFinallyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<>();\n\n        Flowable.error(new TestException())\n        .doOnCancel(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"cancel\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","date":"2019-12-22 18:39:23","endLine":479,"groupId":"104697","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"eventOrdering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/49383dca31f7c8667948dde1204ac097e31a61.src","preCode":"    public void eventOrdering() {\n        final List<String> list = new ArrayList<>();\n\n        Flowable.error(new TestException())\n        .doOnCancel(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"cancel\");\n            }\n        })\n        .doFinally(new Action() {\n            @Override\n            public void run() throws Exception {\n                list.add(\"finally\");\n            }\n        })\n        .subscribe(\n                new Consumer<Object>() {\n                    @Override\n                    public void accept(Object v) throws Exception {\n                        list.add(\"onNext\");\n                    }\n                },\n                new Consumer<Throwable>() {\n                    @Override\n                    public void accept(Throwable e) throws Exception {\n                        list.add(\"onError\");\n                    }\n                },\n                new Action() {\n                    @Override\n                    public void run() throws Exception {\n                        list.add(\"onComplete\");\n                    }\n                });\n\n        assertEquals(Arrays.asList(\"onError\", \"finally\"), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoFinallyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
