[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<Object>(o);\n\n        Observable.fromFuture(future).subscribe(to);\n\n        to.dispose();\n\n        verify(o, times(1)).onNext(value);\n        verify(o, times(1)).onComplete();\n        verify(o, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(true);\n    }\n","date":"2019-08-16 20:51:17","endLine":50,"groupId":"11643","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"success","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/48/1fd8ae65e425d1b0e896e6f6382f725bde1bbe.src","preCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<Object>(o);\n\n        Observable.fromFuture(future).subscribe(to);\n\n        to.dispose();\n\n        verify(o, times(1)).onNext(value);\n        verify(o, times(1)).onComplete();\n        verify(o, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(true);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestObserver<Object> to = new TestObserver<Object>(o);\n\n        Observable.fromFuture(future, scheduler).subscribe(to);\n\n        verify(o, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(o, times(1)).onNext(value);\n    }\n","date":"2019-08-16 20:51:17","endLine":71,"groupId":"11556","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"successOperatesOnSuppliedScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/48/1fd8ae65e425d1b0e896e6f6382f725bde1bbe.src","preCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestObserver<Object> to = new TestObserver<Object>(o);\n\n        Observable.fromFuture(future, scheduler).subscribe(to);\n\n        verify(o, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(o, times(1)).onNext(value);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:59:44","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<>(o);\n\n        Observable.fromFuture(future).subscribe(to);\n\n        to.dispose();\n\n        verify(o, times(1)).onNext(value);\n        verify(o, times(1)).onComplete();\n        verify(o, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(true);\n    }\n","date":"2019-12-22 18:59:44","endLine":50,"groupId":"11643","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"success","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/4d7f6fd68a3f1ac876287500b4f6378067e312.src","preCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<Object>(o);\n\n        Observable.fromFuture(future).subscribe(to);\n\n        to.dispose();\n\n        verify(o, times(1)).onNext(value);\n        verify(o, times(1)).onComplete();\n        verify(o, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(true);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestObserver<Object> to = new TestObserver<>(o);\n\n        Observable.fromFuture(future, scheduler).subscribe(to);\n\n        verify(o, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(o, times(1)).onNext(value);\n    }\n","date":"2019-12-22 18:59:44","endLine":71,"groupId":"11556","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"successOperatesOnSuppliedScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/4d7f6fd68a3f1ac876287500b4f6378067e312.src","preCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestObserver<Object> to = new TestObserver<Object>(o);\n\n        Observable.fromFuture(future, scheduler).subscribe(to);\n\n        verify(o, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(o, times(1)).onNext(value);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2020-01-07 17:47:28","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<>(o);\n\n        Observable.fromFuture(future).subscribe(to);\n\n        to.dispose();\n\n        verify(o, times(1)).onNext(value);\n        verify(o, times(1)).onComplete();\n        verify(o, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(true);\n    }\n","date":"2019-12-22 18:59:44","endLine":50,"groupId":"103983","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"success","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/4d7f6fd68a3f1ac876287500b4f6378067e312.src","preCode":"    public void success() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<>(o);\n\n        Observable.fromFuture(future).subscribe(to);\n\n        to.dispose();\n\n        verify(o, times(1)).onNext(value);\n        verify(o, times(1)).onComplete();\n        verify(o, never()).onError(any(Throwable.class));\n        verify(future, never()).cancel(true);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"N"},{"authorDate":"2020-01-07 17:47:28","commitOrder":3,"curCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestObserver<Object> to = new TestObserver<>(o);\n\n        Observable.fromFuture(future).subscribeOn(scheduler).subscribe(to);\n\n        verify(o, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(o, times(1)).onNext(value);\n    }\n","date":"2020-01-07 17:47:28","endLine":71,"groupId":"103983","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"successOperatesOnSuppliedScheduler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/31dfac4ea4adec1446eceff1a573ff00424511.src","preCode":"    public void successOperatesOnSuppliedScheduler() throws Exception {\n        @SuppressWarnings(\"unchecked\")\n        Future<Object> future = mock(Future.class);\n        Object value = new Object();\n        when(future.get()).thenReturn(value);\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestScheduler scheduler = new TestScheduler();\n        TestObserver<Object> to = new TestObserver<>(o);\n\n        Observable.fromFuture(future, scheduler).subscribe(to);\n\n        verify(o, never()).onNext(value);\n\n        scheduler.triggerActions();\n\n        verify(o, times(1)).onNext(value);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"9e2fa63aa044b67d28de351aee32685e4eaa8c2d","commitMessage":"@@@3.x: Remove fromFuture(....  Scheduler) overloads (#6814)\n\n","date":"2020-01-07 17:47:28","modifiedFileCount":"11","status":"M","submitter":"David Karnok"}]
