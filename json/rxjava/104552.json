[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void emitMaterializedNotifications() {\n        Observable<Notification<Integer>> oi = Observable.just(1, 2, 3).materialize();\n        Observable<Notification<String>> os = Observable.just(\"a\", \"b\", \"c\").materialize();\n        Observable<String> o = Observable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<String>();\n        o.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","date":"2019-08-16 20:51:17","endLine":902,"groupId":"12622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"emitMaterializedNotifications","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/9840cbc7c7812d8ee108dd9a4c3715b6377080.src","preCode":"    public void emitMaterializedNotifications() {\n        Observable<Notification<Integer>> oi = Observable.just(1, 2, 3).materialize();\n        Observable<Notification<String>> os = Observable.just(\"a\", \"b\", \"c\").materialize();\n        Observable<String> o = Observable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<String>();\n        o.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":875,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void emitMaterializedNotifications() {\n        Flowable<Notification<Integer>> oi = Flowable.just(1, 2, 3).materialize();\n        Flowable<Notification<String>> os = Flowable.just(\"a\", \"b\", \"c\").materialize();\n        Flowable<String> f = Flowable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<String>();\n        f.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","date":"2019-08-16 20:51:17","endLine":904,"groupId":"1588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"emitMaterializedNotifications","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7a/a44b75348b67c5b5b9dadfe159d380003d1562.src","preCode":"    public void emitMaterializedNotifications() {\n        Flowable<Notification<Integer>> oi = Flowable.just(1, 2, 3).materialize();\n        Flowable<Notification<String>> os = Flowable.just(\"a\", \"b\", \"c\").materialize();\n        Flowable<String> f = Flowable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<String>();\n        f.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":877,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void emitMaterializedNotifications() {\n        Observable<Notification<Integer>> oi = Observable.just(1, 2, 3).materialize();\n        Observable<Notification<String>> os = Observable.just(\"a\", \"b\", \"c\").materialize();\n        Observable<String> o = Observable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<String>();\n        o.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","date":"2019-08-16 20:51:17","endLine":902,"groupId":"12622","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"emitMaterializedNotifications","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/9840cbc7c7812d8ee108dd9a4c3715b6377080.src","preCode":"    public void emitMaterializedNotifications() {\n        Observable<Notification<Integer>> oi = Observable.just(1, 2, 3).materialize();\n        Observable<Notification<String>> os = Observable.just(\"a\", \"b\", \"c\").materialize();\n        Observable<String> o = Observable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<String>();\n        o.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":875,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void emitMaterializedNotifications() {\n        Flowable<Notification<Integer>> oi = Flowable.just(1, 2, 3).materialize();\n        Flowable<Notification<String>> os = Flowable.just(\"a\", \"b\", \"c\").materialize();\n        Flowable<String> f = Flowable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<>();\n        f.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","date":"2019-12-22 18:39:23","endLine":904,"groupId":"1588","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"emitMaterializedNotifications","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/0b3908c9313d06737a2cbb475d4e8a048f0aac.src","preCode":"    public void emitMaterializedNotifications() {\n        Flowable<Notification<Integer>> oi = Flowable.just(1, 2, 3).materialize();\n        Flowable<Notification<String>> os = Flowable.just(\"a\", \"b\", \"c\").materialize();\n        Flowable<String> f = Flowable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<String>();\n        f.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":877,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void emitMaterializedNotifications() {\n        Observable<Notification<Integer>> oi = Observable.just(1, 2, 3).materialize();\n        Observable<Notification<String>> os = Observable.just(\"a\", \"b\", \"c\").materialize();\n        Observable<String> o = Observable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<>();\n        o.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","date":"2019-12-22 18:59:44","endLine":902,"groupId":"104552","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"emitMaterializedNotifications","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d8/c153a2859031c697469b6942be9605fc4ed33c.src","preCode":"    public void emitMaterializedNotifications() {\n        Observable<Notification<Integer>> oi = Observable.just(1, 2, 3).materialize();\n        Observable<Notification<String>> os = Observable.just(\"a\", \"b\", \"c\").materialize();\n        Observable<String> o = Observable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<String>();\n        o.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":875,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void emitMaterializedNotifications() {\n        Flowable<Notification<Integer>> oi = Flowable.just(1, 2, 3).materialize();\n        Flowable<Notification<String>> os = Flowable.just(\"a\", \"b\", \"c\").materialize();\n        Flowable<String> f = Flowable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<>();\n        f.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","date":"2019-12-22 18:39:23","endLine":904,"groupId":"104552","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"emitMaterializedNotifications","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/0b3908c9313d06737a2cbb475d4e8a048f0aac.src","preCode":"    public void emitMaterializedNotifications() {\n        Flowable<Notification<Integer>> oi = Flowable.just(1, 2, 3).materialize();\n        Flowable<Notification<String>> os = Flowable.just(\"a\", \"b\", \"c\").materialize();\n        Flowable<String> f = Flowable.zip(oi, os, new BiFunction<Notification<Integer>, Notification<String>, String>() {\n\n            @Override\n            public String apply(Notification<Integer> t1, Notification<String> t2) {\n                return kind(t1) + \"_\" + value(t1) + \"-\" + kind(t2) + \"_\" + value(t2);\n            }\n\n        });\n\n        final ArrayList<String> list = new ArrayList<>();\n        f.subscribe(new Consumer<String>() {\n\n            @Override\n            public void accept(String s) {\n                System.out.println(s);\n                list.add(s);\n            }\n        });\n\n        assertEquals(4, list.size());\n        assertEquals(\"OnNext_1-OnNext_a\", list.get(0));\n        assertEquals(\"OnNext_2-OnNext_b\", list.get(1));\n        assertEquals(\"OnNext_3-OnNext_c\", list.get(2));\n        assertEquals(\"OnComplete_null-OnComplete_null\", list.get(3));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":877,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
