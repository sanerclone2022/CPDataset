[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void error() {\n        Observable<String> sourceStrings = Observable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Observable<String> errorSource = Observable.error(new RuntimeException(\"forced failure\"));\n        Observable<String> source = Observable.concat(sourceStrings, errorSource);\n\n        Observable<GroupedObservable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        grouped.flatMap(new Function<GroupedObservable<Integer, String>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, String> o) {\n                groupCounter.incrementAndGet();\n                return o.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + o.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":147,"groupId":"7187","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"error","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void error() {\n        Observable<String> sourceStrings = Observable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Observable<String> errorSource = Observable.error(new RuntimeException(\"forced failure\"));\n        Observable<String> source = Observable.concat(sourceStrings, errorSource);\n\n        Observable<GroupedObservable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        grouped.flatMap(new Function<GroupedObservable<Integer, String>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, String> o) {\n                groupCounter.incrementAndGet();\n                return o.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + o.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void error() {\n        Flowable<String> sourceStrings = Flowable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Flowable<String> errorSource = Flowable.error(new TestException(\"forced failure\"));\n        Flowable<String> source = Flowable.concat(sourceStrings, errorSource);\n\n        Flowable<GroupedFlowable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        grouped.flatMap(new Function<GroupedFlowable<Integer, String>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, String> f) {\n                groupCounter.incrementAndGet();\n                return f.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + f.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\r\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n        assertTrue(\"\" + error.get(), error.get() instanceof TestException);\n        assertEquals(error.get().getMessage(), \"forced failure\");\n    }\n","date":"2019-08-16 20:51:17","endLine":154,"groupId":"1919","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"error","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void error() {\n        Flowable<String> sourceStrings = Flowable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Flowable<String> errorSource = Flowable.error(new TestException(\"forced failure\"));\n        Flowable<String> source = Flowable.concat(sourceStrings, errorSource);\n\n        Flowable<GroupedFlowable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        grouped.flatMap(new Function<GroupedFlowable<Integer, String>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, String> f) {\n                groupCounter.incrementAndGet();\n                return f.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + f.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\r\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n        assertTrue(\"\" + error.get(), error.get() instanceof TestException);\n        assertEquals(error.get().getMessage(), \"forced failure\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void error() {\n        Observable<String> sourceStrings = Observable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Observable<String> errorSource = Observable.error(new RuntimeException(\"forced failure\"));\n        Observable<String> source = Observable.concat(sourceStrings, errorSource);\n\n        Observable<GroupedObservable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        grouped.flatMap(new Function<GroupedObservable<Integer, String>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, String> o) {\n                groupCounter.incrementAndGet();\n                return o.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + o.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":147,"groupId":"7187","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"error","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void error() {\n        Observable<String> sourceStrings = Observable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Observable<String> errorSource = Observable.error(new RuntimeException(\"forced failure\"));\n        Observable<String> source = Observable.concat(sourceStrings, errorSource);\n\n        Observable<GroupedObservable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        grouped.flatMap(new Function<GroupedObservable<Integer, String>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, String> o) {\n                groupCounter.incrementAndGet();\n                return o.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + o.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void error() {\n        Flowable<String> sourceStrings = Flowable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Flowable<String> errorSource = Flowable.error(new TestException(\"forced failure\"));\n        Flowable<String> source = Flowable.concat(sourceStrings, errorSource);\n\n        Flowable<GroupedFlowable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        grouped.flatMap(new Function<GroupedFlowable<Integer, String>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, String> f) {\n                groupCounter.incrementAndGet();\n                return f.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + f.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\r\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n        assertTrue(\"\" + error.get(), error.get() instanceof TestException);\n        assertEquals(error.get().getMessage(), \"forced failure\");\n    }\n","date":"2019-12-22 18:39:23","endLine":155,"groupId":"922","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"error","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void error() {\n        Flowable<String> sourceStrings = Flowable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Flowable<String> errorSource = Flowable.error(new TestException(\"forced failure\"));\n        Flowable<String> source = Flowable.concat(sourceStrings, errorSource);\n\n        Flowable<GroupedFlowable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        grouped.flatMap(new Function<GroupedFlowable<Integer, String>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, String> f) {\n                groupCounter.incrementAndGet();\n                return f.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + f.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\r\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n        assertTrue(\"\" + error.get(), error.get() instanceof TestException);\n        assertEquals(error.get().getMessage(), \"forced failure\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void error() {\n        Observable<String> sourceStrings = Observable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Observable<String> errorSource = Observable.error(new RuntimeException(\"forced failure\"));\n        Observable<String> source = Observable.concat(sourceStrings, errorSource);\n\n        Observable<GroupedObservable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        grouped.flatMap(new Function<GroupedObservable<Integer, String>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, String> o) {\n                groupCounter.incrementAndGet();\n                return o.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + o.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n    }\n","date":"2019-12-22 18:59:44","endLine":147,"groupId":"102873","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"error","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/d3f2d6432c67ffdd0df5bbb6960b138ae6f15a.src","preCode":"    public void error() {\n        Observable<String> sourceStrings = Observable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Observable<String> errorSource = Observable.error(new RuntimeException(\"forced failure\"));\n        Observable<String> source = Observable.concat(sourceStrings, errorSource);\n\n        Observable<GroupedObservable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        grouped.flatMap(new Function<GroupedObservable<Integer, String>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(final GroupedObservable<Integer, String> o) {\n                groupCounter.incrementAndGet();\n                return o.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + o.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void error() {\n        Flowable<String> sourceStrings = Flowable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Flowable<String> errorSource = Flowable.error(new TestException(\"forced failure\"));\n        Flowable<String> source = Flowable.concat(sourceStrings, errorSource);\n\n        Flowable<GroupedFlowable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        grouped.flatMap(new Function<GroupedFlowable<Integer, String>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, String> f) {\n                groupCounter.incrementAndGet();\n                return f.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + f.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\r\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n        assertTrue(\"\" + error.get(), error.get() instanceof TestException);\n        assertEquals(error.get().getMessage(), \"forced failure\");\n    }\n","date":"2019-12-22 18:39:23","endLine":155,"groupId":"102873","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"error","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void error() {\n        Flowable<String> sourceStrings = Flowable.just(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        Flowable<String> errorSource = Flowable.error(new TestException(\"forced failure\"));\n        Flowable<String> source = Flowable.concat(sourceStrings, errorSource);\n\n        Flowable<GroupedFlowable<Integer, String>> grouped = source.groupBy(length);\n\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        grouped.flatMap(new Function<GroupedFlowable<Integer, String>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(final GroupedFlowable<Integer, String> f) {\n                groupCounter.incrementAndGet();\n                return f.map(new Function<String, String>() {\n\n                    @Override\n                    public String apply(String v) {\n                        return \"Event => key: \" + f.getKey() + \" value: \" + v;\n                    }\n                });\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\r\n                error.set(e);\n            }\n\n            @Override\n            public void onNext(String v) {\n                eventCounter.incrementAndGet();\n                System.out.println(v);\n\n            }\n        });\n\n        assertEquals(3, groupCounter.get());\n        assertEquals(6, eventCounter.get());\n        assertNotNull(error.get());\n        assertTrue(\"\" + error.get(), error.get() instanceof TestException);\n        assertEquals(error.get().getMessage(), \"forced failure\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
