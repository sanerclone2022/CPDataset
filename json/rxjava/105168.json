[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        assertEquals(2, lists.size());\n        assertEquals(lists.get(1), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertEquals(lists.get(2), list(\"five\"));\n    }\n","date":"2019-08-16 20:51:17","endLine":79,"groupId":"2879","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ca/9270448b5a531ed28585a5f1a40f6e74102e80.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        assertEquals(2, lists.size());\n        assertEquals(lists.get(1), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertEquals(lists.get(2), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        assertEquals(2, lists.size());\n        assertEquals(lists.get(1), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertEquals(lists.get(2), list(\"five\"));\n    }\n","date":"2019-08-16 20:51:17","endLine":79,"groupId":"2879","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/57800827f1ad81149d84cdad67f5bc75040ffb.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        assertEquals(2, lists.size());\n        assertEquals(lists.get(1), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertEquals(lists.get(2), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-09-17 15:21:17","codes":[{"authorDate":"2019-09-17 15:21:17","commitOrder":2,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","date":"2019-09-17 15:21:17","endLine":81,"groupId":"2879","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e5/6a094a8fd9debe8bfc4950fa6a6835b6c26ff7.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        assertEquals(2, lists.size());\n        assertEquals(lists.get(1), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertEquals(lists.get(2), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-09-17 15:21:17","commitOrder":2,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","date":"2019-09-17 15:21:17","endLine":81,"groupId":"2879","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7e/055bd299d8ff617c0cd0d44b809e9be25c0bc9.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);\n        assertEquals(2, lists.size());\n        assertEquals(lists.get(1), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertEquals(lists.get(2), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"6518eb93be37d72044bfa66b9d00743e6356213b","commitMessage":"@@@3.x: Fix size+time bound window not creating windows properly (#6652)\n\n","date":"2019-09-17 15:21:17","modifiedFileCount":"6","status":"M","submitter":"David Karnok"},{"authorTime":"2019-09-17 15:21:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposable.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","date":"2019-12-20 02:39:40","endLine":81,"groupId":"2879","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/51/591516a663bd19ceb5f8c64381aee79f1277a5.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposables.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-09-17 15:21:17","commitOrder":3,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","date":"2019-09-17 15:21:17","endLine":81,"groupId":"2879","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7e/055bd299d8ff617c0cd0d44b809e9be25c0bc9.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":4,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposable.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","date":"2019-12-20 02:39:40","endLine":81,"groupId":"2879","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/51/591516a663bd19ceb5f8c64381aee79f1277a5.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposable.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<>();\n        final List<List<String>> lists = new ArrayList<>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","date":"2019-12-22 18:39:23","endLine":81,"groupId":"2879","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/86/da1bb09ce8c03bc9e971248d8c89b3dccf5d39.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":5,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<>();\n        final List<List<String>> lists = new ArrayList<>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposable.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","date":"2019-12-22 18:59:44","endLine":81,"groupId":"105168","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/13/f662c88ee54a3d651ec221ec13718849606988.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<String>();\n        final List<List<String>> lists = new ArrayList<List<String>>();\n\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> observer) {\n                observer.onSubscribe(Disposable.empty());\n                push(observer, \"one\", 10);\n                push(observer, \"two\", 90);\n                push(observer, \"three\", 110);\n                push(observer, \"four\", 190);\n                push(observer, \"five\", 210);\n                complete(observer, 250);\n            }\n        });\n\n        Observable<Observable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":5,"curCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<>();\n        final List<List<String>> lists = new ArrayList<>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","date":"2019-12-22 18:39:23","endLine":81,"groupId":"105168","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/86/da1bb09ce8c03bc9e971248d8c89b3dccf5d39.src","preCode":"    public void timedAndCount() {\n        final List<String> list = new ArrayList<>();\n        final List<List<String>> lists = new ArrayList<>();\n\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                push(subscriber, \"one\", 10);\n                push(subscriber, \"two\", 90);\n                push(subscriber, \"three\", 110);\n                push(subscriber, \"four\", 190);\n                push(subscriber, \"five\", 210);\n                complete(subscriber, 250);\n            }\n        });\n\n        Flowable<Flowable<String>> windowed = source.window(100, TimeUnit.MILLISECONDS, scheduler, 2);\n        windowed.subscribe(observeWindow(list, lists));\n\n        scheduler.advanceTimeTo(95, TimeUnit.MILLISECONDS);\n        assertEquals(1, lists.size());\n        assertEquals(lists.get(0), list(\"one\", \"two\"));\n\n        scheduler.advanceTimeTo(195, TimeUnit.MILLISECONDS);\n        assertEquals(3, lists.size());\n        assertTrue(lists.get(1).isEmpty());\n        assertEquals(lists.get(2), list(\"three\", \"four\"));\n\n        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);\n        assertEquals(5, lists.size());\n        assertTrue(lists.get(3).isEmpty());\n        assertEquals(lists.get(4), list(\"five\"));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
