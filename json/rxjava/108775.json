[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void requestFromFinalSubscribeWithRequestValue() {\n        TestSubscriber<String> s = new TestSubscriber<String>(0L);\n        s.request(10);\n        final AtomicLong r = new AtomicLong();\n        s.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(10, r.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":60,"groupId":"7906","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"requestFromFinalSubscribeWithRequestValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ed/3f8f4cdc830f7cbe617f6419cd4ccf3d659da6.src","preCode":"    public void requestFromFinalSubscribeWithRequestValue() {\n        TestSubscriber<String> s = new TestSubscriber<String>(0L);\n        s.request(10);\n        final AtomicLong r = new AtomicLong();\n        s.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(10, r.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void requestFromDecoupledOperatorThatRequestsN() throws Exception {\n        TestSubscriber<String> s = new TestSubscriber<String>(10L);\n        final AtomicLong innerR = new AtomicLong();\n        FlowableOperator<String, String> o = new FlowableOperator<String, String>() {\n            @Override\n            public Subscriber<? super String> apply(Subscriber<? super String> child) {\n                \r\n                child.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        innerR.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n\n                ResourceSubscriber<String> as = new ResourceSubscriber<String>() {\n\n                    @Override\n                    protected void onStart() {\n                        \r\n                        request(99);\n                    }\n\n                    @Override\n                    public void onComplete() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(String t) {\n\n                    }\n                };\n\n                return as;\n            }\n        };\n        Subscriber<? super String> ns = o.apply(s);\n\n        final AtomicLong r = new AtomicLong();\n        \r\n        \r\n        ns.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(99, r.get());\n        assertEquals(10, innerR.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":259,"groupId":"12014","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"requestFromDecoupledOperatorThatRequestsN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ed/3f8f4cdc830f7cbe617f6419cd4ccf3d659da6.src","preCode":"    public void requestFromDecoupledOperatorThatRequestsN() throws Exception {\n        TestSubscriber<String> s = new TestSubscriber<String>(10L);\n        final AtomicLong innerR = new AtomicLong();\n        FlowableOperator<String, String> o = new FlowableOperator<String, String>() {\n            @Override\n            public Subscriber<? super String> apply(Subscriber<? super String> child) {\n                \r\n                child.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        innerR.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n\n                ResourceSubscriber<String> as = new ResourceSubscriber<String>() {\n\n                    @Override\n                    protected void onStart() {\n                        \r\n                        request(99);\n                    }\n\n                    @Override\n                    public void onComplete() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(String t) {\n\n                    }\n                };\n\n                return as;\n            }\n        };\n        Subscriber<? super String> ns = o.apply(s);\n\n        final AtomicLong r = new AtomicLong();\n        \r\n        \r\n        ns.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(99, r.get());\n        assertEquals(10, innerR.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-21 18:08:34","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void requestFromFinalSubscribeWithRequestValue() {\n        TestSubscriber<String> s = new TestSubscriber<String>(0L);\n        s.request(10);\n        final AtomicLong r = new AtomicLong();\n        s.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(10, r.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":60,"groupId":"7906","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"requestFromFinalSubscribeWithRequestValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ed/3f8f4cdc830f7cbe617f6419cd4ccf3d659da6.src","preCode":"    public void requestFromFinalSubscribeWithRequestValue() {\n        TestSubscriber<String> s = new TestSubscriber<String>(0L);\n        s.request(10);\n        final AtomicLong r = new AtomicLong();\n        s.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(10, r.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2019-12-21 18:08:34","commitOrder":2,"curCode":"    public void requestFromDecoupledOperatorThatRequestsN() throws Throwable {\n        TestSubscriber<String> s = new TestSubscriber<String>(10L);\n        final AtomicLong innerR = new AtomicLong();\n        FlowableOperator<String, String> o = new FlowableOperator<String, String>() {\n            @Override\n            public Subscriber<? super String> apply(Subscriber<? super String> child) {\n                \r\n                child.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        innerR.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n\n                ResourceSubscriber<String> as = new ResourceSubscriber<String>() {\n\n                    @Override\n                    protected void onStart() {\n                        \r\n                        request(99);\n                    }\n\n                    @Override\n                    public void onComplete() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(String t) {\n\n                    }\n                };\n\n                return as;\n            }\n        };\n        Subscriber<? super String> ns = o.apply(s);\n\n        final AtomicLong r = new AtomicLong();\n        \r\n        \r\n        ns.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(99, r.get());\n        assertEquals(10, innerR.get());\n    }\n","date":"2019-12-21 18:08:34","endLine":259,"groupId":"12014","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"requestFromDecoupledOperatorThatRequestsN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2a/94f73b8e5d05859cd4ba06f60ae348e65c0371.src","preCode":"    public void requestFromDecoupledOperatorThatRequestsN() throws Exception {\n        TestSubscriber<String> s = new TestSubscriber<String>(10L);\n        final AtomicLong innerR = new AtomicLong();\n        FlowableOperator<String, String> o = new FlowableOperator<String, String>() {\n            @Override\n            public Subscriber<? super String> apply(Subscriber<? super String> child) {\n                \r\n                child.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        innerR.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n\n                ResourceSubscriber<String> as = new ResourceSubscriber<String>() {\n\n                    @Override\n                    protected void onStart() {\n                        \r\n                        request(99);\n                    }\n\n                    @Override\n                    public void onComplete() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(String t) {\n\n                    }\n                };\n\n                return as;\n            }\n        };\n        Subscriber<? super String> ns = o.apply(s);\n\n        final AtomicLong r = new AtomicLong();\n        \r\n        \r\n        ns.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(99, r.get());\n        assertEquals(10, innerR.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"dba670554c69d6c09d28643505880c1a468af3db","commitMessage":"@@@3.x: Cleanup and prettify Javadocs.  widen XOperator throws (#6785)\n\n* 3.x: Cleanup and prettify Javadocs.  widen XOperator throws\n\n* Fix encoding of ? in javadoc\n\n* Fix a wrong tag name\n","date":"2019-12-21 18:08:34","modifiedFileCount":"75","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void requestFromFinalSubscribeWithRequestValue() {\n        TestSubscriber<String> s = new TestSubscriber<>(0L);\n        s.request(10);\n        final AtomicLong r = new AtomicLong();\n        s.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(10, r.get());\n    }\n","date":"2019-12-22 19:17:37","endLine":60,"groupId":"108775","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"requestFromFinalSubscribeWithRequestValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2a/27aaada0843c23d4ddd60659a57d9ffa3656cb.src","preCode":"    public void requestFromFinalSubscribeWithRequestValue() {\n        TestSubscriber<String> s = new TestSubscriber<String>(0L);\n        s.request(10);\n        final AtomicLong r = new AtomicLong();\n        s.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(10, r.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void requestFromDecoupledOperatorThatRequestsN() throws Throwable {\n        TestSubscriber<String> s = new TestSubscriber<>(10L);\n        final AtomicLong innerR = new AtomicLong();\n        FlowableOperator<String, String> o = new FlowableOperator<String, String>() {\n            @Override\n            public Subscriber<? super String> apply(Subscriber<? super String> child) {\n                \r\n                child.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        innerR.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n\n                ResourceSubscriber<String> as = new ResourceSubscriber<String>() {\n\n                    @Override\n                    protected void onStart() {\n                        \r\n                        request(99);\n                    }\n\n                    @Override\n                    public void onComplete() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(String t) {\n\n                    }\n                };\n\n                return as;\n            }\n        };\n        Subscriber<? super String> ns = o.apply(s);\n\n        final AtomicLong r = new AtomicLong();\n        \r\n        \r\n        ns.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(99, r.get());\n        assertEquals(10, innerR.get());\n    }\n","date":"2019-12-22 19:17:37","endLine":259,"groupId":"108775","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"requestFromDecoupledOperatorThatRequestsN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2a/27aaada0843c23d4ddd60659a57d9ffa3656cb.src","preCode":"    public void requestFromDecoupledOperatorThatRequestsN() throws Throwable {\n        TestSubscriber<String> s = new TestSubscriber<String>(10L);\n        final AtomicLong innerR = new AtomicLong();\n        FlowableOperator<String, String> o = new FlowableOperator<String, String>() {\n            @Override\n            public Subscriber<? super String> apply(Subscriber<? super String> child) {\n                \r\n                child.onSubscribe(new Subscription() {\n\n                    @Override\n                    public void request(long n) {\n                        innerR.set(n);\n                    }\n\n                    @Override\n                    public void cancel() {\n\n                    }\n\n                });\n\n                ResourceSubscriber<String> as = new ResourceSubscriber<String>() {\n\n                    @Override\n                    protected void onStart() {\n                        \r\n                        request(99);\n                    }\n\n                    @Override\n                    public void onComplete() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(String t) {\n\n                    }\n                };\n\n                return as;\n            }\n        };\n        Subscriber<? super String> ns = o.apply(s);\n\n        final AtomicLong r = new AtomicLong();\n        \r\n        \r\n        ns.onSubscribe(new Subscription() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n            @Override\n            public void cancel() {\n\n            }\n\n        });\n        assertEquals(99, r.get());\n        assertEquals(10, innerR.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
