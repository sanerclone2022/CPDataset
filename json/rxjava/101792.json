[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            Subscriber<? super R> a = downstream;\n            Iterator<? extends R> iterator = this.it;\n\n            if (outputFused && iterator != null) {\n                a.onNext(null);\n                a.onComplete();\n                return;\n            }\n\n            int missed = 1;\n\n            for (;;) {\n\n                if (iterator != null) {\n                    long r = requested.get();\n                    long e = 0L;\n\n                    if (r == Long.MAX_VALUE) {\n                        slowPath(a, iterator);\n                        return;\n                    }\n\n                    while (e != r) {\n                        if (cancelled) {\n                            return;\n                        }\n\n                        R v;\n\n                        try {\n                            v = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        a.onNext(v);\n\n                        if (cancelled) {\n                            return;\n                        }\n\n                        e++;\n\n                        boolean b;\n\n                        try {\n                            b = iterator.hasNext();\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        if (!b) {\n                            a.onComplete();\n                            return;\n                        }\n                    }\n\n                    if (e != 0L) {\n                        BackpressureHelper.produced(requested, e);\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n\n                if (iterator == null) {\n                    iterator = it;\n                }\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":214,"groupId":"2552","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"drain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/7f2740b952b170081da6973a8e488bdc6b5d31.src","preCode":"        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            Subscriber<? super R> a = downstream;\n            Iterator<? extends R> iterator = this.it;\n\n            if (outputFused && iterator != null) {\n                a.onNext(null);\n                a.onComplete();\n                return;\n            }\n\n            int missed = 1;\n\n            for (;;) {\n\n                if (iterator != null) {\n                    long r = requested.get();\n                    long e = 0L;\n\n                    if (r == Long.MAX_VALUE) {\n                        slowPath(a, iterator);\n                        return;\n                    }\n\n                    while (e != r) {\n                        if (cancelled) {\n                            return;\n                        }\n\n                        R v;\n\n                        try {\n                            v = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        a.onNext(v);\n\n                        if (cancelled) {\n                            return;\n                        }\n\n                        e++;\n\n                        boolean b;\n\n                        try {\n                            b = iterator.hasNext();\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        if (!b) {\n                            a.onComplete();\n                            return;\n                        }\n                    }\n\n                    if (e != 0L) {\n                        BackpressureHelper.produced(requested, e);\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n\n                if (iterator == null) {\n                    iterator = it;\n                }\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        void fastPath(Subscriber<? super R> a, Iterator<? extends R> iterator) {\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n\n                R v;\n\n                try {\n                    v = iterator.next();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                a.onNext(v);\n\n                if (cancelled) {\n                    return;\n                }\n\n                boolean b;\n\n                try {\n                    b = iterator.hasNext();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                if (!b) {\n                    a.onComplete();\n                    return;\n                }\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":176,"groupId":"4467","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fastPath","params":"(Subscriber<?superR>a@Iterator<?extendsR>iterator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9c/8aef2ba938ed6477d7b75e1f66ae39d8c4f4b5.src","preCode":"        void fastPath(Subscriber<? super R> a, Iterator<? extends R> iterator) {\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n\n                R v;\n\n                try {\n                    v = iterator.next();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                a.onNext(v);\n\n                if (cancelled) {\n                    return;\n                }\n\n                boolean b;\n\n                try {\n                    b = iterator.hasNext();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                if (!b) {\n                    a.onComplete();\n                    return;\n                }\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            Subscriber<? super R> a = downstream;\n            Iterator<? extends R> iterator = this.it;\n\n            if (outputFused && iterator != null) {\n                a.onNext(null);\n                a.onComplete();\n                return;\n            }\n\n            int missed = 1;\n\n            for (;;) {\n\n                if (iterator != null) {\n                    long r = requested.get();\n                    long e = 0L;\n\n                    if (r == Long.MAX_VALUE) {\n                        slowPath(a, iterator);\n                        return;\n                    }\n\n                    while (e != r) {\n                        if (cancelled) {\n                            return;\n                        }\n\n                        R v;\n\n                        try {\n                            v = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        a.onNext(v);\n\n                        if (cancelled) {\n                            return;\n                        }\n\n                        e++;\n\n                        boolean b;\n\n                        try {\n                            b = iterator.hasNext();\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        if (!b) {\n                            a.onComplete();\n                            return;\n                        }\n                    }\n\n                    if (e != 0L) {\n                        BackpressureHelper.produced(requested, e);\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n\n                if (iterator == null) {\n                    iterator = it;\n                }\n            }\n        }\n","date":"2019-12-18 03:06:44","endLine":214,"groupId":"2552","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"drain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0d/9e4aee0f7a9b9dfd2e8b2f0af89ab2e373d0d2.src","preCode":"        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            Subscriber<? super R> a = downstream;\n            Iterator<? extends R> iterator = this.it;\n\n            if (outputFused && iterator != null) {\n                a.onNext(null);\n                a.onComplete();\n                return;\n            }\n\n            int missed = 1;\n\n            for (;;) {\n\n                if (iterator != null) {\n                    long r = requested.get();\n                    long e = 0L;\n\n                    if (r == Long.MAX_VALUE) {\n                        slowPath(a, iterator);\n                        return;\n                    }\n\n                    while (e != r) {\n                        if (cancelled) {\n                            return;\n                        }\n\n                        R v;\n\n                        try {\n                            v = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        a.onNext(v);\n\n                        if (cancelled) {\n                            return;\n                        }\n\n                        e++;\n\n                        boolean b;\n\n                        try {\n                            b = iterator.hasNext();\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        if (!b) {\n                            a.onComplete();\n                            return;\n                        }\n                    }\n\n                    if (e != 0L) {\n                        BackpressureHelper.produced(requested, e);\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n\n                if (iterator == null) {\n                    iterator = it;\n                }\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        void fastPath(Subscriber<? super R> a, Iterator<? extends R> iterator) {\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n\n                R v;\n\n                try {\n                    v = iterator.next();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                a.onNext(v);\n\n                if (cancelled) {\n                    return;\n                }\n\n                boolean b;\n\n                try {\n                    b = iterator.hasNext();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                if (!b) {\n                    a.onComplete();\n                    return;\n                }\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":176,"groupId":"4467","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fastPath","params":"(Subscriber<?superR>a@Iterator<?extendsR>iterator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9c/8aef2ba938ed6477d7b75e1f66ae39d8c4f4b5.src","preCode":"        void fastPath(Subscriber<? super R> a, Iterator<? extends R> iterator) {\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n\n                R v;\n\n                try {\n                    v = iterator.next();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                a.onNext(v);\n\n                if (cancelled) {\n                    return;\n                }\n\n                boolean b;\n\n                try {\n                    b = iterator.hasNext();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                if (!b) {\n                    a.onComplete();\n                    return;\n                }\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            Subscriber<? super R> a = downstream;\n            Iterator<? extends R> iterator = this.it;\n\n            if (outputFused && iterator != null) {\n                a.onNext(null);\n                a.onComplete();\n                return;\n            }\n\n            int missed = 1;\n\n            for (;;) {\n\n                if (iterator != null) {\n                    long r = requested.get();\n                    long e = 0L;\n\n                    if (r == Long.MAX_VALUE) {\n                        fastPath(a, iterator);\n                        return;\n                    }\n\n                    while (e != r) {\n                        if (cancelled) {\n                            return;\n                        }\n\n                        R v;\n\n                        try {\n                            v = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        a.onNext(v);\n\n                        if (cancelled) {\n                            return;\n                        }\n\n                        e++;\n\n                        boolean b;\n\n                        try {\n                            b = iterator.hasNext();\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        if (!b) {\n                            a.onComplete();\n                            return;\n                        }\n                    }\n\n                    if (e != 0L) {\n                        BackpressureHelper.produced(requested, e);\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n\n                if (iterator == null) {\n                    iterator = it;\n                }\n            }\n        }\n","date":"2020-02-12 23:26:52","endLine":214,"groupId":"101792","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"drain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cd/16312620b43287eda220bc9a4d213a4ec587b4.src","preCode":"        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            Subscriber<? super R> a = downstream;\n            Iterator<? extends R> iterator = this.it;\n\n            if (outputFused && iterator != null) {\n                a.onNext(null);\n                a.onComplete();\n                return;\n            }\n\n            int missed = 1;\n\n            for (;;) {\n\n                if (iterator != null) {\n                    long r = requested.get();\n                    long e = 0L;\n\n                    if (r == Long.MAX_VALUE) {\n                        slowPath(a, iterator);\n                        return;\n                    }\n\n                    while (e != r) {\n                        if (cancelled) {\n                            return;\n                        }\n\n                        R v;\n\n                        try {\n                            v = Objects.requireNonNull(iterator.next(), \"The iterator returned a null value\");\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        a.onNext(v);\n\n                        if (cancelled) {\n                            return;\n                        }\n\n                        e++;\n\n                        boolean b;\n\n                        try {\n                            b = iterator.hasNext();\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            a.onError(ex);\n                            return;\n                        }\n\n                        if (!b) {\n                            a.onComplete();\n                            return;\n                        }\n                    }\n\n                    if (e != 0L) {\n                        BackpressureHelper.produced(requested, e);\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n\n                if (iterator == null) {\n                    iterator = it;\n                }\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/single/SingleFlatMapIterableFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":3,"curCode":"        void fastPath(Subscriber<? super R> a, Iterator<? extends R> iterator) {\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n\n                R v;\n\n                try {\n                    v = iterator.next();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                a.onNext(v);\n\n                if (cancelled) {\n                    return;\n                }\n\n                boolean b;\n\n                try {\n                    b = iterator.hasNext();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                if (!b) {\n                    a.onComplete();\n                    return;\n                }\n            }\n        }\n","date":"2019-08-16 20:51:17","endLine":176,"groupId":"101792","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fastPath","params":"(Subscriber<?superR>a@Iterator<?extendsR>iterator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9c/8aef2ba938ed6477d7b75e1f66ae39d8c4f4b5.src","preCode":"        void fastPath(Subscriber<? super R> a, Iterator<? extends R> iterator) {\n            for (;;) {\n                if (cancelled) {\n                    return;\n                }\n\n                R v;\n\n                try {\n                    v = iterator.next();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                a.onNext(v);\n\n                if (cancelled) {\n                    return;\n                }\n\n                boolean b;\n\n                try {\n                    b = iterator.hasNext();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    a.onError(ex);\n                    return;\n                }\n\n                if (!b) {\n                    a.onComplete();\n                    return;\n                }\n            }\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapIterableFlowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
