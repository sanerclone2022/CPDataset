[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void subscribeActual(Observer<? super T> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new Observable[8];\n            try {\n                for (ObservableSource<? extends T> p : sourcesIterable) {\n                    if (p == null) {\n                        EmptyDisposable.error(new NullPointerException(\"One of the sources is null\"), observer);\n                        return;\n                    }\n                    if (count == sources.length) {\n                        ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                        System.arraycopy(sources, 0, b, 0, count);\n                        sources = b;\n                    }\n                    sources[count++] = p;\n                }\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                EmptyDisposable.error(e, observer);\n                return;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        } else\n        if (count == 1) {\n            sources[0].subscribe(observer);\n            return;\n        }\n\n        AmbCoordinator<T> ac = new AmbCoordinator<T>(observer, count);\n        ac.subscribe(sources);\n    }\n","date":"2019-08-16 20:51:17","endLine":73,"groupId":"308","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Observer<?superT>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ad/b85e3d712948409c0b1919c7c11fba7407dbe2.src","preCode":"    public void subscribeActual(Observer<? super T> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new Observable[8];\n            try {\n                for (ObservableSource<? extends T> p : sourcesIterable) {\n                    if (p == null) {\n                        EmptyDisposable.error(new NullPointerException(\"One of the sources is null\"), observer);\n                        return;\n                    }\n                    if (count == sources.length) {\n                        ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                        System.arraycopy(sources, 0, b, 0, count);\n                        sources = b;\n                    }\n                    sources[count++] = p;\n                }\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                EmptyDisposable.error(e, observer);\n                return;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        } else\n        if (count == 1) {\n            sources[0].subscribe(observer);\n            return;\n        }\n\n        AmbCoordinator<T> ac = new AmbCoordinator<T>(observer, count);\n        ac.subscribe(sources);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableAmb.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void subscribeActual(Observer<? super R> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new Observable[8];\n            for (ObservableSource<? extends T> p : sourcesIterable) {\n                if (count == sources.length) {\n                    ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                    System.arraycopy(sources, 0, b, 0, count);\n                    sources = b;\n                }\n                sources[count++] = p;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        }\n\n        ZipCoordinator<T, R> zc = new ZipCoordinator<T, R>(observer, zipper, count, delayError);\n        zc.subscribe(sources, bufferSize);\n    }\n","date":"2019-08-16 20:51:17","endLine":73,"groupId":"7057","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Observer<?superR>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/ae21a6e4ddac3ca3a30ab6c5dec5a529f718b0.src","preCode":"    public void subscribeActual(Observer<? super R> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new Observable[8];\n            for (ObservableSource<? extends T> p : sourcesIterable) {\n                if (count == sources.length) {\n                    ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                    System.arraycopy(sources, 0, b, 0, count);\n                    sources = b;\n                }\n                sources[count++] = p;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        }\n\n        ZipCoordinator<T, R> zc = new ZipCoordinator<T, R>(observer, zipper, count, delayError);\n        zc.subscribe(sources, bufferSize);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZip.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-11 20:15:49","codes":[{"authorDate":"2019-12-11 20:15:49","commitOrder":2,"curCode":"    public void subscribeActual(Observer<? super T> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new ObservableSource[8];\n            try {\n                for (ObservableSource<? extends T> p : sourcesIterable) {\n                    if (p == null) {\n                        EmptyDisposable.error(new NullPointerException(\"One of the sources is null\"), observer);\n                        return;\n                    }\n                    if (count == sources.length) {\n                        ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                        System.arraycopy(sources, 0, b, 0, count);\n                        sources = b;\n                    }\n                    sources[count++] = p;\n                }\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                EmptyDisposable.error(e, observer);\n                return;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        } else\n        if (count == 1) {\n            sources[0].subscribe(observer);\n            return;\n        }\n\n        AmbCoordinator<T> ac = new AmbCoordinator<T>(observer, count);\n        ac.subscribe(sources);\n    }\n","date":"2019-12-11 20:15:49","endLine":73,"groupId":"308","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Observer<?superT>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/aa/8fae849d68632e697423d25b4f641cccc31105.src","preCode":"    public void subscribeActual(Observer<? super T> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new Observable[8];\n            try {\n                for (ObservableSource<? extends T> p : sourcesIterable) {\n                    if (p == null) {\n                        EmptyDisposable.error(new NullPointerException(\"One of the sources is null\"), observer);\n                        return;\n                    }\n                    if (count == sources.length) {\n                        ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                        System.arraycopy(sources, 0, b, 0, count);\n                        sources = b;\n                    }\n                    sources[count++] = p;\n                }\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                EmptyDisposable.error(e, observer);\n                return;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        } else\n        if (count == 1) {\n            sources[0].subscribe(observer);\n            return;\n        }\n\n        AmbCoordinator<T> ac = new AmbCoordinator<T>(observer, count);\n        ac.subscribe(sources);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableAmb.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2019-12-11 20:15:49","commitOrder":2,"curCode":"    public void subscribeActual(Observer<? super R> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new ObservableSource[8];\n            for (ObservableSource<? extends T> p : sourcesIterable) {\n                if (count == sources.length) {\n                    ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                    System.arraycopy(sources, 0, b, 0, count);\n                    sources = b;\n                }\n                sources[count++] = p;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        }\n\n        ZipCoordinator<T, R> zc = new ZipCoordinator<T, R>(observer, zipper, count, delayError);\n        zc.subscribe(sources, bufferSize);\n    }\n","date":"2019-12-11 20:15:49","endLine":73,"groupId":"7057","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Observer<?superR>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b3/d40dc2ed222fedff8ef1102121d6316e478306.src","preCode":"    public void subscribeActual(Observer<? super R> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new Observable[8];\n            for (ObservableSource<? extends T> p : sourcesIterable) {\n                if (count == sources.length) {\n                    ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                    System.arraycopy(sources, 0, b, 0, count);\n                    sources = b;\n                }\n                sources[count++] = p;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        }\n\n        ZipCoordinator<T, R> zc = new ZipCoordinator<T, R>(observer, zipper, count, delayError);\n        zc.subscribe(sources, bufferSize);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZip.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"01cae8997ef0a0baf0336ffbf1e6190f1529ce4b","commitMessage":"@@@3.x: Fix Observable amb.  combineLatest & zip ArrayStoreException (#6756)\n\n","date":"2019-12-11 20:15:49","modifiedFileCount":"14","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":3,"curCode":"    public void subscribeActual(Observer<? super T> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new ObservableSource[8];\n            try {\n                for (ObservableSource<? extends T> p : sourcesIterable) {\n                    if (p == null) {\n                        EmptyDisposable.error(new NullPointerException(\"One of the sources is null\"), observer);\n                        return;\n                    }\n                    if (count == sources.length) {\n                        ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                        System.arraycopy(sources, 0, b, 0, count);\n                        sources = b;\n                    }\n                    sources[count++] = p;\n                }\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                EmptyDisposable.error(e, observer);\n                return;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        } else\n        if (count == 1) {\n            sources[0].subscribe(observer);\n            return;\n        }\n\n        AmbCoordinator<T> ac = new AmbCoordinator<>(observer, count);\n        ac.subscribe(sources);\n    }\n","date":"2019-12-28 03:01:34","endLine":73,"groupId":"102167","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Observer<?superT>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/c43aa41cffe44037c132972bff6a4bf2b55c1e.src","preCode":"    public void subscribeActual(Observer<? super T> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new ObservableSource[8];\n            try {\n                for (ObservableSource<? extends T> p : sourcesIterable) {\n                    if (p == null) {\n                        EmptyDisposable.error(new NullPointerException(\"One of the sources is null\"), observer);\n                        return;\n                    }\n                    if (count == sources.length) {\n                        ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                        System.arraycopy(sources, 0, b, 0, count);\n                        sources = b;\n                    }\n                    sources[count++] = p;\n                }\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                EmptyDisposable.error(e, observer);\n                return;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        } else\n        if (count == 1) {\n            sources[0].subscribe(observer);\n            return;\n        }\n\n        AmbCoordinator<T> ac = new AmbCoordinator<T>(observer, count);\n        ac.subscribe(sources);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableAmb.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2019-12-28 03:01:34","commitOrder":3,"curCode":"    public void subscribeActual(Observer<? super R> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new ObservableSource[8];\n            for (ObservableSource<? extends T> p : sourcesIterable) {\n                if (count == sources.length) {\n                    ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                    System.arraycopy(sources, 0, b, 0, count);\n                    sources = b;\n                }\n                sources[count++] = p;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        }\n\n        ZipCoordinator<T, R> zc = new ZipCoordinator<>(observer, zipper, count, delayError);\n        zc.subscribe(sources, bufferSize);\n    }\n","date":"2019-12-28 03:01:34","endLine":73,"groupId":"102167","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Observer<?superR>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ac/e2d748e50b13e8a3ff044b26fb2619f5dee8e6.src","preCode":"    public void subscribeActual(Observer<? super R> observer) {\n        ObservableSource<? extends T>[] sources = this.sources;\n        int count = 0;\n        if (sources == null) {\n            sources = new ObservableSource[8];\n            for (ObservableSource<? extends T> p : sourcesIterable) {\n                if (count == sources.length) {\n                    ObservableSource<? extends T>[] b = new ObservableSource[count + (count >> 2)];\n                    System.arraycopy(sources, 0, b, 0, count);\n                    sources = b;\n                }\n                sources[count++] = p;\n            }\n        } else {\n            count = sources.length;\n        }\n\n        if (count == 0) {\n            EmptyDisposable.complete(observer);\n            return;\n        }\n\n        ZipCoordinator<T, R> zc = new ZipCoordinator<T, R>(observer, zipper, count, delayError);\n        zc.subscribe(sources, bufferSize);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZip.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
