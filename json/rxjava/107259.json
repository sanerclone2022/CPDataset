[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onNextThrowsCancelsUpstream() {\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        BoundedSubscriber<Integer> s = new BoundedSubscriber<Integer>(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) throws Exception {\n                errors.add(e);\n            }\n        }, new Action() {\n            @Override\n            public void run() throws Exception {\n\n            }\n        }, new Consumer<Subscription>() {\n            @Override\n            public void accept(Subscription subscription) throws Exception {\n                subscription.request(128);\n            }\n        }, 128);\n\n        pp.subscribe(s);\n\n        assertTrue(\"No observers?!\", pp.hasSubscribers());\n        assertTrue(\"Has errors already?!\", errors.isEmpty());\n\n        pp.onNext(1);\n\n        assertFalse(\"Has observers?!\", pp.hasSubscribers());\n        assertFalse(\"No errors?!\", errors.isEmpty());\n\n        assertTrue(errors.toString(), errors.get(0) instanceof TestException);\n    }\n","date":"2019-08-16 20:51:17","endLine":234,"groupId":"9074","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onNextThrowsCancelsUpstream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c2/d843fb235b360598646622ca5b5f8f1ec9bf34.src","preCode":"    public void onNextThrowsCancelsUpstream() {\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        BoundedSubscriber<Integer> s = new BoundedSubscriber<Integer>(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) throws Exception {\n                errors.add(e);\n            }\n        }, new Action() {\n            @Override\n            public void run() throws Exception {\n\n            }\n        }, new Consumer<Subscription>() {\n            @Override\n            public void accept(Subscription subscription) throws Exception {\n                subscription.request(128);\n            }\n        }, 128);\n\n        pp.subscribe(s);\n\n        assertTrue(\"No observers?!\", pp.hasSubscribers());\n        assertTrue(\"Has errors already?!\", errors.isEmpty());\n\n        pp.onNext(1);\n\n        assertFalse(\"Has observers?!\", pp.hasSubscribers());\n        assertFalse(\"No errors?!\", errors.isEmpty());\n\n        assertTrue(errors.toString(), errors.get(0) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/subscribers/BoundedSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onNextThrowsCancelsUpstream() {\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        pp.subscribe(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) throws Exception {\n                errors.add(e);\n            }\n        });\n\n        assertTrue(\"No observers?!\", pp.hasSubscribers());\n        assertTrue(\"Has errors already?!\", errors.isEmpty());\n\n        pp.onNext(1);\n\n        assertFalse(\"Has observers?!\", pp.hasSubscribers());\n        assertFalse(\"No errors?!\", errors.isEmpty());\n\n        assertTrue(errors.toString(), errors.get(0) instanceof TestException);\n    }\n","date":"2019-08-16 20:51:17","endLine":321,"groupId":"4138","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onNextThrowsCancelsUpstream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/18/cde98c75c57713865044d01c8e84819c210a14.src","preCode":"    public void onNextThrowsCancelsUpstream() {\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        pp.subscribe(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) throws Exception {\n                errors.add(e);\n            }\n        });\n\n        assertTrue(\"No observers?!\", pp.hasSubscribers());\n        assertTrue(\"Has errors already?!\", errors.isEmpty());\n\n        pp.onNext(1);\n\n        assertFalse(\"Has observers?!\", pp.hasSubscribers());\n        assertFalse(\"No errors?!\", errors.isEmpty());\n\n        assertTrue(errors.toString(), errors.get(0) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/subscribers/LambdaSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:23","codes":[{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void onNextThrowsCancelsUpstream() {\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final List<Throwable> errors = new ArrayList<>();\n\n        BoundedSubscriber<Integer> s = new BoundedSubscriber<>(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) throws Exception {\n                errors.add(e);\n            }\n        }, new Action() {\n            @Override\n            public void run() throws Exception {\n\n            }\n        }, new Consumer<Subscription>() {\n            @Override\n            public void accept(Subscription subscription) throws Exception {\n                subscription.request(128);\n            }\n        }, 128);\n\n        pp.subscribe(s);\n\n        assertTrue(\"No observers?!\", pp.hasSubscribers());\n        assertTrue(\"Has errors already?!\", errors.isEmpty());\n\n        pp.onNext(1);\n\n        assertFalse(\"Has observers?!\", pp.hasSubscribers());\n        assertFalse(\"No errors?!\", errors.isEmpty());\n\n        assertTrue(errors.toString(), errors.get(0) instanceof TestException);\n    }\n","date":"2019-12-22 19:17:23","endLine":234,"groupId":"107259","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onNextThrowsCancelsUpstream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d6/b80cc8733a5676cf2389a44cc80f3472e1951c.src","preCode":"    public void onNextThrowsCancelsUpstream() {\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        BoundedSubscriber<Integer> s = new BoundedSubscriber<Integer>(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) throws Exception {\n                errors.add(e);\n            }\n        }, new Action() {\n            @Override\n            public void run() throws Exception {\n\n            }\n        }, new Consumer<Subscription>() {\n            @Override\n            public void accept(Subscription subscription) throws Exception {\n                subscription.request(128);\n            }\n        }, 128);\n\n        pp.subscribe(s);\n\n        assertTrue(\"No observers?!\", pp.hasSubscribers());\n        assertTrue(\"Has errors already?!\", errors.isEmpty());\n\n        pp.onNext(1);\n\n        assertFalse(\"Has observers?!\", pp.hasSubscribers());\n        assertFalse(\"No errors?!\", errors.isEmpty());\n\n        assertTrue(errors.toString(), errors.get(0) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/subscribers/BoundedSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void onNextThrowsCancelsUpstream() {\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final List<Throwable> errors = new ArrayList<>();\n\n        pp.subscribe(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) throws Exception {\n                errors.add(e);\n            }\n        });\n\n        assertTrue(\"No observers?!\", pp.hasSubscribers());\n        assertTrue(\"Has errors already?!\", errors.isEmpty());\n\n        pp.onNext(1);\n\n        assertFalse(\"Has observers?!\", pp.hasSubscribers());\n        assertFalse(\"No errors?!\", errors.isEmpty());\n\n        assertTrue(errors.toString(), errors.get(0) instanceof TestException);\n    }\n","date":"2019-12-22 19:17:23","endLine":321,"groupId":"107259","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onNextThrowsCancelsUpstream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/e4fb2fc9503827b8fe914dbce43acd61286764.src","preCode":"    public void onNextThrowsCancelsUpstream() {\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        final List<Throwable> errors = new ArrayList<Throwable>();\n\n        pp.subscribe(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                throw new TestException();\n            }\n        }, new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) throws Exception {\n                errors.add(e);\n            }\n        });\n\n        assertTrue(\"No observers?!\", pp.hasSubscribers());\n        assertTrue(\"Has errors already?!\", errors.isEmpty());\n\n        pp.onNext(1);\n\n        assertFalse(\"Has observers?!\", pp.hasSubscribers());\n        assertFalse(\"No errors?!\", errors.isEmpty());\n\n        assertTrue(errors.toString(), errors.get(0) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/subscribers/LambdaSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"}],"commitId":"75da4b504a52466b455a49a342747514fa0dffab","commitMessage":"@@@Diamond operators in tests (#6788)\n\n* diamond operators in unit tests.  small packages in internal/\n\n* diamond operators in unit tests.  small packages in internal/operators\n","date":"2019-12-22 19:17:23","modifiedFileCount":"92","status":"M","submitter":"Dmitry Volkov"}]
