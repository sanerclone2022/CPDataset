[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void connectIsIdempotent() {\n        final AtomicInteger calls = new AtomicInteger();\n        Observable<Integer> source = Observable.unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(Observer<? super Integer> t) {\n                t.onSubscribe(Disposables.empty());\n                calls.getAndIncrement();\n            }\n        });\n\n        ConnectableObservable<Integer> conn = source.publish();\n\n        assertEquals(0, calls.get());\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(1, calls.get());\n\n        conn.connect().dispose();\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(2, calls.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":377,"groupId":"4102","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"connectIsIdempotent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/f0140e5de8fe5399071cc09e7e171d010d689c.src","preCode":"    public void connectIsIdempotent() {\n        final AtomicInteger calls = new AtomicInteger();\n        Observable<Integer> source = Observable.unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(Observer<? super Integer> t) {\n                t.onSubscribe(Disposables.empty());\n                calls.getAndIncrement();\n            }\n        });\n\n        ConnectableObservable<Integer> conn = source.publish();\n\n        assertEquals(0, calls.get());\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(1, calls.get());\n\n        conn.connect().dispose();\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(2, calls.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void connectIsIdempotent() {\n        final AtomicInteger calls = new AtomicInteger();\n        Flowable<Integer> source = Flowable.unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> t) {\n                t.onSubscribe(new BooleanSubscription());\n                calls.getAndIncrement();\n            }\n        });\n\n        ConnectableFlowable<Integer> conn = source.publish();\n\n        assertEquals(0, calls.get());\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(1, calls.get());\n\n        conn.connect().dispose();\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(2, calls.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":403,"groupId":"8126","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"connectIsIdempotent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/cba3926fbcf7b2764c9247a412564b573a29e2.src","preCode":"    public void connectIsIdempotent() {\n        final AtomicInteger calls = new AtomicInteger();\n        Flowable<Integer> source = Flowable.unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> t) {\n                t.onSubscribe(new BooleanSubscription());\n                calls.getAndIncrement();\n            }\n        });\n\n        ConnectableFlowable<Integer> conn = source.publish();\n\n        assertEquals(0, calls.get());\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(1, calls.get());\n\n        conn.connect().dispose();\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(2, calls.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void connectIsIdempotent() {\n        final AtomicInteger calls = new AtomicInteger();\n        Observable<Integer> source = Observable.unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(Observer<? super Integer> t) {\n                t.onSubscribe(Disposable.empty());\n                calls.getAndIncrement();\n            }\n        });\n\n        ConnectableObservable<Integer> conn = source.publish();\n\n        assertEquals(0, calls.get());\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(1, calls.get());\n\n        conn.connect().dispose();\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(2, calls.get());\n    }\n","date":"2019-12-20 02:39:40","endLine":377,"groupId":"105260","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"connectIsIdempotent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ee/80dc2cab385182273a84f465286035feb331dd.src","preCode":"    public void connectIsIdempotent() {\n        final AtomicInteger calls = new AtomicInteger();\n        Observable<Integer> source = Observable.unsafeCreate(new ObservableSource<Integer>() {\n            @Override\n            public void subscribe(Observer<? super Integer> t) {\n                t.onSubscribe(Disposables.empty());\n                calls.getAndIncrement();\n            }\n        });\n\n        ConnectableObservable<Integer> conn = source.publish();\n\n        assertEquals(0, calls.get());\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(1, calls.get());\n\n        conn.connect().dispose();\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(2, calls.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void connectIsIdempotent() {\n        final AtomicInteger calls = new AtomicInteger();\n        Flowable<Integer> source = Flowable.unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> t) {\n                t.onSubscribe(new BooleanSubscription());\n                calls.getAndIncrement();\n            }\n        });\n\n        ConnectableFlowable<Integer> conn = source.publish();\n\n        assertEquals(0, calls.get());\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(1, calls.get());\n\n        conn.connect().dispose();\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(2, calls.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":403,"groupId":"105260","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"connectIsIdempotent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/cba3926fbcf7b2764c9247a412564b573a29e2.src","preCode":"    public void connectIsIdempotent() {\n        final AtomicInteger calls = new AtomicInteger();\n        Flowable<Integer> source = Flowable.unsafeCreate(new Publisher<Integer>() {\n            @Override\n            public void subscribe(Subscriber<? super Integer> t) {\n                t.onSubscribe(new BooleanSubscription());\n                calls.getAndIncrement();\n            }\n        });\n\n        ConnectableFlowable<Integer> conn = source.publish();\n\n        assertEquals(0, calls.get());\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(1, calls.get());\n\n        conn.connect().dispose();\n\n        conn.connect();\n        conn.connect();\n\n        assertEquals(2, calls.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
