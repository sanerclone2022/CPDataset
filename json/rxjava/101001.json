[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Observable<String> fromSupplierObservable = Observable.fromSupplier(func);\n\n        Observer<Object> observer = TestHelper.mockObserver();\n\n        TestObserver<String> outer = new TestObserver<String>(observer);\n\n        fromSupplierObservable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.dispose();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(observer).onSubscribe(any(Disposable.class));\n        verifyNoMoreInteractions(observer);\n    }\n","date":"2019-08-16 20:51:17","endLine":145,"groupId":"2656","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/95/5bb3f50ef6a3d5c0db2805b06ba7602f37d2b1.src","preCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Observable<String> fromSupplierObservable = Observable.fromSupplier(func);\n\n        Observer<Object> observer = TestHelper.mockObserver();\n\n        TestObserver<String> outer = new TestObserver<String>(observer);\n\n        fromSupplierObservable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.dispose();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(observer).onSubscribe(any(Disposable.class));\n        verifyNoMoreInteractions(observer);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFromSupplierTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Flowable<String> fromSupplierFlowable = Flowable.fromSupplier(func);\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> outer = new TestSubscriber<String>(subscriber);\n\n        fromSupplierFlowable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.cancel();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(subscriber).onSubscribe(any(Subscription.class));\n        verifyNoMoreInteractions(subscriber);\n    }\n","date":"2019-08-16 20:51:17","endLine":145,"groupId":"7570","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5a/a34993daaf66f4449a740429d059cb51a1aa0e.src","preCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Flowable<String> fromSupplierFlowable = Flowable.fromSupplier(func);\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> outer = new TestSubscriber<String>(subscriber);\n\n        fromSupplierFlowable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.cancel();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(subscriber).onSubscribe(any(Subscription.class));\n        verifyNoMoreInteractions(subscriber);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFromSupplierTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Observable<String> fromSupplierObservable = Observable.fromSupplier(func);\n\n        Observer<Object> observer = TestHelper.mockObserver();\n\n        TestObserver<String> outer = new TestObserver<String>(observer);\n\n        fromSupplierObservable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.dispose();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(observer).onSubscribe(any(Disposable.class));\n        verifyNoMoreInteractions(observer);\n    }\n","date":"2019-08-16 20:51:17","endLine":145,"groupId":"2656","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/95/5bb3f50ef6a3d5c0db2805b06ba7602f37d2b1.src","preCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Observable<String> fromSupplierObservable = Observable.fromSupplier(func);\n\n        Observer<Object> observer = TestHelper.mockObserver();\n\n        TestObserver<String> outer = new TestObserver<String>(observer);\n\n        fromSupplierObservable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.dispose();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(observer).onSubscribe(any(Disposable.class));\n        verifyNoMoreInteractions(observer);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFromSupplierTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Flowable<String> fromSupplierFlowable = Flowable.fromSupplier(func);\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> outer = new TestSubscriber<>(subscriber);\n\n        fromSupplierFlowable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.cancel();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(subscriber).onSubscribe(any(Subscription.class));\n        verifyNoMoreInteractions(subscriber);\n    }\n","date":"2019-12-22 18:39:23","endLine":145,"groupId":"7570","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/57/53e8ff66c4d1e4fcb0738204568a585e865a0a.src","preCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Flowable<String> fromSupplierFlowable = Flowable.fromSupplier(func);\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> outer = new TestSubscriber<String>(subscriber);\n\n        fromSupplierFlowable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.cancel();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(subscriber).onSubscribe(any(Subscription.class));\n        verifyNoMoreInteractions(subscriber);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFromSupplierTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Observable<String> fromSupplierObservable = Observable.fromSupplier(func);\n\n        Observer<Object> observer = TestHelper.mockObserver();\n\n        TestObserver<String> outer = new TestObserver<>(observer);\n\n        fromSupplierObservable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.dispose();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(observer).onSubscribe(any(Disposable.class));\n        verifyNoMoreInteractions(observer);\n    }\n","date":"2019-12-22 18:59:44","endLine":145,"groupId":"101001","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2b/181a56fe94691905af40f5058a91966e738fd8.src","preCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Observable<String> fromSupplierObservable = Observable.fromSupplier(func);\n\n        Observer<Object> observer = TestHelper.mockObserver();\n\n        TestObserver<String> outer = new TestObserver<String>(observer);\n\n        fromSupplierObservable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.dispose();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(observer).onSubscribe(any(Disposable.class));\n        verifyNoMoreInteractions(observer);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFromSupplierTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Flowable<String> fromSupplierFlowable = Flowable.fromSupplier(func);\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> outer = new TestSubscriber<>(subscriber);\n\n        fromSupplierFlowable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.cancel();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(subscriber).onSubscribe(any(Subscription.class));\n        verifyNoMoreInteractions(subscriber);\n    }\n","date":"2019-12-22 18:39:23","endLine":145,"groupId":"101001","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/57/53e8ff66c4d1e4fcb0738204568a585e865a0a.src","preCode":"    public void shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission() throws Throwable {\n        Supplier<String> func = mock(Supplier.class);\n\n        final CountDownLatch funcLatch = new CountDownLatch(1);\n        final CountDownLatch observerLatch = new CountDownLatch(1);\n\n        when(func.get()).thenAnswer(new Answer<String>() {\n            @Override\n            public String answer(InvocationOnMock invocation) throws Throwable {\n                observerLatch.countDown();\n\n                try {\n                    funcLatch.await();\n                } catch (InterruptedException e) {\n                    \r\n\n                    \r\n                    Thread.currentThread().interrupt();\n                }\n\n                return \"should_not_be_delivered\";\n            }\n        });\n\n        Flowable<String> fromSupplierFlowable = Flowable.fromSupplier(func);\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> outer = new TestSubscriber<>(subscriber);\n\n        fromSupplierFlowable\n                .subscribeOn(Schedulers.computation())\n                .subscribe(outer);\n\n        \r\n        observerLatch.await();\n\n        \r\n        outer.cancel();\n\n        \r\n        funcLatch.countDown();\n\n        \r\n        verify(func).get();\n\n        \r\n        verify(subscriber).onSubscribe(any(Subscription.class));\n        verifyNoMoreInteractions(subscriber);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFromSupplierTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
