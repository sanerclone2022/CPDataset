[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void overflowMissingBackpressureException() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        pp.publish(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.assertNoValues();\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\",\n                ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","date":"2019-08-16 20:51:17","endLine":235,"groupId":"4021","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"overflowMissingBackpressureException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f6/2616097e900ab3ba2e77c40c276369550b8daf.src","preCode":"    public void overflowMissingBackpressureException() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        pp.publish(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.assertNoValues();\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\",\n                ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishFunctionTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void overflowMissingBackpressureExceptionDelayed() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        new FlowablePublishMulticast<Integer, Integer>(pp, new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }, Flowable.bufferSize(), true).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.request(Flowable.bufferSize());\n\n        ts.assertValueCount(Flowable.bufferSize());\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\", ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","date":"2019-08-16 20:51:17","endLine":262,"groupId":"588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"overflowMissingBackpressureExceptionDelayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f6/2616097e900ab3ba2e77c40c276369550b8daf.src","preCode":"    public void overflowMissingBackpressureExceptionDelayed() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        new FlowablePublishMulticast<Integer, Integer>(pp, new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }, Flowable.bufferSize(), true).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.request(Flowable.bufferSize());\n\n        ts.assertValueCount(Flowable.bufferSize());\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\", ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishFunctionTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void overflowMissingBackpressureException() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        pp.publish(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.assertNoValues();\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\",\n                ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","date":"2019-12-22 18:39:23","endLine":235,"groupId":"4021","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"overflowMissingBackpressureException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a6/60eb74295f5e6ba5c784401f8f4979174c0270.src","preCode":"    public void overflowMissingBackpressureException() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        pp.publish(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.assertNoValues();\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\",\n                ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishFunctionTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void overflowMissingBackpressureExceptionDelayed() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        new FlowablePublishMulticast<>(pp, new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }, Flowable.bufferSize(), true).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.request(Flowable.bufferSize());\n\n        ts.assertValueCount(Flowable.bufferSize());\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\", ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","date":"2019-12-22 18:39:23","endLine":262,"groupId":"588","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"overflowMissingBackpressureExceptionDelayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a6/60eb74295f5e6ba5c784401f8f4979174c0270.src","preCode":"    public void overflowMissingBackpressureExceptionDelayed() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        new FlowablePublishMulticast<Integer, Integer>(pp, new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }, Flowable.bufferSize(), true).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.request(Flowable.bufferSize());\n\n        ts.assertValueCount(Flowable.bufferSize());\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\", ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishFunctionTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2020-05-21 02:55:39","codes":[{"authorDate":"2020-05-21 02:55:39","commitOrder":3,"curCode":"    public void overflowMissingBackpressureException() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        pp.publish(Functions.identity()).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.assertNoValues();\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\",\n                ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","date":"2020-05-21 02:55:39","endLine":198,"groupId":"106724","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"overflowMissingBackpressureException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/998eb54332d02e8f0425ff0ae220f39671a550.src","preCode":"    public void overflowMissingBackpressureException() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        pp.publish(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.assertNoValues();\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\",\n                ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishFunctionTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2020-05-21 02:55:39","commitOrder":3,"curCode":"    public void overflowMissingBackpressureExceptionDelayed() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        new FlowablePublishMulticast<>(pp, Functions.identity(), Flowable.bufferSize(), true).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.request(Flowable.bufferSize());\n\n        ts.assertValueCount(Flowable.bufferSize());\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\", ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","date":"2020-05-21 02:55:39","endLine":220,"groupId":"106724","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"overflowMissingBackpressureExceptionDelayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/998eb54332d02e8f0425ff0ae220f39671a550.src","preCode":"    public void overflowMissingBackpressureExceptionDelayed() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(0);\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        new FlowablePublishMulticast<>(pp, new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> f) {\n                return f;\n            }\n        }, Flowable.bufferSize(), true).subscribe(ts);\n\n        for (int i = 0; i < Flowable.bufferSize() * 2; i++) {\n            pp.onNext(i);\n        }\n\n        ts.request(Flowable.bufferSize());\n\n        ts.assertValueCount(Flowable.bufferSize());\n        ts.assertError(MissingBackpressureException.class);\n        ts.assertNotComplete();\n\n        Assert.assertEquals(\"Could not emit value due to lack of requests\", ts.errors().get(0).getMessage());\n        Assert.assertFalse(\"Source has subscribers?\", pp.hasSubscribers());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishFunctionTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"e2b1d2fc6c2ff7ad5551f6d5a14aafb37c1bb5bc","commitMessage":"@@@Removed unnecessary upstream.cancel() call for casually finished upstream sequences. (#6992)\n\n* no upstream.cancel() in FlowablePublishMulticast when the sequence is finished normally via onComplete/onError from upstream;\nminor code cleanup - unnecessary Disposable implementation to avoid method name clash\n\n* cleanup in FlowablePublishFunctionTest: refactored anonymous classes to lambdas\n\n* reduced visibility for dispose() and isDisposed() in the inner MulticastProcessor\n\nCo-authored-by: derar <derar@appsflyer.com>","date":"2020-05-21 02:55:39","modifiedFileCount":"2","status":"M","submitter":"Derar Bakr"}]
