[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2020-01-27 03:13:17","commitOrder":2,"curCode":"    public void doubleOnSubscribe() {\n        TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>, Maybe<Integer>>() {\n            @Override\n            public Maybe<Integer> apply(Maybe<Integer> m) throws Exception {\n                return m.concatMapSingle(new Function<Integer, SingleSource<Integer>>() {\n                    @Override\n                    public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                        return Single.just(2);\n                    }\n                });\n            }\n        });\n    }\n","date":"2020-01-27 03:13:17","endLine":128,"groupId":"9187","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doubleOnSubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/26b18e26e4d4aa6ed0106ba37c3a5c1bfa7f85.src","preCode":"    public void doubleOnSubscribe() {\n        TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>, Maybe<Integer>>() {\n            @Override\n            public Maybe<Integer> apply(Maybe<Integer> m) throws Exception {\n                return m.concatMapSingle(new Function<Integer, SingleSource<Integer>>() {\n                    @Override\n                    public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                        return Single.just(2);\n                    }\n                });\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeConcatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void doubleOnSubscribe() {\n        TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>, Maybe<Integer>>() {\n            @Override\n            public Maybe<Integer> apply(Maybe<Integer> m) throws Exception {\n                return m.flatMapSingleElement(new Function<Integer, SingleSource<Integer>>() {\n                    @Override\n                    public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                        return Single.just(2);\n                    }\n                });\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":134,"groupId":"5853","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doubleOnSubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/409aed66d82558e1deb9e82e0baa8aea53e956.src","preCode":"    public void doubleOnSubscribe() {\n        TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>, Maybe<Integer>>() {\n            @Override\n            public Maybe<Integer> apply(Maybe<Integer> m) throws Exception {\n                return m.flatMapSingleElement(new Function<Integer, SingleSource<Integer>>() {\n                    @Override\n                    public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                        return Single.just(2);\n                    }\n                });\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingleElementTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"NB"}],"commitId":"57bd1a9272464a1b4b201faa2bab7a929a0ae7f3","commitMessage":"@@@3.x: Add concatMapX operators (aliases) (#6879)\n\n","date":"2020-01-27 03:13:17","modifiedFileCount":"3","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-29 04:32:19","codes":[{"authorDate":"2020-01-27 03:13:17","commitOrder":3,"curCode":"    public void doubleOnSubscribe() {\n        TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>, Maybe<Integer>>() {\n            @Override\n            public Maybe<Integer> apply(Maybe<Integer> m) throws Exception {\n                return m.concatMapSingle(new Function<Integer, SingleSource<Integer>>() {\n                    @Override\n                    public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                        return Single.just(2);\n                    }\n                });\n            }\n        });\n    }\n","date":"2020-01-27 03:13:17","endLine":128,"groupId":"106963","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doubleOnSubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/26b18e26e4d4aa6ed0106ba37c3a5c1bfa7f85.src","preCode":"    public void doubleOnSubscribe() {\n        TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>, Maybe<Integer>>() {\n            @Override\n            public Maybe<Integer> apply(Maybe<Integer> m) throws Exception {\n                return m.concatMapSingle(new Function<Integer, SingleSource<Integer>>() {\n                    @Override\n                    public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                        return Single.just(2);\n                    }\n                });\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeConcatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2020-01-29 04:32:19","commitOrder":3,"curCode":"    public void doubleOnSubscribe() {\n        TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>, Maybe<Integer>>() {\n            @Override\n            public Maybe<Integer> apply(Maybe<Integer> m) throws Exception {\n                return m.flatMapSingle(new Function<Integer, SingleSource<Integer>>() {\n                    @Override\n                    public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                        return Single.just(2);\n                    }\n                });\n            }\n        });\n    }\n","date":"2020-01-29 04:32:19","endLine":128,"groupId":"106963","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doubleOnSubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/92e023ab8f46047421e68a4003c2858751f9a6.src","preCode":"    public void doubleOnSubscribe() {\n        TestHelper.checkDoubleOnSubscribeMaybe(new Function<Maybe<Integer>, Maybe<Integer>>() {\n            @Override\n            public Maybe<Integer> apply(Maybe<Integer> m) throws Exception {\n                return m.flatMapSingleElement(new Function<Integer, SingleSource<Integer>>() {\n                    @Override\n                    public SingleSource<Integer> apply(final Integer integer) throws Exception {\n                        return Single.just(2);\n                    }\n                });\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeFlatMapSingleElementTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"f1a795da0d4cdfb3133206ad8e3887bdb8ba948b","commitMessage":"@@@3.x: Swap Maybe.flatMapSingle and Maybe.flatMapSingleElement (#6891)\n\n* Deleted Maybe.flatMapSingle\n\nAnd replaced tests with flatMapSingle().toSingle()\n\n* Renamed Maybe.flatMapSingleElement to flatMapSingle\n\n* Deleted unused MaybeFlatMapSingle operator\n\n* Renamed operator MaybeFlatMapSingleElement to MaybeFlatMapSingle\n\n* Add Ignore to XFlatMapTest.maybeSingle\n","date":"2020-01-29 04:32:19","modifiedFileCount":"5","status":"M","submitter":"slisaasquatch"}]
