[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mapResumeAsyncNext() {\n        \r\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Observable<String> o = w.onErrorResumeNext(new Function<Throwable, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(Throwable t1) {\n                return Observable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        TestObserver<String> to = new TestObserver<String>(observer);\n        o.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, Mockito.never()).onNext(\"two\");\n        verify(observer, Mockito.never()).onNext(\"three\");\n        verify(observer, times(1)).onNext(\"twoResume\");\n        verify(observer, times(1)).onNext(\"threeResume\");\n    }\n","date":"2019-08-16 20:51:17","endLine":188,"groupId":"3784","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mapResumeAsyncNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/27/61a6c14bc2a940b4220a2970e4b125ea3c8562.src","preCode":"    public void mapResumeAsyncNext() {\n        \r\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Observable<String> o = w.onErrorResumeNext(new Function<Throwable, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(Throwable t1) {\n                return Observable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        TestObserver<String> to = new TestObserver<String>(observer);\n        o.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, Mockito.never()).onNext(\"two\");\n        verify(observer, Mockito.never()).onNext(\"three\");\n        verify(observer, times(1)).onNext(\"twoResume\");\n        verify(observer, times(1)).onNext(\"threeResume\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorResumeNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mapResumeAsyncNext() {\n        \r\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Flowable<String> flowable = w.onErrorResumeNext(new Function<Throwable, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(Throwable t1) {\n                return Flowable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> ts = new TestSubscriber<String>(subscriber, Long.MAX_VALUE);\n        flowable.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, Mockito.never()).onNext(\"two\");\n        verify(subscriber, Mockito.never()).onNext(\"three\");\n        verify(subscriber, times(1)).onNext(\"twoResume\");\n        verify(subscriber, times(1)).onNext(\"threeResume\");\n    }\n","date":"2019-08-16 20:51:17","endLine":190,"groupId":"11029","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mapResumeAsyncNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/72/a0bf016110a067b12c0a86ff4ef86bc54ae769.src","preCode":"    public void mapResumeAsyncNext() {\n        \r\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Flowable<String> flowable = w.onErrorResumeNext(new Function<Throwable, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(Throwable t1) {\n                return Flowable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> ts = new TestSubscriber<String>(subscriber, Long.MAX_VALUE);\n        flowable.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, Mockito.never()).onNext(\"two\");\n        verify(subscriber, Mockito.never()).onNext(\"three\");\n        verify(subscriber, times(1)).onNext(\"twoResume\");\n        verify(subscriber, times(1)).onNext(\"threeResume\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorResumeNextViaFunctionTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void mapResumeAsyncNext() {\n        \r\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Observable<String> o = w.onErrorResumeNext(new Function<Throwable, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(Throwable t1) {\n                return Observable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        TestObserver<String> to = new TestObserver<String>(observer);\n        o.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, Mockito.never()).onNext(\"two\");\n        verify(observer, Mockito.never()).onNext(\"three\");\n        verify(observer, times(1)).onNext(\"twoResume\");\n        verify(observer, times(1)).onNext(\"threeResume\");\n    }\n","date":"2019-08-16 20:51:17","endLine":188,"groupId":"3784","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mapResumeAsyncNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/27/61a6c14bc2a940b4220a2970e4b125ea3c8562.src","preCode":"    public void mapResumeAsyncNext() {\n        \r\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Observable<String> o = w.onErrorResumeNext(new Function<Throwable, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(Throwable t1) {\n                return Observable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        TestObserver<String> to = new TestObserver<String>(observer);\n        o.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, Mockito.never()).onNext(\"two\");\n        verify(observer, Mockito.never()).onNext(\"three\");\n        verify(observer, times(1)).onNext(\"twoResume\");\n        verify(observer, times(1)).onNext(\"threeResume\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorResumeNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void mapResumeAsyncNext() {\n        \r\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Flowable<String> flowable = w.onErrorResumeNext(new Function<Throwable, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(Throwable t1) {\n                return Flowable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> ts = new TestSubscriber<>(subscriber, Long.MAX_VALUE);\n        flowable.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, Mockito.never()).onNext(\"two\");\n        verify(subscriber, Mockito.never()).onNext(\"three\");\n        verify(subscriber, times(1)).onNext(\"twoResume\");\n        verify(subscriber, times(1)).onNext(\"threeResume\");\n    }\n","date":"2019-12-22 18:39:23","endLine":190,"groupId":"11029","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mapResumeAsyncNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/51/de11ae7b75c891b2f46f3969cdd48f966a0791.src","preCode":"    public void mapResumeAsyncNext() {\n        \r\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Flowable<String> flowable = w.onErrorResumeNext(new Function<Throwable, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(Throwable t1) {\n                return Flowable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> ts = new TestSubscriber<String>(subscriber, Long.MAX_VALUE);\n        flowable.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, Mockito.never()).onNext(\"two\");\n        verify(subscriber, Mockito.never()).onNext(\"three\");\n        verify(subscriber, times(1)).onNext(\"twoResume\");\n        verify(subscriber, times(1)).onNext(\"threeResume\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorResumeNextViaFunctionTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void mapResumeAsyncNext() {\n        \r\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Observable<String> o = w.onErrorResumeNext(new Function<Throwable, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(Throwable t1) {\n                return Observable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        TestObserver<String> to = new TestObserver<>(observer);\n        o.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, Mockito.never()).onNext(\"two\");\n        verify(observer, Mockito.never()).onNext(\"three\");\n        verify(observer, times(1)).onNext(\"twoResume\");\n        verify(observer, times(1)).onNext(\"threeResume\");\n    }\n","date":"2019-12-22 18:59:44","endLine":188,"groupId":"102754","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mapResumeAsyncNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/6b6c96a19a63408797aafd22ce3e1bf2787e53.src","preCode":"    public void mapResumeAsyncNext() {\n        \r\n        Observable<String> w = Observable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Observable<String> o = w.onErrorResumeNext(new Function<Throwable, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(Throwable t1) {\n                return Observable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Observer<String> observer = TestHelper.mockObserver();\n\n        TestObserver<String> to = new TestObserver<String>(observer);\n        o.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(observer, Mockito.never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(1)).onNext(\"one\");\n        verify(observer, Mockito.never()).onNext(\"two\");\n        verify(observer, Mockito.never()).onNext(\"three\");\n        verify(observer, times(1)).onNext(\"twoResume\");\n        verify(observer, times(1)).onNext(\"threeResume\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableOnErrorResumeNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void mapResumeAsyncNext() {\n        \r\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Flowable<String> flowable = w.onErrorResumeNext(new Function<Throwable, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(Throwable t1) {\n                return Flowable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> ts = new TestSubscriber<>(subscriber, Long.MAX_VALUE);\n        flowable.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, Mockito.never()).onNext(\"two\");\n        verify(subscriber, Mockito.never()).onNext(\"three\");\n        verify(subscriber, times(1)).onNext(\"twoResume\");\n        verify(subscriber, times(1)).onNext(\"threeResume\");\n    }\n","date":"2019-12-22 18:39:23","endLine":190,"groupId":"102754","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mapResumeAsyncNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/51/de11ae7b75c891b2f46f3969cdd48f966a0791.src","preCode":"    public void mapResumeAsyncNext() {\n        \r\n        Flowable<String> w = Flowable.just(\"one\", \"fail\", \"two\", \"three\", \"fail\");\n\n        \r\n        \r\n        w = w.map(new Function<String, String>() {\n            @Override\n            public String apply(String s) {\n                if (\"fail\".equals(s)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                System.out.println(\"BadMapper:\" + s);\n                return s;\n            }\n        });\n\n        Flowable<String> flowable = w.onErrorResumeNext(new Function<Throwable, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(Throwable t1) {\n                return Flowable.just(\"twoResume\", \"threeResume\").subscribeOn(Schedulers.computation());\n            }\n\n        });\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<String> ts = new TestSubscriber<>(subscriber, Long.MAX_VALUE);\n        flowable.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n\n        verify(subscriber, Mockito.never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(1)).onNext(\"one\");\n        verify(subscriber, Mockito.never()).onNext(\"two\");\n        verify(subscriber, Mockito.never()).onNext(\"three\");\n        verify(subscriber, times(1)).onNext(\"twoResume\");\n        verify(subscriber, times(1)).onNext(\"threeResume\");\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableOnErrorResumeNextViaFunctionTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
