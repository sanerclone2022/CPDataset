[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void normalBehavior() {\n        Observable<String> source = Observable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Observable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(final GroupedObservable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestObserver<String> to = new TestObserver<String>();\n        m.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + to.values());\n        to.assertNoErrors();\n        assertEquals(to.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","date":"2019-08-16 20:51:17","endLine":1163,"groupId":"3348","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"normalBehavior","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void normalBehavior() {\n        Observable<String> source = Observable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Observable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(final GroupedObservable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestObserver<String> to = new TestObserver<String>();\n        m.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + to.values());\n        to.assertNoErrors();\n        assertEquals(to.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1100,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void normalBehavior() {\n        Flowable<String> source = Flowable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Flowable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedFlowable<String, String>, Publisher<String>>() {\n            @Override\n            public Publisher<String> apply(final GroupedFlowable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        m.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + ts.values());\n        ts.assertNoErrors();\n        assertEquals(ts.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","date":"2019-08-16 20:51:17","endLine":1170,"groupId":"10982","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"normalBehavior","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void normalBehavior() {\n        Flowable<String> source = Flowable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Flowable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedFlowable<String, String>, Publisher<String>>() {\n            @Override\n            public Publisher<String> apply(final GroupedFlowable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        m.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + ts.values());\n        ts.assertNoErrors();\n        assertEquals(ts.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1107,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void normalBehavior() {\n        Observable<String> source = Observable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Observable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(final GroupedObservable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestObserver<String> to = new TestObserver<String>();\n        m.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + to.values());\n        to.assertNoErrors();\n        assertEquals(to.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","date":"2019-08-16 20:51:17","endLine":1163,"groupId":"3348","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"normalBehavior","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void normalBehavior() {\n        Observable<String> source = Observable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Observable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(final GroupedObservable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestObserver<String> to = new TestObserver<String>();\n        m.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + to.values());\n        to.assertNoErrors();\n        assertEquals(to.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1100,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void normalBehavior() {\n        Flowable<String> source = Flowable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Flowable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedFlowable<String, String>, Publisher<String>>() {\n            @Override\n            public Publisher<String> apply(final GroupedFlowable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestSubscriber<String> ts = new TestSubscriber<>();\n        m.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + ts.values());\n        ts.assertNoErrors();\n        assertEquals(ts.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","date":"2019-12-22 18:39:23","endLine":1173,"groupId":"10982","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"normalBehavior","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void normalBehavior() {\n        Flowable<String> source = Flowable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Flowable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedFlowable<String, String>, Publisher<String>>() {\n            @Override\n            public Publisher<String> apply(final GroupedFlowable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        m.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + ts.values());\n        ts.assertNoErrors();\n        assertEquals(ts.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1110,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void normalBehavior() {\n        Observable<String> source = Observable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Observable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(final GroupedObservable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestObserver<String> to = new TestObserver<>();\n        m.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + to.values());\n        to.assertNoErrors();\n        assertEquals(to.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","date":"2019-12-22 18:59:44","endLine":1165,"groupId":"102914","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"normalBehavior","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/d3f2d6432c67ffdd0df5bbb6960b138ae6f15a.src","preCode":"    public void normalBehavior() {\n        Observable<String> source = Observable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Observable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(final GroupedObservable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestObserver<String> to = new TestObserver<String>();\n        m.subscribe(to);\n        to.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + to.values());\n        to.assertNoErrors();\n        assertEquals(to.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1102,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void normalBehavior() {\n        Flowable<String> source = Flowable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Flowable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedFlowable<String, String>, Publisher<String>>() {\n            @Override\n            public Publisher<String> apply(final GroupedFlowable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestSubscriber<String> ts = new TestSubscriber<>();\n        m.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + ts.values());\n        ts.assertNoErrors();\n        assertEquals(ts.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","date":"2019-12-22 18:39:23","endLine":1173,"groupId":"102914","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"normalBehavior","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void normalBehavior() {\n        Flowable<String> source = Flowable.fromIterable(Arrays.asList(\n                \"  foo\",\n                \" FoO \",\n                \"baR  \",\n                \"foO \",\n                \" Baz   \",\n                \"  qux \",\n                \"   bar\",\n                \" BAR  \",\n                \"FOO \",\n                \"baz  \",\n                \" bAZ \",\n                \"    fOo    \"\n                ));\n\n        \r\n\r\n\r\n\r\n\r\n\n        Function<String, String> keysel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1.trim().toLowerCase();\n            }\n        };\n        Function<String, String> valuesel = new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1 + t1;\n            }\n        };\n\n        Flowable<String> m = source.groupBy(keysel, valuesel)\n        .flatMap(new Function<GroupedFlowable<String, String>, Publisher<String>>() {\n            @Override\n            public Publisher<String> apply(final GroupedFlowable<String, String> g) {\n                System.out.println(\"-----------> NEXT: \" + g.getKey());\n                return g.take(2).map(new Function<String, String>() {\n\n                    int count;\n\n                    @Override\n                    public String apply(String v) {\n                        System.out.println(v);\n                        return g.getKey() + \"-\" + count++;\n                    }\n\n                });\n            }\n        });\n\n        TestSubscriber<String> ts = new TestSubscriber<>();\n        m.subscribe(ts);\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        System.out.println(\"ts .get \" + ts.values());\n        ts.assertNoErrors();\n        assertEquals(ts.values(),\n                Arrays.asList(\"foo-0\", \"foo-1\", \"bar-0\", \"foo-0\", \"baz-0\", \"qux-0\", \"bar-1\", \"bar-0\", \"foo-1\", \"baz-1\", \"baz-0\", \"foo-0\"));\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1110,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
