[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void cancelRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final FutureSubscriber<Integer> fo = new FutureSubscriber<Integer>();\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    fo.cancel(false);\n                }\n            };\n\n            TestHelper.race(r, r);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":171,"groupId":"4344","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/decae92c185c0d0c8c3d6beced8761cc0b76a0.src","preCode":"    public void cancelRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final FutureSubscriber<Integer> fo = new FutureSubscriber<Integer>();\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    fo.cancel(false);\n                }\n            };\n\n            TestHelper.race(r, r);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/FutureObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onCompleteCancelRace() {\n        RxJavaPlugins.setErrorHandler(Functions.emptyConsumer());\n        try {\n            for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n                final FutureSubscriber<Integer> fo = new FutureSubscriber<Integer>();\n\n                if (i % 3 == 0) {\n                    fo.onSubscribe(new BooleanSubscription());\n                }\n\n                if (i % 2 == 0) {\n                    fo.onNext(1);\n                }\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.cancel(false);\n                    }\n                };\n\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.onComplete();\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n            }\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":250,"groupId":"4347","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onCompleteCancelRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/decae92c185c0d0c8c3d6beced8761cc0b76a0.src","preCode":"    public void onCompleteCancelRace() {\n        RxJavaPlugins.setErrorHandler(Functions.emptyConsumer());\n        try {\n            for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n                final FutureSubscriber<Integer> fo = new FutureSubscriber<Integer>();\n\n                if (i % 3 == 0) {\n                    fo.onSubscribe(new BooleanSubscription());\n                }\n\n                if (i % 2 == 0) {\n                    fo.onNext(1);\n                }\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.cancel(false);\n                    }\n                };\n\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.onComplete();\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n            }\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/FutureObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:23","codes":[{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void cancelRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final FutureSubscriber<Integer> fo = new FutureSubscriber<>();\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    fo.cancel(false);\n                }\n            };\n\n            TestHelper.race(r, r);\n        }\n    }\n","date":"2019-12-22 19:17:23","endLine":171,"groupId":"10303","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a4/a8f353c2bce9107d96637c5700049476f37978.src","preCode":"    public void cancelRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final FutureSubscriber<Integer> fo = new FutureSubscriber<Integer>();\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    fo.cancel(false);\n                }\n            };\n\n            TestHelper.race(r, r);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/FutureObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void onCompleteCancelRace() {\n        RxJavaPlugins.setErrorHandler(Functions.emptyConsumer());\n        try {\n            for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n                final FutureSubscriber<Integer> fo = new FutureSubscriber<>();\n\n                if (i % 3 == 0) {\n                    fo.onSubscribe(new BooleanSubscription());\n                }\n\n                if (i % 2 == 0) {\n                    fo.onNext(1);\n                }\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.cancel(false);\n                    }\n                };\n\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.onComplete();\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n            }\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 19:17:23","endLine":250,"groupId":"4347","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onCompleteCancelRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a4/a8f353c2bce9107d96637c5700049476f37978.src","preCode":"    public void onCompleteCancelRace() {\n        RxJavaPlugins.setErrorHandler(Functions.emptyConsumer());\n        try {\n            for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n                final FutureSubscriber<Integer> fo = new FutureSubscriber<Integer>();\n\n                if (i % 3 == 0) {\n                    fo.onSubscribe(new BooleanSubscription());\n                }\n\n                if (i % 2 == 0) {\n                    fo.onNext(1);\n                }\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.cancel(false);\n                    }\n                };\n\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.onComplete();\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n            }\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/FutureObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"75da4b504a52466b455a49a342747514fa0dffab","commitMessage":"@@@Diamond operators in tests (#6788)\n\n* diamond operators in unit tests.  small packages in internal/\n\n* diamond operators in unit tests.  small packages in internal/operators\n","date":"2019-12-22 19:17:23","modifiedFileCount":"92","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2020-02-12 23:26:52","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"    public void cancelRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final FutureObserver<Integer> fo = new FutureObserver<>();\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    fo.cancel(false);\n                }\n            };\n\n            TestHelper.race(r, r);\n        }\n    }\n","date":"2020-02-12 23:26:52","endLine":169,"groupId":"107351","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"cancelRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e7/4efba8bd547f7e79329216232d5476774aa3d5.src","preCode":"    public void cancelRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final FutureSubscriber<Integer> fo = new FutureSubscriber<>();\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    fo.cancel(false);\n                }\n            };\n\n            TestHelper.race(r, r);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/FutureObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2020-02-12 23:26:52","commitOrder":3,"curCode":"    public void onCompleteCancelRace() {\n        RxJavaPlugins.setErrorHandler(Functions.emptyConsumer());\n        try {\n            for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n                final FutureObserver<Integer> fo = new FutureObserver<>();\n\n                if (i % 3 == 0) {\n                    fo.onSubscribe(Disposable.empty());\n                }\n\n                if (i % 2 == 0) {\n                    fo.onNext(1);\n                }\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.cancel(false);\n                    }\n                };\n\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.onComplete();\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n            }\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2020-02-12 23:26:52","endLine":248,"groupId":"107351","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onCompleteCancelRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e7/4efba8bd547f7e79329216232d5476774aa3d5.src","preCode":"    public void onCompleteCancelRace() {\n        RxJavaPlugins.setErrorHandler(Functions.emptyConsumer());\n        try {\n            for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n                final FutureSubscriber<Integer> fo = new FutureSubscriber<>();\n\n                if (i % 3 == 0) {\n                    fo.onSubscribe(new BooleanSubscription());\n                }\n\n                if (i % 2 == 0) {\n                    fo.onNext(1);\n                }\n\n                Runnable r1 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.cancel(false);\n                    }\n                };\n\n                Runnable r2 = new Runnable() {\n                    @Override\n                    public void run() {\n                        fo.onComplete();\n                    }\n                };\n\n                TestHelper.race(r1, r2);\n            }\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/FutureObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
