[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void disposeInner() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        Observable.just(1).flatMapSingle(new Function<Integer, SingleSource<Object>>() {\n            @Override\n            public SingleSource<Object> apply(Integer v) throws Exception {\n                return new Single<Object>() {\n                    @Override\n                    protected void subscribeActual(SingleObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        to.dispose();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to\n        .assertEmpty();\n    }\n","date":"2019-08-16 20:51:17","endLine":370,"groupId":"2604","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"disposeInner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/77/db13d5a14726908c3c3cebb31bbd5efe03bced.src","preCode":"    public void disposeInner() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        Observable.just(1).flatMapSingle(new Function<Integer, SingleSource<Object>>() {\n            @Override\n            public SingleSource<Object> apply(Integer v) throws Exception {\n                return new Single<Object>() {\n                    @Override\n                    protected void subscribeActual(SingleObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        to.dispose();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to\n        .assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void disposeInner() {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n\n        Flowable.just(1).flatMapMaybe(new Function<Integer, MaybeSource<Object>>() {\n            @Override\n            public MaybeSource<Object> apply(Integer v) throws Exception {\n                return new Maybe<Object>() {\n                    @Override\n                    protected void subscribeActual(MaybeObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        ts.cancel();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts\n        .assertEmpty();\n    }\n","date":"2019-08-16 20:51:17","endLine":549,"groupId":"5972","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"disposeInner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/33/2d906952592330da97d6052f08ecd40f5694d4.src","preCode":"    public void disposeInner() {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n\n        Flowable.just(1).flatMapMaybe(new Function<Integer, MaybeSource<Object>>() {\n            @Override\n            public MaybeSource<Object> apply(Integer v) throws Exception {\n                return new Maybe<Object>() {\n                    @Override\n                    protected void subscribeActual(MaybeObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        ts.cancel();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts\n        .assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void disposeInner() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        Observable.just(1).flatMapSingle(new Function<Integer, SingleSource<Object>>() {\n            @Override\n            public SingleSource<Object> apply(Integer v) throws Exception {\n                return new Single<Object>() {\n                    @Override\n                    protected void subscribeActual(SingleObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        to.dispose();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to\n        .assertEmpty();\n    }\n","date":"2019-12-20 02:39:40","endLine":370,"groupId":"8235","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"disposeInner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b8/c7b351beb59c1dce478847821bb9d31a55a864.src","preCode":"    public void disposeInner() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        Observable.just(1).flatMapSingle(new Function<Integer, SingleSource<Object>>() {\n            @Override\n            public SingleSource<Object> apply(Integer v) throws Exception {\n                return new Single<Object>() {\n                    @Override\n                    protected void subscribeActual(SingleObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        to.dispose();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to\n        .assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void disposeInner() {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n\n        Flowable.just(1).flatMapMaybe(new Function<Integer, MaybeSource<Object>>() {\n            @Override\n            public MaybeSource<Object> apply(Integer v) throws Exception {\n                return new Maybe<Object>() {\n                    @Override\n                    protected void subscribeActual(MaybeObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        ts.cancel();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts\n        .assertEmpty();\n    }\n","date":"2019-12-20 02:39:40","endLine":549,"groupId":"2528","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"disposeInner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/25ce83725637d45e49e27790fbadec194d192d.src","preCode":"    public void disposeInner() {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n\n        Flowable.just(1).flatMapMaybe(new Function<Integer, MaybeSource<Object>>() {\n            @Override\n            public MaybeSource<Object> apply(Integer v) throws Exception {\n                return new Maybe<Object>() {\n                    @Override\n                    protected void subscribeActual(MaybeObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposables.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        ts.cancel();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts\n        .assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void disposeInner() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        Observable.just(1).flatMapSingle(new Function<Integer, SingleSource<Object>>() {\n            @Override\n            public SingleSource<Object> apply(Integer v) throws Exception {\n                return new Single<Object>() {\n                    @Override\n                    protected void subscribeActual(SingleObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        to.dispose();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to\n        .assertEmpty();\n    }\n","date":"2019-12-20 02:39:40","endLine":370,"groupId":"8235","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"disposeInner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b8/c7b351beb59c1dce478847821bb9d31a55a864.src","preCode":"    public void disposeInner() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        Observable.just(1).flatMapSingle(new Function<Integer, SingleSource<Object>>() {\n            @Override\n            public SingleSource<Object> apply(Integer v) throws Exception {\n                return new Single<Object>() {\n                    @Override\n                    protected void subscribeActual(SingleObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        to.dispose();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to\n        .assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void disposeInner() {\n        final TestSubscriber<Object> ts = new TestSubscriber<>();\n\n        Flowable.just(1).flatMapMaybe(new Function<Integer, MaybeSource<Object>>() {\n            @Override\n            public MaybeSource<Object> apply(Integer v) throws Exception {\n                return new Maybe<Object>() {\n                    @Override\n                    protected void subscribeActual(MaybeObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        ts.cancel();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts\n        .assertEmpty();\n    }\n","date":"2019-12-22 18:39:23","endLine":549,"groupId":"2528","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"disposeInner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8f/aad86fef129cf645487581fef5a43645ce3f30.src","preCode":"    public void disposeInner() {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n\n        Flowable.just(1).flatMapMaybe(new Function<Integer, MaybeSource<Object>>() {\n            @Override\n            public MaybeSource<Object> apply(Integer v) throws Exception {\n                return new Maybe<Object>() {\n                    @Override\n                    protected void subscribeActual(MaybeObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        ts.cancel();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts\n        .assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void disposeInner() {\n        final TestObserver<Object> to = new TestObserver<>();\n\n        Observable.just(1).flatMapSingle(new Function<Integer, SingleSource<Object>>() {\n            @Override\n            public SingleSource<Object> apply(Integer v) throws Exception {\n                return new Single<Object>() {\n                    @Override\n                    protected void subscribeActual(SingleObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        to.dispose();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to\n        .assertEmpty();\n    }\n","date":"2019-12-22 18:59:44","endLine":370,"groupId":"102459","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"disposeInner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b9/90bd407cf0e30552c3cc856e04e30aaf9139f4.src","preCode":"    public void disposeInner() {\n        final TestObserver<Object> to = new TestObserver<Object>();\n\n        Observable.just(1).flatMapSingle(new Function<Integer, SingleSource<Object>>() {\n            @Override\n            public SingleSource<Object> apply(Integer v) throws Exception {\n                return new Single<Object>() {\n                    @Override\n                    protected void subscribeActual(SingleObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        to.dispose();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to\n        .assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void disposeInner() {\n        final TestSubscriber<Object> ts = new TestSubscriber<>();\n\n        Flowable.just(1).flatMapMaybe(new Function<Integer, MaybeSource<Object>>() {\n            @Override\n            public MaybeSource<Object> apply(Integer v) throws Exception {\n                return new Maybe<Object>() {\n                    @Override\n                    protected void subscribeActual(MaybeObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        ts.cancel();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts\n        .assertEmpty();\n    }\n","date":"2019-12-22 18:39:23","endLine":549,"groupId":"102459","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"disposeInner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8f/aad86fef129cf645487581fef5a43645ce3f30.src","preCode":"    public void disposeInner() {\n        final TestSubscriber<Object> ts = new TestSubscriber<>();\n\n        Flowable.just(1).flatMapMaybe(new Function<Integer, MaybeSource<Object>>() {\n            @Override\n            public MaybeSource<Object> apply(Integer v) throws Exception {\n                return new Maybe<Object>() {\n                    @Override\n                    protected void subscribeActual(MaybeObserver<? super Object> observer) {\n                        observer.onSubscribe(Disposable.empty());\n\n                        assertFalse(((Disposable)observer).isDisposed());\n\n                        ts.cancel();\n\n                        assertTrue(((Disposable)observer).isDisposed());\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts\n        .assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapMaybeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
