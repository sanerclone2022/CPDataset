[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void noOpConnect() {\n        final int[] calls = { 0 };\n        Observable<Integer> o = new ConnectableObservable<Integer>() {\n            @Override\n            public void connect(Consumer<? super Disposable> connection) {\n                calls[0]++;\n            }\n\n            @Override\n            public void reset() {\n                \r\n            }\n\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposables.disposed());\n            }\n        }.refCount();\n\n        o.test();\n        o.test();\n\n        assertEquals(1, calls[0]);\n    }\n","date":"2019-08-16 20:51:17","endLine":634,"groupId":"2118","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"noOpConnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/747c480a90d6b4b716b7ce66cfb96d52316ec7.src","preCode":"    public void noOpConnect() {\n        final int[] calls = { 0 };\n        Observable<Integer> o = new ConnectableObservable<Integer>() {\n            @Override\n            public void connect(Consumer<? super Disposable> connection) {\n                calls[0]++;\n            }\n\n            @Override\n            public void reset() {\n                \r\n            }\n\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposables.disposed());\n            }\n        }.refCount();\n\n        o.test();\n        o.test();\n\n        assertEquals(1, calls[0]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void noOpConnect() {\n        final int[] calls = { 0 };\n        Flowable<Integer> f = new ConnectableFlowable<Integer>() {\n            @Override\n            public void connect(Consumer<? super Disposable> connection) {\n                calls[0]++;\n            }\n\n            @Override\n            public void reset() {\n                \r\n            }\n\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n            }\n        }.refCount();\n\n        f.test();\n        f.test();\n\n        assertEquals(1, calls[0]);\n    }\n","date":"2019-08-16 20:51:17","endLine":656,"groupId":"3136","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"noOpConnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/b38ff272c5ac364c7d2bea65b54206088a6700.src","preCode":"    public void noOpConnect() {\n        final int[] calls = { 0 };\n        Flowable<Integer> f = new ConnectableFlowable<Integer>() {\n            @Override\n            public void connect(Consumer<? super Disposable> connection) {\n                calls[0]++;\n            }\n\n            @Override\n            public void reset() {\n                \r\n            }\n\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n            }\n        }.refCount();\n\n        f.test();\n        f.test();\n\n        assertEquals(1, calls[0]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":633,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void noOpConnect() {\n        final int[] calls = { 0 };\n        Observable<Integer> o = new ConnectableObservable<Integer>() {\n            @Override\n            public void connect(Consumer<? super Disposable> connection) {\n                calls[0]++;\n            }\n\n            @Override\n            public void reset() {\n                \r\n            }\n\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.disposed());\n            }\n        }.refCount();\n\n        o.test();\n        o.test();\n\n        assertEquals(1, calls[0]);\n    }\n","date":"2019-12-20 02:39:40","endLine":634,"groupId":"103285","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"noOpConnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7e/862e1ad2edf42294c2f2a6d770afc42623724a.src","preCode":"    public void noOpConnect() {\n        final int[] calls = { 0 };\n        Observable<Integer> o = new ConnectableObservable<Integer>() {\n            @Override\n            public void connect(Consumer<? super Disposable> connection) {\n                calls[0]++;\n            }\n\n            @Override\n            public void reset() {\n                \r\n            }\n\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposables.disposed());\n            }\n        }.refCount();\n\n        o.test();\n        o.test();\n\n        assertEquals(1, calls[0]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void noOpConnect() {\n        final int[] calls = { 0 };\n        Flowable<Integer> f = new ConnectableFlowable<Integer>() {\n            @Override\n            public void connect(Consumer<? super Disposable> connection) {\n                calls[0]++;\n            }\n\n            @Override\n            public void reset() {\n                \r\n            }\n\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n            }\n        }.refCount();\n\n        f.test();\n        f.test();\n\n        assertEquals(1, calls[0]);\n    }\n","date":"2019-08-16 20:51:17","endLine":656,"groupId":"103285","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"noOpConnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/b38ff272c5ac364c7d2bea65b54206088a6700.src","preCode":"    public void noOpConnect() {\n        final int[] calls = { 0 };\n        Flowable<Integer> f = new ConnectableFlowable<Integer>() {\n            @Override\n            public void connect(Consumer<? super Disposable> connection) {\n                calls[0]++;\n            }\n\n            @Override\n            public void reset() {\n                \r\n            }\n\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n            }\n        }.refCount();\n\n        f.test();\n        f.test();\n\n        assertEquals(1, calls[0]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":633,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
