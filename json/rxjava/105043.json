[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void blockingSubscribeObserver() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new Observer<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 100), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":155,"groupId":"2464","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"blockingSubscribeObserver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d1/c6c6fc511c1d2ab76e7c37380ea56763df05b8.src","preCode":"    public void blockingSubscribeObserver() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new Observer<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 100), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void blockingSubscribeObserverError() {\n        final List<Object> list = new ArrayList<Object>();\n\n        final TestException ex = new TestException();\n\n        Flowable.range(1, 5).concatWith(Flowable.<Integer>error(ex))\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new FlowableSubscriber<Object>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n                s.request(Long.MAX_VALUE);\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, ex), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":350,"groupId":"2464","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"blockingSubscribeObserverError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cb/767ef7187da7e63a33e9276e6ca99d1b0aeb33.src","preCode":"    public void blockingSubscribeObserverError() {\n        final List<Object> list = new ArrayList<Object>();\n\n        final TestException ex = new TestException();\n\n        Flowable.range(1, 5).concatWith(Flowable.<Integer>error(ex))\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new FlowableSubscriber<Object>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n                s.request(Long.MAX_VALUE);\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, ex), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void blockingSubscribeObserver() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new Observer<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 100), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":155,"groupId":"2464","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"blockingSubscribeObserver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d1/c6c6fc511c1d2ab76e7c37380ea56763df05b8.src","preCode":"    public void blockingSubscribeObserver() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new Observer<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 100), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void blockingSubscribeObserverError() {\n        final List<Object> list = new ArrayList<>();\n\n        final TestException ex = new TestException();\n\n        Flowable.range(1, 5).concatWith(Flowable.<Integer>error(ex))\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new FlowableSubscriber<Object>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n                s.request(Long.MAX_VALUE);\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, ex), list);\n    }\n","date":"2019-12-22 18:39:23","endLine":350,"groupId":"2464","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"blockingSubscribeObserverError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/db/560e0327813b4b9f0909b5c7daa2fa00c34ade.src","preCode":"    public void blockingSubscribeObserverError() {\n        final List<Object> list = new ArrayList<Object>();\n\n        final TestException ex = new TestException();\n\n        Flowable.range(1, 5).concatWith(Flowable.<Integer>error(ex))\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new FlowableSubscriber<Object>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n                s.request(Long.MAX_VALUE);\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, ex), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void blockingSubscribeObserver() {\n        final List<Object> list = new ArrayList<>();\n\n        Observable.range(1, 5)\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new Observer<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 100), list);\n    }\n","date":"2019-12-22 18:59:44","endLine":155,"groupId":"105043","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"blockingSubscribeObserver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a2/d985456959e4f03c110663197749ecbe9d7551.src","preCode":"    public void blockingSubscribeObserver() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new Observer<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 100), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void blockingSubscribeObserverError() {\n        final List<Object> list = new ArrayList<>();\n\n        final TestException ex = new TestException();\n\n        Flowable.range(1, 5).concatWith(Flowable.<Integer>error(ex))\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new FlowableSubscriber<Object>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n                s.request(Long.MAX_VALUE);\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, ex), list);\n    }\n","date":"2019-12-22 18:39:23","endLine":350,"groupId":"105043","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"blockingSubscribeObserverError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/db/560e0327813b4b9f0909b5c7daa2fa00c34ade.src","preCode":"    public void blockingSubscribeObserverError() {\n        final List<Object> list = new ArrayList<>();\n\n        final TestException ex = new TestException();\n\n        Flowable.range(1, 5).concatWith(Flowable.<Integer>error(ex))\n        .subscribeOn(Schedulers.computation())\n        .blockingSubscribe(new FlowableSubscriber<Object>() {\n\n            @Override\n            public void onSubscribe(Subscription s) {\n                s.request(Long.MAX_VALUE);\n            }\n\n            @Override\n            public void onNext(Object value) {\n                list.add(value);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                list.add(e);\n            }\n\n            @Override\n            public void onComplete() {\n                list.add(100);\n            }\n\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, ex), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
