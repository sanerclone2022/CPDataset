[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timedAndSizedTruncation() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n        List<Integer> values = new ArrayList<Integer>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.complete();\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertTrue(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n    }\n","date":"2019-08-16 20:51:17","endLine":790,"groupId":"2870","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndSizedTruncation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e1/c0bf6f8c72da0eba6ff2a796813c00c6d576fe.src","preCode":"    public void timedAndSizedTruncation() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n        List<Integer> values = new ArrayList<Integer>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.complete();\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertTrue(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":754,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timedAndSizedTruncationError() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        List<Integer> values = new ArrayList<Integer>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.error(new TestException());\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertTrue(buf.hasError());\n    }\n","date":"2019-08-16 20:51:17","endLine":1635,"groupId":"2870","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndSizedTruncationError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b8/a7ba3e9d68c8c3b833fc9119e2c2d1d2a766db.src","preCode":"    public void timedAndSizedTruncationError() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        List<Integer> values = new ArrayList<Integer>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.error(new TestException());\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertTrue(buf.hasError());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1594,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void timedAndSizedTruncation() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n        List<Integer> values = new ArrayList<Integer>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.complete();\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertTrue(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n    }\n","date":"2019-08-16 20:51:17","endLine":790,"groupId":"2870","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndSizedTruncation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e1/c0bf6f8c72da0eba6ff2a796813c00c6d576fe.src","preCode":"    public void timedAndSizedTruncation() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n        List<Integer> values = new ArrayList<Integer>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.complete();\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertTrue(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":754,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void timedAndSizedTruncationError() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        List<Integer> values = new ArrayList<>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.error(new TestException());\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertTrue(buf.hasError());\n    }\n","date":"2019-12-22 18:39:23","endLine":1635,"groupId":"2870","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndSizedTruncationError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/763fce0b9a18eb3c241128915b6ca3ffe87597.src","preCode":"    public void timedAndSizedTruncationError() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        List<Integer> values = new ArrayList<Integer>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.error(new TestException());\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertTrue(buf.hasError());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1594,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void timedAndSizedTruncation() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n        List<Integer> values = new ArrayList<>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.complete();\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertTrue(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n    }\n","date":"2019-12-22 18:59:44","endLine":790,"groupId":"103391","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"timedAndSizedTruncation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fe/2c59d088b76f0f51aa0c5547202c92e190e659.src","preCode":"    public void timedAndSizedTruncation() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<Integer>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n        List<Integer> values = new ArrayList<Integer>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.complete();\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertTrue(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableReplayEagerTruncateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":754,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void timedAndSizedTruncationError() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        List<Integer> values = new ArrayList<>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.error(new TestException());\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertTrue(buf.hasError());\n    }\n","date":"2019-12-22 18:39:23","endLine":1635,"groupId":"103391","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"timedAndSizedTruncationError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/763fce0b9a18eb3c241128915b6ca3ffe87597.src","preCode":"    public void timedAndSizedTruncationError() {\n        TestScheduler test = new TestScheduler();\n        SizeAndTimeBoundReplayBuffer<Integer> buf = new SizeAndTimeBoundReplayBuffer<>(2, 2000, TimeUnit.MILLISECONDS, test, false);\n\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        List<Integer> values = new ArrayList<>();\n\n        buf.next(1);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.next(2);\n        test.advanceTimeBy(1, TimeUnit.SECONDS);\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(2), values);\n\n        buf.next(3);\n        buf.next(4);\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(3, 4), values);\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.next(5);\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertEquals(Arrays.asList(5), values);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertFalse(buf.hasError());\n\n        test.advanceTimeBy(2, TimeUnit.SECONDS);\n        buf.error(new TestException());\n\n        values.clear();\n        buf.collect(values);\n        Assert.assertTrue(values.isEmpty());\n\n        Assert.assertEquals(1, buf.size);\n        Assert.assertFalse(buf.hasCompleted());\n        Assert.assertTrue(buf.hasError());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableReplayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1594,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
