[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void delayed() throws Exception {\n        final TestObserver<Object> to = new TestObserver<Object>();\n        final Observer[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                to.dispose();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposables.empty());\n                s[0] = observer;\n            }\n        }.blockingSubscribe(to);\n\n        while (!to.isDisposed()) {\n            Thread.sleep(100);\n        }\n\n        to.assertEmpty();\n    }\n","date":"2019-08-16 20:51:17","endLine":270,"groupId":"2005","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"delayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d1/c6c6fc511c1d2ab76e7c37380ea56763df05b8.src","preCode":"    public void delayed() throws Exception {\n        final TestObserver<Object> to = new TestObserver<Object>();\n        final Observer[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                to.dispose();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposables.empty());\n                s[0] = observer;\n            }\n        }.blockingSubscribe(to);\n\n        while (!to.isDisposed()) {\n            Thread.sleep(100);\n        }\n\n        to.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void delayed() throws Exception {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        final Subscriber[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                ts.cancel();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                s[0] = subscriber;\n            }\n        }.blockingSubscribe(ts);\n\n        while (!ts.isCancelled()) {\n            Thread.sleep(100);\n        }\n\n        ts.assertEmpty();\n    }\n","date":"2019-08-16 20:51:17","endLine":504,"groupId":"9991","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"delayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cb/767ef7187da7e63a33e9276e6ca99d1b0aeb33.src","preCode":"    public void delayed() throws Exception {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        final Subscriber[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                ts.cancel();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                s[0] = subscriber;\n            }\n        }.blockingSubscribe(ts);\n\n        while (!ts.isCancelled()) {\n            Thread.sleep(100);\n        }\n\n        ts.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void delayed() throws Exception {\n        final TestObserver<Object> to = new TestObserver<Object>();\n        final Observer[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                to.dispose();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                s[0] = observer;\n            }\n        }.blockingSubscribe(to);\n\n        while (!to.isDisposed()) {\n            Thread.sleep(100);\n        }\n\n        to.assertEmpty();\n    }\n","date":"2019-12-20 02:39:40","endLine":270,"groupId":"2005","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"delayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c8/454452b4ffbdbb9842daaa683e80bf4f4c128f.src","preCode":"    public void delayed() throws Exception {\n        final TestObserver<Object> to = new TestObserver<Object>();\n        final Observer[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                to.dispose();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposables.empty());\n                s[0] = observer;\n            }\n        }.blockingSubscribe(to);\n\n        while (!to.isDisposed()) {\n            Thread.sleep(100);\n        }\n\n        to.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void delayed() throws Exception {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        final Subscriber[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                ts.cancel();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                s[0] = subscriber;\n            }\n        }.blockingSubscribe(ts);\n\n        while (!ts.isCancelled()) {\n            Thread.sleep(100);\n        }\n\n        ts.assertEmpty();\n    }\n","date":"2019-08-16 20:51:17","endLine":504,"groupId":"9991","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"delayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cb/767ef7187da7e63a33e9276e6ca99d1b0aeb33.src","preCode":"    public void delayed() throws Exception {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        final Subscriber[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                ts.cancel();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                s[0] = subscriber;\n            }\n        }.blockingSubscribe(ts);\n\n        while (!ts.isCancelled()) {\n            Thread.sleep(100);\n        }\n\n        ts.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void delayed() throws Exception {\n        final TestObserver<Object> to = new TestObserver<Object>();\n        final Observer[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                to.dispose();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                s[0] = observer;\n            }\n        }.blockingSubscribe(to);\n\n        while (!to.isDisposed()) {\n            Thread.sleep(100);\n        }\n\n        to.assertEmpty();\n    }\n","date":"2019-12-20 02:39:40","endLine":270,"groupId":"2005","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"delayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c8/454452b4ffbdbb9842daaa683e80bf4f4c128f.src","preCode":"    public void delayed() throws Exception {\n        final TestObserver<Object> to = new TestObserver<Object>();\n        final Observer[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                to.dispose();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                s[0] = observer;\n            }\n        }.blockingSubscribe(to);\n\n        while (!to.isDisposed()) {\n            Thread.sleep(100);\n        }\n\n        to.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void delayed() throws Exception {\n        final TestSubscriber<Object> ts = new TestSubscriber<>();\n        final Subscriber[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                ts.cancel();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                s[0] = subscriber;\n            }\n        }.blockingSubscribe(ts);\n\n        while (!ts.isCancelled()) {\n            Thread.sleep(100);\n        }\n\n        ts.assertEmpty();\n    }\n","date":"2019-12-22 18:39:23","endLine":504,"groupId":"9991","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"delayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/db/560e0327813b4b9f0909b5c7daa2fa00c34ade.src","preCode":"    public void delayed() throws Exception {\n        final TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        final Subscriber[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                ts.cancel();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                s[0] = subscriber;\n            }\n        }.blockingSubscribe(ts);\n\n        while (!ts.isCancelled()) {\n            Thread.sleep(100);\n        }\n\n        ts.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":4,"curCode":"    public void delayed() throws Exception {\n        final TestObserver<Object> to = new TestObserver<>();\n        final Observer[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                to.dispose();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                s[0] = observer;\n            }\n        }.blockingSubscribe(to);\n\n        while (!to.isDisposed()) {\n            Thread.sleep(100);\n        }\n\n        to.assertEmpty();\n    }\n","date":"2019-12-22 18:59:44","endLine":270,"groupId":"105047","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"delayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a2/d985456959e4f03c110663197749ecbe9d7551.src","preCode":"    public void delayed() throws Exception {\n        final TestObserver<Object> to = new TestObserver<Object>();\n        final Observer[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                to.dispose();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Observable<Integer>() {\n            @Override\n            protected void subscribeActual(Observer<? super Integer> observer) {\n                observer.onSubscribe(Disposable.empty());\n                s[0] = observer;\n            }\n        }.blockingSubscribe(to);\n\n        while (!to.isDisposed()) {\n            Thread.sleep(100);\n        }\n\n        to.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":4,"curCode":"    public void delayed() throws Exception {\n        final TestSubscriber<Object> ts = new TestSubscriber<>();\n        final Subscriber[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                ts.cancel();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                s[0] = subscriber;\n            }\n        }.blockingSubscribe(ts);\n\n        while (!ts.isCancelled()) {\n            Thread.sleep(100);\n        }\n\n        ts.assertEmpty();\n    }\n","date":"2019-12-22 18:39:23","endLine":504,"groupId":"105047","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"delayed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/db/560e0327813b4b9f0909b5c7daa2fa00c34ade.src","preCode":"    public void delayed() throws Exception {\n        final TestSubscriber<Object> ts = new TestSubscriber<>();\n        final Subscriber[] s = { null };\n\n        Schedulers.single().scheduleDirect(new Runnable() {\n            @SuppressWarnings(\"unchecked\")\n            @Override\n            public void run() {\n                ts.cancel();\n                s[0].onNext(1);\n            }\n        }, 200, TimeUnit.MILLISECONDS);\n\n        new Flowable<Integer>() {\n            @Override\n            protected void subscribeActual(Subscriber<? super Integer> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                s[0] = subscriber;\n            }\n        }.blockingSubscribe(ts);\n\n        while (!ts.isCancelled()) {\n            Thread.sleep(100);\n        }\n\n        ts.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBlockingTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
