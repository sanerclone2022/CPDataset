[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    protected void subscribeActual(CompletableObserver observer) {\n        CompletableSource c;\n\n        try {\n            c = ObjectHelper.requireNonNull(completableSupplier.get(), \"The completableSupplier returned a null CompletableSource\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        c.subscribe(observer);\n    }\n","date":"2019-08-16 20:51:17","endLine":43,"groupId":"10931","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(CompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/28d0d28f57f33057dd6d607843fb59a2dad8ac.src","preCode":"    protected void subscribeActual(CompletableObserver observer) {\n        CompletableSource c;\n\n        try {\n            c = ObjectHelper.requireNonNull(completableSupplier.get(), \"The completableSupplier returned a null CompletableSource\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        c.subscribe(observer);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableDefer.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    protected void subscribeActual(SingleObserver<? super U> observer) {\n        U u;\n        try {\n            u = ObjectHelper.requireNonNull(initialSupplier.get(), \"The initialSupplier returned a null value\");\n        } catch (Throwable e) {\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(observer, u, collector));\n    }\n","date":"2019-08-16 20:51:17","endLine":51,"groupId":"8353","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(SingleObserver<?superU>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b4/8f4d11fcc7b4c3fcaf8a2cfb35c6b812fc54dd.src","preCode":"    protected void subscribeActual(SingleObserver<? super U> observer) {\n        U u;\n        try {\n            u = ObjectHelper.requireNonNull(initialSupplier.get(), \"The initialSupplier returned a null value\");\n        } catch (Throwable e) {\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(observer, u, collector));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    protected void subscribeActual(CompletableObserver observer) {\n        CompletableSource c;\n\n        try {\n            c = Objects.requireNonNull(completableSupplier.get(), \"The completableSupplier returned a null CompletableSource\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        c.subscribe(observer);\n    }\n","date":"2019-12-18 03:06:44","endLine":44,"groupId":"10931","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(CompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c4/51413f490889fcbcf9daea78fa65ae57bcf80f.src","preCode":"    protected void subscribeActual(CompletableObserver observer) {\n        CompletableSource c;\n\n        try {\n            c = ObjectHelper.requireNonNull(completableSupplier.get(), \"The completableSupplier returned a null CompletableSource\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        c.subscribe(observer);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableDefer.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    protected void subscribeActual(SingleObserver<? super U> observer) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initialSupplier returned a null value\");\n        } catch (Throwable e) {\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(observer, u, collector));\n    }\n","date":"2019-12-18 03:06:44","endLine":52,"groupId":"8353","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(SingleObserver<?superU>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fc/b5590b49addb62755c31e2a352de6930e89d4e.src","preCode":"    protected void subscribeActual(SingleObserver<? super U> observer) {\n        U u;\n        try {\n            u = ObjectHelper.requireNonNull(initialSupplier.get(), \"The initialSupplier returned a null value\");\n        } catch (Throwable e) {\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(observer, u, collector));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-27 07:55:36","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":3,"curCode":"    protected void subscribeActual(CompletableObserver observer) {\n        CompletableSource c;\n\n        try {\n            c = Objects.requireNonNull(completableSupplier.get(), \"The completableSupplier returned a null CompletableSource\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        c.subscribe(observer);\n    }\n","date":"2019-12-18 03:06:44","endLine":44,"groupId":"10931","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(CompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c4/51413f490889fcbcf9daea78fa65ae57bcf80f.src","preCode":"    protected void subscribeActual(CompletableObserver observer) {\n        CompletableSource c;\n\n        try {\n            c = Objects.requireNonNull(completableSupplier.get(), \"The completableSupplier returned a null CompletableSource\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        c.subscribe(observer);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableDefer.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"N"},{"authorDate":"2019-12-27 07:55:36","commitOrder":3,"curCode":"    protected void subscribeActual(SingleObserver<? super U> observer) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initialSupplier returned a null value\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(observer, u, collector));\n    }\n","date":"2019-12-27 07:55:36","endLine":53,"groupId":"10931","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(SingleObserver<?superU>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ed/f17d95ef0b9929ca145a938dd27fff4268b12a.src","preCode":"    protected void subscribeActual(SingleObserver<? super U> observer) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initialSupplier returned a null value\");\n        } catch (Throwable e) {\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(observer, u, collector));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"a97d871ee7161fc9f4684d95cae3e94340cd0ccf","commitMessage":"@@@3.x: Add missing throwIfFatal calls (#6801)\n\n","date":"2019-12-27 07:55:36","modifiedFileCount":"21","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":4,"curCode":"    protected void subscribeActual(CompletableObserver observer) {\n        CompletableSource c;\n\n        try {\n            c = Objects.requireNonNull(completableSupplier.get(), \"The completableSupplier returned a null CompletableSource\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        c.subscribe(observer);\n    }\n","date":"2019-12-18 03:06:44","endLine":44,"groupId":"101920","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(CompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c4/51413f490889fcbcf9daea78fa65ae57bcf80f.src","preCode":"    protected void subscribeActual(CompletableObserver observer) {\n        CompletableSource c;\n\n        try {\n            c = Objects.requireNonNull(completableSupplier.get(), \"The completableSupplier returned a null CompletableSource\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        c.subscribe(observer);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableDefer.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"N"},{"authorDate":"2019-12-28 03:01:34","commitOrder":4,"curCode":"    protected void subscribeActual(SingleObserver<? super U> observer) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initialSupplier returned a null value\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<>(observer, u, collector));\n    }\n","date":"2019-12-28 03:01:34","endLine":53,"groupId":"101920","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(SingleObserver<?superU>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f1/59911fba054f2585ac5e7bc903beb208e4cbaf.src","preCode":"    protected void subscribeActual(SingleObserver<? super U> observer) {\n        U u;\n        try {\n            u = Objects.requireNonNull(initialSupplier.get(), \"The initialSupplier returned a null value\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            EmptyDisposable.error(e, observer);\n            return;\n        }\n\n        source.subscribe(new CollectSubscriber<T, U>(observer, u, collector));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCollectSingle.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
