[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<Integer>();\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Observable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        to.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","date":"2019-08-16 20:51:17","endLine":199,"groupId":"6054","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"repeatRetarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/55/906d121494683613b73c9c7268991618c412a1.src","preCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<Integer>();\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Observable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        to.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<Integer>();\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Flowable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        ts.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","date":"2019-08-16 20:51:17","endLine":199,"groupId":"4577","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"repeatRetarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c9/9e09a45af2f1b0287f7efc3cef5a47b79e7099.src","preCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<Integer>();\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Flowable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        ts.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<Integer>();\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Observable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        to.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","date":"2019-08-16 20:51:17","endLine":199,"groupId":"6054","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"repeatRetarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/55/906d121494683613b73c9c7268991618c412a1.src","preCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<Integer>();\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Observable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        to.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<>();\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Flowable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        ts.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","date":"2019-12-22 18:39:23","endLine":199,"groupId":"4577","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"repeatRetarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/29/959688ad254becfa6a54a5820baba7f0205a68.src","preCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<Integer>();\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Flowable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Flowable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        ts.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<>();\n        TestObserver<Integer> to = new TestObserver<>();\n        Observable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Observable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        to.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","date":"2019-12-22 18:59:44","endLine":199,"groupId":"105392","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"repeatRetarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/78/c793f1b459b0c3cde524639e2e3164685a87e2.src","preCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<Integer>();\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        Observable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Observable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        to.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<>();\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Flowable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        ts.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","date":"2019-12-22 18:39:23","endLine":199,"groupId":"105392","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"repeatRetarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/29/959688ad254becfa6a54a5820baba7f0205a68.src","preCode":"    public void repeatRetarget() {\n        final List<Integer> concatBase = new ArrayList<>();\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        Flowable.just(1, 2)\n        .repeat(5)\n        .concatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer x) {\n                System.out.println(\"testRepeatRetarget -> \" + x);\n                concatBase.add(x);\n                return Flowable.<Integer>empty()\n                        .delay(200, TimeUnit.MILLISECONDS);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        ts.assertNoValues();\n\n        assertEquals(Arrays.asList(1, 2, 1, 2, 1, 2, 1, 2, 1, 2), concatBase);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
