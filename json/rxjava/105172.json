[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void takeFlatMapCompletes() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        ObservableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Observable<Integer>, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Observable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertComplete();\n        Assert.assertTrue(to.values().size() != 0);\n    }\n","date":"2019-08-16 20:51:17","endLine":224,"groupId":"5095","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"takeFlatMapCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ca/9270448b5a531ed28585a5f1a40f6e74102e80.src","preCode":"    public void takeFlatMapCompletes() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        ObservableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Observable<Integer>, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Observable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertComplete();\n        Assert.assertTrue(to.values().size() != 0);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void takeFlatMapCompletes() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        FlowableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        Assert.assertTrue(ts.values().size() != 0);\n    }\n","date":"2019-08-16 20:51:17","endLine":224,"groupId":"5095","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"takeFlatMapCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/57800827f1ad81149d84cdad67f5bc75040ffb.src","preCode":"    public void takeFlatMapCompletes() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        FlowableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        Assert.assertTrue(ts.values().size() != 0);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void takeFlatMapCompletes() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        ObservableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Observable<Integer>, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Observable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertComplete();\n        Assert.assertTrue(to.values().size() != 0);\n    }\n","date":"2019-08-16 20:51:17","endLine":224,"groupId":"5095","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"takeFlatMapCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ca/9270448b5a531ed28585a5f1a40f6e74102e80.src","preCode":"    public void takeFlatMapCompletes() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        ObservableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Observable<Integer>, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Observable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertComplete();\n        Assert.assertTrue(to.values().size() != 0);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void takeFlatMapCompletes() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        FlowableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        Assert.assertTrue(ts.values().size() != 0);\n    }\n","date":"2019-12-22 18:39:23","endLine":226,"groupId":"5095","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"takeFlatMapCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/86/da1bb09ce8c03bc9e971248d8c89b3dccf5d39.src","preCode":"    public void takeFlatMapCompletes() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        FlowableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        Assert.assertTrue(ts.values().size() != 0);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void takeFlatMapCompletes() {\n        TestObserver<Integer> to = new TestObserver<>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        ObservableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Observable<Integer>, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Observable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertComplete();\n        Assert.assertTrue(to.values().size() != 0);\n    }\n","date":"2019-12-22 18:59:44","endLine":226,"groupId":"105172","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"takeFlatMapCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/13/f662c88ee54a3d651ec221ec13718849606988.src","preCode":"    public void takeFlatMapCompletes() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        ObservableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Observable<Integer>, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Observable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertComplete();\n        Assert.assertTrue(to.values().size() != 0);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void takeFlatMapCompletes() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        FlowableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        Assert.assertTrue(ts.values().size() != 0);\n    }\n","date":"2019-12-22 18:39:23","endLine":226,"groupId":"105172","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"takeFlatMapCompletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/86/da1bb09ce8c03bc9e971248d8c89b3dccf5d39.src","preCode":"    public void takeFlatMapCompletes() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        final AtomicInteger wip = new AtomicInteger();\n\n        final int indicator = 999999999;\n\n        FlowableWindowWithSizeTest.hotStream()\n        .window(300, TimeUnit.MILLISECONDS)\n        .take(10)\n        .doOnComplete(new Action() {\n            @Override\n            public void run() {\n                System.out.println(\"Main done!\");\n            }\n        })\n        .flatMap(new Function<Flowable<Integer>, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> w) {\n                return w.startWithItem(indicator)\n                        .doOnComplete(new Action() {\n                            @Override\n                            public void run() {\n                                System.out.println(\"inner done: \" + wip.incrementAndGet());\n                            }\n                        })\n                        ;\n            }\n        })\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer pv) {\n                System.out.println(pv);\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertComplete();\n        Assert.assertTrue(ts.values().size() != 0);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
