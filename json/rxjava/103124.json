[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void hasNextCancels() {\n        final TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            to.dispose();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":302,"groupId":"3803","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"hasNextCancels","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4c/d33b78e9de051c712ef9011628dbd691a4202b.src","preCode":"    public void hasNextCancels() {\n        final TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            to.dispose();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void hasNextCancels() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            ts.cancel();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":969,"groupId":"5403","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"hasNextCancels","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1b/21baf6106b8abe78bf9b65054cde663a6c844f.src","preCode":"    public void hasNextCancels() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            ts.cancel();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":935,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void hasNextCancels() {\n        final TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            to.dispose();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":302,"groupId":"3803","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"hasNextCancels","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4c/d33b78e9de051c712ef9011628dbd691a4202b.src","preCode":"    public void hasNextCancels() {\n        final TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            to.dispose();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void hasNextCancels() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            ts.cancel();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":969,"groupId":"5403","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"hasNextCancels","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/63/85d58d9566103c59793a62631e867541ea3a85.src","preCode":"    public void hasNextCancels() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            ts.cancel();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":935,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void hasNextCancels() {\n        final TestObserver<Integer> to = new TestObserver<>();\n\n        Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            to.dispose();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","date":"2019-12-22 18:59:44","endLine":302,"groupId":"103124","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"hasNextCancels","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d7/44472b66006b3a9a00b1fba6e1a8fbfae8dc12.src","preCode":"    public void hasNextCancels() {\n        final TestObserver<Integer> to = new TestObserver<Integer>();\n\n        Observable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            to.dispose();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(to);\n\n        to.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void hasNextCancels() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            ts.cancel();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":969,"groupId":"103124","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"hasNextCancels","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/63/85d58d9566103c59793a62631e867541ea3a85.src","preCode":"    public void hasNextCancels() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        Flowable.fromIterable(new Iterable<Integer>() {\n            @Override\n            public Iterator<Integer> iterator() {\n                return new Iterator<Integer>() {\n                    int count;\n\n                    @Override\n                    public boolean hasNext() {\n                        if (++count == 2) {\n                            ts.cancel();\n                        }\n                        return true;\n                    }\n\n                    @Override\n                    public Integer next() {\n                        return 1;\n                    }\n\n                    @Override\n                    public void remove() {\n                        throw new UnsupportedOperationException();\n                    }\n                };\n            }\n        })\n        .subscribe(ts);\n\n        ts.assertValue(1)\n        .assertNoErrors()\n        .assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":935,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
