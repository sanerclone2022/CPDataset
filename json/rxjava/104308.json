[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public final void blockingForEach(Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":5218,"groupId":"1069","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"blockingForEach","params":"(Consumer<?superT>onNext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bc/c013a10f40257dded28957b3da473976c6bb44.src","preCode":"    public final void blockingForEach(Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5207,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public final void blockingForEach(Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":5808,"groupId":"1069","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"blockingForEach","params":"(Consumer<?superT>onNext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f1/6fa2cf03001794eda0b11b8d1fe00bfa2fb6b9.src","preCode":"    public final void blockingForEach(Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5797,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-24 17:18:06","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public final void blockingForEach(Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":5218,"groupId":"1069","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"blockingForEach","params":"(Consumer<?superT>onNext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bc/c013a10f40257dded28957b3da473976c6bb44.src","preCode":"    public final void blockingForEach(Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5207,"status":"N"},{"authorDate":"2019-12-24 17:18:06","commitOrder":2,"curCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2019-12-24 17:18:06","endLine":5677,"groupId":"1069","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"blockingForEach","params":"(@NonNullConsumer<?superT>onNext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/bdb06b2cc43b1a9736de785b99fa56fac4634b.src","preCode":"    public final void blockingForEach(Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5666,"status":"M"}],"commitId":"b57169babb184d0adc2fa28cf0425c4f0c1f8555","commitMessage":"@@@3.x: Add NonNull & SafeVarargs annotations + validator (#6791)\n\n","date":"2019-12-24 17:18:06","modifiedFileCount":"28","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-24 17:18:06","codes":[{"authorDate":"2019-12-26 06:52:13","commitOrder":3,"curCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2019-12-26 06:52:13","endLine":5184,"groupId":"1069","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"blockingForEach","params":"(@NonNullConsumer<?superT>onNext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/e1454af367e5b65e5ddecb077644e09b3d66f6.src","preCode":"    public final void blockingForEach(Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5173,"status":"M"},{"authorDate":"2019-12-24 17:18:06","commitOrder":3,"curCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2019-12-24 17:18:06","endLine":5677,"groupId":"1069","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"blockingForEach","params":"(@NonNullConsumer<?superT>onNext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/bdb06b2cc43b1a9736de785b99fa56fac4634b.src","preCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5666,"status":"N"}],"commitId":"480889c58d3b762b073ef80229bf27f9d9429dd7","commitMessage":"@@@3.x: Add missing annotations.  fix many diamonds (#6795)\n\n* 3.x: Add missing annotations.  fix many diamonds\n\n* Fix accidental JDK 9 API usage\n\n* Fix NPE in unicast due to null-cleanup\n","date":"2019-12-26 06:52:13","modifiedFileCount":"52","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-27 07:33:42","codes":[{"authorDate":"2019-12-27 07:33:42","commitOrder":4,"curCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext, int capacityHint) {\n        Iterator<T> it = blockingIterable(capacityHint).iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2019-12-27 07:33:42","endLine":5226,"groupId":"1069","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"blockingForEach","params":"(@NonNullConsumer<?superT>onNext@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/19/33a6db0b699de19a7ce4ca39558c97e9bd3d40.src","preCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5215,"status":"M"},{"authorDate":"2019-12-27 07:33:42","commitOrder":4,"curCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext, int bufferSize) {\n        Iterator<T> it = blockingIterable(bufferSize).iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2019-12-27 07:33:42","endLine":5739,"groupId":"1069","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"blockingForEach","params":"(@NonNullConsumer<?superT>onNext@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/df/3a8a270ae5043a3ce512e17d85b1e553f10a9f.src","preCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext) {\n        Iterator<T> it = blockingIterable().iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5728,"status":"M"}],"commitId":"d1cbf57c4357569094e3b2727f9c57a9d56f2e22","commitMessage":"@@@3.x: Add blockingForEach(Consumer.  int) overload (#6800)\n\n","date":"2019-12-27 07:33:42","modifiedFileCount":"2","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-10 15:36:29","codes":[{"authorDate":"2020-01-10 15:36:29","commitOrder":5,"curCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext, int capacityHint) {\n        Objects.requireNonNull(onNext, \"onNext is null\");\n        Iterator<T> it = blockingIterable(capacityHint).iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2020-01-10 15:36:29","endLine":5298,"groupId":"104308","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"blockingForEach","params":"(@NonNullConsumer<?superT>onNext@intcapacityHint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2d/75dee207be27ae2de1128a687ce531b36bca80.src","preCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext, int capacityHint) {\n        Iterator<T> it = blockingIterable(capacityHint).iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Observable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5286,"status":"M"},{"authorDate":"2020-01-10 15:36:29","commitOrder":5,"curCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext, int bufferSize) {\n        Objects.requireNonNull(onNext, \"onNext is null\");\n        Iterator<T> it = blockingIterable(bufferSize).iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","date":"2020-01-10 15:36:29","endLine":5659,"groupId":"104308","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"blockingForEach","params":"(@NonNullConsumer<?superT>onNext@intbufferSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f1/1415e0dee18d5a9549e29094b3d5c1ec958a66.src","preCode":"    public final void blockingForEach(@NonNull Consumer<? super T> onNext, int bufferSize) {\n        Iterator<T> it = blockingIterable(bufferSize).iterator();\n        while (it.hasNext()) {\n            try {\n                onNext.accept(it.next());\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                ((Disposable)it).dispose();\n                throw ExceptionHelper.wrapOrThrow(e);\n            }\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/core/Flowable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":5647,"status":"M"}],"commitId":"1e4dbcf78a814993e80fa489a50d3369d7c4ecbd","commitMessage":"@@@3.x: Improve JavaDocs of Observable and fix similar issues elsewhere (#6831)\n\n* 3.x: Javadoc cleanup of Observable\n\n* Another set of cleanups (too many things to fix at once)\n\n* 3.x: Improve JavaDocs of Observable and fix similar issues elsewhere\n","date":"2020-01-10 15:36:29","modifiedFileCount":"19","status":"M","submitter":"David Karnok"}]
