[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther() throws InterruptedException {\n        final ReplaySubject<Long> replay = ReplaySubject.create();\n        Thread source = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Observable.unsafeCreate(new ObservableSource<Long>() {\n\n                    @Override\n                    public void subscribe(Observer<? super Long> o) {\n                        o.onSubscribe(Disposables.empty());\n                        System.out.println(\"********* Start Source Data ***********\");\n                        for (long l = 1; l <= 10000; l++) {\n                            o.onNext(l);\n                        }\n                        System.out.println(\"********* Finished Source Data ***********\");\n                        o.onComplete();\n                    }\n                }).subscribe(replay);\n            }\n        });\n        source.start();\n\n        long v = replay.blockingLast();\n        assertEquals(10000, v);\n\n        \r\n        final CountDownLatch slowLatch = new CountDownLatch(1);\n        Thread slowThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Observer<Long> slow = new DefaultObserver<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Slow Observer completed\");\n                        slowLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Slow Observer STARTED\");\n                        }\n                        try {\n                            if (args % 10 == 0) {\n                                Thread.sleep(1);\n                            }\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                };\n                replay.subscribe(slow);\n                try {\n                    slowLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        slowThread.start();\n\n        Thread fastThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                final CountDownLatch fastLatch = new CountDownLatch(1);\n                Observer<Long> fast = new DefaultObserver<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Fast Observer completed\");\n                        fastLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Fast Observer STARTED\");\n                        }\n                    }\n                };\n                replay.subscribe(fast);\n                try {\n                    fastLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        fastThread.start();\n        fastThread.join();\n\n        \r\n        assertEquals(1, slowLatch.getCount());\n\n        slowThread.join();\n    }\n","date":"2019-08-16 20:51:17","endLine":143,"groupId":"15","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b0/d2e55aad389a77a35856ad0ca7130ac468751a.src","preCode":"    public void replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther() throws InterruptedException {\n        final ReplaySubject<Long> replay = ReplaySubject.create();\n        Thread source = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Observable.unsafeCreate(new ObservableSource<Long>() {\n\n                    @Override\n                    public void subscribe(Observer<? super Long> o) {\n                        o.onSubscribe(Disposables.empty());\n                        System.out.println(\"********* Start Source Data ***********\");\n                        for (long l = 1; l <= 10000; l++) {\n                            o.onNext(l);\n                        }\n                        System.out.println(\"********* Finished Source Data ***********\");\n                        o.onComplete();\n                    }\n                }).subscribe(replay);\n            }\n        });\n        source.start();\n\n        long v = replay.blockingLast();\n        assertEquals(10000, v);\n\n        \r\n        final CountDownLatch slowLatch = new CountDownLatch(1);\n        Thread slowThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Observer<Long> slow = new DefaultObserver<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Slow Observer completed\");\n                        slowLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Slow Observer STARTED\");\n                        }\n                        try {\n                            if (args % 10 == 0) {\n                                Thread.sleep(1);\n                            }\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                };\n                replay.subscribe(slow);\n                try {\n                    slowLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        slowThread.start();\n\n        Thread fastThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                final CountDownLatch fastLatch = new CountDownLatch(1);\n                Observer<Long> fast = new DefaultObserver<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Fast Observer completed\");\n                        fastLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Fast Observer STARTED\");\n                        }\n                    }\n                };\n                replay.subscribe(fast);\n                try {\n                    fastLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        fastThread.start();\n        fastThread.join();\n\n        \r\n        assertEquals(1, slowLatch.getCount());\n\n        slowThread.join();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subjects/ReplaySubjectConcurrencyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther() throws InterruptedException {\n        final ReplayProcessor<Long> replay = ReplayProcessor.create();\n        Thread source = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Flowable.unsafeCreate(new Publisher<Long>() {\n\n                    @Override\n                    public void subscribe(Subscriber<? super Long> subscriber) {\n                        System.out.println(\"********* Start Source Data ***********\");\n                        for (long l = 1; l <= 10000; l++) {\n                            subscriber.onNext(l);\n                        }\n                        System.out.println(\"********* Finished Source Data ***********\");\n                        subscriber.onComplete();\n                    }\n                }).subscribe(replay);\n            }\n        });\n        source.start();\n\n        long v = replay.blockingLast();\n        assertEquals(10000, v);\n\n        \r\n        final CountDownLatch slowLatch = new CountDownLatch(1);\n        Thread slowThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Subscriber<Long> slow = new DefaultSubscriber<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Slow Observer completed\");\n                        slowLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Slow Observer STARTED\");\n                        }\n                        try {\n                            if (args % 10 == 0) {\n                                Thread.sleep(1);\n                            }\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                };\n                replay.subscribe(slow);\n                try {\n                    slowLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        slowThread.start();\n\n        Thread fastThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                final CountDownLatch fastLatch = new CountDownLatch(1);\n                Subscriber<Long> fast = new DefaultSubscriber<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Fast Observer completed\");\n                        fastLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Fast Observer STARTED\");\n                        }\n                    }\n                };\n                replay.subscribe(fast);\n                try {\n                    fastLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        fastThread.start();\n        fastThread.join();\n\n        \r\n        assertEquals(1, slowLatch.getCount());\n\n        slowThread.join();\n    }\n","date":"2019-08-16 20:51:17","endLine":140,"groupId":"15","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f9/754a49ee824ffba98a3fc6ebec40fdd545aeeb.src","preCode":"    public void replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther() throws InterruptedException {\n        final ReplayProcessor<Long> replay = ReplayProcessor.create();\n        Thread source = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Flowable.unsafeCreate(new Publisher<Long>() {\n\n                    @Override\n                    public void subscribe(Subscriber<? super Long> subscriber) {\n                        System.out.println(\"********* Start Source Data ***********\");\n                        for (long l = 1; l <= 10000; l++) {\n                            subscriber.onNext(l);\n                        }\n                        System.out.println(\"********* Finished Source Data ***********\");\n                        subscriber.onComplete();\n                    }\n                }).subscribe(replay);\n            }\n        });\n        source.start();\n\n        long v = replay.blockingLast();\n        assertEquals(10000, v);\n\n        \r\n        final CountDownLatch slowLatch = new CountDownLatch(1);\n        Thread slowThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Subscriber<Long> slow = new DefaultSubscriber<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Slow Observer completed\");\n                        slowLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Slow Observer STARTED\");\n                        }\n                        try {\n                            if (args % 10 == 0) {\n                                Thread.sleep(1);\n                            }\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                };\n                replay.subscribe(slow);\n                try {\n                    slowLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        slowThread.start();\n\n        Thread fastThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                final CountDownLatch fastLatch = new CountDownLatch(1);\n                Subscriber<Long> fast = new DefaultSubscriber<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Fast Observer completed\");\n                        fastLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Fast Observer STARTED\");\n                        }\n                    }\n                };\n                replay.subscribe(fast);\n                try {\n                    fastLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        fastThread.start();\n        fastThread.join();\n\n        \r\n        assertEquals(1, slowLatch.getCount());\n\n        slowThread.join();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/processors/ReplayProcessorConcurrencyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther() throws InterruptedException {\n        final ReplaySubject<Long> replay = ReplaySubject.create();\n        Thread source = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Observable.unsafeCreate(new ObservableSource<Long>() {\n\n                    @Override\n                    public void subscribe(Observer<? super Long> o) {\n                        o.onSubscribe(Disposable.empty());\n                        System.out.println(\"********* Start Source Data ***********\");\n                        for (long l = 1; l <= 10000; l++) {\n                            o.onNext(l);\n                        }\n                        System.out.println(\"********* Finished Source Data ***********\");\n                        o.onComplete();\n                    }\n                }).subscribe(replay);\n            }\n        });\n        source.start();\n\n        long v = replay.blockingLast();\n        assertEquals(10000, v);\n\n        \r\n        final CountDownLatch slowLatch = new CountDownLatch(1);\n        Thread slowThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Observer<Long> slow = new DefaultObserver<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Slow Observer completed\");\n                        slowLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Slow Observer STARTED\");\n                        }\n                        try {\n                            if (args % 10 == 0) {\n                                Thread.sleep(1);\n                            }\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                };\n                replay.subscribe(slow);\n                try {\n                    slowLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        slowThread.start();\n\n        Thread fastThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                final CountDownLatch fastLatch = new CountDownLatch(1);\n                Observer<Long> fast = new DefaultObserver<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Fast Observer completed\");\n                        fastLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Fast Observer STARTED\");\n                        }\n                    }\n                };\n                replay.subscribe(fast);\n                try {\n                    fastLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        fastThread.start();\n        fastThread.join();\n\n        \r\n        assertEquals(1, slowLatch.getCount());\n\n        slowThread.join();\n    }\n","date":"2019-12-20 02:39:40","endLine":143,"groupId":"10612","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c6/08875071ac73c50e5039f7af1c54b3934f5e44.src","preCode":"    public void replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther() throws InterruptedException {\n        final ReplaySubject<Long> replay = ReplaySubject.create();\n        Thread source = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Observable.unsafeCreate(new ObservableSource<Long>() {\n\n                    @Override\n                    public void subscribe(Observer<? super Long> o) {\n                        o.onSubscribe(Disposables.empty());\n                        System.out.println(\"********* Start Source Data ***********\");\n                        for (long l = 1; l <= 10000; l++) {\n                            o.onNext(l);\n                        }\n                        System.out.println(\"********* Finished Source Data ***********\");\n                        o.onComplete();\n                    }\n                }).subscribe(replay);\n            }\n        });\n        source.start();\n\n        long v = replay.blockingLast();\n        assertEquals(10000, v);\n\n        \r\n        final CountDownLatch slowLatch = new CountDownLatch(1);\n        Thread slowThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Observer<Long> slow = new DefaultObserver<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Slow Observer completed\");\n                        slowLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Slow Observer STARTED\");\n                        }\n                        try {\n                            if (args % 10 == 0) {\n                                Thread.sleep(1);\n                            }\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                };\n                replay.subscribe(slow);\n                try {\n                    slowLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        slowThread.start();\n\n        Thread fastThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                final CountDownLatch fastLatch = new CountDownLatch(1);\n                Observer<Long> fast = new DefaultObserver<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Fast Observer completed\");\n                        fastLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Fast Observer STARTED\");\n                        }\n                    }\n                };\n                replay.subscribe(fast);\n                try {\n                    fastLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        fastThread.start();\n        fastThread.join();\n\n        \r\n        assertEquals(1, slowLatch.getCount());\n\n        slowThread.join();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subjects/ReplaySubjectConcurrencyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther() throws InterruptedException {\n        final ReplayProcessor<Long> replay = ReplayProcessor.create();\n        Thread source = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Flowable.unsafeCreate(new Publisher<Long>() {\n\n                    @Override\n                    public void subscribe(Subscriber<? super Long> subscriber) {\n                        System.out.println(\"********* Start Source Data ***********\");\n                        for (long l = 1; l <= 10000; l++) {\n                            subscriber.onNext(l);\n                        }\n                        System.out.println(\"********* Finished Source Data ***********\");\n                        subscriber.onComplete();\n                    }\n                }).subscribe(replay);\n            }\n        });\n        source.start();\n\n        long v = replay.blockingLast();\n        assertEquals(10000, v);\n\n        \r\n        final CountDownLatch slowLatch = new CountDownLatch(1);\n        Thread slowThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Subscriber<Long> slow = new DefaultSubscriber<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Slow Observer completed\");\n                        slowLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Slow Observer STARTED\");\n                        }\n                        try {\n                            if (args % 10 == 0) {\n                                Thread.sleep(1);\n                            }\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                };\n                replay.subscribe(slow);\n                try {\n                    slowLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        slowThread.start();\n\n        Thread fastThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                final CountDownLatch fastLatch = new CountDownLatch(1);\n                Subscriber<Long> fast = new DefaultSubscriber<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Fast Observer completed\");\n                        fastLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Fast Observer STARTED\");\n                        }\n                    }\n                };\n                replay.subscribe(fast);\n                try {\n                    fastLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        fastThread.start();\n        fastThread.join();\n\n        \r\n        assertEquals(1, slowLatch.getCount());\n\n        slowThread.join();\n    }\n","date":"2019-08-16 20:51:17","endLine":140,"groupId":"10612","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f9/754a49ee824ffba98a3fc6ebec40fdd545aeeb.src","preCode":"    public void replaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther() throws InterruptedException {\n        final ReplayProcessor<Long> replay = ReplayProcessor.create();\n        Thread source = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Flowable.unsafeCreate(new Publisher<Long>() {\n\n                    @Override\n                    public void subscribe(Subscriber<? super Long> subscriber) {\n                        System.out.println(\"********* Start Source Data ***********\");\n                        for (long l = 1; l <= 10000; l++) {\n                            subscriber.onNext(l);\n                        }\n                        System.out.println(\"********* Finished Source Data ***********\");\n                        subscriber.onComplete();\n                    }\n                }).subscribe(replay);\n            }\n        });\n        source.start();\n\n        long v = replay.blockingLast();\n        assertEquals(10000, v);\n\n        \r\n        final CountDownLatch slowLatch = new CountDownLatch(1);\n        Thread slowThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                Subscriber<Long> slow = new DefaultSubscriber<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Slow Observer completed\");\n                        slowLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Slow Observer STARTED\");\n                        }\n                        try {\n                            if (args % 10 == 0) {\n                                Thread.sleep(1);\n                            }\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                };\n                replay.subscribe(slow);\n                try {\n                    slowLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        slowThread.start();\n\n        Thread fastThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                final CountDownLatch fastLatch = new CountDownLatch(1);\n                Subscriber<Long> fast = new DefaultSubscriber<Long>() {\n\n                    @Override\n                    public void onComplete() {\n                        System.out.println(\"*** Fast Observer completed\");\n                        fastLatch.countDown();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                    }\n\n                    @Override\n                    public void onNext(Long args) {\n                        if (args == 1) {\n                            System.out.println(\"*** Fast Observer STARTED\");\n                        }\n                    }\n                };\n                replay.subscribe(fast);\n                try {\n                    fastLatch.await();\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        });\n        fastThread.start();\n        fastThread.join();\n\n        \r\n        assertEquals(1, slowLatch.getCount());\n\n        slowThread.join();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/processors/ReplayProcessorConcurrencyTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
