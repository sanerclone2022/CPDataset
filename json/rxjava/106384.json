[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void undeliverableUponCancelDelayError() {\n        TestHelper.checkUndeliverableUponCancel(new FlowableConverter<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> upstream) {\n                return upstream.concatMapDelayError(new Function<Integer, Publisher<Integer>>() {\n                    @Override\n                    public Publisher<Integer> apply(Integer v) throws Throwable {\n                        return Flowable.just(v).hide();\n                    }\n                }, 2, false, ImmediateThinScheduler.INSTANCE);\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":1075,"groupId":"8832","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"undeliverableUponCancelDelayError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/93d7aec7a976aa4572ddd2bee6d535a6d1ec5b.src","preCode":"    public void undeliverableUponCancelDelayError() {\n        TestHelper.checkUndeliverableUponCancel(new FlowableConverter<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> upstream) {\n                return upstream.concatMapDelayError(new Function<Integer, Publisher<Integer>>() {\n                    @Override\n                    public Publisher<Integer> apply(Integer v) throws Throwable {\n                        return Flowable.just(v).hide();\n                    }\n                }, 2, false, ImmediateThinScheduler.INSTANCE);\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1063,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void undeliverableUponCancelDelayErrorTillEnd() {\n        TestHelper.checkUndeliverableUponCancel(new FlowableConverter<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> upstream) {\n                return upstream.concatMapDelayError(new Function<Integer, Publisher<Integer>>() {\n                    @Override\n                    public Publisher<Integer> apply(Integer v) throws Throwable {\n                        return Flowable.just(v).hide();\n                    }\n                }, 2, true);\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":254,"groupId":"8832","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"undeliverableUponCancelDelayErrorTillEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0d/70a2430e93f177cc47beaf0b7fb4b2f58ae79e.src","preCode":"    public void undeliverableUponCancelDelayErrorTillEnd() {\n        TestHelper.checkUndeliverableUponCancel(new FlowableConverter<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> upstream) {\n                return upstream.concatMapDelayError(new Function<Integer, Publisher<Integer>>() {\n                    @Override\n                    public Publisher<Integer> apply(Integer v) throws Throwable {\n                        return Flowable.just(v).hide();\n                    }\n                }, 2, true);\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-28 19:19:49","codes":[{"authorDate":"2019-08-28 19:19:49","commitOrder":2,"curCode":"    public void undeliverableUponCancelDelayError() {\n        TestHelper.checkUndeliverableUponCancel(new FlowableConverter<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> upstream) {\n                return upstream.concatMapDelayError(new Function<Integer, Publisher<Integer>>() {\n                    @Override\n                    public Publisher<Integer> apply(Integer v) throws Throwable {\n                        return Flowable.just(v).hide();\n                    }\n                }, false, 2, ImmediateThinScheduler.INSTANCE);\n            }\n        });\n    }\n","date":"2019-08-28 19:19:49","endLine":1075,"groupId":"106384","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"undeliverableUponCancelDelayError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fc/8d665559789fd6f6f18479a8ae7d0e90e429ed.src","preCode":"    public void undeliverableUponCancelDelayError() {\n        TestHelper.checkUndeliverableUponCancel(new FlowableConverter<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> upstream) {\n                return upstream.concatMapDelayError(new Function<Integer, Publisher<Integer>>() {\n                    @Override\n                    public Publisher<Integer> apply(Integer v) throws Throwable {\n                        return Flowable.just(v).hide();\n                    }\n                }, 2, false, ImmediateThinScheduler.INSTANCE);\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapSchedulerTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1063,"status":"M"},{"authorDate":"2019-08-28 19:19:49","commitOrder":2,"curCode":"    public void undeliverableUponCancelDelayErrorTillEnd() {\n        TestHelper.checkUndeliverableUponCancel(new FlowableConverter<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> upstream) {\n                return upstream.concatMapDelayError(new Function<Integer, Publisher<Integer>>() {\n                    @Override\n                    public Publisher<Integer> apply(Integer v) throws Throwable {\n                        return Flowable.just(v).hide();\n                    }\n                }, true, 2);\n            }\n        });\n    }\n","date":"2019-08-28 19:19:49","endLine":254,"groupId":"106384","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"undeliverableUponCancelDelayErrorTillEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/74/394b122e513e91d669d5fe20705193213cf5d1.src","preCode":"    public void undeliverableUponCancelDelayErrorTillEnd() {\n        TestHelper.checkUndeliverableUponCancel(new FlowableConverter<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Flowable<Integer> upstream) {\n                return upstream.concatMapDelayError(new Function<Integer, Publisher<Integer>>() {\n                    @Override\n                    public Publisher<Integer> apply(Integer v) throws Throwable {\n                        return Flowable.just(v).hide();\n                    }\n                }, 2, true);\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"f1441b00f3cc174ab5ef47e3339156d8a7c2a1f5","commitMessage":"@@@3.x: Rename zipIterable.  remove zip(O(O)).  adjust concatMapX arg order (#6638)\n\n","date":"2019-08-28 19:19:49","modifiedFileCount":"12","status":"M","submitter":"David Karnok"}]
