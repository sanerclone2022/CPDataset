[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void assertError() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertTerminated();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposables.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        to.assertErrorMessage(\"Forced failure\");\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertTerminated();\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","date":"2019-08-16 20:51:17","endLine":438,"groupId":"12255","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6f/8d3e25ccf358fbeb29feb01d0bb6b8a3ff187d.src","preCode":"    public void assertError() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertTerminated();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposables.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        to.assertErrorMessage(\"Forced failure\");\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertTerminated();\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestObserverExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void assertError() {\n        TestObserver<Integer> to = TestObserver.create();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposables.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","date":"2019-08-16 20:51:17","endLine":300,"groupId":"12255","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/68dc9cb57635691d74f8c7a994166d7e7259aa.src","preCode":"    public void assertError() {\n        TestObserver<Integer> to = TestObserver.create();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposables.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/TestObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void assertError() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertTerminated();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposable.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        to.assertErrorMessage(\"Forced failure\");\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertTerminated();\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","date":"2019-12-20 02:39:40","endLine":438,"groupId":"12255","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e3/74aa67a21bc05ea27da94704cc38d8ff3ee10c.src","preCode":"    public void assertError() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertTerminated();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposables.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        to.assertErrorMessage(\"Forced failure\");\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertTerminated();\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestObserverExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void assertError() {\n        TestObserver<Integer> to = TestObserver.create();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposable.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","date":"2019-12-20 02:39:40","endLine":300,"groupId":"12255","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/58/1aa0b0b1f4344860a553d65e8367b17b0775f9.src","preCode":"    public void assertError() {\n        TestObserver<Integer> to = TestObserver.create();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposables.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/TestObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void assertError() {\n        TestObserverEx<Integer> to = new TestObserverEx<>();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertTerminated();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposable.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        to.assertErrorMessage(\"Forced failure\");\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertTerminated();\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","date":"2019-12-22 19:17:37","endLine":438,"groupId":"10591","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9e/e8a1cfc5ea1c28001483d56d15a9a8427e1633.src","preCode":"    public void assertError() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertTerminated();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposable.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        to.assertErrorMessage(\"Forced failure\");\n\n        try {\n            to.assertErrorMessage(\"\");\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertTerminated();\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestObserverExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"},{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public void assertError() {\n        TestObserver<Integer> to = TestObserver.create();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposable.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","date":"2019-12-20 02:39:40","endLine":300,"groupId":"10591","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/58/1aa0b0b1f4344860a553d65e8367b17b0775f9.src","preCode":"    public void assertError() {\n        TestObserver<Integer> to = TestObserver.create();\n\n        try {\n            to.assertError(TestException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(new TestException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysTrue());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError ex) {\n            \r\n        }\n\n        try {\n            to.assertSubscribed();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.onSubscribe(Disposable.empty());\n\n        to.assertSubscribed();\n\n        to.assertNoErrors();\n\n        TestException ex = new TestException(\"Forced failure\");\n\n        to.onError(ex);\n\n        to.assertError(ex);\n\n        to.assertError(TestException.class);\n\n        to.assertError(Functions.<Throwable>alwaysTrue());\n\n        to.assertError(new Predicate<Throwable>() {\n            @Override\n            public boolean test(Throwable t) throws Exception {\n                return t.getMessage() != null && t.getMessage().contains(\"Forced\");\n            }\n        });\n\n        try {\n            to.assertError(new RuntimeException());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(IOException.class);\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertError(Functions.<Throwable>alwaysFalse());\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        try {\n            to.assertNoErrors();\n            throw new RuntimeException(\"Should have thrown\");\n        } catch (AssertionError exc) {\n            \r\n        }\n\n        to.assertValueCount(0);\n\n        to.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/TestObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"N"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
