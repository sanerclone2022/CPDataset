[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void earlyUnsubscribe() {\n        for (int i = 0; i < 10; i++) {\n            TestScheduler scheduler1 = new TestScheduler();\n            AtomicBoolean os1 = new AtomicBoolean(false);\n            Observable<Long> o1 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n            TestScheduler scheduler2 = new TestScheduler();\n            AtomicBoolean os2 = new AtomicBoolean(false);\n            Observable<Long> o2 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n            TestObserver<Long> to = new TestObserver<Long>();\n            Observable.merge(o1, o2).subscribe(to);\n\n            \r\n            to.assertNoValues();\n\n            scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n            scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n            assertFalse(os1.get());\n            assertFalse(os2.get());\n\n            \r\n            to.dispose();\n\n            assertTrue(os1.get());\n            assertTrue(os2.get());\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n\r\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":477,"groupId":"3852","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"earlyUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/87/36bd4ae332523594a8bd4235fb8a57ab596441.src","preCode":"    public void earlyUnsubscribe() {\n        for (int i = 0; i < 10; i++) {\n            TestScheduler scheduler1 = new TestScheduler();\n            AtomicBoolean os1 = new AtomicBoolean(false);\n            Observable<Long> o1 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n            TestScheduler scheduler2 = new TestScheduler();\n            AtomicBoolean os2 = new AtomicBoolean(false);\n            Observable<Long> o2 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n            TestObserver<Long> to = new TestObserver<Long>();\n            Observable.merge(o1, o2).subscribe(to);\n\n            \r\n            to.assertNoValues();\n\n            scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n            scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n            assertFalse(os1.get());\n            assertFalse(os2.get());\n\n            \r\n            to.dispose();\n\n            assertTrue(os1.get());\n            assertTrue(os2.get());\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n\r\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribeAsFlowablesComplete() {\n        TestScheduler scheduler1 = new TestScheduler();\n        AtomicBoolean os1 = new AtomicBoolean(false);\n        Flowable<Long> f1 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n        TestScheduler scheduler2 = new TestScheduler();\n        AtomicBoolean os2 = new AtomicBoolean(false);\n        Flowable<Long> f2 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n        TestSubscriberEx<Long> ts = new TestSubscriberEx<Long>();\n        Flowable.merge(f1, f2).subscribe(ts);\n\n        \r\n        ts.assertNoValues();\n\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n        scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L);\n        \r\n        assertFalse(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L);\n        assertTrue(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler2.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L, 2L, 3L, 4L);\n        assertTrue(os1.get());\n        assertTrue(os2.get());\n\n        ts.assertTerminated();\n    }\n","date":"2019-08-16 20:51:17","endLine":456,"groupId":"3852","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeAsFlowablesComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/22/526d1922532b741c7161dad0d1db1939ced05a.src","preCode":"    public void unsubscribeAsFlowablesComplete() {\n        TestScheduler scheduler1 = new TestScheduler();\n        AtomicBoolean os1 = new AtomicBoolean(false);\n        Flowable<Long> f1 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n        TestScheduler scheduler2 = new TestScheduler();\n        AtomicBoolean os2 = new AtomicBoolean(false);\n        Flowable<Long> f2 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n        TestSubscriberEx<Long> ts = new TestSubscriberEx<Long>();\n        Flowable.merge(f1, f2).subscribe(ts);\n\n        \r\n        ts.assertNoValues();\n\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n        scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L);\n        \r\n        assertFalse(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L);\n        assertTrue(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler2.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L, 2L, 3L, 4L);\n        assertTrue(os1.get());\n        assertTrue(os2.get());\n\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void earlyUnsubscribe() {\n        for (int i = 0; i < 10; i++) {\n            TestScheduler scheduler1 = new TestScheduler();\n            AtomicBoolean os1 = new AtomicBoolean(false);\n            Observable<Long> o1 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n            TestScheduler scheduler2 = new TestScheduler();\n            AtomicBoolean os2 = new AtomicBoolean(false);\n            Observable<Long> o2 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n            TestObserver<Long> to = new TestObserver<Long>();\n            Observable.merge(o1, o2).subscribe(to);\n\n            \r\n            to.assertNoValues();\n\n            scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n            scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n            assertFalse(os1.get());\n            assertFalse(os2.get());\n\n            \r\n            to.dispose();\n\n            assertTrue(os1.get());\n            assertTrue(os2.get());\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n\r\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":477,"groupId":"3852","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"earlyUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/87/36bd4ae332523594a8bd4235fb8a57ab596441.src","preCode":"    public void earlyUnsubscribe() {\n        for (int i = 0; i < 10; i++) {\n            TestScheduler scheduler1 = new TestScheduler();\n            AtomicBoolean os1 = new AtomicBoolean(false);\n            Observable<Long> o1 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n            TestScheduler scheduler2 = new TestScheduler();\n            AtomicBoolean os2 = new AtomicBoolean(false);\n            Observable<Long> o2 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n            TestObserver<Long> to = new TestObserver<Long>();\n            Observable.merge(o1, o2).subscribe(to);\n\n            \r\n            to.assertNoValues();\n\n            scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n            scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n            assertFalse(os1.get());\n            assertFalse(os2.get());\n\n            \r\n            to.dispose();\n\n            assertTrue(os1.get());\n            assertTrue(os2.get());\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n\r\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void unsubscribeAsFlowablesComplete() {\n        TestScheduler scheduler1 = new TestScheduler();\n        AtomicBoolean os1 = new AtomicBoolean(false);\n        Flowable<Long> f1 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n        TestScheduler scheduler2 = new TestScheduler();\n        AtomicBoolean os2 = new AtomicBoolean(false);\n        Flowable<Long> f2 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n        TestSubscriberEx<Long> ts = new TestSubscriberEx<>();\n        Flowable.merge(f1, f2).subscribe(ts);\n\n        \r\n        ts.assertNoValues();\n\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n        scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L);\n        \r\n        assertFalse(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L);\n        assertTrue(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler2.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L, 2L, 3L, 4L);\n        assertTrue(os1.get());\n        assertTrue(os2.get());\n\n        ts.assertTerminated();\n    }\n","date":"2019-12-22 18:39:23","endLine":456,"groupId":"3852","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeAsFlowablesComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6b/3f72e2f941a8cf958bf4d1ac1b1c79d905228f.src","preCode":"    public void unsubscribeAsFlowablesComplete() {\n        TestScheduler scheduler1 = new TestScheduler();\n        AtomicBoolean os1 = new AtomicBoolean(false);\n        Flowable<Long> f1 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n        TestScheduler scheduler2 = new TestScheduler();\n        AtomicBoolean os2 = new AtomicBoolean(false);\n        Flowable<Long> f2 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n        TestSubscriberEx<Long> ts = new TestSubscriberEx<Long>();\n        Flowable.merge(f1, f2).subscribe(ts);\n\n        \r\n        ts.assertNoValues();\n\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n        scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L);\n        \r\n        assertFalse(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L);\n        assertTrue(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler2.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L, 2L, 3L, 4L);\n        assertTrue(os1.get());\n        assertTrue(os2.get());\n\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void earlyUnsubscribe() {\n        for (int i = 0; i < 10; i++) {\n            TestScheduler scheduler1 = new TestScheduler();\n            AtomicBoolean os1 = new AtomicBoolean(false);\n            Observable<Long> o1 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n            TestScheduler scheduler2 = new TestScheduler();\n            AtomicBoolean os2 = new AtomicBoolean(false);\n            Observable<Long> o2 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n            TestObserver<Long> to = new TestObserver<>();\n            Observable.merge(o1, o2).subscribe(to);\n\n            \r\n            to.assertNoValues();\n\n            scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n            scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n            assertFalse(os1.get());\n            assertFalse(os2.get());\n\n            \r\n            to.dispose();\n\n            assertTrue(os1.get());\n            assertTrue(os2.get());\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n\r\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":477,"groupId":"104833","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"earlyUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/d30f8a854a0e92aecdba22f6b96934b073a37b.src","preCode":"    public void earlyUnsubscribe() {\n        for (int i = 0; i < 10; i++) {\n            TestScheduler scheduler1 = new TestScheduler();\n            AtomicBoolean os1 = new AtomicBoolean(false);\n            Observable<Long> o1 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n            TestScheduler scheduler2 = new TestScheduler();\n            AtomicBoolean os2 = new AtomicBoolean(false);\n            Observable<Long> o2 = createObservableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n            TestObserver<Long> to = new TestObserver<Long>();\n            Observable.merge(o1, o2).subscribe(to);\n\n            \r\n            to.assertNoValues();\n\n            scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n            scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n            assertFalse(os1.get());\n            assertFalse(os2.get());\n\n            \r\n            to.dispose();\n\n            assertTrue(os1.get());\n            assertTrue(os2.get());\n\n            to.assertValues(0L, 1L, 2L, 0L, 1L);\n            \r\n\r\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void unsubscribeAsFlowablesComplete() {\n        TestScheduler scheduler1 = new TestScheduler();\n        AtomicBoolean os1 = new AtomicBoolean(false);\n        Flowable<Long> f1 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n        TestScheduler scheduler2 = new TestScheduler();\n        AtomicBoolean os2 = new AtomicBoolean(false);\n        Flowable<Long> f2 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n        TestSubscriberEx<Long> ts = new TestSubscriberEx<>();\n        Flowable.merge(f1, f2).subscribe(ts);\n\n        \r\n        ts.assertNoValues();\n\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n        scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L);\n        \r\n        assertFalse(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L);\n        assertTrue(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler2.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L, 2L, 3L, 4L);\n        assertTrue(os1.get());\n        assertTrue(os2.get());\n\n        ts.assertTerminated();\n    }\n","date":"2019-12-22 18:39:23","endLine":456,"groupId":"104833","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeAsFlowablesComplete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6b/3f72e2f941a8cf958bf4d1ac1b1c79d905228f.src","preCode":"    public void unsubscribeAsFlowablesComplete() {\n        TestScheduler scheduler1 = new TestScheduler();\n        AtomicBoolean os1 = new AtomicBoolean(false);\n        Flowable<Long> f1 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler1, os1);\n\n        TestScheduler scheduler2 = new TestScheduler();\n        AtomicBoolean os2 = new AtomicBoolean(false);\n        Flowable<Long> f2 = createFlowableOf5IntervalsOf1SecondIncrementsWithSubscriptionHook(scheduler2, os2);\n\n        TestSubscriberEx<Long> ts = new TestSubscriberEx<>();\n        Flowable.merge(f1, f2).subscribe(ts);\n\n        \r\n        ts.assertNoValues();\n\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n        scheduler2.advanceTimeBy(2, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L);\n        \r\n        assertFalse(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler1.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L);\n        assertTrue(os1.get());\n        assertFalse(os2.get());\n\n        \r\n        scheduler2.advanceTimeBy(3, TimeUnit.SECONDS);\n\n        ts.assertValues(0L, 1L, 2L, 0L, 1L, 3L, 4L, 2L, 3L, 4L);\n        assertTrue(os1.get());\n        assertTrue(os2.get());\n\n        ts.assertTerminated();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
