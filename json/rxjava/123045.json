[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposables.empty());\n            System.out.println(\"TestSingleThreadedObservable subscribed to ...\");\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestSingleThreadedObservable thread\");\n                        for (String s : values) {\n                            System.out.println(\"TestSingleThreadedObservable onNext: \" + s);\n                            observer.onNext(s);\n                        }\n                        observer.onComplete();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            });\n            System.out.println(\"starting TestSingleThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestSingleThreadedObservable thread\");\n        }\n","date":"2019-08-16 20:51:17","endLine":246,"groupId":"1693","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b0/023e29896d496c11878dc1e33b063a17063087.src","preCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposables.empty());\n            System.out.println(\"TestSingleThreadedObservable subscribed to ...\");\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestSingleThreadedObservable thread\");\n                        for (String s : values) {\n                            System.out.println(\"TestSingleThreadedObservable onNext: \" + s);\n                            observer.onNext(s);\n                        }\n                        observer.onComplete();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            });\n            System.out.println(\"starting TestSingleThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestSingleThreadedObservable thread\");\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Observer<? super String> observer) {\n            System.out.println(\"TestObservable subscribed to ...\");\n            observer.onSubscribe(upstream);\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestObservable thread\");\n                        for (String s : values) {\n                            System.out.println(\"TestObservable onNext: \" + s);\n                            observer.onNext(s);\n                        }\n                        observer.onComplete();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            });\n            System.out.println(\"starting TestObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestObservable thread\");\n        }\n","date":"2019-08-16 20:51:17","endLine":215,"groupId":"1693","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7c/30166bb391f319b6d061593f6bf73acf7db9c8.src","preCode":"        public void subscribe(final Observer<? super String> observer) {\n            System.out.println(\"TestObservable subscribed to ...\");\n            observer.onSubscribe(upstream);\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestObservable thread\");\n                        for (String s : values) {\n                            System.out.println(\"TestObservable onNext: \" + s);\n                            observer.onNext(s);\n                        }\n                        observer.onComplete();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            });\n            System.out.println(\"starting TestObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestObservable thread\");\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhileTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposable.empty());\n            System.out.println(\"TestSingleThreadedObservable subscribed to ...\");\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestSingleThreadedObservable thread\");\n                        for (String s : values) {\n                            System.out.println(\"TestSingleThreadedObservable onNext: \" + s);\n                            observer.onNext(s);\n                        }\n                        observer.onComplete();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            });\n            System.out.println(\"starting TestSingleThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestSingleThreadedObservable thread\");\n        }\n","date":"2019-12-20 02:39:40","endLine":246,"groupId":"123045","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2a/2b7dff0dd36a0eb4ec5781c0de999cb25fa77b.src","preCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposables.empty());\n            System.out.println(\"TestSingleThreadedObservable subscribed to ...\");\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestSingleThreadedObservable thread\");\n                        for (String s : values) {\n                            System.out.println(\"TestSingleThreadedObservable onNext: \" + s);\n                            observer.onNext(s);\n                        }\n                        observer.onComplete();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            });\n            System.out.println(\"starting TestSingleThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestSingleThreadedObservable thread\");\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        public void subscribe(final Observer<? super String> observer) {\n            System.out.println(\"TestObservable subscribed to ...\");\n            observer.onSubscribe(upstream);\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestObservable thread\");\n                        for (String s : values) {\n                            System.out.println(\"TestObservable onNext: \" + s);\n                            observer.onNext(s);\n                        }\n                        observer.onComplete();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            });\n            System.out.println(\"starting TestObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestObservable thread\");\n        }\n","date":"2019-08-16 20:51:17","endLine":215,"groupId":"123045","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7c/30166bb391f319b6d061593f6bf73acf7db9c8.src","preCode":"        public void subscribe(final Observer<? super String> observer) {\n            System.out.println(\"TestObservable subscribed to ...\");\n            observer.onSubscribe(upstream);\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestObservable thread\");\n                        for (String s : values) {\n                            System.out.println(\"TestObservable onNext: \" + s);\n                            observer.onNext(s);\n                        }\n                        observer.onComplete();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n\n            });\n            System.out.println(\"starting TestObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestObservable thread\");\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTakeWhileTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
