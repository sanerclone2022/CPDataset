[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public static <T> void checkBadSourceObservable(Function<Observable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Observable<T> bad = new Observable<T>() {\n                boolean once;\n                @Override\n                protected void subscribeActual(Observer<? super T> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    if (once) {\n                        return;\n                    }\n                    once = true;\n\n                    if (goodValue != null) {\n                        observer.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        observer.onError(new TestException(\"error\"));\n                    } else {\n                        observer.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        observer.onNext(badValue);\n                    }\n                    observer.onError(new TestException(\"second\"));\n                    observer.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":2613,"groupId":"10558","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBadSourceObservable","params":"(Function<Observable<T>@Object>mapper@finalbooleanerror@finalTgoodValue@finalTbadValue@finalObject...expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7b/7ebfac2ace1a1dbb252c52bf233d3ec1941abf.src","preCode":"    public static <T> void checkBadSourceObservable(Function<Observable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Observable<T> bad = new Observable<T>() {\n                boolean once;\n                @Override\n                protected void subscribeActual(Observer<? super T> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    if (once) {\n                        return;\n                    }\n                    once = true;\n\n                    if (goodValue != null) {\n                        observer.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        observer.onError(new TestException(\"error\"));\n                    } else {\n                        observer.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        observer.onNext(badValue);\n                    }\n                    observer.onError(new TestException(\"second\"));\n                    observer.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestHelper.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2460,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public static <T> void checkBadSourceFlowable(Function<Flowable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Flowable<T> bad = new Flowable<T>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super T> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    if (goodValue != null) {\n                        subscriber.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        subscriber.onError(new TestException(\"error\"));\n                    } else {\n                        subscriber.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        subscriber.onNext(badValue);\n                    }\n                    subscriber.onError(new TestException(\"second\"));\n                    subscriber.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":2772,"groupId":"10558","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBadSourceFlowable","params":"(Function<Flowable<T>@Object>mapper@finalbooleanerror@finalTgoodValue@finalTbadValue@finalObject...expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7b/7ebfac2ace1a1dbb252c52bf233d3ec1941abf.src","preCode":"    public static <T> void checkBadSourceFlowable(Function<Flowable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Flowable<T> bad = new Flowable<T>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super T> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    if (goodValue != null) {\n                        subscriber.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        subscriber.onError(new TestException(\"error\"));\n                    } else {\n                        subscriber.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        subscriber.onNext(badValue);\n                    }\n                    subscriber.onError(new TestException(\"second\"));\n                    subscriber.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestHelper.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2625,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 00:28:01","codes":[{"authorDate":"2019-12-18 00:28:01","commitOrder":2,"curCode":"    public static <T> void checkBadSourceObservable(Function<Observable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Observable<T> bad = new Observable<T>() {\n                boolean once;\n                @Override\n                protected void subscribeActual(Observer<? super T> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    if (once) {\n                        return;\n                    }\n                    once = true;\n\n                    if (goodValue != null) {\n                        observer.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        observer.onError(new TestException(\"error\"));\n                    } else {\n                        observer.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        observer.onNext(badValue);\n                    }\n                    observer.onError(new TestException(\"second\"));\n                    observer.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-18 00:28:01","endLine":2618,"groupId":"10558","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBadSourceObservable","params":"(Function<Observable<T>@Object>mapper@finalbooleanerror@finalTgoodValue@finalTbadValue@finalObject...expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/2a834650241d65ad859614076cf392a2685fa1.src","preCode":"    public static <T> void checkBadSourceObservable(Function<Observable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Observable<T> bad = new Observable<T>() {\n                boolean once;\n                @Override\n                protected void subscribeActual(Observer<? super T> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    if (once) {\n                        return;\n                    }\n                    once = true;\n\n                    if (goodValue != null) {\n                        observer.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        observer.onError(new TestException(\"error\"));\n                    } else {\n                        observer.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        observer.onNext(badValue);\n                    }\n                    observer.onError(new TestException(\"second\"));\n                    observer.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestHelper.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2465,"status":"M"},{"authorDate":"2019-12-18 00:28:01","commitOrder":2,"curCode":"    public static <T> void checkBadSourceFlowable(Function<Flowable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Flowable<T> bad = new Flowable<T>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super T> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    if (goodValue != null) {\n                        subscriber.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        subscriber.onError(new TestException(\"error\"));\n                    } else {\n                        subscriber.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        subscriber.onNext(badValue);\n                    }\n                    subscriber.onError(new TestException(\"second\"));\n                    subscriber.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-18 00:28:01","endLine":2777,"groupId":"10558","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBadSourceFlowable","params":"(Function<Flowable<T>@Object>mapper@finalbooleanerror@finalTgoodValue@finalTbadValue@finalObject...expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/2a834650241d65ad859614076cf392a2685fa1.src","preCode":"    public static <T> void checkBadSourceFlowable(Function<Flowable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Flowable<T> bad = new Flowable<T>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super T> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    if (goodValue != null) {\n                        subscriber.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        subscriber.onError(new TestException(\"error\"));\n                    } else {\n                        subscriber.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        subscriber.onNext(badValue);\n                    }\n                    subscriber.onError(new TestException(\"second\"));\n                    subscriber.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestHelper.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2630,"status":"M"}],"commitId":"735add2c25cb08f175ab3fc5af0270587fada083","commitMessage":"@@@3.x: [Java 8] Upgrade to Java 8.  add Flowable.fromX operators (#6765)\n\n* 3.x: [Java 8] Upgrade to Java 8.  add Flowable.fromX operators\n\n* Add NonNull annotation to the new fromX methods\n\n* Annotate return type argument to Flowable<@NonNull T>\n","date":"2019-12-18 00:28:01","modifiedFileCount":"7","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-18 00:28:01","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":3,"curCode":"    public static <T> void checkBadSourceObservable(Function<Observable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Observable<T> bad = new Observable<T>() {\n                boolean once;\n                @Override\n                protected void subscribeActual(Observer<? super T> observer) {\n                    observer.onSubscribe(Disposable.empty());\n\n                    if (once) {\n                        return;\n                    }\n                    once = true;\n\n                    if (goodValue != null) {\n                        observer.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        observer.onError(new TestException(\"error\"));\n                    } else {\n                        observer.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        observer.onNext(badValue);\n                    }\n                    observer.onError(new TestException(\"second\"));\n                    observer.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":2617,"groupId":"10535","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkBadSourceObservable","params":"(Function<Observable<T>@Object>mapper@finalbooleanerror@finalTgoodValue@finalTbadValue@finalObject...expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3f/aefd13a55cbdc2b5b305ee4914a9bbae9be117.src","preCode":"    public static <T> void checkBadSourceObservable(Function<Observable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Observable<T> bad = new Observable<T>() {\n                boolean once;\n                @Override\n                protected void subscribeActual(Observer<? super T> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    if (once) {\n                        return;\n                    }\n                    once = true;\n\n                    if (goodValue != null) {\n                        observer.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        observer.onError(new TestException(\"error\"));\n                    } else {\n                        observer.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        observer.onNext(badValue);\n                    }\n                    observer.onError(new TestException(\"second\"));\n                    observer.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestHelper.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2464,"status":"M"},{"authorDate":"2019-12-18 00:28:01","commitOrder":3,"curCode":"    public static <T> void checkBadSourceFlowable(Function<Flowable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Flowable<T> bad = new Flowable<T>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super T> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    if (goodValue != null) {\n                        subscriber.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        subscriber.onError(new TestException(\"error\"));\n                    } else {\n                        subscriber.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        subscriber.onNext(badValue);\n                    }\n                    subscriber.onError(new TestException(\"second\"));\n                    subscriber.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-18 00:28:01","endLine":2777,"groupId":"10535","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkBadSourceFlowable","params":"(Function<Flowable<T>@Object>mapper@finalbooleanerror@finalTgoodValue@finalTbadValue@finalObject...expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/2a834650241d65ad859614076cf392a2685fa1.src","preCode":"    public static <T> void checkBadSourceFlowable(Function<Flowable<T>, Object> mapper,\n            final boolean error, final T goodValue, final T badValue, final Object... expected) {\n        List<Throwable> errors = trackPluginErrors();\n        try {\n            Flowable<T> bad = new Flowable<T>() {\n                @Override\n                protected void subscribeActual(Subscriber<? super T> subscriber) {\n                    subscriber.onSubscribe(new BooleanSubscription());\n\n                    if (goodValue != null) {\n                        subscriber.onNext(goodValue);\n                    }\n\n                    if (error) {\n                        subscriber.onError(new TestException(\"error\"));\n                    } else {\n                        subscriber.onComplete();\n                    }\n\n                    if (badValue != null) {\n                        subscriber.onNext(badValue);\n                    }\n                    subscriber.onError(new TestException(\"second\"));\n                    subscriber.onComplete();\n                }\n            };\n\n            Object o = mapper.apply(bad);\n\n            if (o instanceof ObservableSource) {\n                ObservableSource<?> os = (ObservableSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof Publisher) {\n                Publisher<?> os = (Publisher<?>) o;\n                TestSubscriberEx<Object> ts = new TestSubscriberEx<>();\n\n                os.subscribe(ts);\n\n                ts.awaitDone(5, TimeUnit.SECONDS);\n\n                ts.assertSubscribed();\n\n                if (expected != null) {\n                    ts.assertValues(expected);\n                }\n                if (error) {\n                    ts.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    ts.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof SingleSource) {\n                SingleSource<?> os = (SingleSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof MaybeSource) {\n                MaybeSource<?> os = (MaybeSource<?>) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            if (o instanceof CompletableSource) {\n                CompletableSource os = (CompletableSource) o;\n                TestObserverEx<Object> to = new TestObserverEx<>();\n\n                os.subscribe(to);\n\n                to.awaitDone(5, TimeUnit.SECONDS);\n\n                to.assertSubscribed();\n\n                if (expected != null) {\n                    to.assertValues(expected);\n                }\n                if (error) {\n                    to.assertError(TestException.class)\n                    .assertErrorMessage(\"error\")\n                    .assertNotComplete();\n                } else {\n                    to.assertNoErrors().assertComplete();\n                }\n            }\n\n            assertUndeliverable(errors, 0, TestException.class, \"second\");\n        } catch (AssertionError ex) {\n            throw ex;\n        } catch (Throwable ex) {\n            throw new RuntimeException(ex);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestHelper.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2630,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
