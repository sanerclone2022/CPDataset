[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void throttlingWithCompleted() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> innerObserver) {\n                innerObserver.onSubscribe(Disposables.empty());\n                publishNext(innerObserver, 100, \"one\");    \r\n                publishNext(innerObserver, 300, \"two\");    \r\n                publishNext(innerObserver, 900, \"three\");   \r\n                publishNext(innerObserver, 905, \"four\");   \r\n                publishCompleted(innerObserver, 1000);     \r\n            }\n        });\n\n        Observable<String> sampled = source.throttleFirst(400, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(0)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(0)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":72,"groupId":"2085","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"throttlingWithCompleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/41/6c248f6a695a86c0d7876b5fd3570e215d06b9.src","preCode":"    public void throttlingWithCompleted() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> innerObserver) {\n                innerObserver.onSubscribe(Disposables.empty());\n                publishNext(innerObserver, 100, \"one\");    \r\n                publishNext(innerObserver, 300, \"two\");    \r\n                publishNext(innerObserver, 900, \"three\");   \r\n                publishNext(innerObserver, 905, \"four\");   \r\n                publishCompleted(innerObserver, 1000);     \r\n            }\n        });\n\n        Observable<String> sampled = source.throttleFirst(400, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(0)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(0)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableThrottleFirstTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void throttlingWithCompleted() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                publishNext(subscriber, 100, \"one\");    \r\n                publishNext(subscriber, 300, \"two\");    \r\n                publishNext(subscriber, 900, \"three\");   \r\n                publishNext(subscriber, 905, \"four\");   \r\n                publishCompleted(subscriber, 1000);     \r\n            }\n        });\n\n        Flowable<String> sampled = source.throttleFirst(400, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(0)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(0)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":73,"groupId":"2085","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"throttlingWithCompleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d2/6d49019a08b2c232ba6bacf8c68304dbbf0f6b.src","preCode":"    public void throttlingWithCompleted() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                publishNext(subscriber, 100, \"one\");    \r\n                publishNext(subscriber, 300, \"two\");    \r\n                publishNext(subscriber, 900, \"three\");   \r\n                publishNext(subscriber, 905, \"four\");   \r\n                publishCompleted(subscriber, 1000);     \r\n            }\n        });\n\n        Flowable<String> sampled = source.throttleFirst(400, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(0)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(0)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void throttlingWithCompleted() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> innerObserver) {\n                innerObserver.onSubscribe(Disposable.empty());\n                publishNext(innerObserver, 100, \"one\");    \r\n                publishNext(innerObserver, 300, \"two\");    \r\n                publishNext(innerObserver, 900, \"three\");   \r\n                publishNext(innerObserver, 905, \"four\");   \r\n                publishCompleted(innerObserver, 1000);     \r\n            }\n        });\n\n        Observable<String> sampled = source.throttleFirst(400, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(0)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(0)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-20 02:39:40","endLine":72,"groupId":"104068","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"throttlingWithCompleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c8/eedc72bda7da6abc4306158aa78810732cfb58.src","preCode":"    public void throttlingWithCompleted() {\n        Observable<String> source = Observable.unsafeCreate(new ObservableSource<String>() {\n            @Override\n            public void subscribe(Observer<? super String> innerObserver) {\n                innerObserver.onSubscribe(Disposables.empty());\n                publishNext(innerObserver, 100, \"one\");    \r\n                publishNext(innerObserver, 300, \"two\");    \r\n                publishNext(innerObserver, 900, \"three\");   \r\n                publishNext(innerObserver, 905, \"four\");   \r\n                publishCompleted(innerObserver, 1000);     \r\n            }\n        });\n\n        Observable<String> sampled = source.throttleFirst(400, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(0)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(0)).onNext(\"four\");\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableThrottleFirstTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void throttlingWithCompleted() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                publishNext(subscriber, 100, \"one\");    \r\n                publishNext(subscriber, 300, \"two\");    \r\n                publishNext(subscriber, 900, \"three\");   \r\n                publishNext(subscriber, 905, \"four\");   \r\n                publishCompleted(subscriber, 1000);     \r\n            }\n        });\n\n        Flowable<String> sampled = source.throttleFirst(400, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(0)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(0)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":73,"groupId":"104068","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"throttlingWithCompleted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d2/6d49019a08b2c232ba6bacf8c68304dbbf0f6b.src","preCode":"    public void throttlingWithCompleted() {\n        Flowable<String> source = Flowable.unsafeCreate(new Publisher<String>() {\n            @Override\n            public void subscribe(Subscriber<? super String> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                publishNext(subscriber, 100, \"one\");    \r\n                publishNext(subscriber, 300, \"two\");    \r\n                publishNext(subscriber, 900, \"three\");   \r\n                publishNext(subscriber, 905, \"four\");   \r\n                publishCompleted(subscriber, 1000);     \r\n            }\n        });\n\n        Flowable<String> sampled = source.throttleFirst(400, TimeUnit.MILLISECONDS, scheduler);\n        sampled.subscribe(subscriber);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        scheduler.advanceTimeTo(1000, TimeUnit.MILLISECONDS);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(0)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(0)).onNext(\"four\");\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableThrottleFirstTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
