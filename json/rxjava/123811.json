[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposables.empty());\n            System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n            final NullPointerException npe = new NullPointerException();\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestMultiThreadedObservable thread\");\n                        for (final String s : values) {\n                            threadPool.execute(new Runnable() {\n\n                                @Override\n                                public void run() {\n                                    threadsRunning.incrementAndGet();\n                                    try {\n                                        \r\n                                        if (s == null) {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                                            \r\n                                            throw npe;\n                                        } else {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                                        }\n                                        observer.onNext(s);\n                                        \r\n                                        int concurrentThreads = threadsRunning.get();\n                                        int maxThreads = maxConcurrentThreads.get();\n                                        if (concurrentThreads > maxThreads) {\n                                            maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);\n                                        }\n                                    } catch (Throwable e) {\n                                        observer.onError(e);\n                                    } finally {\n                                        threadsRunning.decrementAndGet();\n                                    }\n                                }\n                            });\n                        }\n                        \r\n                        threadPool.shutdown();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n\n                    \r\n                    try {\n                        \r\n                        threadPool.awaitTermination(2, TimeUnit.SECONDS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    observer.onComplete();\n                }\n            });\n            System.out.println(\"starting TestMultiThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestMultiThreadedObservable thread\");\n        }\n","date":"2019-08-16 20:51:17","endLine":333,"groupId":"3765","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b0/023e29896d496c11878dc1e33b063a17063087.src","preCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposables.empty());\n            System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n            final NullPointerException npe = new NullPointerException();\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestMultiThreadedObservable thread\");\n                        for (final String s : values) {\n                            threadPool.execute(new Runnable() {\n\n                                @Override\n                                public void run() {\n                                    threadsRunning.incrementAndGet();\n                                    try {\n                                        \r\n                                        if (s == null) {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                                            \r\n                                            throw npe;\n                                        } else {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                                        }\n                                        observer.onNext(s);\n                                        \r\n                                        int concurrentThreads = threadsRunning.get();\n                                        int maxThreads = maxConcurrentThreads.get();\n                                        if (concurrentThreads > maxThreads) {\n                                            maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);\n                                        }\n                                    } catch (Throwable e) {\n                                        observer.onError(e);\n                                    } finally {\n                                        threadsRunning.decrementAndGet();\n                                    }\n                                }\n                            });\n                        }\n                        \r\n                        threadPool.shutdown();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n\n                    \r\n                    try {\n                        \r\n                        threadPool.awaitTermination(2, TimeUnit.SECONDS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    observer.onComplete();\n                }\n            });\n            System.out.println(\"starting TestMultiThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestMultiThreadedObservable thread\");\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public void subscribe(final Subscriber<? super String> subscriber) {\n            subscriber.onSubscribe(new BooleanSubscription());\n            System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n            final NullPointerException npe = new NullPointerException();\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestMultiThreadedObservable thread\");\n                        for (final String s : values) {\n                            threadPool.execute(new Runnable() {\n\n                                @Override\n                                public void run() {\n                                    threadsRunning.incrementAndGet();\n                                    try {\n                                        \r\n                                        if (s == null) {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                                            \r\n                                            throw npe;\n                                        } else {\n                                            try {\n                                                Thread.sleep(10);\n                                            } catch (InterruptedException ex) {\n                                                \r\n                                            }\n                                            System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                                        }\n                                        subscriber.onNext(s);\n                                        \r\n                                        int concurrentThreads = threadsRunning.get();\n                                        int maxThreads = maxConcurrentThreads.get();\n                                        if (concurrentThreads > maxThreads) {\n                                            maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);\n                                        }\n                                    } catch (Throwable e) {\n                                        subscriber.onError(e);\n                                    } finally {\n                                        threadsRunning.decrementAndGet();\n                                    }\n                                }\n                            });\n                        }\n                        \r\n                        threadPool.shutdown();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n\n                    \r\n                    try {\n                        \r\n                        threadPool.awaitTermination(2, TimeUnit.SECONDS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    subscriber.onComplete();\n                }\n            });\n            System.out.println(\"starting TestMultiThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestMultiThreadedObservable thread\");\n        }\n","date":"2019-08-16 20:51:17","endLine":338,"groupId":"7458","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalSubscriber<?superString>subscriber)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cd/848e683d8d42c14e9989948828d5813cff5777.src","preCode":"        public void subscribe(final Subscriber<? super String> subscriber) {\n            subscriber.onSubscribe(new BooleanSubscription());\n            System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n            final NullPointerException npe = new NullPointerException();\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestMultiThreadedObservable thread\");\n                        for (final String s : values) {\n                            threadPool.execute(new Runnable() {\n\n                                @Override\n                                public void run() {\n                                    threadsRunning.incrementAndGet();\n                                    try {\n                                        \r\n                                        if (s == null) {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                                            \r\n                                            throw npe;\n                                        } else {\n                                            try {\n                                                Thread.sleep(10);\n                                            } catch (InterruptedException ex) {\n                                                \r\n                                            }\n                                            System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                                        }\n                                        subscriber.onNext(s);\n                                        \r\n                                        int concurrentThreads = threadsRunning.get();\n                                        int maxThreads = maxConcurrentThreads.get();\n                                        if (concurrentThreads > maxThreads) {\n                                            maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);\n                                        }\n                                    } catch (Throwable e) {\n                                        subscriber.onError(e);\n                                    } finally {\n                                        threadsRunning.decrementAndGet();\n                                    }\n                                }\n                            });\n                        }\n                        \r\n                        threadPool.shutdown();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n\n                    \r\n                    try {\n                        \r\n                        threadPool.awaitTermination(2, TimeUnit.SECONDS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    subscriber.onComplete();\n                }\n            });\n            System.out.println(\"starting TestMultiThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestMultiThreadedObservable thread\");\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposable.empty());\n            System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n            final NullPointerException npe = new NullPointerException();\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestMultiThreadedObservable thread\");\n                        for (final String s : values) {\n                            threadPool.execute(new Runnable() {\n\n                                @Override\n                                public void run() {\n                                    threadsRunning.incrementAndGet();\n                                    try {\n                                        \r\n                                        if (s == null) {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                                            \r\n                                            throw npe;\n                                        } else {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                                        }\n                                        observer.onNext(s);\n                                        \r\n                                        int concurrentThreads = threadsRunning.get();\n                                        int maxThreads = maxConcurrentThreads.get();\n                                        if (concurrentThreads > maxThreads) {\n                                            maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);\n                                        }\n                                    } catch (Throwable e) {\n                                        observer.onError(e);\n                                    } finally {\n                                        threadsRunning.decrementAndGet();\n                                    }\n                                }\n                            });\n                        }\n                        \r\n                        threadPool.shutdown();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n\n                    \r\n                    try {\n                        \r\n                        threadPool.awaitTermination(2, TimeUnit.SECONDS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    observer.onComplete();\n                }\n            });\n            System.out.println(\"starting TestMultiThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestMultiThreadedObservable thread\");\n        }\n","date":"2019-12-20 02:39:40","endLine":333,"groupId":"123811","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(finalObserver<?superString>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2a/2b7dff0dd36a0eb4ec5781c0de999cb25fa77b.src","preCode":"        public void subscribe(final Observer<? super String> observer) {\n            observer.onSubscribe(Disposables.empty());\n            System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n            final NullPointerException npe = new NullPointerException();\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestMultiThreadedObservable thread\");\n                        for (final String s : values) {\n                            threadPool.execute(new Runnable() {\n\n                                @Override\n                                public void run() {\n                                    threadsRunning.incrementAndGet();\n                                    try {\n                                        \r\n                                        if (s == null) {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                                            \r\n                                            throw npe;\n                                        } else {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                                        }\n                                        observer.onNext(s);\n                                        \r\n                                        int concurrentThreads = threadsRunning.get();\n                                        int maxThreads = maxConcurrentThreads.get();\n                                        if (concurrentThreads > maxThreads) {\n                                            maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);\n                                        }\n                                    } catch (Throwable e) {\n                                        observer.onError(e);\n                                    } finally {\n                                        threadsRunning.decrementAndGet();\n                                    }\n                                }\n                            });\n                        }\n                        \r\n                        threadPool.shutdown();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n\n                    \r\n                    try {\n                        \r\n                        threadPool.awaitTermination(2, TimeUnit.SECONDS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    observer.onComplete();\n                }\n            });\n            System.out.println(\"starting TestMultiThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestMultiThreadedObservable thread\");\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        public void subscribe(final Subscriber<? super String> subscriber) {\n            subscriber.onSubscribe(new BooleanSubscription());\n            System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n            final NullPointerException npe = new NullPointerException();\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestMultiThreadedObservable thread\");\n                        for (final String s : values) {\n                            threadPool.execute(new Runnable() {\n\n                                @Override\n                                public void run() {\n                                    threadsRunning.incrementAndGet();\n                                    try {\n                                        \r\n                                        if (s == null) {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                                            \r\n                                            throw npe;\n                                        } else {\n                                            try {\n                                                Thread.sleep(10);\n                                            } catch (InterruptedException ex) {\n                                                \r\n                                            }\n                                            System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                                        }\n                                        subscriber.onNext(s);\n                                        \r\n                                        int concurrentThreads = threadsRunning.get();\n                                        int maxThreads = maxConcurrentThreads.get();\n                                        if (concurrentThreads > maxThreads) {\n                                            maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);\n                                        }\n                                    } catch (Throwable e) {\n                                        subscriber.onError(e);\n                                    } finally {\n                                        threadsRunning.decrementAndGet();\n                                    }\n                                }\n                            });\n                        }\n                        \r\n                        threadPool.shutdown();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n\n                    \r\n                    try {\n                        \r\n                        threadPool.awaitTermination(2, TimeUnit.SECONDS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    subscriber.onComplete();\n                }\n            });\n            System.out.println(\"starting TestMultiThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestMultiThreadedObservable thread\");\n        }\n","date":"2019-08-16 20:51:17","endLine":338,"groupId":"123811","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(finalSubscriber<?superString>subscriber)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cd/848e683d8d42c14e9989948828d5813cff5777.src","preCode":"        public void subscribe(final Subscriber<? super String> subscriber) {\n            subscriber.onSubscribe(new BooleanSubscription());\n            System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n            final NullPointerException npe = new NullPointerException();\n            t = new Thread(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        System.out.println(\"running TestMultiThreadedObservable thread\");\n                        for (final String s : values) {\n                            threadPool.execute(new Runnable() {\n\n                                @Override\n                                public void run() {\n                                    threadsRunning.incrementAndGet();\n                                    try {\n                                        \r\n                                        if (s == null) {\n                                            System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                                            \r\n                                            throw npe;\n                                        } else {\n                                            try {\n                                                Thread.sleep(10);\n                                            } catch (InterruptedException ex) {\n                                                \r\n                                            }\n                                            System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                                        }\n                                        subscriber.onNext(s);\n                                        \r\n                                        int concurrentThreads = threadsRunning.get();\n                                        int maxThreads = maxConcurrentThreads.get();\n                                        if (concurrentThreads > maxThreads) {\n                                            maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);\n                                        }\n                                    } catch (Throwable e) {\n                                        subscriber.onError(e);\n                                    } finally {\n                                        threadsRunning.decrementAndGet();\n                                    }\n                                }\n                            });\n                        }\n                        \r\n                        threadPool.shutdown();\n                    } catch (Throwable e) {\n                        throw new RuntimeException(e);\n                    }\n\n                    \r\n                    try {\n                        \r\n                        threadPool.awaitTermination(2, TimeUnit.SECONDS);\n                    } catch (InterruptedException e) {\n                        throw new RuntimeException(e);\n                    }\n                    subscriber.onComplete();\n                }\n            });\n            System.out.println(\"starting TestMultiThreadedObservable thread\");\n            t.start();\n            System.out.println(\"done starting TestMultiThreadedObservable thread\");\n        }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
