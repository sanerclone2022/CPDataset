[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void delayWithObservableReorder() {\n        int n = 3;\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        final List<PublishSubject<Integer>> subjects = new ArrayList<PublishSubject<Integer>>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishSubject.<Integer> create());\n        }\n\n        Observable<Integer> result = source.delay(new Function<Integer, Observable<Integer>>() {\n\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Observer<Object> o = TestHelper.mockObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(o, never()).onNext(anyInt());\n        inOrder.verify(o, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(o).onNext(i);\n        }\n\n        inOrder.verify(o).onComplete();\n\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":621,"groupId":"11562","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"delayWithObservableReorder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/93594bb8862bb8577060372407594fa68e56c6.src","preCode":"    public void delayWithObservableReorder() {\n        int n = 3;\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        final List<PublishSubject<Integer>> subjects = new ArrayList<PublishSubject<Integer>>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishSubject.<Integer> create());\n        }\n\n        Observable<Integer> result = source.delay(new Function<Integer, Observable<Integer>>() {\n\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Observer<Object> o = TestHelper.mockObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(o, never()).onNext(anyInt());\n        inOrder.verify(o, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(o).onNext(i);\n        }\n\n        inOrder.verify(o).onComplete();\n\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void delayWithFlowableReorder() {\n        int n = 3;\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        final List<PublishProcessor<Integer>> subjects = new ArrayList<PublishProcessor<Integer>>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishProcessor.<Integer> create());\n        }\n\n        Flowable<Integer> result = source.delay(new Function<Integer, Flowable<Integer>>() {\n\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n        InOrder inOrder = inOrder(subscriber);\n\n        result.subscribe(subscriber);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(subscriber).onNext(i);\n        }\n\n        inOrder.verify(subscriber).onComplete();\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":614,"groupId":"10260","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"delayWithFlowableReorder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/167f4fcd4138eced4e41de2d1bc081f38b555d.src","preCode":"    public void delayWithFlowableReorder() {\n        int n = 3;\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        final List<PublishProcessor<Integer>> subjects = new ArrayList<PublishProcessor<Integer>>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishProcessor.<Integer> create());\n        }\n\n        Flowable<Integer> result = source.delay(new Function<Integer, Flowable<Integer>>() {\n\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n        InOrder inOrder = inOrder(subscriber);\n\n        result.subscribe(subscriber);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(subscriber).onNext(i);\n        }\n\n        inOrder.verify(subscriber).onComplete();\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void delayWithObservableReorder() {\n        int n = 3;\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        final List<PublishSubject<Integer>> subjects = new ArrayList<PublishSubject<Integer>>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishSubject.<Integer> create());\n        }\n\n        Observable<Integer> result = source.delay(new Function<Integer, Observable<Integer>>() {\n\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Observer<Object> o = TestHelper.mockObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(o, never()).onNext(anyInt());\n        inOrder.verify(o, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(o).onNext(i);\n        }\n\n        inOrder.verify(o).onComplete();\n\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":621,"groupId":"11562","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"delayWithObservableReorder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cc/93594bb8862bb8577060372407594fa68e56c6.src","preCode":"    public void delayWithObservableReorder() {\n        int n = 3;\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        final List<PublishSubject<Integer>> subjects = new ArrayList<PublishSubject<Integer>>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishSubject.<Integer> create());\n        }\n\n        Observable<Integer> result = source.delay(new Function<Integer, Observable<Integer>>() {\n\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Observer<Object> o = TestHelper.mockObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(o, never()).onNext(anyInt());\n        inOrder.verify(o, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(o).onNext(i);\n        }\n\n        inOrder.verify(o).onComplete();\n\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void delayWithFlowableReorder() {\n        int n = 3;\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        final List<PublishProcessor<Integer>> subjects = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishProcessor.<Integer> create());\n        }\n\n        Flowable<Integer> result = source.delay(new Function<Integer, Flowable<Integer>>() {\n\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n        InOrder inOrder = inOrder(subscriber);\n\n        result.subscribe(subscriber);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(subscriber).onNext(i);\n        }\n\n        inOrder.verify(subscriber).onComplete();\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","date":"2019-12-22 18:39:23","endLine":614,"groupId":"10260","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"delayWithFlowableReorder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/79/740ee44c9cb3ebbabcb5916819126f273ea375.src","preCode":"    public void delayWithFlowableReorder() {\n        int n = 3;\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        final List<PublishProcessor<Integer>> subjects = new ArrayList<PublishProcessor<Integer>>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishProcessor.<Integer> create());\n        }\n\n        Flowable<Integer> result = source.delay(new Function<Integer, Flowable<Integer>>() {\n\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n        InOrder inOrder = inOrder(subscriber);\n\n        result.subscribe(subscriber);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(subscriber).onNext(i);\n        }\n\n        inOrder.verify(subscriber).onComplete();\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void delayWithObservableReorder() {\n        int n = 3;\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        final List<PublishSubject<Integer>> subjects = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishSubject.<Integer> create());\n        }\n\n        Observable<Integer> result = source.delay(new Function<Integer, Observable<Integer>>() {\n\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Observer<Object> o = TestHelper.mockObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(o, never()).onNext(anyInt());\n        inOrder.verify(o, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(o).onNext(i);\n        }\n\n        inOrder.verify(o).onComplete();\n\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","date":"2019-12-22 18:59:44","endLine":621,"groupId":"102791","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"delayWithObservableReorder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/b60d4701d65876ffa994bfac462d88f884f8f6.src","preCode":"    public void delayWithObservableReorder() {\n        int n = 3;\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        final List<PublishSubject<Integer>> subjects = new ArrayList<PublishSubject<Integer>>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishSubject.<Integer> create());\n        }\n\n        Observable<Integer> result = source.delay(new Function<Integer, Observable<Integer>>() {\n\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Observer<Object> o = TestHelper.mockObserver();\n        InOrder inOrder = inOrder(o);\n\n        result.subscribe(o);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(o, never()).onNext(anyInt());\n        inOrder.verify(o, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(o).onNext(i);\n        }\n\n        inOrder.verify(o).onComplete();\n\n        verify(o, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void delayWithFlowableReorder() {\n        int n = 3;\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        final List<PublishProcessor<Integer>> subjects = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishProcessor.<Integer> create());\n        }\n\n        Flowable<Integer> result = source.delay(new Function<Integer, Flowable<Integer>>() {\n\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n        InOrder inOrder = inOrder(subscriber);\n\n        result.subscribe(subscriber);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(subscriber).onNext(i);\n        }\n\n        inOrder.verify(subscriber).onComplete();\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","date":"2019-12-22 18:39:23","endLine":614,"groupId":"102791","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"delayWithFlowableReorder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/79/740ee44c9cb3ebbabcb5916819126f273ea375.src","preCode":"    public void delayWithFlowableReorder() {\n        int n = 3;\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        final List<PublishProcessor<Integer>> subjects = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            subjects.add(PublishProcessor.<Integer> create());\n        }\n\n        Flowable<Integer> result = source.delay(new Function<Integer, Flowable<Integer>>() {\n\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return subjects.get(t1);\n            }\n        });\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n        InOrder inOrder = inOrder(subscriber);\n\n        result.subscribe(subscriber);\n\n        for (int i = 0; i < n; i++) {\n            source.onNext(i);\n        }\n        source.onComplete();\n\n        inOrder.verify(subscriber, never()).onNext(anyInt());\n        inOrder.verify(subscriber, never()).onComplete();\n\n        for (int i = n - 1; i >= 0; i--) {\n            subjects.get(i).onComplete();\n            inOrder.verify(subscriber).onNext(i);\n        }\n\n        inOrder.verify(subscriber).onComplete();\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDelayTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
