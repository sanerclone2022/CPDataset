[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":1475,"groupId":"7222","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValueAtPredicateNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/33/d95bea88700928dd4fea5f61ce911ae6c7a0c4.src","preCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/TestSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1463,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":1687,"groupId":"7222","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValueAtPredicateNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/24/a9e84c9b5c431cf94ae9617da86de9d5828e95.src","preCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1675,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","date":"2019-12-22 19:17:37","endLine":1475,"groupId":"7222","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValueAtPredicateNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/61/27d31ff51f95634194b008bf9436919ab48a80.src","preCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/TestSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1463,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","date":"2019-12-22 19:17:37","endLine":1687,"groupId":"7222","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValueAtPredicateNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/30/8c10e0413d5220f182cb7742884885f3b2a774.src","preCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1675,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2020-01-07 16:33:23","codes":[{"authorDate":"2020-01-07 16:33:23","commitOrder":3,"curCode":"    public void assertValueAtPredicateNoMatch() {\n        assertThrows(\"Value not present\", AssertionError.class, () -> {\n            TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n            Flowable.just(1, 2, 3).subscribe(ts);\n\n            ts.assertValueAt(2, new Predicate<Integer>() {\n                @Override public boolean test(final Integer o) throws Exception {\n                    return o != 3;\n                }\n            });\n        });\n    }\n","date":"2020-01-07 16:33:23","endLine":1465,"groupId":"10316","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValueAtPredicateNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6c/e4f4ed248e921b091ba66ee377fcd4d0834d74.src","preCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/TestSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1453,"status":"M"},{"authorDate":"2020-01-07 16:33:23","commitOrder":3,"curCode":"    public void assertValueAtPredicateNoMatch() {\n        assertThrows(\"Value not present\", AssertionError.class, () -> {\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n\n            Flowable.just(1, 2, 3).subscribe(ts);\n\n            ts.assertValueAt(2, new Predicate<Integer>() {\n                @Override public boolean test(final Integer o) throws Exception {\n                    return o != 3;\n                }\n            });\n        });\n    }\n","date":"2020-01-07 16:33:23","endLine":1683,"groupId":"10316","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValueAtPredicateNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/09/18c08e119d87f53f410f1f2f3d42079c45f368.src","preCode":"    public void assertValueAtPredicateNoMatch() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n\n        Flowable.just(1, 2, 3).subscribe(ts);\n\n        thrown.expect(AssertionError.class);\n        thrown.expectMessage(\"Value not present\");\n        ts.assertValueAt(2, new Predicate<Integer>() {\n            @Override public boolean test(final Integer o) throws Exception {\n                return o != 3;\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1671,"status":"M"}],"commitId":"45c0b064dcaea7ac3d55249c04a62370ebf4b4a9","commitMessage":"@@@3.x: Fix Junit 4.13 deprecated API use (#6813)\n\n","date":"2020-01-07 16:33:23","modifiedFileCount":"4","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-07 16:33:23","codes":[{"authorDate":"2020-12-07 05:32:52","commitOrder":4,"curCode":"    public void assertValueAtPredicateNoMatch() {\n        assertThrowsWithMessage(\"Value 3 (class: Integer) at position 2 did not pass the predicate (latch = 0, values = 3, errors = 0, completions = 1)\", AssertionError.class, () -> {\n            TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n            Flowable.just(1, 2, 3).subscribe(ts);\n\n            ts.assertValueAt(2, new Predicate<Integer>() {\n                @Override public boolean test(final Integer o) throws Exception {\n                    return o != 3;\n                }\n            });\n        });\n    }\n","date":"2020-12-07 05:32:52","endLine":1470,"groupId":"108168","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"assertValueAtPredicateNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/e397b4bd5f9f5e2c1b9a3daf50e8ad513cff3f.src","preCode":"    public void assertValueAtPredicateNoMatch() {\n        assertThrows(\"Value not present\", AssertionError.class, () -> {\n            TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n            Flowable.just(1, 2, 3).subscribe(ts);\n\n            ts.assertValueAt(2, new Predicate<Integer>() {\n                @Override public boolean test(final Integer o) throws Exception {\n                    return o != 3;\n                }\n            });\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/TestSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1458,"status":"M"},{"authorDate":"2020-01-07 16:33:23","commitOrder":4,"curCode":"    public void assertValueAtPredicateNoMatch() {\n        assertThrows(\"Value not present\", AssertionError.class, () -> {\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n\n            Flowable.just(1, 2, 3).subscribe(ts);\n\n            ts.assertValueAt(2, new Predicate<Integer>() {\n                @Override public boolean test(final Integer o) throws Exception {\n                    return o != 3;\n                }\n            });\n        });\n    }\n","date":"2020-01-07 16:33:23","endLine":1683,"groupId":"108168","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"assertValueAtPredicateNoMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/09/18c08e119d87f53f410f1f2f3d42079c45f368.src","preCode":"    public void assertValueAtPredicateNoMatch() {\n        assertThrows(\"Value not present\", AssertionError.class, () -> {\n            TestSubscriberEx<Integer> ts = new TestSubscriberEx<>();\n\n            Flowable.just(1, 2, 3).subscribe(ts);\n\n            ts.assertValueAt(2, new Predicate<Integer>() {\n                @Override public boolean test(final Integer o) throws Exception {\n                    return o != 3;\n                }\n            });\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/testsupport/TestSubscriberExTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1671,"status":"N"}],"commitId":"7e7b223ccf4af4ef594677f04e731998914190b9","commitMessage":"@@@3.x: Improve error messages in the test consumers (#7126)\n\n* 3.x: Improve error reporting in the test consumers\n\n* Verify assertValueAt with negative index","date":"2020-12-07 05:32:52","modifiedFileCount":"3","status":"M","submitter":"David Karnok"}]
