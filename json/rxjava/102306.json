[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void retryIndefinitely() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 20;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        origin.retry().subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(numRetries + 1)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":132,"groupId":"1830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"retryIndefinitely","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/377c742c77d0f71be68a43c5e61734117ad6c6.src","preCode":"    public void retryIndefinitely() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 20;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        origin.retry().subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(numRetries + 1)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void retrySuccess() {\n        int numFailures = 1;\n        Observer<String> observer = TestHelper.mockObserver();\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numFailures));\n        origin.retry(3).subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numFailures)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":325,"groupId":"12974","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"retrySuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/377c742c77d0f71be68a43c5e61734117ad6c6.src","preCode":"    public void retrySuccess() {\n        int numFailures = 1;\n        Observer<String> observer = TestHelper.mockObserver();\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numFailures));\n        origin.retry(3).subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numFailures)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void retryIndefinitely() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 20;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        origin.retry().subscribe(new TestObserver<>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(numRetries + 1)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:59:44","endLine":132,"groupId":"102306","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"retryIndefinitely","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/1ee0a7901d9076402271666fcf35b8e91064d5.src","preCode":"    public void retryIndefinitely() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 20;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        origin.retry().subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(numRetries + 1)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void retrySuccess() {\n        int numFailures = 1;\n        Observer<String> observer = TestHelper.mockObserver();\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numFailures));\n        origin.retry(3).subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numFailures)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":325,"groupId":"102306","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"retrySuccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/377c742c77d0f71be68a43c5e61734117ad6c6.src","preCode":"    public void retrySuccess() {\n        int numFailures = 1;\n        Observer<String> observer = TestHelper.mockObserver();\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numFailures));\n        origin.retry(3).subscribe(observer);\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numFailures)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
