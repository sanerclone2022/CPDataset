[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n\n        observer.onSubscribe(set);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        final AtomicThrowable error = new AtomicThrowable();\n        set.add(new TryTerminateAndReportDisposable(error));\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error.addThrowable(e);\n                break;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error.addThrowable(e);\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(new MergeInnerCompletableObserver(observer, set, error, wip));\n        }\n\n        if (wip.decrementAndGet() == 0) {\n            error.tryTerminateConsumer(observer);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":99,"groupId":"9196","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(finalCompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/63/786f6f0e174bb643c3819be8bda7f9592a37fb.src","preCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n\n        observer.onSubscribe(set);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        final AtomicThrowable error = new AtomicThrowable();\n        set.add(new TryTerminateAndReportDisposable(error));\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error.addThrowable(e);\n                break;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error.addThrowable(e);\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(new MergeInnerCompletableObserver(observer, set, error, wip));\n        }\n\n        if (wip.decrementAndGet() == 0) {\n            error.tryTerminateConsumer(observer);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableMergeDelayErrorIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        MergeCompletableObserver shared = new MergeCompletableObserver(observer, set, wip);\n\n        observer.onSubscribe(shared);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(shared);\n        }\n\n        shared.onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":95,"groupId":"4913","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(finalCompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/86/c08d359c53916fae1a6b5a76d0443a66879d81.src","preCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        MergeCompletableObserver shared = new MergeCompletableObserver(observer, set, wip);\n\n        observer.onSubscribe(shared);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(shared);\n        }\n\n        shared.onComplete();\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableMergeIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-28 22:07:44","commitOrder":2,"curCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n\n        observer.onSubscribe(set);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        final AtomicThrowable errors = new AtomicThrowable();\n        set.add(new TryTerminateAndReportDisposable(errors));\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                errors.tryAddThrowableOrReport(e);\n                break;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                errors.tryAddThrowableOrReport(e);\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(new MergeInnerCompletableObserver(observer, set, errors, wip));\n        }\n\n        if (wip.decrementAndGet() == 0) {\n            errors.tryTerminateConsumer(observer);\n        }\n    }\n","date":"2019-08-28 22:07:44","endLine":99,"groupId":"5755","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(finalCompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6d/420cf04424d8691f342c1ce10fd2c52858285b.src","preCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n\n        observer.onSubscribe(set);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        final AtomicThrowable error = new AtomicThrowable();\n        set.add(new TryTerminateAndReportDisposable(error));\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error.addThrowable(e);\n                break;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                error.addThrowable(e);\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(new MergeInnerCompletableObserver(observer, set, error, wip));\n        }\n\n        if (wip.decrementAndGet() == 0) {\n            error.tryTerminateConsumer(observer);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableMergeDelayErrorIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        MergeCompletableObserver shared = new MergeCompletableObserver(observer, set, wip);\n\n        observer.onSubscribe(shared);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(shared);\n        }\n\n        shared.onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":95,"groupId":"4913","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(finalCompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/86/c08d359c53916fae1a6b5a76d0443a66879d81.src","preCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        MergeCompletableObserver shared = new MergeCompletableObserver(observer, set, wip);\n\n        observer.onSubscribe(shared);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(shared);\n        }\n\n        shared.onComplete();\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableMergeIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"N"}],"commitId":"a07c45eeeb68b1cfc24f913c75edbc2820aadb76","commitMessage":"@@@3.x: Cleanup addThrowable.  \"2.x\" and null-value error messages (#6639)\n\n","date":"2019-08-28 22:07:44","modifiedFileCount":"106","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":3,"curCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n\n        observer.onSubscribe(set);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = Objects.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        final AtomicThrowable errors = new AtomicThrowable();\n        set.add(new TryTerminateAndReportDisposable(errors));\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                errors.tryAddThrowableOrReport(e);\n                break;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = Objects.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                errors.tryAddThrowableOrReport(e);\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(new MergeInnerCompletableObserver(observer, set, errors, wip));\n        }\n\n        if (wip.decrementAndGet() == 0) {\n            errors.tryTerminateConsumer(observer);\n        }\n    }\n","date":"2019-12-18 03:06:44","endLine":99,"groupId":"101867","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(finalCompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/55/efbd8915a4a273babfa81b3f6edc629c744b98.src","preCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n\n        observer.onSubscribe(set);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        final AtomicThrowable errors = new AtomicThrowable();\n        set.add(new TryTerminateAndReportDisposable(errors));\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                errors.tryAddThrowableOrReport(e);\n                break;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                errors.tryAddThrowableOrReport(e);\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(new MergeInnerCompletableObserver(observer, set, errors, wip));\n        }\n\n        if (wip.decrementAndGet() == 0) {\n            errors.tryTerminateConsumer(observer);\n        }\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableMergeDelayErrorIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":3,"curCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        MergeCompletableObserver shared = new MergeCompletableObserver(observer, set, wip);\n\n        observer.onSubscribe(shared);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = Objects.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = Objects.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(shared);\n        }\n\n        shared.onComplete();\n    }\n","date":"2019-12-18 03:06:44","endLine":95,"groupId":"101867","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(finalCompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b0/e5b87bf79cc92f0a692c8ac6bb741722309fc8.src","preCode":"    public void subscribeActual(final CompletableObserver observer) {\n        final CompositeDisposable set = new CompositeDisposable();\n        final AtomicInteger wip = new AtomicInteger(1);\n\n        MergeCompletableObserver shared = new MergeCompletableObserver(observer, set, wip);\n\n        observer.onSubscribe(shared);\n\n        Iterator<? extends CompletableSource> iterator;\n\n        try {\n            iterator = ObjectHelper.requireNonNull(sources.iterator(), \"The source iterator returned is null\");\n        } catch (Throwable e) {\n            Exceptions.throwIfFatal(e);\n            observer.onError(e);\n            return;\n        }\n\n        for (;;) {\n            if (set.isDisposed()) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = iterator.hasNext();\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (!b) {\n                break;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            CompletableSource c;\n\n            try {\n                c = ObjectHelper.requireNonNull(iterator.next(), \"The iterator returned a null CompletableSource\");\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                set.dispose();\n                shared.onError(e);\n                return;\n            }\n\n            if (set.isDisposed()) {\n                return;\n            }\n\n            wip.getAndIncrement();\n\n            c.subscribe(shared);\n        }\n\n        shared.onComplete();\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableMergeIterable.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"}]
