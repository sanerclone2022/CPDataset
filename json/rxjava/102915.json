[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Observable<Integer> source = Observable.just(0);\n\n        final AtomicReference<GroupedObservable<Integer, Integer>> inner = new AtomicReference<GroupedObservable<Integer, Integer>>();\n\n        Observable<GroupedObservable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Observer<Integer> o2 = TestHelper.mockObserver();\n\n        inner.get().subscribe(o2);\n\n        verify(o2, never()).onComplete();\n        verify(o2, never()).onNext(anyInt());\n        verify(o2).onError(any(IllegalStateException.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":1231,"groupId":"4251","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"exceptionIfSubscribeToChildMoreThanOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Observable<Integer> source = Observable.just(0);\n\n        final AtomicReference<GroupedObservable<Integer, Integer>> inner = new AtomicReference<GroupedObservable<Integer, Integer>>();\n\n        Observable<GroupedObservable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Observer<Integer> o2 = TestHelper.mockObserver();\n\n        inner.get().subscribe(o2);\n\n        verify(o2, never()).onComplete();\n        verify(o2, never()).onNext(anyInt());\n        verify(o2).onError(any(IllegalStateException.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1208,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Flowable<Integer> source = Flowable.just(0);\n\n        final AtomicReference<GroupedFlowable<Integer, Integer>> inner = new AtomicReference<GroupedFlowable<Integer, Integer>>();\n\n        Flowable<GroupedFlowable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Subscriber<Integer> subscriber2 = TestHelper.mockSubscriber();\n\n        inner.get().subscribe(subscriber2);\n\n        verify(subscriber2, never()).onComplete();\n        verify(subscriber2, never()).onNext(anyInt());\n        verify(subscriber2).onError(any(IllegalStateException.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":1238,"groupId":"12906","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"exceptionIfSubscribeToChildMoreThanOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Flowable<Integer> source = Flowable.just(0);\n\n        final AtomicReference<GroupedFlowable<Integer, Integer>> inner = new AtomicReference<GroupedFlowable<Integer, Integer>>();\n\n        Flowable<GroupedFlowable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Subscriber<Integer> subscriber2 = TestHelper.mockSubscriber();\n\n        inner.get().subscribe(subscriber2);\n\n        verify(subscriber2, never()).onComplete();\n        verify(subscriber2, never()).onNext(anyInt());\n        verify(subscriber2).onError(any(IllegalStateException.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1215,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Observable<Integer> source = Observable.just(0);\n\n        final AtomicReference<GroupedObservable<Integer, Integer>> inner = new AtomicReference<GroupedObservable<Integer, Integer>>();\n\n        Observable<GroupedObservable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Observer<Integer> o2 = TestHelper.mockObserver();\n\n        inner.get().subscribe(o2);\n\n        verify(o2, never()).onComplete();\n        verify(o2, never()).onNext(anyInt());\n        verify(o2).onError(any(IllegalStateException.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":1231,"groupId":"4251","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"exceptionIfSubscribeToChildMoreThanOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Observable<Integer> source = Observable.just(0);\n\n        final AtomicReference<GroupedObservable<Integer, Integer>> inner = new AtomicReference<GroupedObservable<Integer, Integer>>();\n\n        Observable<GroupedObservable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Observer<Integer> o2 = TestHelper.mockObserver();\n\n        inner.get().subscribe(o2);\n\n        verify(o2, never()).onComplete();\n        verify(o2, never()).onNext(anyInt());\n        verify(o2).onError(any(IllegalStateException.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1208,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Flowable<Integer> source = Flowable.just(0);\n\n        final AtomicReference<GroupedFlowable<Integer, Integer>> inner = new AtomicReference<>();\n\n        Flowable<GroupedFlowable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Subscriber<Integer> subscriber2 = TestHelper.mockSubscriber();\n\n        inner.get().subscribe(subscriber2);\n\n        verify(subscriber2, never()).onComplete();\n        verify(subscriber2, never()).onNext(anyInt());\n        verify(subscriber2).onError(any(IllegalStateException.class));\n    }\n","date":"2019-12-22 18:39:23","endLine":1241,"groupId":"12906","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"exceptionIfSubscribeToChildMoreThanOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Flowable<Integer> source = Flowable.just(0);\n\n        final AtomicReference<GroupedFlowable<Integer, Integer>> inner = new AtomicReference<GroupedFlowable<Integer, Integer>>();\n\n        Flowable<GroupedFlowable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Subscriber<Integer> subscriber2 = TestHelper.mockSubscriber();\n\n        inner.get().subscribe(subscriber2);\n\n        verify(subscriber2, never()).onComplete();\n        verify(subscriber2, never()).onNext(anyInt());\n        verify(subscriber2).onError(any(IllegalStateException.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1218,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Observable<Integer> source = Observable.just(0);\n\n        final AtomicReference<GroupedObservable<Integer, Integer>> inner = new AtomicReference<>();\n\n        Observable<GroupedObservable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Observer<Integer> o2 = TestHelper.mockObserver();\n\n        inner.get().subscribe(o2);\n\n        verify(o2, never()).onComplete();\n        verify(o2, never()).onNext(anyInt());\n        verify(o2).onError(any(IllegalStateException.class));\n    }\n","date":"2019-12-22 18:59:44","endLine":1233,"groupId":"102915","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"exceptionIfSubscribeToChildMoreThanOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/d3f2d6432c67ffdd0df5bbb6960b138ae6f15a.src","preCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Observable<Integer> source = Observable.just(0);\n\n        final AtomicReference<GroupedObservable<Integer, Integer>> inner = new AtomicReference<GroupedObservable<Integer, Integer>>();\n\n        Observable<GroupedObservable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Observer<Integer> o2 = TestHelper.mockObserver();\n\n        inner.get().subscribe(o2);\n\n        verify(o2, never()).onComplete();\n        verify(o2, never()).onNext(anyInt());\n        verify(o2).onError(any(IllegalStateException.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1210,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Flowable<Integer> source = Flowable.just(0);\n\n        final AtomicReference<GroupedFlowable<Integer, Integer>> inner = new AtomicReference<>();\n\n        Flowable<GroupedFlowable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Subscriber<Integer> subscriber2 = TestHelper.mockSubscriber();\n\n        inner.get().subscribe(subscriber2);\n\n        verify(subscriber2, never()).onComplete();\n        verify(subscriber2, never()).onNext(anyInt());\n        verify(subscriber2).onError(any(IllegalStateException.class));\n    }\n","date":"2019-12-22 18:39:23","endLine":1241,"groupId":"102915","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"exceptionIfSubscribeToChildMoreThanOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void exceptionIfSubscribeToChildMoreThanOnce() {\n        Flowable<Integer> source = Flowable.just(0);\n\n        final AtomicReference<GroupedFlowable<Integer, Integer>> inner = new AtomicReference<>();\n\n        Flowable<GroupedFlowable<Integer, Integer>> m = source.groupBy(identity, dbl);\n\n        m.subscribe(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> t1) {\n                inner.set(t1);\n            }\n        });\n\n        inner.get().subscribe();\n\n        Subscriber<Integer> subscriber2 = TestHelper.mockSubscriber();\n\n        inner.get().subscribe(subscriber2);\n\n        verify(subscriber2, never()).onComplete();\n        verify(subscriber2, never()).onNext(anyInt());\n        verify(subscriber2).onError(any(IllegalStateException.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1218,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
