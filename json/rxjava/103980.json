[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up\n        .distinctUntilChanged(new BiPredicate<Integer, Integer>() {\n            @Override\n            public boolean test(Integer a, Integer b) throws Exception {\n                return a.equals(b);\n            }\n        })\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 2, 3, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5)\n        ;\n    }\n","date":"2019-08-16 20:51:17","endLine":189,"groupId":"11557","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fusedAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f2/8a9fb18b4f5cfb5de5008a6bb01dfead6a229a.src","preCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up\n        .distinctUntilChanged(new BiPredicate<Integer, Integer>() {\n            @Override\n            public boolean test(Integer a, Integer b) throws Exception {\n                return a.equals(b);\n            }\n        })\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 2, 3, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5)\n        ;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChangedTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> us = UnicastSubject.create();\n\n        us\n        .distinct()\n        .subscribe(to);\n\n        TestHelper.emit(us, 1, 1, 2, 1, 3, 2, 4, 5, 4);\n\n        to.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n    }\n","date":"2019-08-16 20:51:17","endLine":141,"groupId":"2076","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/842b1f9bec73d7b5fd875927269320dd5d7503.src","preCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> us = UnicastSubject.create();\n\n        us\n        .distinct()\n        .subscribe(to);\n\n        TestHelper.emit(us, 1, 1, 2, 1, 3, 2, 4, 5, 4);\n\n        to.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDistinctTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:59:44","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up\n        .distinctUntilChanged(new BiPredicate<Integer, Integer>() {\n            @Override\n            public boolean test(Integer a, Integer b) throws Exception {\n                return a.equals(b);\n            }\n        })\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 2, 3, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5)\n        ;\n    }\n","date":"2019-12-22 18:59:44","endLine":189,"groupId":"11557","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fusedAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/1d67e8191cf84404f7c3f243266a6733a9a7aa.src","preCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up\n        .distinctUntilChanged(new BiPredicate<Integer, Integer>() {\n            @Override\n            public boolean test(Integer a, Integer b) throws Exception {\n                return a.equals(b);\n            }\n        })\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 2, 3, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5)\n        ;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChangedTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> us = UnicastSubject.create();\n\n        us\n        .distinct()\n        .subscribe(to);\n\n        TestHelper.emit(us, 1, 1, 2, 1, 3, 2, 4, 5, 4);\n\n        to.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n    }\n","date":"2019-12-22 18:59:44","endLine":142,"groupId":"2076","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/2614f2843b00bf3d50e8b4e4c9273b5dec38ca.src","preCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> us = UnicastSubject.create();\n\n        us\n        .distinct()\n        .subscribe(to);\n\n        TestHelper.emit(us, 1, 1, 2, 1, 3, 2, 4, 5, 4);\n\n        to.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDistinctTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:59:44","codes":[{"authorDate":"2019-12-26 20:33:30","commitOrder":3,"curCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> us = UnicastSubject.create();\n\n        us\n        .distinctUntilChanged(new BiPredicate<Integer, Integer>() {\n            @Override\n            public boolean test(Integer a, Integer b) throws Exception {\n                return a.equals(b);\n            }\n        })\n        .subscribe(to);\n\n        TestHelper.emit(us, 1, 2, 2, 3, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5)\n        ;\n    }\n","date":"2019-12-26 20:33:30","endLine":189,"groupId":"103980","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fusedAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/19/0506aed2dcb7a249055d3bc6d84aff736ac524.src","preCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up\n        .distinctUntilChanged(new BiPredicate<Integer, Integer>() {\n            @Override\n            public boolean test(Integer a, Integer b) throws Exception {\n                return a.equals(b);\n            }\n        })\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 2, 3, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5)\n        ;\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDistinctUntilChangedTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> us = UnicastSubject.create();\n\n        us\n        .distinct()\n        .subscribe(to);\n\n        TestHelper.emit(us, 1, 1, 2, 1, 3, 2, 4, 5, 4);\n\n        to.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n    }\n","date":"2019-12-22 18:59:44","endLine":142,"groupId":"103980","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1f/2614f2843b00bf3d50e8b4e4c9273b5dec38ca.src","preCode":"    public void fusedAsync() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        UnicastSubject<Integer> us = UnicastSubject.create();\n\n        us\n        .distinct()\n        .subscribe(to);\n\n        TestHelper.emit(us, 1, 1, 2, 1, 3, 2, 4, 5, 4);\n\n        to.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDistinctTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"}],"commitId":"af17c6e268d0e2fe4675feb46c19a29227cb135b","commitMessage":"@@@3.x: [Java 8] Add Observable operators + cleanup (#6797)\n\n","date":"2019-12-26 20:33:30","modifiedFileCount":"19","status":"M","submitter":"David Karnok"}]
