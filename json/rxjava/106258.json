[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void seedFactory() {\n        Observable<List<Integer>> o = Observable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<Integer>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                }).toObservable().takeLast(1);\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n    }\n","date":"2019-08-16 20:51:17","endLine":198,"groupId":"11274","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"seedFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5a/7d312edea5177eea021f656b0e57879e7f176f.src","preCode":"    public void seedFactory() {\n        Observable<List<Integer>> o = Observable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<Integer>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                }).toObservable().takeLast(1);\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void seedFactory() {\n        Single<List<Integer>> o = Flowable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<Integer>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n    }\n","date":"2019-08-16 20:51:17","endLine":280,"groupId":"2196","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"seedFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f9/18d152bebb5106a3827b3c6873a09e276c4afd.src","preCode":"    public void seedFactory() {\n        Single<List<Integer>> o = Flowable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<Integer>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void seedFactory() {\n        Observable<List<Integer>> o = Observable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<Integer>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                }).toObservable().takeLast(1);\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n    }\n","date":"2019-08-16 20:51:17","endLine":198,"groupId":"11274","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"seedFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5a/7d312edea5177eea021f656b0e57879e7f176f.src","preCode":"    public void seedFactory() {\n        Observable<List<Integer>> o = Observable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<Integer>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                }).toObservable().takeLast(1);\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void seedFactory() {\n        Single<List<Integer>> o = Flowable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n    }\n","date":"2019-12-22 18:39:23","endLine":280,"groupId":"2196","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"seedFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/29/88da75700be7df11aa8ed3e367e1db3d838865.src","preCode":"    public void seedFactory() {\n        Single<List<Integer>> o = Flowable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<Integer>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void seedFactory() {\n        Observable<List<Integer>> o = Observable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                }).toObservable().takeLast(1);\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n    }\n","date":"2019-12-22 18:59:44","endLine":198,"groupId":"106258","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"seedFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c4/82d121be7b474658d219e6f3f65b6669c3d6ab.src","preCode":"    public void seedFactory() {\n        Observable<List<Integer>> o = Observable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<Integer>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                }).toObservable().takeLast(1);\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingSingle());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void seedFactory() {\n        Single<List<Integer>> o = Flowable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n    }\n","date":"2019-12-22 18:39:23","endLine":280,"groupId":"106258","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"seedFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/29/88da75700be7df11aa8ed3e367e1db3d838865.src","preCode":"    public void seedFactory() {\n        Single<List<Integer>> o = Flowable.range(1, 10)\n                .collect(new Supplier<List<Integer>>() {\n\n                    @Override\n                    public List<Integer> get() {\n                        return new ArrayList<>();\n                    }\n\n                }, new BiConsumer<List<Integer>, Integer>() {\n\n                    @Override\n                    public void accept(List<Integer> list, Integer t2) {\n                        list.add(t2);\n                    }\n\n                });\n\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.blockingGet());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableScanTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
