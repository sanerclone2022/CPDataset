[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badSourceOnSubscribe() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    Disposable d1 = Disposables.empty();\n                    observer.onSubscribe(d1);\n                    Disposable d2 = Disposables.empty();\n                    observer.onSubscribe(d2);\n\n                    assertFalse(d1.isDisposed());\n                    assertTrue(d2.isDisposed());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertError(errors, 0, ProtocolViolationException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":250,"groupId":"3959","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"badSourceOnSubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7c/fd46352aee4be71695bc6ad8c255716491200e.src","preCode":"    public void badSourceOnSubscribe() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    Disposable d1 = Disposables.empty();\n                    observer.onSubscribe(d1);\n                    Disposable d2 = Disposables.empty();\n                    observer.onSubscribe(d2);\n\n                    assertFalse(d1.isDisposed());\n                    assertTrue(d2.isDisposed());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertError(errors, 0, ProtocolViolationException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/LambdaObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badSourceEmitAfterDone() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":301,"groupId":"3960","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"badSourceEmitAfterDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7c/fd46352aee4be71695bc6ad8c255716491200e.src","preCode":"    public void badSourceEmitAfterDone() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/LambdaObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void badSourceOnSubscribe() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    Disposable d1 = Disposable.empty();\n                    observer.onSubscribe(d1);\n                    Disposable d2 = Disposable.empty();\n                    observer.onSubscribe(d2);\n\n                    assertFalse(d1.isDisposed());\n                    assertTrue(d2.isDisposed());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertError(errors, 0, ProtocolViolationException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":250,"groupId":"3959","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"badSourceOnSubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/93/7e11441d62e20635b4dc274a870db078546052.src","preCode":"    public void badSourceOnSubscribe() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    Disposable d1 = Disposables.empty();\n                    observer.onSubscribe(d1);\n                    Disposable d2 = Disposables.empty();\n                    observer.onSubscribe(d2);\n\n                    assertFalse(d1.isDisposed());\n                    assertTrue(d2.isDisposed());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertError(errors, 0, ProtocolViolationException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/LambdaObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void badSourceEmitAfterDone() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposable.empty());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":301,"groupId":"3960","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"badSourceEmitAfterDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/93/7e11441d62e20635b4dc274a870db078546052.src","preCode":"    public void badSourceEmitAfterDone() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/LambdaObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 19:17:23","codes":[{"authorDate":"2019-12-22 19:17:23","commitOrder":3,"curCode":"    public void badSourceOnSubscribe() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    Disposable d1 = Disposable.empty();\n                    observer.onSubscribe(d1);\n                    Disposable d2 = Disposable.empty();\n                    observer.onSubscribe(d2);\n\n                    assertFalse(d1.isDisposed());\n                    assertTrue(d2.isDisposed());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<>();\n\n            LambdaObserver<Object> o = new LambdaObserver<>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n                    new Consumer<Throwable>() {\n                        @Override\n                        public void accept(Throwable e) throws Exception {\n                            received.add(e);\n                        }\n                    }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertError(errors, 0, ProtocolViolationException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 19:17:23","endLine":250,"groupId":"107319","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"badSourceOnSubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/9b6ff2dbba11f1c2ed05e939c97f898bdbfeff.src","preCode":"    public void badSourceOnSubscribe() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    Disposable d1 = Disposable.empty();\n                    observer.onSubscribe(d1);\n                    Disposable d2 = Disposable.empty();\n                    observer.onSubscribe(d2);\n\n                    assertFalse(d1.isDisposed());\n                    assertTrue(d2.isDisposed());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertError(errors, 0, ProtocolViolationException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/LambdaObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-12-22 19:17:23","commitOrder":3,"curCode":"    public void badSourceEmitAfterDone() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposable.empty());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<>();\n\n            LambdaObserver<Object> o = new LambdaObserver<>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n                    new Consumer<Throwable>() {\n                        @Override\n                        public void accept(Throwable e) throws Exception {\n                            received.add(e);\n                        }\n                    }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 19:17:23","endLine":301,"groupId":"107319","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"badSourceEmitAfterDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c1/9b6ff2dbba11f1c2ed05e939c97f898bdbfeff.src","preCode":"    public void badSourceEmitAfterDone() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            Observable<Integer> source = new Observable<Integer>() {\n                @Override\n                public void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposable.empty());\n\n                    observer.onNext(1);\n                    observer.onComplete();\n                    observer.onNext(2);\n                    observer.onError(new TestException());\n                    observer.onComplete();\n                }\n            };\n\n            final List<Object> received = new ArrayList<Object>();\n\n            LambdaObserver<Object> o = new LambdaObserver<Object>(new Consumer<Object>() {\n                @Override\n                public void accept(Object v) throws Exception {\n                    received.add(v);\n                }\n            },\n            new Consumer<Throwable>() {\n                @Override\n                public void accept(Throwable e) throws Exception {\n                    received.add(e);\n                }\n            }, new Action() {\n                @Override\n                public void run() throws Exception {\n                    received.add(100);\n                }\n            }, new Consumer<Disposable>() {\n                @Override\n                public void accept(Disposable d) throws Exception {\n                }\n            });\n\n            source.subscribe(o);\n\n            assertEquals(Arrays.asList(1, 100), received);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/LambdaObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"75da4b504a52466b455a49a342747514fa0dffab","commitMessage":"@@@Diamond operators in tests (#6788)\n\n* diamond operators in unit tests.  small packages in internal/\n\n* diamond operators in unit tests.  small packages in internal/operators\n","date":"2019-12-22 19:17:23","modifiedFileCount":"92","status":"M","submitter":"Dmitry Volkov"}]
