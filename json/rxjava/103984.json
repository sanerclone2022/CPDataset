[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<Object>(o);\n        Observable<Object> futureObservable = Observable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(to);\n\n        Thread.sleep(100);\n\n        to.dispose();\n\n        to.assertNoErrors();\n        to.assertNoValues();\n        to.assertNotComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":161,"groupId":"11645","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cancellationDuringFutureGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/48/1fd8ae65e425d1b0e896e6f6382f725bde1bbe.src","preCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<Object>(o);\n        Observable<Object> futureObservable = Observable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(to);\n\n        Thread.sleep(100);\n\n        to.dispose();\n\n        to.assertNoErrors();\n        to.assertNoValues();\n        to.assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber);\n        Flowable<Object> futureObservable = Flowable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        ts.assertNoErrors();\n        ts.assertNoValues();\n        ts.assertNotComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":162,"groupId":"7491","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cancellationDuringFutureGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/a61aa2236ce2ba6c234545855f9927bd46aec1.src","preCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber);\n        Flowable<Object> futureObservable = Flowable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        ts.assertNoErrors();\n        ts.assertNoValues();\n        ts.assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<Object>(o);\n        Observable<Object> futureObservable = Observable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(to);\n\n        Thread.sleep(100);\n\n        to.dispose();\n\n        to.assertNoErrors();\n        to.assertNoValues();\n        to.assertNotComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":161,"groupId":"11645","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cancellationDuringFutureGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/48/1fd8ae65e425d1b0e896e6f6382f725bde1bbe.src","preCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<Object>(o);\n        Observable<Object> futureObservable = Observable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(to);\n\n        Thread.sleep(100);\n\n        to.dispose();\n\n        to.assertNoErrors();\n        to.assertNoValues();\n        to.assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<>(subscriber);\n        Flowable<Object> futureObservable = Flowable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        ts.assertNoErrors();\n        ts.assertNoValues();\n        ts.assertNotComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":162,"groupId":"7491","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cancellationDuringFutureGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/52/4a7216e11c9cdd4535ae7d5ad0b5e3e0006b64.src","preCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>(subscriber);\n        Flowable<Object> futureObservable = Flowable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        ts.assertNoErrors();\n        ts.assertNoValues();\n        ts.assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<>(o);\n        Observable<Object> futureObservable = Observable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(to);\n\n        Thread.sleep(100);\n\n        to.dispose();\n\n        to.assertNoErrors();\n        to.assertNoValues();\n        to.assertNotComplete();\n    }\n","date":"2019-12-22 18:59:44","endLine":161,"groupId":"103984","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"cancellationDuringFutureGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/4d7f6fd68a3f1ac876287500b4f6378067e312.src","preCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Observer<Object> o = TestHelper.mockObserver();\n\n        TestObserver<Object> to = new TestObserver<Object>(o);\n        Observable<Object> futureObservable = Observable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(to);\n\n        Thread.sleep(100);\n\n        to.dispose();\n\n        to.assertNoErrors();\n        to.assertNoValues();\n        to.assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<>(subscriber);\n        Flowable<Object> futureObservable = Flowable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        ts.assertNoErrors();\n        ts.assertNoValues();\n        ts.assertNotComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":162,"groupId":"103984","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"cancellationDuringFutureGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/52/4a7216e11c9cdd4535ae7d5ad0b5e3e0006b64.src","preCode":"    public void cancellationDuringFutureGet() throws Exception {\n        Future<Object> future = new Future<Object>() {\n            private AtomicBoolean isCancelled = new AtomicBoolean(false);\n            private AtomicBoolean isDone = new AtomicBoolean(false);\n\n            @Override\n            public boolean cancel(boolean mayInterruptIfRunning) {\n                isCancelled.compareAndSet(false, true);\n                return true;\n            }\n\n            @Override\n            public boolean isCancelled() {\n                return isCancelled.get();\n            }\n\n            @Override\n            public boolean isDone() {\n                return isCancelled() || isDone.get();\n            }\n\n            @Override\n            public Object get() throws InterruptedException, ExecutionException {\n                Thread.sleep(500);\n                isDone.compareAndSet(false, true);\n                return \"foo\";\n            }\n\n            @Override\n            public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {\n                return get();\n            }\n        };\n\n        Subscriber<Object> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriber<Object> ts = new TestSubscriber<>(subscriber);\n        Flowable<Object> futureObservable = Flowable.fromFuture(future);\n\n        futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);\n\n        Thread.sleep(100);\n\n        ts.cancel();\n\n        ts.assertNoErrors();\n        ts.assertNoValues();\n        ts.assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToFutureTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
