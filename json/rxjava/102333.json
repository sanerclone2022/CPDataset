[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void schedulingNotificationHandler() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 2;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestObserver<String> to = new TestObserver<String>(observer);\n        origin.retryWhen(new Function<Observable<? extends Throwable>, Observable<Object>>() {\n            @Override\n            public Observable<Object> apply(Observable<? extends Throwable> t1) {\n                return t1\n                .observeOn(Schedulers.computation())\n                .map(new Function<Throwable, Object>() {\n                    @Override\n                    public Object apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":172,"groupId":"2060","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"schedulingNotificationHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/377c742c77d0f71be68a43c5e61734117ad6c6.src","preCode":"    public void schedulingNotificationHandler() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 2;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestObserver<String> to = new TestObserver<String>(observer);\n        origin.retryWhen(new Function<Observable<? extends Throwable>, Observable<Object>>() {\n            @Override\n            public Observable<Object> apply(Observable<? extends Throwable> t1) {\n                return t1\n                .observeOn(Schedulers.computation())\n                .map(new Function<Throwable, Object>() {\n                    @Override\n                    public Object apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void schedulingNotificationHandler() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 2;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestSubscriber<String> ts = new TestSubscriber<String>(subscriber);\n        origin.retryWhen(new Function<Flowable<? extends Throwable>, Flowable<Object>>() {\n            @Override\n            public Flowable<Object> apply(Flowable<? extends Throwable> t1) {\n                return t1.observeOn(Schedulers.computation()).map(new Function<Throwable, Integer>() {\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1).cast(Object.class);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":170,"groupId":"3182","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"schedulingNotificationHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/92/6b37be8498fd805faa5ed1fcc2721995dd4e60.src","preCode":"    public void schedulingNotificationHandler() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 2;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestSubscriber<String> ts = new TestSubscriber<String>(subscriber);\n        origin.retryWhen(new Function<Flowable<? extends Throwable>, Flowable<Object>>() {\n            @Override\n            public Flowable<Object> apply(Flowable<? extends Throwable> t1) {\n                return t1.observeOn(Schedulers.computation()).map(new Function<Throwable, Integer>() {\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1).cast(Object.class);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void schedulingNotificationHandler() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 2;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestObserver<String> to = new TestObserver<String>(observer);\n        origin.retryWhen(new Function<Observable<? extends Throwable>, Observable<Object>>() {\n            @Override\n            public Observable<Object> apply(Observable<? extends Throwable> t1) {\n                return t1\n                .observeOn(Schedulers.computation())\n                .map(new Function<Throwable, Object>() {\n                    @Override\n                    public Object apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":172,"groupId":"2060","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"schedulingNotificationHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/377c742c77d0f71be68a43c5e61734117ad6c6.src","preCode":"    public void schedulingNotificationHandler() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 2;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestObserver<String> to = new TestObserver<String>(observer);\n        origin.retryWhen(new Function<Observable<? extends Throwable>, Observable<Object>>() {\n            @Override\n            public Observable<Object> apply(Observable<? extends Throwable> t1) {\n                return t1\n                .observeOn(Schedulers.computation())\n                .map(new Function<Throwable, Object>() {\n                    @Override\n                    public Object apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void schedulingNotificationHandler() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 2;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestSubscriber<String> ts = new TestSubscriber<>(subscriber);\n        origin.retryWhen(new Function<Flowable<? extends Throwable>, Flowable<Object>>() {\n            @Override\n            public Flowable<Object> apply(Flowable<? extends Throwable> t1) {\n                return t1.observeOn(Schedulers.computation()).map(new Function<Throwable, Integer>() {\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1).cast(Object.class);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":170,"groupId":"3182","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"schedulingNotificationHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4d/e1cfb8b0d7ed46d90f8994f62782b0e5d4945e.src","preCode":"    public void schedulingNotificationHandler() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 2;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestSubscriber<String> ts = new TestSubscriber<String>(subscriber);\n        origin.retryWhen(new Function<Flowable<? extends Throwable>, Flowable<Object>>() {\n            @Override\n            public Flowable<Object> apply(Flowable<? extends Throwable> t1) {\n                return t1.observeOn(Schedulers.computation()).map(new Function<Throwable, Integer>() {\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1).cast(Object.class);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void schedulingNotificationHandler() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 2;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestObserver<String> to = new TestObserver<>(observer);\n        origin.retryWhen(new Function<Observable<? extends Throwable>, Observable<Object>>() {\n            @Override\n            public Observable<Object> apply(Observable<? extends Throwable> t1) {\n                return t1\n                .observeOn(Schedulers.computation())\n                .map(new Function<Throwable, Object>() {\n                    @Override\n                    public Object apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:59:44","endLine":172,"groupId":"102333","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"schedulingNotificationHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/1ee0a7901d9076402271666fcf35b8e91064d5.src","preCode":"    public void schedulingNotificationHandler() {\n        Observer<String> observer = TestHelper.mockObserver();\n        int numRetries = 2;\n        Observable<String> origin = Observable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestObserver<String> to = new TestObserver<String>(observer);\n        origin.retryWhen(new Function<Observable<? extends Throwable>, Observable<Object>>() {\n            @Override\n            public Observable<Object> apply(Observable<? extends Throwable> t1) {\n                return t1\n                .observeOn(Schedulers.computation())\n                .map(new Function<Throwable, Object>() {\n                    @Override\n                    public Object apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(observer, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void schedulingNotificationHandler() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 2;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestSubscriber<String> ts = new TestSubscriber<>(subscriber);\n        origin.retryWhen(new Function<Flowable<? extends Throwable>, Flowable<Object>>() {\n            @Override\n            public Flowable<Object> apply(Flowable<? extends Throwable> t1) {\n                return t1.observeOn(Schedulers.computation()).map(new Function<Throwable, Integer>() {\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1).cast(Object.class);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:39:23","endLine":170,"groupId":"102333","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"schedulingNotificationHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4d/e1cfb8b0d7ed46d90f8994f62782b0e5d4945e.src","preCode":"    public void schedulingNotificationHandler() {\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        int numRetries = 2;\n        Flowable<String> origin = Flowable.unsafeCreate(new FuncWithErrors(numRetries));\n        TestSubscriber<String> ts = new TestSubscriber<>(subscriber);\n        origin.retryWhen(new Function<Flowable<? extends Throwable>, Flowable<Object>>() {\n            @Override\n            public Flowable<Object> apply(Flowable<? extends Throwable> t1) {\n                return t1.observeOn(Schedulers.computation()).map(new Function<Throwable, Integer>() {\n                    @Override\n                    public Integer apply(Throwable t1) {\n                        return 1;\n                    }\n                }).startWithItem(1).cast(Object.class);\n            }\n        })\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                e.printStackTrace();\n            }\n        })\n        .subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        InOrder inOrder = inOrder(subscriber);\n        \r\n        inOrder.verify(subscriber, times(1 + numRetries)).onNext(\"beginningEveryTime\");\n        \r\n        inOrder.verify(subscriber, never()).onError(any(Throwable.class));\n        \r\n        inOrder.verify(subscriber, times(1)).onNext(\"onSuccessOnly\");\n        \r\n        inOrder.verify(subscriber, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
