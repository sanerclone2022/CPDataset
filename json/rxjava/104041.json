[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void just() {\n        TestObserver<Object> to = new TestObserver<Object>();\n        Observable.just(1)\n        .flatMap(\n                new Function<Integer, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Integer item) {\n                        return Observable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Throwable e) {\n                        return Observable.error(e);\n                    }\n                },\n                new Supplier<Observable<Object>>() {\n                    @Override\n                    public Observable<Object> get() {\n                        return Observable.never();\n                    }\n                }\n        ).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertNotComplete();\n        to.assertValue(2);\n    }\n","date":"2019-08-16 20:51:17","endLine":56,"groupId":"3431","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"just","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ee/8931853f7525d15d781ed1a42c52b9bd0f09fb.src","preCode":"    public void just() {\n        TestObserver<Object> to = new TestObserver<Object>();\n        Observable.just(1)\n        .flatMap(\n                new Function<Integer, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Integer item) {\n                        return Observable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Throwable e) {\n                        return Observable.error(e);\n                    }\n                },\n                new Supplier<Observable<Object>>() {\n                    @Override\n                    public Observable<Object> get() {\n                        return Observable.never();\n                    }\n                }\n        ).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertNotComplete();\n        to.assertValue(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMapNotificationTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void just() {\n        TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        Flowable.just(1)\n        .flatMap(\n                new Function<Integer, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Integer item) {\n                        return Flowable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Throwable e) {\n                        return Flowable.error(e);\n                    }\n                },\n                new Supplier<Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> get() {\n                        return Flowable.never();\n                    }\n                }\n        ).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertNotComplete();\n        ts.assertValue(2);\n    }\n","date":"2019-08-16 20:51:17","endLine":58,"groupId":"3431","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"just","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3e/c6b8f7718288a1c91f3aad608fd96763513b45.src","preCode":"    public void just() {\n        TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        Flowable.just(1)\n        .flatMap(\n                new Function<Integer, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Integer item) {\n                        return Flowable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Throwable e) {\n                        return Flowable.error(e);\n                    }\n                },\n                new Supplier<Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> get() {\n                        return Flowable.never();\n                    }\n                }\n        ).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertNotComplete();\n        ts.assertValue(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMapNotificationTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void just() {\n        TestObserver<Object> to = new TestObserver<Object>();\n        Observable.just(1)\n        .flatMap(\n                new Function<Integer, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Integer item) {\n                        return Observable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Throwable e) {\n                        return Observable.error(e);\n                    }\n                },\n                new Supplier<Observable<Object>>() {\n                    @Override\n                    public Observable<Object> get() {\n                        return Observable.never();\n                    }\n                }\n        ).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertNotComplete();\n        to.assertValue(2);\n    }\n","date":"2019-08-16 20:51:17","endLine":56,"groupId":"3431","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"just","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ee/8931853f7525d15d781ed1a42c52b9bd0f09fb.src","preCode":"    public void just() {\n        TestObserver<Object> to = new TestObserver<Object>();\n        Observable.just(1)\n        .flatMap(\n                new Function<Integer, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Integer item) {\n                        return Observable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Throwable e) {\n                        return Observable.error(e);\n                    }\n                },\n                new Supplier<Observable<Object>>() {\n                    @Override\n                    public Observable<Object> get() {\n                        return Observable.never();\n                    }\n                }\n        ).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertNotComplete();\n        to.assertValue(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMapNotificationTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void just() {\n        TestSubscriber<Object> ts = new TestSubscriber<>();\n        Flowable.just(1)\n        .flatMap(\n                new Function<Integer, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Integer item) {\n                        return Flowable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Throwable e) {\n                        return Flowable.error(e);\n                    }\n                },\n                new Supplier<Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> get() {\n                        return Flowable.never();\n                    }\n                }\n        ).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertNotComplete();\n        ts.assertValue(2);\n    }\n","date":"2019-12-22 18:39:23","endLine":58,"groupId":"3431","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"just","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0d/eec9376b729bcc1490e5042feddfd7c288db92.src","preCode":"    public void just() {\n        TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        Flowable.just(1)\n        .flatMap(\n                new Function<Integer, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Integer item) {\n                        return Flowable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Throwable e) {\n                        return Flowable.error(e);\n                    }\n                },\n                new Supplier<Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> get() {\n                        return Flowable.never();\n                    }\n                }\n        ).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertNotComplete();\n        ts.assertValue(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMapNotificationTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void just() {\n        TestObserver<Object> to = new TestObserver<>();\n        Observable.just(1)\n        .flatMap(\n                new Function<Integer, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Integer item) {\n                        return Observable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Throwable e) {\n                        return Observable.error(e);\n                    }\n                },\n                new Supplier<Observable<Object>>() {\n                    @Override\n                    public Observable<Object> get() {\n                        return Observable.never();\n                    }\n                }\n        ).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertNotComplete();\n        to.assertValue(2);\n    }\n","date":"2019-12-22 18:59:44","endLine":56,"groupId":"104041","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"just","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/b470ff99ec5a81530544c12bc172314977c9c3.src","preCode":"    public void just() {\n        TestObserver<Object> to = new TestObserver<Object>();\n        Observable.just(1)\n        .flatMap(\n                new Function<Integer, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Integer item) {\n                        return Observable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Observable<Object>>() {\n                    @Override\n                    public Observable<Object> apply(Throwable e) {\n                        return Observable.error(e);\n                    }\n                },\n                new Supplier<Observable<Object>>() {\n                    @Override\n                    public Observable<Object> get() {\n                        return Observable.never();\n                    }\n                }\n        ).subscribe(to);\n\n        to.assertNoErrors();\n        to.assertNotComplete();\n        to.assertValue(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMapNotificationTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void just() {\n        TestSubscriber<Object> ts = new TestSubscriber<>();\n        Flowable.just(1)\n        .flatMap(\n                new Function<Integer, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Integer item) {\n                        return Flowable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Throwable e) {\n                        return Flowable.error(e);\n                    }\n                },\n                new Supplier<Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> get() {\n                        return Flowable.never();\n                    }\n                }\n        ).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertNotComplete();\n        ts.assertValue(2);\n    }\n","date":"2019-12-22 18:39:23","endLine":58,"groupId":"104041","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"just","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0d/eec9376b729bcc1490e5042feddfd7c288db92.src","preCode":"    public void just() {\n        TestSubscriber<Object> ts = new TestSubscriber<>();\n        Flowable.just(1)\n        .flatMap(\n                new Function<Integer, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Integer item) {\n                        return Flowable.just((Object)(item + 1));\n                    }\n                },\n                new Function<Throwable, Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> apply(Throwable e) {\n                        return Flowable.error(e);\n                    }\n                },\n                new Supplier<Flowable<Object>>() {\n                    @Override\n                    public Flowable<Object> get() {\n                        return Flowable.never();\n                    }\n                }\n        ).subscribe(ts);\n\n        ts.assertNoErrors();\n        ts.assertNotComplete();\n        ts.assertValue(2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMapNotificationTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
