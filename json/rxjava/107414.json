[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void postCompleteCancelled() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ArrayDeque<Integer> queue = new ArrayDeque<Integer>();\n        AtomicLong state = new AtomicLong();\n        BooleanSupplier isCancelled = new BooleanSupplier() {\n            @Override\n            public boolean getAsBoolean() throws Exception {\n                return ts.isCancelled();\n            }\n        };\n\n        ts.onSubscribe(new BooleanSubscription());\n        queue.offer(1);\n        state.getAndIncrement();\n        ts.cancel();\n\n        QueueDrainHelper.postComplete(ts, queue, state, isCancelled);\n\n        ts.assertEmpty();\n    }\n","date":"2019-08-16 20:51:17","endLine":186,"groupId":"11890","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"postCompleteCancelled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/90/60e85c453902873a86538513db6b901907863d.src","preCode":"    public void postCompleteCancelled() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ArrayDeque<Integer> queue = new ArrayDeque<Integer>();\n        AtomicLong state = new AtomicLong();\n        BooleanSupplier isCancelled = new BooleanSupplier() {\n            @Override\n            public boolean getAsBoolean() throws Exception {\n                return ts.isCancelled();\n            }\n        };\n\n        ts.onSubscribe(new BooleanSubscription());\n        queue.offer(1);\n        state.getAndIncrement();\n        ts.cancel();\n\n        QueueDrainHelper.postComplete(ts, queue, state, isCancelled);\n\n        ts.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void postCompleteCancelledAfterOne() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                cancel();\n            }\n        };\n        ArrayDeque<Integer> queue = new ArrayDeque<Integer>();\n        AtomicLong state = new AtomicLong();\n        BooleanSupplier isCancelled = new BooleanSupplier() {\n            @Override\n            public boolean getAsBoolean() throws Exception {\n                return ts.isCancelled();\n            }\n        };\n\n        ts.onSubscribe(new BooleanSubscription());\n        queue.offer(1);\n        state.getAndIncrement();\n\n        QueueDrainHelper.postComplete(ts, queue, state, isCancelled);\n\n        ts.assertValue(1).assertNoErrors().assertNotComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":213,"groupId":"11897","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"postCompleteCancelledAfterOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/90/60e85c453902873a86538513db6b901907863d.src","preCode":"    public void postCompleteCancelledAfterOne() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                cancel();\n            }\n        };\n        ArrayDeque<Integer> queue = new ArrayDeque<Integer>();\n        AtomicLong state = new AtomicLong();\n        BooleanSupplier isCancelled = new BooleanSupplier() {\n            @Override\n            public boolean getAsBoolean() throws Exception {\n                return ts.isCancelled();\n            }\n        };\n\n        ts.onSubscribe(new BooleanSubscription());\n        queue.offer(1);\n        state.getAndIncrement();\n\n        QueueDrainHelper.postComplete(ts, queue, state, isCancelled);\n\n        ts.assertValue(1).assertNoErrors().assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:23","codes":[{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void postCompleteCancelled() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<>();\n        ArrayDeque<Integer> queue = new ArrayDeque<>();\n        AtomicLong state = new AtomicLong();\n        BooleanSupplier isCancelled = new BooleanSupplier() {\n            @Override\n            public boolean getAsBoolean() throws Exception {\n                return ts.isCancelled();\n            }\n        };\n\n        ts.onSubscribe(new BooleanSubscription());\n        queue.offer(1);\n        state.getAndIncrement();\n        ts.cancel();\n\n        QueueDrainHelper.postComplete(ts, queue, state, isCancelled);\n\n        ts.assertEmpty();\n    }\n","date":"2019-12-22 19:17:23","endLine":186,"groupId":"107414","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"postCompleteCancelled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5f/ac86182a52a528cec8ce56480959090e87b9a2.src","preCode":"    public void postCompleteCancelled() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ArrayDeque<Integer> queue = new ArrayDeque<Integer>();\n        AtomicLong state = new AtomicLong();\n        BooleanSupplier isCancelled = new BooleanSupplier() {\n            @Override\n            public boolean getAsBoolean() throws Exception {\n                return ts.isCancelled();\n            }\n        };\n\n        ts.onSubscribe(new BooleanSubscription());\n        queue.offer(1);\n        state.getAndIncrement();\n        ts.cancel();\n\n        QueueDrainHelper.postComplete(ts, queue, state, isCancelled);\n\n        ts.assertEmpty();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2019-12-22 19:17:23","commitOrder":2,"curCode":"    public void postCompleteCancelledAfterOne() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                cancel();\n            }\n        };\n        ArrayDeque<Integer> queue = new ArrayDeque<>();\n        AtomicLong state = new AtomicLong();\n        BooleanSupplier isCancelled = new BooleanSupplier() {\n            @Override\n            public boolean getAsBoolean() throws Exception {\n                return ts.isCancelled();\n            }\n        };\n\n        ts.onSubscribe(new BooleanSubscription());\n        queue.offer(1);\n        state.getAndIncrement();\n\n        QueueDrainHelper.postComplete(ts, queue, state, isCancelled);\n\n        ts.assertValue(1).assertNoErrors().assertNotComplete();\n    }\n","date":"2019-12-22 19:17:23","endLine":213,"groupId":"107414","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"postCompleteCancelledAfterOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5f/ac86182a52a528cec8ce56480959090e87b9a2.src","preCode":"    public void postCompleteCancelledAfterOne() {\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n            @Override\n            public void onNext(Integer t) {\n                super.onNext(t);\n                cancel();\n            }\n        };\n        ArrayDeque<Integer> queue = new ArrayDeque<Integer>();\n        AtomicLong state = new AtomicLong();\n        BooleanSupplier isCancelled = new BooleanSupplier() {\n            @Override\n            public boolean getAsBoolean() throws Exception {\n                return ts.isCancelled();\n            }\n        };\n\n        ts.onSubscribe(new BooleanSubscription());\n        queue.offer(1);\n        state.getAndIncrement();\n\n        QueueDrainHelper.postComplete(ts, queue, state, isCancelled);\n\n        ts.assertValue(1).assertNoErrors().assertNotComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/util/QueueDrainHelperTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"75da4b504a52466b455a49a342747514fa0dffab","commitMessage":"@@@Diamond operators in tests (#6788)\n\n* diamond operators in unit tests.  small packages in internal/\n\n* diamond operators in unit tests.  small packages in internal/operators\n","date":"2019-12-22 19:17:23","modifiedFileCount":"92","status":"M","submitter":"Dmitry Volkov"}]
