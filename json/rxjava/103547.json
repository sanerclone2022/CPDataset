[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Observable.unsafeCreate(new ObservableSource<Integer>() {\n                @Override public void subscribe(final Observer<? super Integer> observer) {\n                    observer.onComplete();\n                    observer.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":488,"groupId":"12868","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"singleElementOperatorDoNotSwallowExceptionWhenDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4c/7faeaf3ea17d42e661f296fe37970d93e2cd01.src","preCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Observable.unsafeCreate(new ObservableSource<Integer>() {\n                @Override public void subscribe(final Observer<? super Integer> observer) {\n                    observer.onComplete();\n                    observer.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Flowable.unsafeCreate(new Publisher<Integer>() {\n                @Override public void subscribe(final Subscriber<? super Integer> subscriber) {\n                    subscriber.onComplete();\n                    subscriber.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":728,"groupId":"9295","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"singleElementOperatorDoNotSwallowExceptionWhenDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/3e/2fdae2a0497a2c03b7c22a2ad97cd954dccbbf.src","preCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Flowable.unsafeCreate(new Publisher<Integer>() {\n                @Override public void subscribe(final Subscriber<? super Integer> subscriber) {\n                    subscriber.onComplete();\n                    subscriber.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Observable.unsafeCreate(new ObservableSource<Integer>() {\n                @Override public void subscribe(final Observer<? super Integer> observer) {\n                    observer.onComplete();\n                    observer.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":488,"groupId":"12868","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"singleElementOperatorDoNotSwallowExceptionWhenDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4c/7faeaf3ea17d42e661f296fe37970d93e2cd01.src","preCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Observable.unsafeCreate(new ObservableSource<Integer>() {\n                @Override public void subscribe(final Observer<? super Integer> observer) {\n                    observer.onComplete();\n                    observer.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Flowable.unsafeCreate(new Publisher<Integer>() {\n                @Override public void subscribe(final Subscriber<? super Integer> subscriber) {\n                    subscriber.onComplete();\n                    subscriber.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":728,"groupId":"9295","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"singleElementOperatorDoNotSwallowExceptionWhenDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/09/9f63f0495214f74b77f4c91dc5450ec1f81d21.src","preCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Flowable.unsafeCreate(new Publisher<Integer>() {\n                @Override public void subscribe(final Subscriber<? super Integer> subscriber) {\n                    subscriber.onComplete();\n                    subscriber.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Observable.unsafeCreate(new ObservableSource<Integer>() {\n                @Override public void subscribe(final Observer<? super Integer> observer) {\n                    observer.onComplete();\n                    observer.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":488,"groupId":"103547","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"singleElementOperatorDoNotSwallowExceptionWhenDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/22/90c645ca7171f80eb08b554ee161ba7f2dcf11.src","preCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Observable.unsafeCreate(new ObservableSource<Integer>() {\n                @Override public void subscribe(final Observer<? super Integer> observer) {\n                    observer.onComplete();\n                    observer.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Flowable.unsafeCreate(new Publisher<Integer>() {\n                @Override public void subscribe(final Subscriber<? super Integer> subscriber) {\n                    subscriber.onComplete();\n                    subscriber.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":728,"groupId":"103547","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"singleElementOperatorDoNotSwallowExceptionWhenDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/09/9f63f0495214f74b77f4c91dc5450ec1f81d21.src","preCode":"    public void singleElementOperatorDoNotSwallowExceptionWhenDone() {\n        final Throwable exception = new RuntimeException(\"some error\");\n        final AtomicReference<Throwable> error = new AtomicReference<>();\n\n        try {\n            RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {\n                @Override public void accept(final Throwable throwable) throws Exception {\n                    error.set(throwable);\n                }\n            });\n\n            Flowable.unsafeCreate(new Publisher<Integer>() {\n                @Override public void subscribe(final Subscriber<? super Integer> subscriber) {\n                    subscriber.onComplete();\n                    subscriber.onError(exception);\n                }\n            }).singleElement().test().assertComplete();\n\n            assertSame(exception, error.get().getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSingleTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
