[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onErrorThrows() {\n        TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n        Observable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(to);\n\n        to.assertNoValues();\n        to.assertNotComplete();\n        to.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)to.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","date":"2019-08-16 20:51:17","endLine":225,"groupId":"10695","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onErrorThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/42/05fad5e2a3a3cc4786e8c6126d08d297969f6a.src","preCode":"    public void onErrorThrows() {\n        TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n        Observable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(to);\n\n        to.assertNoValues();\n        to.assertNotComplete();\n        to.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)to.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onErrorThrows() {\n        TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>();\n\n        Flowable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(ts);\n\n        ts.assertNoValues();\n        ts.assertNotComplete();\n        ts.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)ts.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","date":"2019-08-16 20:51:17","endLine":196,"groupId":"1229","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onErrorThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/de/ea77ea7031cbba14cda8693e0b51d50556c426.src","preCode":"    public void onErrorThrows() {\n        TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>();\n\n        Flowable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(ts);\n\n        ts.assertNoValues();\n        ts.assertNotComplete();\n        ts.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)ts.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void onErrorThrows() {\n        TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n        Observable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(to);\n\n        to.assertNoValues();\n        to.assertNotComplete();\n        to.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)to.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","date":"2019-08-16 20:51:17","endLine":225,"groupId":"10695","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onErrorThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/42/05fad5e2a3a3cc4786e8c6126d08d297969f6a.src","preCode":"    public void onErrorThrows() {\n        TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n        Observable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(to);\n\n        to.assertNoValues();\n        to.assertNotComplete();\n        to.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)to.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void onErrorThrows() {\n        TestSubscriberEx<Object> ts = new TestSubscriberEx<>();\n\n        Flowable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(ts);\n\n        ts.assertNoValues();\n        ts.assertNotComplete();\n        ts.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)ts.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","date":"2019-12-22 18:39:23","endLine":196,"groupId":"1229","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onErrorThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fc/346086b62e4df918eed126f5441e46a6009444.src","preCode":"    public void onErrorThrows() {\n        TestSubscriberEx<Object> ts = new TestSubscriberEx<Object>();\n\n        Flowable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(ts);\n\n        ts.assertNoValues();\n        ts.assertNotComplete();\n        ts.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)ts.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void onErrorThrows() {\n        TestObserverEx<Object> to = new TestObserverEx<>();\n\n        Observable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(to);\n\n        to.assertNoValues();\n        to.assertNotComplete();\n        to.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)to.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","date":"2019-12-22 18:59:44","endLine":225,"groupId":"105071","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onErrorThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/04/82d23906d2b67cb52f557e5424a89f4fce6bd6.src","preCode":"    public void onErrorThrows() {\n        TestObserverEx<Object> to = new TestObserverEx<Object>();\n\n        Observable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(to);\n\n        to.assertNoValues();\n        to.assertNotComplete();\n        to.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)to.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void onErrorThrows() {\n        TestSubscriberEx<Object> ts = new TestSubscriberEx<>();\n\n        Flowable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(ts);\n\n        ts.assertNoValues();\n        ts.assertNotComplete();\n        ts.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)ts.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","date":"2019-12-22 18:39:23","endLine":196,"groupId":"105071","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onErrorThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fc/346086b62e4df918eed126f5441e46a6009444.src","preCode":"    public void onErrorThrows() {\n        TestSubscriberEx<Object> ts = new TestSubscriberEx<>();\n\n        Flowable.error(new TestException())\n        .doOnError(new Consumer<Throwable>() {\n            @Override\n            public void accept(Throwable e) {\n                throw new TestException();\n            }\n        }).subscribe(ts);\n\n        ts.assertNoValues();\n        ts.assertNotComplete();\n        ts.assertError(CompositeException.class);\n\n        CompositeException ex = (CompositeException)ts.errors().get(0);\n\n        List<Throwable> exceptions = ex.getExceptions();\n        assertEquals(2, exceptions.size());\n        Assert.assertTrue(exceptions.get(0) instanceof TestException);\n        Assert.assertTrue(exceptions.get(1) instanceof TestException);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
