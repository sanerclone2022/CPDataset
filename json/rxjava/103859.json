[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        Observable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(observer);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, never()).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":85,"groupId":"9142","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"timestampWithScheduler2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/71/48a44a4a2a3153ba17abb207b6fcfaeb77ff26.src","preCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        Observable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(observer);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTimestampTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        Flowable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(subscriber);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<Integer>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<Integer>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<Integer>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, never()).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":86,"groupId":"9142","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timestampWithScheduler2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/08/bbcdc50f5f97b7670691f6f2363e988208b41b.src","preCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        Flowable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(subscriber);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<Integer>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<Integer>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<Integer>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTimestampTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        Observable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(observer);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, never()).onComplete();\n    }\n","date":"2019-08-16 20:51:17","endLine":85,"groupId":"9142","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"timestampWithScheduler2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/71/48a44a4a2a3153ba17abb207b6fcfaeb77ff26.src","preCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        Observable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(observer);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTimestampTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        Flowable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(subscriber);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, never()).onComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":86,"groupId":"7679","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timestampWithScheduler2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/05/274da6190a5da290b9436d677b362c275f3f55.src","preCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        Flowable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(subscriber);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<Integer>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<Integer>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<Integer>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTimestampTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        Observable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(observer);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, times(1)).onNext(new Timed<>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, never()).onComplete();\n    }\n","date":"2019-12-22 18:59:44","endLine":85,"groupId":"103859","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"timestampWithScheduler2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/59/7333ea66bac4842b30da82292db2e73365f5b8.src","preCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishSubject<Integer> source = PublishSubject.create();\n        Observable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(observer);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(observer);\n\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(observer, times(1)).onNext(new Timed<Integer>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableTimestampTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        Flowable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(subscriber);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, never()).onComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":86,"groupId":"103859","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"timestampWithScheduler2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/05/274da6190a5da290b9436d677b362c275f3f55.src","preCode":"    public void timestampWithScheduler2() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> source = PublishProcessor.create();\n        Flowable<Timed<Integer>> m = source.timestamp(scheduler);\n        m.subscribe(subscriber);\n\n        source.onNext(1);\n        source.onNext(2);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);\n        source.onNext(3);\n\n        InOrder inOrder = inOrder(subscriber);\n\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<>(1, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<>(2, 0, TimeUnit.MILLISECONDS));\n        inOrder.verify(subscriber, times(1)).onNext(new Timed<>(3, 200, TimeUnit.MILLISECONDS));\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, never()).onComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableTimestampTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
