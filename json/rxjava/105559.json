[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Observable<Integer>> sources = new ArrayList<Observable<Integer>>();\n            List<Object> values = new ArrayList<Object>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Observable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Observable<List<Object>> result = Observable.combineLatest(sources, func);\n\n            final Observer<List<Object>> o = TestHelper.mockObserver();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Observer<List<Object>> observer = new DefaultObserver<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    o.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    o.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    o.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(observer);\n\n            cdl.await();\n\n            verify(o).onNext(values);\n            verify(o).onComplete();\n            verify(o, never()).onError(any(Throwable.class));\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":511,"groupId":"7958","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"oneToNSourcesScheduled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bb/27338d843fdf8ea09e0e1c117cee59cfb5c7b6.src","preCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Observable<Integer>> sources = new ArrayList<Observable<Integer>>();\n            List<Object> values = new ArrayList<Object>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Observable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Observable<List<Object>> result = Observable.combineLatest(sources, func);\n\n            final Observer<List<Object>> o = TestHelper.mockObserver();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Observer<List<Object>> observer = new DefaultObserver<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    o.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    o.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    o.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(observer);\n\n            cdl.await();\n\n            verify(o).onNext(values);\n            verify(o).onComplete();\n            verify(o, never()).onError(any(Throwable.class));\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Flowable<Integer>> sources = new ArrayList<Flowable<Integer>>();\n            List<Object> values = new ArrayList<Object>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Flowable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Flowable<List<Object>> result = Flowable.combineLatest(sources, func);\n\n            final Subscriber<List<Object>> subscriber = TestHelper.mockSubscriber();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Subscriber<List<Object>> s = new DefaultSubscriber<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    subscriber.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    subscriber.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    subscriber.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(s);\n\n            cdl.await();\n\n            verify(subscriber).onNext(values);\n            verify(subscriber).onComplete();\n            verify(subscriber, never()).onError(any(Throwable.class));\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":512,"groupId":"7642","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"oneToNSourcesScheduled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bb/ffd97ee457fba272e7ee1c19226e6ba9b1aa23.src","preCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Flowable<Integer>> sources = new ArrayList<Flowable<Integer>>();\n            List<Object> values = new ArrayList<Object>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Flowable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Flowable<List<Object>> result = Flowable.combineLatest(sources, func);\n\n            final Subscriber<List<Object>> subscriber = TestHelper.mockSubscriber();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Subscriber<List<Object>> s = new DefaultSubscriber<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    subscriber.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    subscriber.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    subscriber.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(s);\n\n            cdl.await();\n\n            verify(subscriber).onNext(values);\n            verify(subscriber).onComplete();\n            verify(subscriber, never()).onError(any(Throwable.class));\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Observable<Integer>> sources = new ArrayList<Observable<Integer>>();\n            List<Object> values = new ArrayList<Object>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Observable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Observable<List<Object>> result = Observable.combineLatest(sources, func);\n\n            final Observer<List<Object>> o = TestHelper.mockObserver();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Observer<List<Object>> observer = new DefaultObserver<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    o.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    o.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    o.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(observer);\n\n            cdl.await();\n\n            verify(o).onNext(values);\n            verify(o).onComplete();\n            verify(o, never()).onError(any(Throwable.class));\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":511,"groupId":"7958","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"oneToNSourcesScheduled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bb/27338d843fdf8ea09e0e1c117cee59cfb5c7b6.src","preCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Observable<Integer>> sources = new ArrayList<Observable<Integer>>();\n            List<Object> values = new ArrayList<Object>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Observable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Observable<List<Object>> result = Observable.combineLatest(sources, func);\n\n            final Observer<List<Object>> o = TestHelper.mockObserver();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Observer<List<Object>> observer = new DefaultObserver<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    o.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    o.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    o.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(observer);\n\n            cdl.await();\n\n            verify(o).onNext(values);\n            verify(o).onComplete();\n            verify(o, never()).onError(any(Throwable.class));\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Flowable<Integer>> sources = new ArrayList<>();\n            List<Object> values = new ArrayList<>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Flowable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Flowable<List<Object>> result = Flowable.combineLatest(sources, func);\n\n            final Subscriber<List<Object>> subscriber = TestHelper.mockSubscriber();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Subscriber<List<Object>> s = new DefaultSubscriber<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    subscriber.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    subscriber.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    subscriber.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(s);\n\n            cdl.await();\n\n            verify(subscriber).onNext(values);\n            verify(subscriber).onComplete();\n            verify(subscriber, never()).onError(any(Throwable.class));\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":512,"groupId":"12370","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"oneToNSourcesScheduled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8e/d819713817eec94b29a3d993b09d2ae9ddaccf.src","preCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Flowable<Integer>> sources = new ArrayList<Flowable<Integer>>();\n            List<Object> values = new ArrayList<Object>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Flowable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Flowable<List<Object>> result = Flowable.combineLatest(sources, func);\n\n            final Subscriber<List<Object>> subscriber = TestHelper.mockSubscriber();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Subscriber<List<Object>> s = new DefaultSubscriber<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    subscriber.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    subscriber.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    subscriber.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(s);\n\n            cdl.await();\n\n            verify(subscriber).onNext(values);\n            verify(subscriber).onComplete();\n            verify(subscriber, never()).onError(any(Throwable.class));\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Observable<Integer>> sources = new ArrayList<>();\n            List<Object> values = new ArrayList<>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Observable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Observable<List<Object>> result = Observable.combineLatest(sources, func);\n\n            final Observer<List<Object>> o = TestHelper.mockObserver();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Observer<List<Object>> observer = new DefaultObserver<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    o.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    o.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    o.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(observer);\n\n            cdl.await();\n\n            verify(o).onNext(values);\n            verify(o).onComplete();\n            verify(o, never()).onError(any(Throwable.class));\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":511,"groupId":"105559","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"oneToNSourcesScheduled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/f93d422237de286dd33973d34106ea7632b396.src","preCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Observable<Integer>> sources = new ArrayList<Observable<Integer>>();\n            List<Object> values = new ArrayList<Object>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Observable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Observable<List<Object>> result = Observable.combineLatest(sources, func);\n\n            final Observer<List<Object>> o = TestHelper.mockObserver();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Observer<List<Object>> observer = new DefaultObserver<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    o.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    o.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    o.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(observer);\n\n            cdl.await();\n\n            verify(o).onNext(values);\n            verify(o).onComplete();\n            verify(o, never()).onError(any(Throwable.class));\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Flowable<Integer>> sources = new ArrayList<>();\n            List<Object> values = new ArrayList<>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Flowable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Flowable<List<Object>> result = Flowable.combineLatest(sources, func);\n\n            final Subscriber<List<Object>> subscriber = TestHelper.mockSubscriber();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Subscriber<List<Object>> s = new DefaultSubscriber<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    subscriber.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    subscriber.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    subscriber.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(s);\n\n            cdl.await();\n\n            verify(subscriber).onNext(values);\n            verify(subscriber).onComplete();\n            verify(subscriber, never()).onError(any(Throwable.class));\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":512,"groupId":"105559","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"oneToNSourcesScheduled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8e/d819713817eec94b29a3d993b09d2ae9ddaccf.src","preCode":"    public void oneToNSourcesScheduled() throws InterruptedException {\n        int n = 10;\n        Function<Object[], List<Object>> func = new Function<Object[], List<Object>>() {\n\n            @Override\n            public List<Object> apply(Object[] args) {\n                return Arrays.asList(args);\n            }\n        };\n        for (int i = 1; i <= n; i++) {\n            System.out.println(\"test1ToNSourcesScheduled: \" + i + \" sources\");\n            List<Flowable<Integer>> sources = new ArrayList<>();\n            List<Object> values = new ArrayList<>();\n            for (int j = 0; j < i; j++) {\n                sources.add(Flowable.just(j).subscribeOn(Schedulers.io()));\n                values.add(j);\n            }\n\n            Flowable<List<Object>> result = Flowable.combineLatest(sources, func);\n\n            final Subscriber<List<Object>> subscriber = TestHelper.mockSubscriber();\n\n            final CountDownLatch cdl = new CountDownLatch(1);\n\n            Subscriber<List<Object>> s = new DefaultSubscriber<List<Object>>() {\n\n                @Override\n                public void onNext(List<Object> t) {\n                    subscriber.onNext(t);\n                }\n\n                @Override\n                public void onError(Throwable e) {\n                    subscriber.onError(e);\n                    cdl.countDown();\n                }\n\n                @Override\n                public void onComplete() {\n                    subscriber.onComplete();\n                    cdl.countDown();\n                }\n            };\n\n            result.subscribe(s);\n\n            cdl.await();\n\n            verify(subscriber).onNext(values);\n            verify(subscriber).onComplete();\n            verify(subscriber, never()).onError(any(Throwable.class));\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCombineLatestTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
