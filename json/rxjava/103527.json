[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":53,"groupId":"8548","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"forEachWile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cd/7273a28210d8385f97fd4d0036d3cd22cc2ddf.src","preCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableForEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":47,"groupId":"8548","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"forEachWile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c6/43c0652baf28299689e68e176d0ea16feac211.src","preCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableForEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","date":"2019-08-16 20:51:17","endLine":53,"groupId":"8548","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"forEachWile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cd/7273a28210d8385f97fd4d0036d3cd22cc2ddf.src","preCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableForEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<>();\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","date":"2019-12-22 18:39:23","endLine":47,"groupId":"8548","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"forEachWile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d9/ff63257caa875634ae71c00936702fbb0a2af5.src","preCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableForEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<>();\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","date":"2019-12-22 18:59:44","endLine":53,"groupId":"103527","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"forEachWile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/7b78414fd3fd5531d6093b8083d2c421112530.src","preCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<Object>();\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableForEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<>();\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","date":"2019-12-22 18:39:23","endLine":47,"groupId":"103527","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"forEachWile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d9/ff63257caa875634ae71c00936702fbb0a2af5.src","preCode":"    public void forEachWile() {\n        final List<Object> list = new ArrayList<>();\n\n        Flowable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                list.add(v);\n            }\n        })\n        .forEachWhile(new Predicate<Integer>() {\n            @Override\n            public boolean test(Integer v) throws Exception {\n                return v < 3;\n            }\n        });\n\n        assertEquals(Arrays.asList(1, 2, 3), list);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableForEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
