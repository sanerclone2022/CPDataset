[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void errorReentry() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<Integer>> serial = new AtomicReference<Subscriber<Integer>>();\n\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n                @Override\n                public void onNext(Integer v) {\n                    serial.get().onError(new TestException());\n                    serial.get().onError(new TestException());\n                    super.onNext(v);\n                }\n            };\n            SerializedSubscriber<Integer> sobs = new SerializedSubscriber<Integer>(ts);\n            sobs.onSubscribe(new BooleanSubscription());\n            serial.set(sobs);\n\n            sobs.onNext(1);\n\n            ts.assertValue(1);\n            ts.assertError(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":874,"groupId":"1299","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"errorReentry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ac/541e2bcdbde01675daa13ab67989e84acf53b2.src","preCode":"    public void errorReentry() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<Integer>> serial = new AtomicReference<Subscriber<Integer>>();\n\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n                @Override\n                public void onNext(Integer v) {\n                    serial.get().onError(new TestException());\n                    serial.get().onError(new TestException());\n                    super.onNext(v);\n                }\n            };\n            SerializedSubscriber<Integer> sobs = new SerializedSubscriber<Integer>(ts);\n            sobs.onSubscribe(new BooleanSubscription());\n            serial.set(sobs);\n\n            sobs.onNext(1);\n\n            ts.assertValue(1);\n            ts.assertError(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/SerializedSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":848,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void completeReentry() {\n        final AtomicReference<Observer<Integer>> serial = new AtomicReference<Observer<Integer>>();\n\n        TestObserver<Integer> to = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer v) {\n                serial.get().onComplete();\n                serial.get().onComplete();\n                super.onNext(v);\n            }\n        };\n        SerializedObserver<Integer> sobs = new SerializedObserver<Integer>(to);\n        sobs.onSubscribe(Disposables.empty());\n        serial.set(sobs);\n\n        sobs.onNext(1);\n\n        to.assertValue(1);\n        to.assertComplete();\n        to.assertNoErrors();\n    }\n","date":"2019-08-16 20:51:17","endLine":896,"groupId":"6641","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"completeReentry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/b86d8417dc3c7ac992dd9447d4af86ee4d0bcb.src","preCode":"    public void completeReentry() {\n        final AtomicReference<Observer<Integer>> serial = new AtomicReference<Observer<Integer>>();\n\n        TestObserver<Integer> to = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer v) {\n                serial.get().onComplete();\n                serial.get().onComplete();\n                super.onNext(v);\n            }\n        };\n        SerializedObserver<Integer> sobs = new SerializedObserver<Integer>(to);\n        sobs.onSubscribe(Disposables.empty());\n        serial.set(sobs);\n\n        sobs.onNext(1);\n\n        to.assertValue(1);\n        to.assertComplete();\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/SerializedObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":876,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void errorReentry() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<Integer>> serial = new AtomicReference<Subscriber<Integer>>();\n\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n                @Override\n                public void onNext(Integer v) {\n                    serial.get().onError(new TestException());\n                    serial.get().onError(new TestException());\n                    super.onNext(v);\n                }\n            };\n            SerializedSubscriber<Integer> sobs = new SerializedSubscriber<Integer>(ts);\n            sobs.onSubscribe(new BooleanSubscription());\n            serial.set(sobs);\n\n            sobs.onNext(1);\n\n            ts.assertValue(1);\n            ts.assertError(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":874,"groupId":"1299","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"errorReentry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ac/541e2bcdbde01675daa13ab67989e84acf53b2.src","preCode":"    public void errorReentry() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<Integer>> serial = new AtomicReference<Subscriber<Integer>>();\n\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n                @Override\n                public void onNext(Integer v) {\n                    serial.get().onError(new TestException());\n                    serial.get().onError(new TestException());\n                    super.onNext(v);\n                }\n            };\n            SerializedSubscriber<Integer> sobs = new SerializedSubscriber<Integer>(ts);\n            sobs.onSubscribe(new BooleanSubscription());\n            serial.set(sobs);\n\n            sobs.onNext(1);\n\n            ts.assertValue(1);\n            ts.assertError(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/SerializedSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":848,"status":"N"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void completeReentry() {\n        final AtomicReference<Observer<Integer>> serial = new AtomicReference<Observer<Integer>>();\n\n        TestObserver<Integer> to = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer v) {\n                serial.get().onComplete();\n                serial.get().onComplete();\n                super.onNext(v);\n            }\n        };\n        SerializedObserver<Integer> sobs = new SerializedObserver<Integer>(to);\n        sobs.onSubscribe(Disposable.empty());\n        serial.set(sobs);\n\n        sobs.onNext(1);\n\n        to.assertValue(1);\n        to.assertComplete();\n        to.assertNoErrors();\n    }\n","date":"2019-12-20 02:39:40","endLine":897,"groupId":"6641","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"completeReentry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/84/fa4348797dadfa9f21d91391f190799d103f39.src","preCode":"    public void completeReentry() {\n        final AtomicReference<Observer<Integer>> serial = new AtomicReference<Observer<Integer>>();\n\n        TestObserver<Integer> to = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer v) {\n                serial.get().onComplete();\n                serial.get().onComplete();\n                super.onNext(v);\n            }\n        };\n        SerializedObserver<Integer> sobs = new SerializedObserver<Integer>(to);\n        sobs.onSubscribe(Disposables.empty());\n        serial.set(sobs);\n\n        sobs.onNext(1);\n\n        to.assertValue(1);\n        to.assertComplete();\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/SerializedObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":877,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void errorReentry() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<Integer>> serial = new AtomicReference<>();\n\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n                @Override\n                public void onNext(Integer v) {\n                    serial.get().onError(new TestException());\n                    serial.get().onError(new TestException());\n                    super.onNext(v);\n                }\n            };\n            SerializedSubscriber<Integer> sobs = new SerializedSubscriber<>(ts);\n            sobs.onSubscribe(new BooleanSubscription());\n            serial.set(sobs);\n\n            sobs.onNext(1);\n\n            ts.assertValue(1);\n            ts.assertError(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":875,"groupId":"108072","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"errorReentry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/00/c7ae21038069d649adb076fcfdc8e00838e3cd.src","preCode":"    public void errorReentry() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            final AtomicReference<Subscriber<Integer>> serial = new AtomicReference<Subscriber<Integer>>();\n\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>() {\n                @Override\n                public void onNext(Integer v) {\n                    serial.get().onError(new TestException());\n                    serial.get().onError(new TestException());\n                    super.onNext(v);\n                }\n            };\n            SerializedSubscriber<Integer> sobs = new SerializedSubscriber<Integer>(ts);\n            sobs.onSubscribe(new BooleanSubscription());\n            serial.set(sobs);\n\n            sobs.onNext(1);\n\n            ts.assertValue(1);\n            ts.assertError(TestException.class);\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subscribers/SerializedSubscriberTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"M"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void completeReentry() {\n        final AtomicReference<Observer<Integer>> serial = new AtomicReference<>();\n\n        TestObserver<Integer> to = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer v) {\n                serial.get().onComplete();\n                serial.get().onComplete();\n                super.onNext(v);\n            }\n        };\n        SerializedObserver<Integer> sobs = new SerializedObserver<>(to);\n        sobs.onSubscribe(Disposable.empty());\n        serial.set(sobs);\n\n        sobs.onNext(1);\n\n        to.assertValue(1);\n        to.assertComplete();\n        to.assertNoErrors();\n    }\n","date":"2019-12-22 19:17:37","endLine":897,"groupId":"108072","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"completeReentry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e5/81012d9bc73cdcf9768536a5765f2e23a5855d.src","preCode":"    public void completeReentry() {\n        final AtomicReference<Observer<Integer>> serial = new AtomicReference<Observer<Integer>>();\n\n        TestObserver<Integer> to = new TestObserver<Integer>() {\n            @Override\n            public void onNext(Integer v) {\n                serial.get().onComplete();\n                serial.get().onComplete();\n                super.onNext(v);\n            }\n        };\n        SerializedObserver<Integer> sobs = new SerializedObserver<Integer>(to);\n        sobs.onSubscribe(Disposable.empty());\n        serial.set(sobs);\n\n        sobs.onNext(1);\n\n        to.assertValue(1);\n        to.assertComplete();\n        to.assertNoErrors();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/observers/SerializedObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":877,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
