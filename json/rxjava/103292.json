[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Observable<Integer> source = Observable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestObserver<Integer> to1 = source.test();\n\n            final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    to1.dispose();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(to2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            to2\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1179,"groupId":"12295","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeSubscribeRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/747c480a90d6b4b716b7ce66cfb96d52316ec7.src","preCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Observable<Integer> source = Observable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestObserver<Integer> to1 = source.test();\n\n            final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    to1.dispose();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(to2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            to2\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1147,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Flowable<Integer> source = Flowable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestSubscriber<Integer> ts1 = source.test(0);\n\n            final TestSubscriber<Integer> ts2 = new TestSubscriber<Integer>(0);\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ts1.cancel();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(ts2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            ts2.requestMore(6) \r\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1223,"groupId":"8412","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeSubscribeRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/b38ff272c5ac364c7d2bea65b54206088a6700.src","preCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Flowable<Integer> source = Flowable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestSubscriber<Integer> ts1 = source.test(0);\n\n            final TestSubscriber<Integer> ts2 = new TestSubscriber<Integer>(0);\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ts1.cancel();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(ts2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            ts2.requestMore(6) \r\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1191,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Observable<Integer> source = Observable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestObserver<Integer> to1 = source.test();\n\n            final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    to1.dispose();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(to2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            to2\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":1179,"groupId":"12295","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeSubscribeRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/747c480a90d6b4b716b7ce66cfb96d52316ec7.src","preCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Observable<Integer> source = Observable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestObserver<Integer> to1 = source.test();\n\n            final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    to1.dispose();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(to2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            to2\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1147,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Flowable<Integer> source = Flowable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestSubscriber<Integer> ts1 = source.test(0);\n\n            final TestSubscriber<Integer> ts2 = new TestSubscriber<>(0);\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ts1.cancel();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(ts2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            ts2.requestMore(6) \r\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":1209,"groupId":"1545","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeSubscribeRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/9409ed1b42179daaf4a95577464551fd0383e0.src","preCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Flowable<Integer> source = Flowable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestSubscriber<Integer> ts1 = source.test(0);\n\n            final TestSubscriber<Integer> ts2 = new TestSubscriber<Integer>(0);\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ts1.cancel();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(ts2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            ts2.requestMore(6) \r\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1177,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Observable<Integer> source = Observable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestObserver<Integer> to1 = source.test();\n\n            final TestObserver<Integer> to2 = new TestObserver<>();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    to1.dispose();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(to2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            to2\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":1158,"groupId":"103292","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribeSubscribeRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d9/b98de8f9a21c077c76ae73d0336fd4963c589f.src","preCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Observable<Integer> source = Observable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestObserver<Integer> to1 = source.test();\n\n            final TestObserver<Integer> to2 = new TestObserver<Integer>();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    to1.dispose();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(to2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            to2\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1126,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Flowable<Integer> source = Flowable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestSubscriber<Integer> ts1 = source.test(0);\n\n            final TestSubscriber<Integer> ts2 = new TestSubscriber<>(0);\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ts1.cancel();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(ts2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            ts2.requestMore(6) \r\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":1209,"groupId":"103292","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribeSubscribeRace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/9409ed1b42179daaf4a95577464551fd0383e0.src","preCode":"    public void unsubscribeSubscribeRace() {\n        for (int i = 0; i < 1000; i++) {\n\n            final Flowable<Integer> source = Flowable.range(1, 5)\n                    .replay()\n                    .refCount(1)\n                    ;\n\n            final TestSubscriber<Integer> ts1 = source.test(0);\n\n            final TestSubscriber<Integer> ts2 = new TestSubscriber<>(0);\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ts1.cancel();\n                }\n            };\n\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    source.subscribe(ts2);\n                }\n            };\n\n            TestHelper.race(r1, r2, Schedulers.single());\n\n            ts2.requestMore(6) \r\n            .withTag(\"Round: \" + i)\n            .assertResult(1, 2, 3, 4, 5);\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1177,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
