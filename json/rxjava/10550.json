[{"authorTime":"2019-11-12 17:19:12","codes":[{"authorDate":"2019-10-17 21:44:37","commitOrder":2,"curCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastSubject<Integer> us = UnicastSubject.create();\n\n                TestObserver<Integer> to = us\n                .observeOn(Schedulers.io())\n                .map(Functions.<Integer>identity())\n                .observeOn(Schedulers.single())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasObservers(); i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-10-17 21:44:37","endLine":495,"groupId":"12459","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fusedNoConcurrentCleanDueToCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ba/2deb2c91fd734be67129ea42ce00993057714b.src","preCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastSubject<Integer> us = UnicastSubject.create();\n\n                TestObserver<Integer> to = us\n                .observeOn(Schedulers.io())\n                .map(Functions.<Integer>identity())\n                .observeOn(Schedulers.single())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasObservers(); i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subjects/UnicastSubjectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":465,"status":"NB"},{"authorDate":"2019-11-12 17:19:12","commitOrder":2,"curCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastSubject<Integer> us = UnicastSubject.create();\n\n                TestObserver<Integer> to = us.hide()\n                .observeOn(Schedulers.io())\n                .observeOn(Schedulers.single())\n                .unsubscribeOn(Schedulers.computation())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasObservers() && i < 10000; i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-11-12 17:19:12","endLine":849,"groupId":"9897","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedNoConcurrentCleanDueToCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/06/02249ceb8fc607756bb422fbc6fa1eff30882d.src","preCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastSubject<Integer> us = UnicastSubject.create();\n\n                TestObserver<Integer> to = us.hide()\n                .observeOn(Schedulers.io())\n                .observeOn(Schedulers.single())\n                .unsubscribeOn(Schedulers.computation())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasObservers() && i < 10000; i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"B"}],"commitId":"df2cdb75c493f15dba72ad3e13b12fe1ac670e54","commitMessage":"@@@3.x: Fix concurrent clear in observeOn while output-fused (#6708)\n\n","date":"2019-11-12 17:19:12","modifiedFileCount":"4","status":"M","submitter":"David Karnok"},{"authorTime":"2019-11-12 17:19:12","codes":[{"authorDate":"2021-03-14 15:50:44","commitOrder":3,"curCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastSubject<Integer> us = UnicastSubject.create();\n\n                TestObserver<Integer> to = us\n                .observeOn(Schedulers.io())\n                .map(Functions.<Integer>identity())\n                .observeOn(Schedulers.single())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasObservers(); i++) {\n                    us.onNext(i);\n                }\n\n                to.awaitDone(10, TimeUnit.SECONDS);\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2021-03-14 15:50:44","endLine":495,"groupId":"10550","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fusedNoConcurrentCleanDueToCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/cb20b48c02684e6ee5d4112eaf6f32162ad035.src","preCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastSubject<Integer> us = UnicastSubject.create();\n\n                TestObserver<Integer> to = us\n                .observeOn(Schedulers.io())\n                .map(Functions.<Integer>identity())\n                .observeOn(Schedulers.single())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasObservers(); i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/subjects/UnicastSubjectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"M"},{"authorDate":"2019-11-12 17:19:12","commitOrder":3,"curCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastSubject<Integer> us = UnicastSubject.create();\n\n                TestObserver<Integer> to = us.hide()\n                .observeOn(Schedulers.io())\n                .observeOn(Schedulers.single())\n                .unsubscribeOn(Schedulers.computation())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasObservers() && i < 10000; i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","date":"2019-11-12 17:19:12","endLine":849,"groupId":"10550","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedNoConcurrentCleanDueToCancel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/06/02249ceb8fc607756bb422fbc6fa1eff30882d.src","preCode":"    public void fusedNoConcurrentCleanDueToCancel() {\n        for (int j = 0; j < TestHelper.RACE_LONG_LOOPS; j++) {\n            List<Throwable> errors = TestHelper.trackPluginErrors();\n            try {\n                final UnicastSubject<Integer> us = UnicastSubject.create();\n\n                TestObserver<Integer> to = us.hide()\n                .observeOn(Schedulers.io())\n                .observeOn(Schedulers.single())\n                .unsubscribeOn(Schedulers.computation())\n                .firstOrError()\n                .test();\n\n                for (int i = 0; us.hasObservers() && i < 10000; i++) {\n                    us.onNext(i);\n                }\n\n                to\n                .awaitDone(5, TimeUnit.SECONDS)\n                ;\n\n                if (!errors.isEmpty()) {\n                    throw new CompositeException(errors);\n                }\n\n                to.assertResult(0);\n            } finally {\n                RxJavaPlugins.reset();\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableObserveOnTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"N"}],"commitId":"bdf13a1fdb54b79e0ece299535de75c653abc827","commitMessage":"@@@Fix intermittently failing unit tests (#7213)\n\n* Fix intermittently failing tests.  mostly increasing timeout\n\nFix several unit tests that are intermittently failing. All fixes\ninvolve increasing timeouts. Adjusted formatting in several areas within\nupdated tests.\n\n* Remove formatting/refactoring from previous commit\n\nSuperfluous formatting and refactoring was making review impossible.","date":"2021-03-14 15:50:44","modifiedFileCount":"7","status":"M","submitter":"benjamintboyle"}]
