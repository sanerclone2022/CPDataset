[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void subscribeActual(Subscriber<? super T> s) {\n\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Object> processor = UnicastProcessor.<Object>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = ObjectHelper.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Object> receiver = new WhenReceiver<T, Object>(source);\n\n        RepeatWhenSubscriber<T> subscriber = new RepeatWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","date":"2019-08-16 20:51:17","endLine":65,"groupId":"1770","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superT>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/02/1b4dd387b74d2993760678b05935dcb5eb6034.src","preCode":"    public void subscribeActual(Subscriber<? super T> s) {\n\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Object> processor = UnicastProcessor.<Object>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = ObjectHelper.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Object> receiver = new WhenReceiver<T, Object>(source);\n\n        RepeatWhenSubscriber<T> subscriber = new RepeatWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void subscribeActual(Subscriber<? super T> s) {\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Throwable> processor = UnicastProcessor.<Throwable>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = ObjectHelper.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Throwable> receiver = new WhenReceiver<T, Throwable>(source);\n\n        RetryWhenSubscriber<T> subscriber = new RetryWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","date":"2019-08-16 20:51:17","endLine":63,"groupId":"2022","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superT>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ff/7ddb84af9acdb1d3b6991a7e62cf7ede6801b9.src","preCode":"    public void subscribeActual(Subscriber<? super T> s) {\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Throwable> processor = UnicastProcessor.<Throwable>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = ObjectHelper.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Throwable> receiver = new WhenReceiver<T, Throwable>(source);\n\n        RetryWhenSubscriber<T> subscriber = new RetryWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryWhen.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    public void subscribeActual(Subscriber<? super T> s) {\n\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Object> processor = UnicastProcessor.<Object>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = Objects.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Object> receiver = new WhenReceiver<T, Object>(source);\n\n        RepeatWhenSubscriber<T> subscriber = new RepeatWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","date":"2019-12-18 03:06:44","endLine":65,"groupId":"1770","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superT>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/dc/d807aa2a5c8a07934ce8376188df71d50e41c1.src","preCode":"    public void subscribeActual(Subscriber<? super T> s) {\n\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Object> processor = UnicastProcessor.<Object>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = ObjectHelper.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Object> receiver = new WhenReceiver<T, Object>(source);\n\n        RepeatWhenSubscriber<T> subscriber = new RepeatWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    public void subscribeActual(Subscriber<? super T> s) {\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Throwable> processor = UnicastProcessor.<Throwable>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = Objects.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Throwable> receiver = new WhenReceiver<T, Throwable>(source);\n\n        RetryWhenSubscriber<T> subscriber = new RetryWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","date":"2019-12-18 03:06:44","endLine":64,"groupId":"2022","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superT>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/73/076643534bc6f506c2988dad800f52ccd6e04d.src","preCode":"    public void subscribeActual(Subscriber<? super T> s) {\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Throwable> processor = UnicastProcessor.<Throwable>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = ObjectHelper.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Throwable> receiver = new WhenReceiver<T, Throwable>(source);\n\n        RetryWhenSubscriber<T> subscriber = new RetryWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryWhen.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-28 03:01:34","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":3,"curCode":"    public void subscribeActual(Subscriber<? super T> s) {\n\n        SerializedSubscriber<T> z = new SerializedSubscriber<>(s);\n\n        FlowableProcessor<Object> processor = UnicastProcessor.create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = Objects.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Object> receiver = new WhenReceiver<>(source);\n\n        RepeatWhenSubscriber<T> subscriber = new RepeatWhenSubscriber<>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","date":"2019-12-28 03:01:34","endLine":65,"groupId":"102932","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superT>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/53/71930b5f44ee0c8c5223b52a2fa283b38974c2.src","preCode":"    public void subscribeActual(Subscriber<? super T> s) {\n\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Object> processor = UnicastProcessor.<Object>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = Objects.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Object> receiver = new WhenReceiver<T, Object>(source);\n\n        RepeatWhenSubscriber<T> subscriber = new RepeatWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRepeatWhen.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2019-12-28 03:01:34","commitOrder":3,"curCode":"    public void subscribeActual(Subscriber<? super T> s) {\n        SerializedSubscriber<T> z = new SerializedSubscriber<>(s);\n\n        FlowableProcessor<Throwable> processor = UnicastProcessor.<Throwable>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = Objects.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Throwable> receiver = new WhenReceiver<>(source);\n\n        RetryWhenSubscriber<T> subscriber = new RetryWhenSubscriber<>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","date":"2019-12-28 03:01:34","endLine":64,"groupId":"102932","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(Subscriber<?superT>s)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f4/129d7be810cd583ce589881eec618b8302c028.src","preCode":"    public void subscribeActual(Subscriber<? super T> s) {\n        SerializedSubscriber<T> z = new SerializedSubscriber<T>(s);\n\n        FlowableProcessor<Throwable> processor = UnicastProcessor.<Throwable>create(8).toSerialized();\n\n        Publisher<?> when;\n\n        try {\n            when = Objects.requireNonNull(handler.apply(processor), \"handler returned a null Publisher\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptySubscription.error(ex, s);\n            return;\n        }\n\n        WhenReceiver<T, Throwable> receiver = new WhenReceiver<T, Throwable>(source);\n\n        RetryWhenSubscriber<T> subscriber = new RetryWhenSubscriber<T>(z, processor, receiver);\n\n        receiver.subscriber = subscriber;\n\n        s.onSubscribe(subscriber);\n\n        when.subscribe(receiver);\n\n        receiver.onNext(0);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRetryWhen.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
