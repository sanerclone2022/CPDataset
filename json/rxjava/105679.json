[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void badOuterSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    observer.onError(new TestException(\"First\"));\n                    observer.onError(new TestException(\"Second\"));\n                }\n            }\n            .join(Observable.just(2),\n                    Functions.justFunction(Observable.never()),\n                    Functions.justFunction(Observable.never()),\n                    new BiFunction<Integer, Integer, Integer>() {\n                        @Override\n                        public Integer apply(Integer a, Integer b) throws Exception {\n                            return a + b;\n                        }\n                })\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":411,"groupId":"2695","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"badOuterSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f1/0e62016d55039ad385ad228cec420932590c46.src","preCode":"    public void badOuterSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    observer.onError(new TestException(\"First\"));\n                    observer.onError(new TestException(\"Second\"));\n                }\n            }\n            .join(Observable.just(2),\n                    Functions.justFunction(Observable.never()),\n                    Functions.justFunction(Observable.never()),\n                    new BiFunction<Integer, Integer, Integer>() {\n                        @Override\n                        public Integer apply(Integer a, Integer b) throws Exception {\n                            return a + b;\n                        }\n                })\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableJoinTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void dispose() {\n        TestHelper.checkDisposed(PublishProcessor.<Integer>create().join(Flowable.just(1),\n                Functions.justFunction(Flowable.never()),\n                Functions.justFunction(Flowable.never()), new BiFunction<Integer, Integer, Integer>() {\n                    @Override\n                    public Integer apply(Integer a, Integer b) throws Exception {\n                        return a + b;\n                    }\n                }));\n    }\n","date":"2019-08-16 20:51:17","endLine":322,"groupId":"2695","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"dispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7c/33df579cf071cbc848507971d1040142e41cab.src","preCode":"    public void dispose() {\n        TestHelper.checkDisposed(PublishProcessor.<Integer>create().join(Flowable.just(1),\n                Functions.justFunction(Flowable.never()),\n                Functions.justFunction(Flowable.never()), new BiFunction<Integer, Integer, Integer>() {\n                    @Override\n                    public Integer apply(Integer a, Integer b) throws Exception {\n                        return a + b;\n                    }\n                }));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableJoinTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void badOuterSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposable.empty());\n                    observer.onError(new TestException(\"First\"));\n                    observer.onError(new TestException(\"Second\"));\n                }\n            }\n            .join(Observable.just(2),\n                    Functions.justFunction(Observable.never()),\n                    Functions.justFunction(Observable.never()),\n                    new BiFunction<Integer, Integer, Integer>() {\n                        @Override\n                        public Integer apply(Integer a, Integer b) throws Exception {\n                            return a + b;\n                        }\n                })\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-20 02:39:40","endLine":411,"groupId":"105679","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"badOuterSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/aa/1736102640bee55ef43f7205f32a65e8a64ece.src","preCode":"    public void badOuterSource() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            new Observable<Integer>() {\n                @Override\n                protected void subscribeActual(Observer<? super Integer> observer) {\n                    observer.onSubscribe(Disposables.empty());\n                    observer.onError(new TestException(\"First\"));\n                    observer.onError(new TestException(\"Second\"));\n                }\n            }\n            .join(Observable.just(2),\n                    Functions.justFunction(Observable.never()),\n                    Functions.justFunction(Observable.never()),\n                    new BiFunction<Integer, Integer, Integer>() {\n                        @Override\n                        public Integer apply(Integer a, Integer b) throws Exception {\n                            return a + b;\n                        }\n                })\n            .to(TestHelper.<Integer>testConsumer())\n            .assertFailureAndMessage(TestException.class, \"First\");\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class, \"Second\");\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableJoinTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void dispose() {\n        TestHelper.checkDisposed(PublishProcessor.<Integer>create().join(Flowable.just(1),\n                Functions.justFunction(Flowable.never()),\n                Functions.justFunction(Flowable.never()), new BiFunction<Integer, Integer, Integer>() {\n                    @Override\n                    public Integer apply(Integer a, Integer b) throws Exception {\n                        return a + b;\n                    }\n                }));\n    }\n","date":"2019-08-16 20:51:17","endLine":322,"groupId":"105679","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"dispose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7c/33df579cf071cbc848507971d1040142e41cab.src","preCode":"    public void dispose() {\n        TestHelper.checkDisposed(PublishProcessor.<Integer>create().join(Flowable.just(1),\n                Functions.justFunction(Flowable.never()),\n                Functions.justFunction(Flowable.never()), new BiFunction<Integer, Integer, Integer>() {\n                    @Override\n                    public Integer apply(Integer a, Integer b) throws Exception {\n                        return a + b;\n                    }\n                }));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableJoinTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
