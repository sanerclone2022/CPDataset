[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void toMultimapWithError() {\n        Observable<String> source = Observable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","date":"2019-08-16 20:51:17","endLine":442,"groupId":"4944","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toMultimapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ef/7f0feec496d4a8d48727d333132df6b0748ee3.src","preCode":"    public void toMultimapWithError() {\n        Observable<String> source = Observable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToMultimapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void toMultimapWithError() {\n        Flowable<String> source = Flowable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","date":"2019-08-16 20:51:17","endLine":442,"groupId":"4944","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toMultimapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/24/13ed6afeea678b917d9515d756c7f66ed3adfd.src","preCode":"    public void toMultimapWithError() {\n        Flowable<String> source = Flowable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToMultimapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void toMultimapWithError() {\n        Observable<String> source = Observable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","date":"2019-08-16 20:51:17","endLine":442,"groupId":"4944","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toMultimapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ef/7f0feec496d4a8d48727d333132df6b0748ee3.src","preCode":"    public void toMultimapWithError() {\n        Observable<String> source = Observable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToMultimapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void toMultimapWithError() {\n        Flowable<String> source = Flowable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","date":"2019-12-22 18:39:23","endLine":442,"groupId":"1135","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toMultimapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/06/e71d6beb3e0e2f136e986c932bf708597149a9.src","preCode":"    public void toMultimapWithError() {\n        Flowable<String> source = Flowable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToMultimapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void toMultimapWithError() {\n        Observable<String> source = Observable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","date":"2019-12-22 18:59:44","endLine":442,"groupId":"105740","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toMultimapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/08/53b0acadd1cde2149783007bf2ee2cbffda8b9.src","preCode":"    public void toMultimapWithError() {\n        Observable<String> source = Observable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableToMultimapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void toMultimapWithError() {\n        Flowable<String> source = Flowable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","date":"2019-12-22 18:39:23","endLine":442,"groupId":"105740","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toMultimapWithError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/06/e71d6beb3e0e2f136e986c932bf708597149a9.src","preCode":"    public void toMultimapWithError() {\n        Flowable<String> source = Flowable.just(\"a\", \"b\", \"cc\", \"dd\");\n\n        Function<String, Integer> lengthFuncErr = new Function<String, Integer>() {\n            @Override\n            public Integer apply(String t1) {\n                if (\"b\".equals(t1)) {\n                    throw new RuntimeException(\"Forced Failure\");\n                }\n                return t1.length();\n            }\n        };\n\n        Single<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFuncErr);\n\n        Map<Integer, Collection<String>> expected = new HashMap<>();\n        expected.put(1, Arrays.asList(\"a\", \"b\"));\n        expected.put(2, Arrays.asList(\"cc\", \"dd\"));\n\n        mapped.subscribe(singleObserver);\n\n        verify(singleObserver, times(1)).onError(any(Throwable.class));\n        verify(singleObserver, never()).onSuccess(expected);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableToMultimapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
