[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void createConsumerThrows() {\n        Single.create(new SingleOnSubscribe<Object>() {\n            @Override\n            public void subscribe(SingleEmitter<Object> s) throws Exception {\n                try {\n                    s.onSuccess(1);\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n            }\n        })\n        .subscribe(new SingleObserver<Object>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":189,"groupId":"12228","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumerThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/98/c0a6790371653ebfbac614de848bfe1ace5b56.src","preCode":"    public void createConsumerThrows() {\n        Single.create(new SingleOnSubscribe<Object>() {\n            @Override\n            public void subscribe(SingleEmitter<Object> s) throws Exception {\n                try {\n                    s.onSuccess(1);\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n            }\n        })\n        .subscribe(new SingleObserver<Object>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleCreateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void createConsumerThrowsResourceOnError() {\n        Single.create(new SingleOnSubscribe<Object>() {\n            @Override\n            public void subscribe(SingleEmitter<Object> s) throws Exception {\n                Disposable d = Disposables.empty();\n                s.setDisposable(d);\n                try {\n                    s.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(d.isDisposed());\n            }\n        })\n        .subscribe(new SingleObserver<Object>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":287,"groupId":"5000","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumerThrowsResourceOnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/98/c0a6790371653ebfbac614de848bfe1ace5b56.src","preCode":"    public void createConsumerThrowsResourceOnError() {\n        Single.create(new SingleOnSubscribe<Object>() {\n            @Override\n            public void subscribe(SingleEmitter<Object> s) throws Exception {\n                Disposable d = Disposables.empty();\n                s.setDisposable(d);\n                try {\n                    s.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(d.isDisposed());\n            }\n        })\n        .subscribe(new SingleObserver<Object>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleCreateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void createConsumerThrows() {\n        Single.create(new SingleOnSubscribe<Object>() {\n            @Override\n            public void subscribe(SingleEmitter<Object> s) throws Exception {\n                try {\n                    s.onSuccess(1);\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n            }\n        })\n        .subscribe(new SingleObserver<Object>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":189,"groupId":"10774","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumerThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/98/c0a6790371653ebfbac614de848bfe1ace5b56.src","preCode":"    public void createConsumerThrows() {\n        Single.create(new SingleOnSubscribe<Object>() {\n            @Override\n            public void subscribe(SingleEmitter<Object> s) throws Exception {\n                try {\n                    s.onSuccess(1);\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n            }\n        })\n        .subscribe(new SingleObserver<Object>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleCreateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void createConsumerThrowsResourceOnError() {\n        Single.create(new SingleOnSubscribe<Object>() {\n            @Override\n            public void subscribe(SingleEmitter<Object> s) throws Exception {\n                Disposable d = Disposable.empty();\n                s.setDisposable(d);\n                try {\n                    s.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(d.isDisposed());\n            }\n        })\n        .subscribe(new SingleObserver<Object>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n        });\n    }\n","date":"2019-12-20 02:39:40","endLine":287,"groupId":"10774","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumerThrowsResourceOnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/48/9744b7087ce38dbda1730c0a513dc9c1afdf47.src","preCode":"    public void createConsumerThrowsResourceOnError() {\n        Single.create(new SingleOnSubscribe<Object>() {\n            @Override\n            public void subscribe(SingleEmitter<Object> s) throws Exception {\n                Disposable d = Disposables.empty();\n                s.setDisposable(d);\n                try {\n                    s.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(d.isDisposed());\n            }\n        })\n        .subscribe(new SingleObserver<Object>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/single/SingleCreateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
