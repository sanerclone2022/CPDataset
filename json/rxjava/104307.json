[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void flatMapMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Observable<Integer> source = Observable.range(1, 10)\n        .flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return composer(Observable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, m);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        source.subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        Set<Integer> expected = new HashSet<Integer>(Arrays.asList(\n                10, 11, 20, 21, 30, 31, 40, 41, 50, 51, 60, 61, 70, 71, 80, 81, 90, 91, 100, 101\n        ));\n        Assert.assertEquals(expected.size(), to.values().size());\n        Assert.assertTrue(expected.containsAll(to.values()));\n    }\n","date":"2019-08-16 20:51:17","endLine":352,"groupId":"12394","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"flatMapMaxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cf/31f26c3a1aecce24678eb1752dabfa676d5d76.src","preCode":"    public void flatMapMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Observable<Integer> source = Observable.range(1, 10)\n        .flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return composer(Observable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, m);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        source.subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        Set<Integer> expected = new HashSet<Integer>(Arrays.asList(\n                10, 11, 20, 21, 30, 31, 40, 41, 50, 51, 60, 61, 70, 71, 80, 81, 90, 91, 100, 101\n        ));\n        Assert.assertEquals(expected.size(), to.values().size());\n        Assert.assertTrue(expected.containsAll(to.values()));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void flatMapSelectorMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Flowable<Integer> source = Flowable.range(1, 10)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return composer(Flowable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, new BiFunction<Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 * 1000 + t2;\n            }\n        }, m);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        source.subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        Set<Integer> expected = new HashSet<Integer>(Arrays.asList(\n                1010, 1011, 2020, 2021, 3030, 3031, 4040, 4041, 5050, 5051,\n                6060, 6061, 7070, 7071, 8080, 8081, 9090, 9091, 10100, 10101\n        ));\n        Assert.assertEquals(expected.size(), ts.values().size());\n        System.out.println(\"--> testFlatMapSelectorMaxConcurrent: \" + ts.values());\n        Assert.assertTrue(expected.containsAll(ts.values()));\n    }\n","date":"2019-08-16 20:51:17","endLine":390,"groupId":"7524","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapSelectorMaxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/48/3d92062ab3c06726b978bb2ce9773ac0842cbc.src","preCode":"    public void flatMapSelectorMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Flowable<Integer> source = Flowable.range(1, 10)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return composer(Flowable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, new BiFunction<Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 * 1000 + t2;\n            }\n        }, m);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        source.subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        Set<Integer> expected = new HashSet<Integer>(Arrays.asList(\n                1010, 1011, 2020, 2021, 3030, 3031, 4040, 4041, 5050, 5051,\n                6060, 6061, 7070, 7071, 8080, 8081, 9090, 9091, 10100, 10101\n        ));\n        Assert.assertEquals(expected.size(), ts.values().size());\n        System.out.println(\"--> testFlatMapSelectorMaxConcurrent: \" + ts.values());\n        Assert.assertTrue(expected.containsAll(ts.values()));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void flatMapMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Observable<Integer> source = Observable.range(1, 10)\n        .flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return composer(Observable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, m);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        source.subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        Set<Integer> expected = new HashSet<Integer>(Arrays.asList(\n                10, 11, 20, 21, 30, 31, 40, 41, 50, 51, 60, 61, 70, 71, 80, 81, 90, 91, 100, 101\n        ));\n        Assert.assertEquals(expected.size(), to.values().size());\n        Assert.assertTrue(expected.containsAll(to.values()));\n    }\n","date":"2019-08-16 20:51:17","endLine":352,"groupId":"12394","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"flatMapMaxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/cf/31f26c3a1aecce24678eb1752dabfa676d5d76.src","preCode":"    public void flatMapMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Observable<Integer> source = Observable.range(1, 10)\n        .flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return composer(Observable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, m);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        source.subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        Set<Integer> expected = new HashSet<Integer>(Arrays.asList(\n                10, 11, 20, 21, 30, 31, 40, 41, 50, 51, 60, 61, 70, 71, 80, 81, 90, 91, 100, 101\n        ));\n        Assert.assertEquals(expected.size(), to.values().size());\n        Assert.assertTrue(expected.containsAll(to.values()));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void flatMapSelectorMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Flowable<Integer> source = Flowable.range(1, 10)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return composer(Flowable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, new BiFunction<Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 * 1000 + t2;\n            }\n        }, m);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        source.subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        Set<Integer> expected = new HashSet<>(Arrays.asList(\n                1010, 1011, 2020, 2021, 3030, 3031, 4040, 4041, 5050, 5051,\n                6060, 6061, 7070, 7071, 8080, 8081, 9090, 9091, 10100, 10101\n        ));\n        Assert.assertEquals(expected.size(), ts.values().size());\n        System.out.println(\"--> testFlatMapSelectorMaxConcurrent: \" + ts.values());\n        Assert.assertTrue(expected.containsAll(ts.values()));\n    }\n","date":"2019-12-22 18:39:23","endLine":390,"groupId":"6648","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapSelectorMaxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/06/8f652db0609596493a6b998b494f4b3705bd3d.src","preCode":"    public void flatMapSelectorMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Flowable<Integer> source = Flowable.range(1, 10)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return composer(Flowable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, new BiFunction<Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 * 1000 + t2;\n            }\n        }, m);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        source.subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        Set<Integer> expected = new HashSet<Integer>(Arrays.asList(\n                1010, 1011, 2020, 2021, 3030, 3031, 4040, 4041, 5050, 5051,\n                6060, 6061, 7070, 7071, 8080, 8081, 9090, 9091, 10100, 10101\n        ));\n        Assert.assertEquals(expected.size(), ts.values().size());\n        System.out.println(\"--> testFlatMapSelectorMaxConcurrent: \" + ts.values());\n        Assert.assertTrue(expected.containsAll(ts.values()));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void flatMapMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Observable<Integer> source = Observable.range(1, 10)\n        .flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return composer(Observable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, m);\n\n        TestObserver<Integer> to = new TestObserver<>();\n\n        source.subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        Set<Integer> expected = new HashSet<>(Arrays.asList(\n                10, 11, 20, 21, 30, 31, 40, 41, 50, 51, 60, 61, 70, 71, 80, 81, 90, 91, 100, 101\n        ));\n        Assert.assertEquals(expected.size(), to.values().size());\n        Assert.assertTrue(expected.containsAll(to.values()));\n    }\n","date":"2019-12-22 18:59:44","endLine":352,"groupId":"104307","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"flatMapMaxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/00/f2523a332da7473bd33e1a028269c8cac6b424.src","preCode":"    public void flatMapMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Observable<Integer> source = Observable.range(1, 10)\n        .flatMap(new Function<Integer, Observable<Integer>>() {\n            @Override\n            public Observable<Integer> apply(Integer t1) {\n                return composer(Observable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, m);\n\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        source.subscribe(to);\n\n        to.awaitDone(5, TimeUnit.SECONDS);\n        to.assertNoErrors();\n        Set<Integer> expected = new HashSet<Integer>(Arrays.asList(\n                10, 11, 20, 21, 30, 31, 40, 41, 50, 51, 60, 61, 70, 71, 80, 81, 90, 91, 100, 101\n        ));\n        Assert.assertEquals(expected.size(), to.values().size());\n        Assert.assertTrue(expected.containsAll(to.values()));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void flatMapSelectorMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Flowable<Integer> source = Flowable.range(1, 10)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return composer(Flowable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, new BiFunction<Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 * 1000 + t2;\n            }\n        }, m);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        source.subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        Set<Integer> expected = new HashSet<>(Arrays.asList(\n                1010, 1011, 2020, 2021, 3030, 3031, 4040, 4041, 5050, 5051,\n                6060, 6061, 7070, 7071, 8080, 8081, 9090, 9091, 10100, 10101\n        ));\n        Assert.assertEquals(expected.size(), ts.values().size());\n        System.out.println(\"--> testFlatMapSelectorMaxConcurrent: \" + ts.values());\n        Assert.assertTrue(expected.containsAll(ts.values()));\n    }\n","date":"2019-12-22 18:39:23","endLine":390,"groupId":"104307","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"flatMapSelectorMaxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/06/8f652db0609596493a6b998b494f4b3705bd3d.src","preCode":"    public void flatMapSelectorMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Flowable<Integer> source = Flowable.range(1, 10)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return composer(Flowable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, new BiFunction<Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 * 1000 + t2;\n            }\n        }, m);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n\n        source.subscribe(ts);\n\n        ts.awaitDone(5, TimeUnit.SECONDS);\n        ts.assertNoErrors();\n        Set<Integer> expected = new HashSet<>(Arrays.asList(\n                1010, 1011, 2020, 2021, 3030, 3031, 4040, 4041, 5050, 5051,\n                6060, 6061, 7070, 7071, 8080, 8081, 9090, 9091, 10100, 10101\n        ));\n        Assert.assertEquals(expected.size(), ts.values().size());\n        System.out.println(\"--> testFlatMapSelectorMaxConcurrent: \" + ts.values());\n        Assert.assertTrue(expected.containsAll(ts.values()));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFlatMapTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
