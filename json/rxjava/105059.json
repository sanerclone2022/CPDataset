[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void syncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<Integer>(QueueFuseable.SYNC);\n\n        Observable.range(1, 5)\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","date":"2019-08-16 20:51:17","endLine":210,"groupId":"2744","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"syncFusedConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f5/f2e8feb69b4ca5f7cdd655fa84816335cd33c9.src","preCode":"    public void syncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<Integer>(QueueFuseable.SYNC);\n\n        Observable.range(1, 5)\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void asyncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<Integer>(QueueFuseable.ASYNC);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        up\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","date":"2019-08-16 20:51:17","endLine":244,"groupId":"903","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncFusedConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f5/f2e8feb69b4ca5f7cdd655fa84816335cd33c9.src","preCode":"    public void asyncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<Integer>(QueueFuseable.ASYNC);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        up\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:59:44","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void syncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<>(QueueFuseable.SYNC);\n\n        Observable.range(1, 5)\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","date":"2019-12-22 18:59:44","endLine":210,"groupId":"2744","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"syncFusedConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5b/6cd18987a94451952f40dcdd2d277c476e1b5d.src","preCode":"    public void syncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<Integer>(QueueFuseable.SYNC);\n\n        Observable.range(1, 5)\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void asyncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<>(QueueFuseable.ASYNC);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        up\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","date":"2019-12-22 18:59:44","endLine":244,"groupId":"903","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncFusedConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5b/6cd18987a94451952f40dcdd2d277c476e1b5d.src","preCode":"    public void asyncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<Integer>(QueueFuseable.ASYNC);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        up\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-26 20:33:30","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void syncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<>(QueueFuseable.SYNC);\n\n        Observable.range(1, 5)\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","date":"2019-12-22 18:59:44","endLine":210,"groupId":"105059","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"syncFusedConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5b/6cd18987a94451952f40dcdd2d277c476e1b5d.src","preCode":"    public void syncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<>(QueueFuseable.SYNC);\n\n        Observable.range(1, 5)\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"N"},{"authorDate":"2019-12-26 20:33:30","commitOrder":3,"curCode":"    public void asyncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<>(QueueFuseable.ASYNC);\n\n        UnicastSubject<Integer> us = UnicastSubject.create();\n\n        TestHelper.emit(us, 1, 2, 3, 4, 5);\n\n        us\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","date":"2019-12-26 20:33:30","endLine":244,"groupId":"105059","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncFusedConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/41/1989a0f19f681fcde4bcd571cb9935ba2e6c58.src","preCode":"    public void asyncFusedConditional() {\n        TestObserverEx<Integer> to0 = new TestObserverEx<>(QueueFuseable.ASYNC);\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        up\n        .doAfterNext(afterNext)\n        .filter(Functions.alwaysTrue())\n        .subscribe(to0);\n\n        to0.assertFusionMode(QueueFuseable.ASYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(Arrays.asList(-1, -2, -3, -4, -5), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoAfterNextTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"af17c6e268d0e2fe4675feb46c19a29227cb135b","commitMessage":"@@@3.x: [Java 8] Add Observable operators + cleanup (#6797)\n\n","date":"2019-12-26 20:33:30","modifiedFileCount":"19","status":"M","submitter":"David Karnok"}]
