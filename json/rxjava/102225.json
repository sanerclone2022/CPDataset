[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribe() {\n        final AtomicBoolean isUnsubscribed = new AtomicBoolean();\n        Observable.switchOnNext(\n                Observable.unsafeCreate(new ObservableSource<Observable<Integer>>() {\n                    @Override\n                    public void subscribe(final Observer<? super Observable<Integer>> observer) {\n                        Disposable bs = Disposables.empty();\n                        observer.onSubscribe(bs);\n                        observer.onNext(Observable.just(1));\n                        isUnsubscribed.set(bs.isDisposed());\n                    }\n                })\n        ).take(1).subscribe();\n        assertTrue(\"Switch doesn't propagate 'unsubscribe'\", isUnsubscribed.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":446,"groupId":"4544","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/da/dabeeea333224355dd83e4bbb36c28484b4352.src","preCode":"    public void unsubscribe() {\n        final AtomicBoolean isUnsubscribed = new AtomicBoolean();\n        Observable.switchOnNext(\n                Observable.unsafeCreate(new ObservableSource<Observable<Integer>>() {\n                    @Override\n                    public void subscribe(final Observer<? super Observable<Integer>> observer) {\n                        Disposable bs = Disposables.empty();\n                        observer.onSubscribe(bs);\n                        observer.onNext(Observable.just(1));\n                        isUnsubscribed.set(bs.isDisposed());\n                    }\n                })\n        ).take(1).subscribe();\n        assertTrue(\"Switch doesn't propagate 'unsubscribe'\", isUnsubscribed.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void unsubscribe() {\n        final AtomicBoolean isUnsubscribed = new AtomicBoolean();\n        Flowable.switchOnNext(\n                Flowable.unsafeCreate(new Publisher<Flowable<Integer>>() {\n                    @Override\n                    public void subscribe(final Subscriber<? super Flowable<Integer>> subscriber) {\n                        BooleanSubscription bs = new BooleanSubscription();\n                        subscriber.onSubscribe(bs);\n                        subscriber.onNext(Flowable.just(1));\n                        isUnsubscribed.set(bs.isCancelled());\n                    }\n                })\n        ).take(1).subscribe();\n        assertTrue(\"Switch doesn't propagate 'unsubscribe'\", isUnsubscribed.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":506,"groupId":"618","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/832135991c0e343b95e1644ae803d91a62f3e6.src","preCode":"    public void unsubscribe() {\n        final AtomicBoolean isUnsubscribed = new AtomicBoolean();\n        Flowable.switchOnNext(\n                Flowable.unsafeCreate(new Publisher<Flowable<Integer>>() {\n                    @Override\n                    public void subscribe(final Subscriber<? super Flowable<Integer>> subscriber) {\n                        BooleanSubscription bs = new BooleanSubscription();\n                        subscriber.onSubscribe(bs);\n                        subscriber.onNext(Flowable.just(1));\n                        isUnsubscribed.set(bs.isCancelled());\n                    }\n                })\n        ).take(1).subscribe();\n        assertTrue(\"Switch doesn't propagate 'unsubscribe'\", isUnsubscribed.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void unsubscribe() {\n        final AtomicBoolean isUnsubscribed = new AtomicBoolean();\n        Observable.switchOnNext(\n                Observable.unsafeCreate(new ObservableSource<Observable<Integer>>() {\n                    @Override\n                    public void subscribe(final Observer<? super Observable<Integer>> observer) {\n                        Disposable bs = Disposable.empty();\n                        observer.onSubscribe(bs);\n                        observer.onNext(Observable.just(1));\n                        isUnsubscribed.set(bs.isDisposed());\n                    }\n                })\n        ).take(1).subscribe();\n        assertTrue(\"Switch doesn't propagate 'unsubscribe'\", isUnsubscribed.get());\n    }\n","date":"2019-12-20 02:39:40","endLine":446,"groupId":"102225","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5e/b40104fc91e81826d46af4c53c83ff608a7600.src","preCode":"    public void unsubscribe() {\n        final AtomicBoolean isUnsubscribed = new AtomicBoolean();\n        Observable.switchOnNext(\n                Observable.unsafeCreate(new ObservableSource<Observable<Integer>>() {\n                    @Override\n                    public void subscribe(final Observer<? super Observable<Integer>> observer) {\n                        Disposable bs = Disposables.empty();\n                        observer.onSubscribe(bs);\n                        observer.onNext(Observable.just(1));\n                        isUnsubscribed.set(bs.isDisposed());\n                    }\n                })\n        ).take(1).subscribe();\n        assertTrue(\"Switch doesn't propagate 'unsubscribe'\", isUnsubscribed.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void unsubscribe() {\n        final AtomicBoolean isUnsubscribed = new AtomicBoolean();\n        Flowable.switchOnNext(\n                Flowable.unsafeCreate(new Publisher<Flowable<Integer>>() {\n                    @Override\n                    public void subscribe(final Subscriber<? super Flowable<Integer>> subscriber) {\n                        BooleanSubscription bs = new BooleanSubscription();\n                        subscriber.onSubscribe(bs);\n                        subscriber.onNext(Flowable.just(1));\n                        isUnsubscribed.set(bs.isCancelled());\n                    }\n                })\n        ).take(1).subscribe();\n        assertTrue(\"Switch doesn't propagate 'unsubscribe'\", isUnsubscribed.get());\n    }\n","date":"2019-08-16 20:51:17","endLine":506,"groupId":"102225","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/fa/832135991c0e343b95e1644ae803d91a62f3e6.src","preCode":"    public void unsubscribe() {\n        final AtomicBoolean isUnsubscribed = new AtomicBoolean();\n        Flowable.switchOnNext(\n                Flowable.unsafeCreate(new Publisher<Flowable<Integer>>() {\n                    @Override\n                    public void subscribe(final Subscriber<? super Flowable<Integer>> subscriber) {\n                        BooleanSubscription bs = new BooleanSubscription();\n                        subscriber.onSubscribe(bs);\n                        subscriber.onNext(Flowable.just(1));\n                        isUnsubscribed.set(bs.isCancelled());\n                    }\n                })\n        ).take(1).subscribe();\n        assertTrue(\"Switch doesn't propagate 'unsubscribe'\", isUnsubscribed.get());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableSwitchTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
