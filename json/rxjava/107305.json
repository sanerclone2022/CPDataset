[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void offer() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(to) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n\n            @Override\n            protected boolean beforeDownstream() {\n                return false;\n            }\n        };\n\n        o.onSubscribe(Disposables.disposed());\n\n        to.assertNotSubscribed();\n\n        o.offer(1);\n    }\n","date":"2019-08-16 20:51:17","endLine":56,"groupId":"8734","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"offer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c6/2f59f831f898b7d2d90d44123f04141590ea88.src","preCode":"    public void offer() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(to) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n\n            @Override\n            protected boolean beforeDownstream() {\n                return false;\n            }\n        };\n\n        o.onSubscribe(Disposables.disposed());\n\n        to.assertNotSubscribed();\n\n        o.offer(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/BasicFuseableObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void offer2() {\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(new TestObserver<Integer>()) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n        };\n\n        o.offer(1, 2);\n    }\n","date":"2019-08-16 20:51:17","endLine":78,"groupId":"9888","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"offer2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c6/2f59f831f898b7d2d90d44123f04141590ea88.src","preCode":"    public void offer2() {\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(new TestObserver<Integer>()) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n        };\n\n        o.offer(1, 2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/BasicFuseableObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void offer() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(to) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n\n            @Override\n            protected boolean beforeDownstream() {\n                return false;\n            }\n        };\n\n        o.onSubscribe(Disposable.disposed());\n\n        to.assertNotSubscribed();\n\n        o.offer(1);\n    }\n","date":"2019-12-20 02:39:40","endLine":56,"groupId":"8734","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"offer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a6/3283b938002b66de4c7d8624b94403024e541e.src","preCode":"    public void offer() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(to) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n\n            @Override\n            protected boolean beforeDownstream() {\n                return false;\n            }\n        };\n\n        o.onSubscribe(Disposables.disposed());\n\n        to.assertNotSubscribed();\n\n        o.offer(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/BasicFuseableObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void offer2() {\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(new TestObserver<Integer>()) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n        };\n\n        o.offer(1, 2);\n    }\n","date":"2019-08-16 20:51:17","endLine":78,"groupId":"9888","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"offer2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c6/2f59f831f898b7d2d90d44123f04141590ea88.src","preCode":"    public void offer2() {\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(new TestObserver<Integer>()) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n        };\n\n        o.offer(1, 2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/BasicFuseableObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 19:17:23","codes":[{"authorDate":"2019-12-22 19:17:23","commitOrder":3,"curCode":"    public void offer() {\n        TestObserverEx<Integer> to = new TestObserverEx<>();\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(to) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n\n            @Override\n            protected boolean beforeDownstream() {\n                return false;\n            }\n        };\n\n        o.onSubscribe(Disposable.disposed());\n\n        to.assertNotSubscribed();\n\n        o.offer(1);\n    }\n","date":"2019-12-22 19:17:23","endLine":56,"groupId":"107305","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"offer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/64ea6a4741eda509601e5ba85186564c06f285.src","preCode":"    public void offer() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>();\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(to) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n\n            @Override\n            protected boolean beforeDownstream() {\n                return false;\n            }\n        };\n\n        o.onSubscribe(Disposable.disposed());\n\n        to.assertNotSubscribed();\n\n        o.offer(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/BasicFuseableObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"M"},{"authorDate":"2019-12-22 19:17:23","commitOrder":3,"curCode":"    public void offer2() {\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(new TestObserver<>()) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n        };\n\n        o.offer(1, 2);\n    }\n","date":"2019-12-22 19:17:23","endLine":78,"groupId":"107305","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"offer2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/17/64ea6a4741eda509601e5ba85186564c06f285.src","preCode":"    public void offer2() {\n        BasicFuseableObserver<Integer, Integer> o = new BasicFuseableObserver<Integer, Integer>(new TestObserver<Integer>()) {\n            @Nullable\n            @Override\n            public Integer poll() throws Exception {\n                return null;\n            }\n\n            @Override\n            public int requestFusion(int mode) {\n                return 0;\n            }\n\n            @Override\n            public void onNext(Integer value) {\n            }\n        };\n\n        o.offer(1, 2);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/observers/BasicFuseableObserverTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"75da4b504a52466b455a49a342747514fa0dffab","commitMessage":"@@@Diamond operators in tests (#6788)\n\n* diamond operators in unit tests.  small packages in internal/\n\n* diamond operators in unit tests.  small packages in internal/operators\n","date":"2019-12-22 19:17:23","modifiedFileCount":"92","status":"M","submitter":"Dmitry Volkov"}]
