[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void fused() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","date":"2019-08-16 20:51:17","endLine":500,"groupId":"5773","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fused","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/42/05fad5e2a3a3cc4786e8c6126d08d297969f6a.src","preCode":"    public void fused() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void fusedAsyncConditional2() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up.hide()\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","date":"2019-08-16 20:51:17","endLine":694,"groupId":"3009","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedAsyncConditional2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/42/05fad5e2a3a3cc4786e8c6126d08d297969f6a.src","preCode":"    public void fusedAsyncConditional2() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up.hide()\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":663,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:59:44","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void fused() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","date":"2019-12-22 18:59:44","endLine":500,"groupId":"5773","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fused","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/04/82d23906d2b67cb52f557e5424a89f4fce6bd6.src","preCode":"    public void fused() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"},{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void fusedAsyncConditional2() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up.hide()\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","date":"2019-12-22 18:59:44","endLine":694,"groupId":"3009","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedAsyncConditional2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/04/82d23906d2b67cb52f557e5424a89f4fce6bd6.src","preCode":"    public void fusedAsyncConditional2() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up.hide()\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":663,"status":"M"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-26 20:33:30","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void fused() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","date":"2019-12-22 18:59:44","endLine":500,"groupId":"105083","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fused","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/04/82d23906d2b67cb52f557e5424a89f4fce6bd6.src","preCode":"    public void fused() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        Observable.range(1, 5)\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .subscribe(to);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.SYNC)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"N"},{"authorDate":"2019-12-26 20:33:30","commitOrder":3,"curCode":"    public void fusedAsyncConditional2() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        UnicastSubject<Integer> us = UnicastSubject.create();\n\n        us.hide()\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(to);\n\n        TestHelper.emit(us, 1, 2, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","date":"2019-12-26 20:33:30","endLine":694,"groupId":"105083","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fusedAsyncConditional2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6b/8627b02bcdfa513442fe8934836eb718fde9a1.src","preCode":"    public void fusedAsyncConditional2() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ANY);\n\n        final int[] call = { 0, 0 };\n\n        UnicastSubject<Integer> up = UnicastSubject.create();\n\n        up.hide()\n        .doOnNext(new Consumer<Integer>() {\n            @Override\n            public void accept(Integer v) throws Exception {\n                call[0]++;\n            }\n        })\n        .doOnComplete(new Action() {\n            @Override\n            public void run() throws Exception {\n                call[1]++;\n            }\n        })\n        .filter(Functions.alwaysTrue())\n        .subscribe(to);\n\n        TestHelper.emit(up, 1, 2, 3, 4, 5);\n\n        to.assertFuseable()\n        .assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3, 4, 5);\n\n        assertEquals(5, call[0]);\n        assertEquals(1, call[1]);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDoOnEachTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":663,"status":"M"}],"commitId":"af17c6e268d0e2fe4675feb46c19a29227cb135b","commitMessage":"@@@3.x: [Java 8] Add Observable operators + cleanup (#6797)\n\n","date":"2019-12-26 20:33:30","modifiedFileCount":"19","status":"M","submitter":"David Karnok"}]
