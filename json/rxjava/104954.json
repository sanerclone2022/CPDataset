[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsObservable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1)) \r\n                    .toObservable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":105,"groupId":"11850","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"collectorFailureDoesNotResultInTwoErrorEmissionsObservable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e3/1a2299becfca4d7528e69d6b32d0baf1881b84.src","preCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsObservable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1)) \r\n                    .toObservable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsFlowable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1))\n                    .toFlowable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":129,"groupId":"11850","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"collectorFailureDoesNotResultInTwoErrorEmissionsFlowable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f0/f93c6453be569455685e54ebc71b53f28922f6.src","preCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsFlowable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1))\n                    .toFlowable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsObservable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1)) \r\n                    .toObservable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":105,"groupId":"11850","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"collectorFailureDoesNotResultInTwoErrorEmissionsObservable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d2/8bd20e97ffb2058a19b22c7dcbf8c2ee40d769.src","preCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsObservable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1)) \r\n                    .toObservable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsFlowable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1))\n                    .toFlowable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":129,"groupId":"11850","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"collectorFailureDoesNotResultInTwoErrorEmissionsFlowable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/f0/f93c6453be569455685e54ebc71b53f28922f6.src","preCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsFlowable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1))\n                    .toFlowable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsObservable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1)) \r\n                    .toObservable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":105,"groupId":"104954","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"collectorFailureDoesNotResultInTwoErrorEmissionsObservable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d2/8bd20e97ffb2058a19b22c7dcbf8c2ee40d769.src","preCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsObservable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1)) \r\n                    .toObservable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2019-12-22 19:17:37","commitOrder":3,"curCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsFlowable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1))\n                    .toFlowable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 19:17:37","endLine":129,"groupId":"104954","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"collectorFailureDoesNotResultInTwoErrorEmissionsFlowable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ae/3cd0c906ee3c32eb7570d5cca6aaf2a1cc0932.src","preCode":"    public void collectorFailureDoesNotResultInTwoErrorEmissionsFlowable() {\n        try {\n            final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();\n            RxJavaPlugins.setErrorHandler(addToList(list));\n            final RuntimeException e1 = new RuntimeException();\n            final RuntimeException e2 = new RuntimeException();\n\n            Burst.items(1).error(e2) \r\n                    .collect(supplierListCreator(), biConsumerThrows(e1))\n                    .toFlowable()\n                    .test() \r\n                    .assertError(e1) \r\n                    .assertNotComplete();\n\n            assertEquals(1, list.size());\n            assertEquals(e2, list.get(0).getCause());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/flowable/FlowableCollectTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
