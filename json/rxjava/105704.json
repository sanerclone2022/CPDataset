[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Observable<String>> os = new ArrayList<Observable<String>>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<SubscriptionCheckObservable>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Observable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Observable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<String>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":87,"groupId":"9384","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"maxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/32fbe229df2d5372684750fb39ecee938fa04b.src","preCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Observable<String>> os = new ArrayList<Observable<String>>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<SubscriptionCheckObservable>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Observable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Observable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<String>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Flowable<String>> os = new ArrayList<Flowable<String>>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<SubscriptionCheckObservable>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Flowable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Flowable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<String>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":79,"groupId":"9384","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"maxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/97/9c29a9aaf174c698a663ae5cacc38106c200d2.src","preCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Flowable<String>> os = new ArrayList<Flowable<String>>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<SubscriptionCheckObservable>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Flowable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Flowable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<String>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Observable<String>> os = new ArrayList<Observable<String>>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<SubscriptionCheckObservable>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Observable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Observable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<String>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":87,"groupId":"9384","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"maxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/32fbe229df2d5372684750fb39ecee938fa04b.src","preCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Observable<String>> os = new ArrayList<Observable<String>>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<SubscriptionCheckObservable>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Observable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Observable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<String>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Flowable<String>> os = new ArrayList<>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Flowable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Flowable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":79,"groupId":"5291","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"maxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b2/582430bb1463c17501e63d778bf627c08deb88.src","preCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Flowable<String>> os = new ArrayList<Flowable<String>>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<SubscriptionCheckObservable>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Flowable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Flowable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<String>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Observable<String>> os = new ArrayList<>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Observable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Observable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":87,"groupId":"105704","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"maxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9a/b92edc123cfccf24a7e22c7125605ace1a9802.src","preCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Observable<String>> os = new ArrayList<Observable<String>>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<SubscriptionCheckObservable>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Observable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Observable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<String>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Flowable<String>> os = new ArrayList<>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Flowable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Flowable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":79,"groupId":"105704","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"maxConcurrent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b2/582430bb1463c17501e63d778bf627c08deb88.src","preCode":"    public void maxConcurrent() {\n        for (int times = 0; times < 100; times++) {\n            int observableCount = 100;\n            \r\n            int maxConcurrent = 2 + (times % 10);\n            AtomicInteger subscriptionCount = new AtomicInteger(0);\n\n            List<Flowable<String>> os = new ArrayList<>();\n            List<SubscriptionCheckObservable> scos = new ArrayList<>();\n            for (int i = 0; i < observableCount; i++) {\n                SubscriptionCheckObservable sco = new SubscriptionCheckObservable(subscriptionCount, maxConcurrent);\n                scos.add(sco);\n                os.add(Flowable.unsafeCreate(sco));\n            }\n\n            Iterator<String> iter = Flowable.merge(os, maxConcurrent).blockingIterable().iterator();\n            List<String> actual = new ArrayList<>();\n            while (iter.hasNext()) {\n                actual.add(iter.next());\n            }\n            \r\n            assertEquals(5 * observableCount, actual.size());\n            for (SubscriptionCheckObservable sco : scos) {\n                assertFalse(sco.failed);\n            }\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
