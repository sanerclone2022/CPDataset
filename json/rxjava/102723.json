[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        ObservableCache<Long> cached = new ObservableCache<Long>(source, 16);\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserver<Long>> list = new ArrayList<TestObserver<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserver<Long> to = new TestObserver<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserver<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":193,"groupId":"10094","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/695b24d6133813eaa07a9d45cfe4cfd749bddb.src","preCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        ObservableCache<Long> cached = new ObservableCache<Long>(source, 16);\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserver<Long>> list = new ArrayList<TestObserver<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserver<Long> to = new TestObserver<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserver<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        FlowableCache<Long> cached = new FlowableCache<Long>(source, 16);\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestSubscriber<Long>> list = new ArrayList<TestSubscriber<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriber<Long> ts = new TestSubscriber<Long>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriber<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":218,"groupId":"7987","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e1/3ef40f0c2da677c5b1d3fe7668be98c1ce70a1.src","preCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        FlowableCache<Long> cached = new FlowableCache<Long>(source, 16);\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestSubscriber<Long>> list = new ArrayList<TestSubscriber<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriber<Long> ts = new TestSubscriber<Long>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriber<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        ObservableCache<Long> cached = new ObservableCache<Long>(source, 16);\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserver<Long>> list = new ArrayList<TestObserver<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserver<Long> to = new TestObserver<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserver<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":193,"groupId":"10094","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/695b24d6133813eaa07a9d45cfe4cfd749bddb.src","preCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        ObservableCache<Long> cached = new ObservableCache<Long>(source, 16);\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserver<Long>> list = new ArrayList<TestObserver<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserver<Long> to = new TestObserver<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserver<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        FlowableCache<Long> cached = new FlowableCache<>(source, 16);\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestSubscriber<Long>> list = new ArrayList<>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriber<Long> ts = new TestSubscriber<>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriber<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":218,"groupId":"6790","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a3/170558897b418294fe8fef3b42e141698efe77.src","preCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        FlowableCache<Long> cached = new FlowableCache<Long>(source, 16);\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestSubscriber<Long>> list = new ArrayList<TestSubscriber<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriber<Long> ts = new TestSubscriber<Long>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriber<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        ObservableCache<Long> cached = new ObservableCache<>(source, 16);\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserver<Long>> list = new ArrayList<>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserver<Long> to = new TestObserver<>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserver<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-12-22 18:59:44","endLine":193,"groupId":"102723","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8f/4440e41b9f2174f562b4cd7ccfeaaa570468fc.src","preCode":"    public void asyncComeAndGo() {\n        Observable<Long> source = Observable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        ObservableCache<Long> cached = new ObservableCache<Long>(source, 16);\n\n        Observable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestObserver<Long>> list = new ArrayList<TestObserver<Long>>(100);\n        for (int i = 0; i < 100; i++) {\n            TestObserver<Long> to = new TestObserver<Long>();\n            list.add(to);\n            output.skip(i * 10).take(10).subscribe(to);\n        }\n\n        List<Long> expected = new ArrayList<Long>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestObserver<Long> to : list) {\n            to.awaitDone(3, TimeUnit.SECONDS);\n            to.assertNoErrors();\n            to.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            to.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        FlowableCache<Long> cached = new FlowableCache<>(source, 16);\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestSubscriber<Long>> list = new ArrayList<>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriber<Long> ts = new TestSubscriber<>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriber<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":218,"groupId":"102723","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"asyncComeAndGo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a3/170558897b418294fe8fef3b42e141698efe77.src","preCode":"    public void asyncComeAndGo() {\n        Flowable<Long> source = Flowable.interval(1, 1, TimeUnit.MILLISECONDS)\n                .take(1000)\n                .subscribeOn(Schedulers.io());\n        FlowableCache<Long> cached = new FlowableCache<>(source, 16);\n\n        Flowable<Long> output = cached.observeOn(Schedulers.computation());\n\n        List<TestSubscriber<Long>> list = new ArrayList<>(100);\n        for (int i = 0; i < 100; i++) {\n            TestSubscriber<Long> ts = new TestSubscriber<>();\n            list.add(ts);\n            output.skip(i * 10).take(10).subscribe(ts);\n        }\n\n        List<Long> expected = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            expected.add((long)(i - 10));\n        }\n        int j = 0;\n        for (TestSubscriber<Long> ts : list) {\n            ts.awaitDone(3, TimeUnit.SECONDS);\n            ts.assertNoErrors();\n            ts.assertComplete();\n\n            for (int i = j * 10; i < j * 10 + 10; i++) {\n                expected.set(i - j * 10, (long)i);\n            }\n\n            ts.assertValueSequence(expected);\n\n            j++;\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableCacheTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
