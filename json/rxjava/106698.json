[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Observable<Object>> observables = Collections.emptyList();\n\n        Observable<Object> o = Observable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestObserver<Object> to = new TestObserver<Object>();\n        o.subscribe(to);\n        to.awaitDone(200, TimeUnit.MILLISECONDS);\n        to.assertNoValues();\n    }\n","date":"2019-08-16 20:51:17","endLine":947,"groupId":"1708","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startEmptyList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/9840cbc7c7812d8ee108dd9a4c3715b6377080.src","preCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Observable<Object>> observables = Collections.emptyList();\n\n        Observable<Object> o = Observable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestObserver<Object> to = new TestObserver<Object>();\n        o.subscribe(to);\n        to.awaitDone(200, TimeUnit.MILLISECONDS);\n        to.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Flowable<Object>> observables = Collections.emptyList();\n\n        Flowable<Object> f = Flowable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        f.subscribe(ts);\n        ts.awaitDone(200, TimeUnit.MILLISECONDS);\n        ts.assertNoValues();\n    }\n","date":"2019-08-16 20:51:17","endLine":949,"groupId":"10451","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startEmptyList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7a/a44b75348b67c5b5b9dadfe159d380003d1562.src","preCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Flowable<Object>> observables = Collections.emptyList();\n\n        Flowable<Object> f = Flowable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        f.subscribe(ts);\n        ts.awaitDone(200, TimeUnit.MILLISECONDS);\n        ts.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":932,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Observable<Object>> observables = Collections.emptyList();\n\n        Observable<Object> o = Observable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestObserver<Object> to = new TestObserver<Object>();\n        o.subscribe(to);\n        to.awaitDone(200, TimeUnit.MILLISECONDS);\n        to.assertNoValues();\n    }\n","date":"2019-08-16 20:51:17","endLine":947,"groupId":"1708","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startEmptyList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/9840cbc7c7812d8ee108dd9a4c3715b6377080.src","preCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Observable<Object>> observables = Collections.emptyList();\n\n        Observable<Object> o = Observable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestObserver<Object> to = new TestObserver<Object>();\n        o.subscribe(to);\n        to.awaitDone(200, TimeUnit.MILLISECONDS);\n        to.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Flowable<Object>> observables = Collections.emptyList();\n\n        Flowable<Object> f = Flowable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestSubscriber<Object> ts = new TestSubscriber<>();\n        f.subscribe(ts);\n        ts.awaitDone(200, TimeUnit.MILLISECONDS);\n        ts.assertNoValues();\n    }\n","date":"2019-12-22 18:39:23","endLine":949,"groupId":"10451","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"startEmptyList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/0b3908c9313d06737a2cbb475d4e8a048f0aac.src","preCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Flowable<Object>> observables = Collections.emptyList();\n\n        Flowable<Object> f = Flowable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestSubscriber<Object> ts = new TestSubscriber<Object>();\n        f.subscribe(ts);\n        ts.awaitDone(200, TimeUnit.MILLISECONDS);\n        ts.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":932,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Observable<Object>> observables = Collections.emptyList();\n\n        Observable<Object> o = Observable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestObserver<Object> to = new TestObserver<>();\n        o.subscribe(to);\n        to.awaitDone(200, TimeUnit.MILLISECONDS);\n        to.assertNoValues();\n    }\n","date":"2019-12-22 18:59:44","endLine":947,"groupId":"106698","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startEmptyList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d8/c153a2859031c697469b6942be9605fc4ed33c.src","preCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Observable<Object>> observables = Collections.emptyList();\n\n        Observable<Object> o = Observable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestObserver<Object> to = new TestObserver<Object>();\n        o.subscribe(to);\n        to.awaitDone(200, TimeUnit.MILLISECONDS);\n        to.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Flowable<Object>> observables = Collections.emptyList();\n\n        Flowable<Object> f = Flowable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestSubscriber<Object> ts = new TestSubscriber<>();\n        f.subscribe(ts);\n        ts.awaitDone(200, TimeUnit.MILLISECONDS);\n        ts.assertNoValues();\n    }\n","date":"2019-12-22 18:39:23","endLine":949,"groupId":"106698","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"startEmptyList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/0b3908c9313d06737a2cbb475d4e8a048f0aac.src","preCode":"    public void startEmptyList() {\n\n        final Object invoked = new Object();\n        Collection<Flowable<Object>> observables = Collections.emptyList();\n\n        Flowable<Object> f = Flowable.zip(observables, new Function<Object[], Object>() {\n            @Override\n            public Object apply(final Object[] args) {\n                assertEquals(\"No argument should have been passed\", 0, args.length);\n                return invoked;\n            }\n        });\n\n        TestSubscriber<Object> ts = new TestSubscriber<>();\n        f.subscribe(ts);\n        ts.awaitDone(200, TimeUnit.MILLISECONDS);\n        ts.assertNoValues();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableZipTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":932,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
