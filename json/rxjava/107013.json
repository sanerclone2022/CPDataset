[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onErrorThrows() {\n        Maybe.create(new MaybeOnSubscribe<Object>() {\n            @Override\n            public void subscribe(MaybeEmitter<Object> e) throws Exception {\n                Disposable d = Disposables.empty();\n                e.setDisposable(d);\n\n                try {\n                    e.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(d.isDisposed());\n                assertTrue(e.isDisposed());\n            }\n        }).subscribe(new MaybeObserver<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":159,"groupId":"10506","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onErrorThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b9/ffc12ee8bef38ac70e83b16b8205d20581c373.src","preCode":"    public void onErrorThrows() {\n        Maybe.create(new MaybeOnSubscribe<Object>() {\n            @Override\n            public void subscribe(MaybeEmitter<Object> e) throws Exception {\n                Disposable d = Disposables.empty();\n                e.setDisposable(d);\n\n                try {\n                    e.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(d.isDisposed());\n                assertTrue(e.isDisposed());\n            }\n        }).subscribe(new MaybeObserver<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeCreateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void onErrorThrows2() {\n        Maybe.create(new MaybeOnSubscribe<Object>() {\n            @Override\n            public void subscribe(MaybeEmitter<Object> e) throws Exception {\n                try {\n                    e.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(e.isDisposed());\n            }\n        }).subscribe(new MaybeObserver<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":277,"groupId":"1282","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onErrorThrows2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b9/ffc12ee8bef38ac70e83b16b8205d20581c373.src","preCode":"    public void onErrorThrows2() {\n        Maybe.create(new MaybeOnSubscribe<Object>() {\n            @Override\n            public void subscribe(MaybeEmitter<Object> e) throws Exception {\n                try {\n                    e.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(e.isDisposed());\n            }\n        }).subscribe(new MaybeObserver<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeCreateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void onErrorThrows() {\n        Maybe.create(new MaybeOnSubscribe<Object>() {\n            @Override\n            public void subscribe(MaybeEmitter<Object> e) throws Exception {\n                Disposable d = Disposable.empty();\n                e.setDisposable(d);\n\n                try {\n                    e.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(d.isDisposed());\n                assertTrue(e.isDisposed());\n            }\n        }).subscribe(new MaybeObserver<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n    }\n","date":"2019-12-20 02:39:40","endLine":159,"groupId":"107013","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onErrorThrows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b0/857c432fcf2137ff38fd7a0e10adbbff6b2ec3.src","preCode":"    public void onErrorThrows() {\n        Maybe.create(new MaybeOnSubscribe<Object>() {\n            @Override\n            public void subscribe(MaybeEmitter<Object> e) throws Exception {\n                Disposable d = Disposables.empty();\n                e.setDisposable(d);\n\n                try {\n                    e.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(d.isDisposed());\n                assertTrue(e.isDisposed());\n            }\n        }).subscribe(new MaybeObserver<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeCreateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void onErrorThrows2() {\n        Maybe.create(new MaybeOnSubscribe<Object>() {\n            @Override\n            public void subscribe(MaybeEmitter<Object> e) throws Exception {\n                try {\n                    e.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(e.isDisposed());\n            }\n        }).subscribe(new MaybeObserver<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":277,"groupId":"107013","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onErrorThrows2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b9/ffc12ee8bef38ac70e83b16b8205d20581c373.src","preCode":"    public void onErrorThrows2() {\n        Maybe.create(new MaybeOnSubscribe<Object>() {\n            @Override\n            public void subscribe(MaybeEmitter<Object> e) throws Exception {\n                try {\n                    e.onError(new IOException());\n                    fail(\"Should have thrown\");\n                } catch (TestException ex) {\n                    \r\n                }\n\n                assertTrue(e.isDisposed());\n            }\n        }).subscribe(new MaybeObserver<Object>() {\n\n            @Override\n            public void onSubscribe(Disposable d) {\n\n            }\n\n            @Override\n            public void onSuccess(Object value) {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                throw new TestException();\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeCreateTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
