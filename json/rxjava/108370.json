[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void initialCrash() {\n        Flowable.range(1, 5)\n        .parallel()\n        .reduce(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                throw new TestException();\n            }\n        }, new BiFunction<List<Integer>, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n                return a;\n            }\n        })\n        .sequential()\n        .test()\n        .assertFailure(TestException.class);\n    }\n","date":"2019-08-16 20:51:17","endLine":69,"groupId":"2764","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initialCrash","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/61/ef50c1f60a599f43996a2f50e1f727babd155a.src","preCode":"    public void initialCrash() {\n        Flowable.range(1, 5)\n        .parallel()\n        .reduce(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                throw new TestException();\n            }\n        }, new BiFunction<List<Integer>, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n                return a;\n            }\n        })\n        .sequential()\n        .test()\n        .assertFailure(TestException.class);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelReduceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void error() {\n        Flowable.<Integer>error(new TestException())\n        .parallel()\n        .reduce(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<Integer>();\n            }\n        }, new BiFunction<List<Integer>, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n                return a;\n            }\n        })\n        .sequential()\n        .test()\n        .assertFailure(TestException.class);\n    }\n","date":"2019-08-16 20:51:17","endLine":144,"groupId":"2765","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"error","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/61/ef50c1f60a599f43996a2f50e1f727babd155a.src","preCode":"    public void error() {\n        Flowable.<Integer>error(new TestException())\n        .parallel()\n        .reduce(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<Integer>();\n            }\n        }, new BiFunction<List<Integer>, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n                return a;\n            }\n        })\n        .sequential()\n        .test()\n        .assertFailure(TestException.class);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelReduceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 19:17:37","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void initialCrash() {\n        Flowable.range(1, 5)\n        .parallel()\n        .reduce(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                throw new TestException();\n            }\n        }, new BiFunction<List<Integer>, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n                return a;\n            }\n        })\n        .sequential()\n        .test()\n        .assertFailure(TestException.class);\n    }\n","date":"2019-08-16 20:51:17","endLine":69,"groupId":"108370","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initialCrash","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/61/ef50c1f60a599f43996a2f50e1f727babd155a.src","preCode":"    public void initialCrash() {\n        Flowable.range(1, 5)\n        .parallel()\n        .reduce(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                throw new TestException();\n            }\n        }, new BiFunction<List<Integer>, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n                return a;\n            }\n        })\n        .sequential()\n        .test()\n        .assertFailure(TestException.class);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelReduceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2019-12-22 19:17:37","commitOrder":2,"curCode":"    public void error() {\n        Flowable.<Integer>error(new TestException())\n        .parallel()\n        .reduce(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<>();\n            }\n        }, new BiFunction<List<Integer>, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n                return a;\n            }\n        })\n        .sequential()\n        .test()\n        .assertFailure(TestException.class);\n    }\n","date":"2019-12-22 19:17:37","endLine":144,"groupId":"108370","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"error","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/aa/c8c0af62c74d4855cf4fd4a6c66752ba2804b6.src","preCode":"    public void error() {\n        Flowable.<Integer>error(new TestException())\n        .parallel()\n        .reduce(new Supplier<List<Integer>>() {\n            @Override\n            public List<Integer> get() throws Exception {\n                return new ArrayList<Integer>();\n            }\n        }, new BiFunction<List<Integer>, Integer, List<Integer>>() {\n            @Override\n            public List<Integer> apply(List<Integer> a, Integer b) throws Exception {\n                a.add(b);\n                return a;\n            }\n        })\n        .sequential()\n        .test()\n        .assertFailure(TestException.class);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/parallel/ParallelReduceTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8","commitMessage":"@@@diamond operators in unit tests.  small packages (#6789)\n\n","date":"2019-12-22 19:17:37","modifiedFileCount":"106","status":"M","submitter":"Dmitry Volkov"}]
