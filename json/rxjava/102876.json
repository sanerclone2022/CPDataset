[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupedEventStream() throws Throwable {\n\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicInteger subscribeCounter = new AtomicInteger();\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final int count = 100;\n        final int groupCount = 2;\n\n        Observable<Event> es = Observable.unsafeCreate(new ObservableSource<Event>() {\n\n            @Override\n            public void subscribe(final Observer<? super Event> observer) {\n                observer.onSubscribe(Disposables.empty());\n                System.out.println(\"*** Subscribing to EventStream ***\");\n                subscribeCounter.incrementAndGet();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        for (int i = 0; i < count; i++) {\n                            Event e = new Event();\n                            e.source = i % groupCount;\n                            e.message = \"Event-\" + i;\n                            observer.onNext(e);\n                        }\n                        observer.onComplete();\n                    }\n\n                }).start();\n            }\n\n        });\n\n        es.groupBy(new Function<Event, Integer>() {\n\n            @Override\n            public Integer apply(Event e) {\n                return e.source;\n            }\n        }).flatMap(new Function<GroupedObservable<Integer, Event>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(GroupedObservable<Integer, Event> eventGroupedObservable) {\n                System.out.println(\"GroupedObservable Key: \" + eventGroupedObservable.getKey());\n                groupCounter.incrementAndGet();\n\n                return eventGroupedObservable.map(new Function<Event, String>() {\n\n                    @Override\n                    public String apply(Event event) {\n                        return \"Source: \" + event.source + \"  Message: \" + event.message;\n                    }\n                });\n\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(String outputMessage) {\n                System.out.println(outputMessage);\n                eventCounter.incrementAndGet();\n            }\n        });\n\n        latch.await(5000, TimeUnit.MILLISECONDS);\n        assertEquals(1, subscribeCounter.get());\n        assertEquals(groupCount, groupCounter.get());\n        assertEquals(count, eventCounter.get());\n\n    }\n","date":"2019-08-16 20:51:17","endLine":259,"groupId":"11495","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"groupedEventStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void groupedEventStream() throws Throwable {\n\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicInteger subscribeCounter = new AtomicInteger();\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final int count = 100;\n        final int groupCount = 2;\n\n        Observable<Event> es = Observable.unsafeCreate(new ObservableSource<Event>() {\n\n            @Override\n            public void subscribe(final Observer<? super Event> observer) {\n                observer.onSubscribe(Disposables.empty());\n                System.out.println(\"*** Subscribing to EventStream ***\");\n                subscribeCounter.incrementAndGet();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        for (int i = 0; i < count; i++) {\n                            Event e = new Event();\n                            e.source = i % groupCount;\n                            e.message = \"Event-\" + i;\n                            observer.onNext(e);\n                        }\n                        observer.onComplete();\n                    }\n\n                }).start();\n            }\n\n        });\n\n        es.groupBy(new Function<Event, Integer>() {\n\n            @Override\n            public Integer apply(Event e) {\n                return e.source;\n            }\n        }).flatMap(new Function<GroupedObservable<Integer, Event>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(GroupedObservable<Integer, Event> eventGroupedObservable) {\n                System.out.println(\"GroupedObservable Key: \" + eventGroupedObservable.getKey());\n                groupCounter.incrementAndGet();\n\n                return eventGroupedObservable.map(new Function<Event, String>() {\n\n                    @Override\n                    public String apply(Event event) {\n                        return \"Source: \" + event.source + \"  Message: \" + event.message;\n                    }\n                });\n\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(String outputMessage) {\n                System.out.println(outputMessage);\n                eventCounter.incrementAndGet();\n            }\n        });\n\n        latch.await(5000, TimeUnit.MILLISECONDS);\n        assertEquals(1, subscribeCounter.get());\n        assertEquals(groupCount, groupCounter.get());\n        assertEquals(count, eventCounter.get());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupedEventStream() throws Throwable {\n\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicInteger subscribeCounter = new AtomicInteger();\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final int count = 100;\n        final int groupCount = 2;\n\n        Flowable<Event> es = Flowable.unsafeCreate(new Publisher<Event>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Event> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                System.out.println(\"*** Subscribing to EventStream ***\");\n                subscribeCounter.incrementAndGet();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        for (int i = 0; i < count; i++) {\n                            Event e = new Event();\n                            e.source = i % groupCount;\n                            e.message = \"Event-\" + i;\n                            subscriber.onNext(e);\n                        }\n                        subscriber.onComplete();\n                    }\n\n                }).start();\n            }\n\n        });\n\n        es.groupBy(new Function<Event, Integer>() {\n\n            @Override\n            public Integer apply(Event e) {\n                return e.source;\n            }\n        }).flatMap(new Function<GroupedFlowable<Integer, Event>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(GroupedFlowable<Integer, Event> eventGroupedFlowable) {\n                System.out.println(\"GroupedFlowable Key: \" + eventGroupedFlowable.getKey());\n                groupCounter.incrementAndGet();\n\n                return eventGroupedFlowable.map(new Function<Event, String>() {\n\n                    @Override\n                    public String apply(Event event) {\n                        return \"Source: \" + event.source + \"  Message: \" + event.message;\n                    }\n                });\n\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(String outputMessage) {\n                System.out.println(outputMessage);\n                eventCounter.incrementAndGet();\n            }\n        });\n\n        latch.await(5000, TimeUnit.MILLISECONDS);\n        assertEquals(1, subscribeCounter.get());\n        assertEquals(groupCount, groupCounter.get());\n        assertEquals(count, eventCounter.get());\n\n    }\n","date":"2019-08-16 20:51:17","endLine":266,"groupId":"11495","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"groupedEventStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void groupedEventStream() throws Throwable {\n\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicInteger subscribeCounter = new AtomicInteger();\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final int count = 100;\n        final int groupCount = 2;\n\n        Flowable<Event> es = Flowable.unsafeCreate(new Publisher<Event>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Event> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                System.out.println(\"*** Subscribing to EventStream ***\");\n                subscribeCounter.incrementAndGet();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        for (int i = 0; i < count; i++) {\n                            Event e = new Event();\n                            e.source = i % groupCount;\n                            e.message = \"Event-\" + i;\n                            subscriber.onNext(e);\n                        }\n                        subscriber.onComplete();\n                    }\n\n                }).start();\n            }\n\n        });\n\n        es.groupBy(new Function<Event, Integer>() {\n\n            @Override\n            public Integer apply(Event e) {\n                return e.source;\n            }\n        }).flatMap(new Function<GroupedFlowable<Integer, Event>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(GroupedFlowable<Integer, Event> eventGroupedFlowable) {\n                System.out.println(\"GroupedFlowable Key: \" + eventGroupedFlowable.getKey());\n                groupCounter.incrementAndGet();\n\n                return eventGroupedFlowable.map(new Function<Event, String>() {\n\n                    @Override\n                    public String apply(Event event) {\n                        return \"Source: \" + event.source + \"  Message: \" + event.message;\n                    }\n                });\n\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(String outputMessage) {\n                System.out.println(outputMessage);\n                eventCounter.incrementAndGet();\n            }\n        });\n\n        latch.await(5000, TimeUnit.MILLISECONDS);\n        assertEquals(1, subscribeCounter.get());\n        assertEquals(groupCount, groupCounter.get());\n        assertEquals(count, eventCounter.get());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void groupedEventStream() throws Throwable {\n\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicInteger subscribeCounter = new AtomicInteger();\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final int count = 100;\n        final int groupCount = 2;\n\n        Observable<Event> es = Observable.unsafeCreate(new ObservableSource<Event>() {\n\n            @Override\n            public void subscribe(final Observer<? super Event> observer) {\n                observer.onSubscribe(Disposable.empty());\n                System.out.println(\"*** Subscribing to EventStream ***\");\n                subscribeCounter.incrementAndGet();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        for (int i = 0; i < count; i++) {\n                            Event e = new Event();\n                            e.source = i % groupCount;\n                            e.message = \"Event-\" + i;\n                            observer.onNext(e);\n                        }\n                        observer.onComplete();\n                    }\n\n                }).start();\n            }\n\n        });\n\n        es.groupBy(new Function<Event, Integer>() {\n\n            @Override\n            public Integer apply(Event e) {\n                return e.source;\n            }\n        }).flatMap(new Function<GroupedObservable<Integer, Event>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(GroupedObservable<Integer, Event> eventGroupedObservable) {\n                System.out.println(\"GroupedObservable Key: \" + eventGroupedObservable.getKey());\n                groupCounter.incrementAndGet();\n\n                return eventGroupedObservable.map(new Function<Event, String>() {\n\n                    @Override\n                    public String apply(Event event) {\n                        return \"Source: \" + event.source + \"  Message: \" + event.message;\n                    }\n                });\n\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(String outputMessage) {\n                System.out.println(outputMessage);\n                eventCounter.incrementAndGet();\n            }\n        });\n\n        latch.await(5000, TimeUnit.MILLISECONDS);\n        assertEquals(1, subscribeCounter.get());\n        assertEquals(groupCount, groupCounter.get());\n        assertEquals(count, eventCounter.get());\n\n    }\n","date":"2019-12-20 02:39:40","endLine":259,"groupId":"102876","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"groupedEventStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1e/af76cda815824554eb565ba74f759a34755749.src","preCode":"    public void groupedEventStream() throws Throwable {\n\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicInteger subscribeCounter = new AtomicInteger();\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final int count = 100;\n        final int groupCount = 2;\n\n        Observable<Event> es = Observable.unsafeCreate(new ObservableSource<Event>() {\n\n            @Override\n            public void subscribe(final Observer<? super Event> observer) {\n                observer.onSubscribe(Disposables.empty());\n                System.out.println(\"*** Subscribing to EventStream ***\");\n                subscribeCounter.incrementAndGet();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        for (int i = 0; i < count; i++) {\n                            Event e = new Event();\n                            e.source = i % groupCount;\n                            e.message = \"Event-\" + i;\n                            observer.onNext(e);\n                        }\n                        observer.onComplete();\n                    }\n\n                }).start();\n            }\n\n        });\n\n        es.groupBy(new Function<Event, Integer>() {\n\n            @Override\n            public Integer apply(Event e) {\n                return e.source;\n            }\n        }).flatMap(new Function<GroupedObservable<Integer, Event>, Observable<String>>() {\n\n            @Override\n            public Observable<String> apply(GroupedObservable<Integer, Event> eventGroupedObservable) {\n                System.out.println(\"GroupedObservable Key: \" + eventGroupedObservable.getKey());\n                groupCounter.incrementAndGet();\n\n                return eventGroupedObservable.map(new Function<Event, String>() {\n\n                    @Override\n                    public String apply(Event event) {\n                        return \"Source: \" + event.source + \"  Message: \" + event.message;\n                    }\n                });\n\n            }\n        }).subscribe(new DefaultObserver<String>() {\n\n            @Override\n            public void onComplete() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(String outputMessage) {\n                System.out.println(outputMessage);\n                eventCounter.incrementAndGet();\n            }\n        });\n\n        latch.await(5000, TimeUnit.MILLISECONDS);\n        assertEquals(1, subscribeCounter.get());\n        assertEquals(groupCount, groupCounter.get());\n        assertEquals(count, eventCounter.get());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void groupedEventStream() throws Throwable {\n\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicInteger subscribeCounter = new AtomicInteger();\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final int count = 100;\n        final int groupCount = 2;\n\n        Flowable<Event> es = Flowable.unsafeCreate(new Publisher<Event>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Event> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                System.out.println(\"*** Subscribing to EventStream ***\");\n                subscribeCounter.incrementAndGet();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        for (int i = 0; i < count; i++) {\n                            Event e = new Event();\n                            e.source = i % groupCount;\n                            e.message = \"Event-\" + i;\n                            subscriber.onNext(e);\n                        }\n                        subscriber.onComplete();\n                    }\n\n                }).start();\n            }\n\n        });\n\n        es.groupBy(new Function<Event, Integer>() {\n\n            @Override\n            public Integer apply(Event e) {\n                return e.source;\n            }\n        }).flatMap(new Function<GroupedFlowable<Integer, Event>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(GroupedFlowable<Integer, Event> eventGroupedFlowable) {\n                System.out.println(\"GroupedFlowable Key: \" + eventGroupedFlowable.getKey());\n                groupCounter.incrementAndGet();\n\n                return eventGroupedFlowable.map(new Function<Event, String>() {\n\n                    @Override\n                    public String apply(Event event) {\n                        return \"Source: \" + event.source + \"  Message: \" + event.message;\n                    }\n                });\n\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(String outputMessage) {\n                System.out.println(outputMessage);\n                eventCounter.incrementAndGet();\n            }\n        });\n\n        latch.await(5000, TimeUnit.MILLISECONDS);\n        assertEquals(1, subscribeCounter.get());\n        assertEquals(groupCount, groupCounter.get());\n        assertEquals(count, eventCounter.get());\n\n    }\n","date":"2019-08-16 20:51:17","endLine":266,"groupId":"102876","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"groupedEventStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void groupedEventStream() throws Throwable {\n\n        final AtomicInteger eventCounter = new AtomicInteger();\n        final AtomicInteger subscribeCounter = new AtomicInteger();\n        final AtomicInteger groupCounter = new AtomicInteger();\n        final CountDownLatch latch = new CountDownLatch(1);\n        final int count = 100;\n        final int groupCount = 2;\n\n        Flowable<Event> es = Flowable.unsafeCreate(new Publisher<Event>() {\n\n            @Override\n            public void subscribe(final Subscriber<? super Event> subscriber) {\n                subscriber.onSubscribe(new BooleanSubscription());\n                System.out.println(\"*** Subscribing to EventStream ***\");\n                subscribeCounter.incrementAndGet();\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        for (int i = 0; i < count; i++) {\n                            Event e = new Event();\n                            e.source = i % groupCount;\n                            e.message = \"Event-\" + i;\n                            subscriber.onNext(e);\n                        }\n                        subscriber.onComplete();\n                    }\n\n                }).start();\n            }\n\n        });\n\n        es.groupBy(new Function<Event, Integer>() {\n\n            @Override\n            public Integer apply(Event e) {\n                return e.source;\n            }\n        }).flatMap(new Function<GroupedFlowable<Integer, Event>, Flowable<String>>() {\n\n            @Override\n            public Flowable<String> apply(GroupedFlowable<Integer, Event> eventGroupedFlowable) {\n                System.out.println(\"GroupedFlowable Key: \" + eventGroupedFlowable.getKey());\n                groupCounter.incrementAndGet();\n\n                return eventGroupedFlowable.map(new Function<Event, String>() {\n\n                    @Override\n                    public String apply(Event event) {\n                        return \"Source: \" + event.source + \"  Message: \" + event.message;\n                    }\n                });\n\n            }\n        }).subscribe(new DefaultSubscriber<String>() {\n\n            @Override\n            public void onComplete() {\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(String outputMessage) {\n                System.out.println(outputMessage);\n                eventCounter.incrementAndGet();\n            }\n        });\n\n        latch.await(5000, TimeUnit.MILLISECONDS);\n        assertEquals(1, subscribeCounter.get());\n        assertEquals(groupCount, groupCounter.get());\n        assertEquals(count, eventCounter.get());\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
