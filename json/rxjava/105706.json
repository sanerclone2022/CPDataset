[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Observable<Integer>> sourceList = new ArrayList<Observable<Integer>>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Observable.just(i));\n        }\n        Iterator<Integer> it = Observable.merge(Observable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","date":"2019-08-16 20:51:17","endLine":140,"groupId":"3810","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeALotOfSourcesOneByOneSynchronously","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/32fbe229df2d5372684750fb39ecee938fa04b.src","preCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Observable<Integer>> sourceList = new ArrayList<Observable<Integer>>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Observable.just(i));\n        }\n        Iterator<Integer> it = Observable.merge(Observable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Flowable<Integer>> sourceList = new ArrayList<Flowable<Integer>>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Flowable.just(i));\n        }\n        Iterator<Integer> it = Flowable.merge(Flowable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","date":"2019-08-16 20:51:17","endLine":132,"groupId":"3810","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mergeALotOfSourcesOneByOneSynchronously","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/97/9c29a9aaf174c698a663ae5cacc38106c200d2.src","preCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Flowable<Integer>> sourceList = new ArrayList<Flowable<Integer>>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Flowable.just(i));\n        }\n        Iterator<Integer> it = Flowable.merge(Flowable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Observable<Integer>> sourceList = new ArrayList<Observable<Integer>>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Observable.just(i));\n        }\n        Iterator<Integer> it = Observable.merge(Observable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","date":"2019-08-16 20:51:17","endLine":140,"groupId":"3810","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeALotOfSourcesOneByOneSynchronously","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/81/32fbe229df2d5372684750fb39ecee938fa04b.src","preCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Observable<Integer>> sourceList = new ArrayList<Observable<Integer>>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Observable.just(i));\n        }\n        Iterator<Integer> it = Observable.merge(Observable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Flowable<Integer>> sourceList = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Flowable.just(i));\n        }\n        Iterator<Integer> it = Flowable.merge(Flowable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","date":"2019-12-22 18:39:23","endLine":132,"groupId":"3810","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mergeALotOfSourcesOneByOneSynchronously","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b2/582430bb1463c17501e63d778bf627c08deb88.src","preCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Flowable<Integer>> sourceList = new ArrayList<Flowable<Integer>>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Flowable.just(i));\n        }\n        Iterator<Integer> it = Flowable.merge(Flowable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Observable<Integer>> sourceList = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Observable.just(i));\n        }\n        Iterator<Integer> it = Observable.merge(Observable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","date":"2019-12-22 18:59:44","endLine":140,"groupId":"105706","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mergeALotOfSourcesOneByOneSynchronously","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9a/b92edc123cfccf24a7e22c7125605ace1a9802.src","preCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Observable<Integer>> sourceList = new ArrayList<Observable<Integer>>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Observable.just(i));\n        }\n        Iterator<Integer> it = Observable.merge(Observable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Flowable<Integer>> sourceList = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Flowable.just(i));\n        }\n        Iterator<Integer> it = Flowable.merge(Flowable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","date":"2019-12-22 18:39:23","endLine":132,"groupId":"105706","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mergeALotOfSourcesOneByOneSynchronously","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/b2/582430bb1463c17501e63d778bf627c08deb88.src","preCode":"    public void mergeALotOfSourcesOneByOneSynchronously() {\n        int n = 10000;\n        List<Flowable<Integer>> sourceList = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            sourceList.add(Flowable.just(i));\n        }\n        Iterator<Integer> it = Flowable.merge(Flowable.fromIterable(sourceList), 1).blockingIterable().iterator();\n        int j = 0;\n        while (it.hasNext()) {\n            assertEquals((Integer)j, it.next());\n            j++;\n        }\n        assertEquals(j, n);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableMergeMaxConcurrentTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
