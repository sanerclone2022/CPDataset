[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void overrideConnectableObservable() {\n        try {\n            RxJavaPlugins.setOnConnectableObservableAssembly(new Function<ConnectableObservable, ConnectableObservable>() {\n                @Override\n                public ConnectableObservable apply(ConnectableObservable co) throws Exception {\n                    return new ConnectableObservable() {\n\n                        @Override\n                        public void connect(Consumer connection) {\n\n                        }\n\n                        @Override\n                        public void reset() {\n                            \r\n                        }\n\n                        @SuppressWarnings(\"unchecked\")\n                        @Override\n                        protected void subscribeActual(Observer observer) {\n                            observer.onSubscribe(Disposables.empty());\n                            observer.onNext(10);\n                            observer.onComplete();\n                        }\n                    };\n                }\n            });\n\n            Observable\n            .just(1)\n            .publish()\n            .autoConnect()\n            .test()\n            .assertResult(10);\n\n        } finally {\n            RxJavaPlugins.reset();\n        }\n\n        Observable\n        .just(1)\n        .publish()\n        .autoConnect()\n        .test()\n        .assertResult(1);\n    }\n","date":"2019-08-16 20:51:17","endLine":1288,"groupId":"9086","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"overrideConnectableObservable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/cd3799ff46a7acb5222ebeda0875ed21bcc99f.src","preCode":"    public void overrideConnectableObservable() {\n        try {\n            RxJavaPlugins.setOnConnectableObservableAssembly(new Function<ConnectableObservable, ConnectableObservable>() {\n                @Override\n                public ConnectableObservable apply(ConnectableObservable co) throws Exception {\n                    return new ConnectableObservable() {\n\n                        @Override\n                        public void connect(Consumer connection) {\n\n                        }\n\n                        @Override\n                        public void reset() {\n                            \r\n                        }\n\n                        @SuppressWarnings(\"unchecked\")\n                        @Override\n                        protected void subscribeActual(Observer observer) {\n                            observer.onSubscribe(Disposables.empty());\n                            observer.onNext(10);\n                            observer.onComplete();\n                        }\n                    };\n                }\n            });\n\n            Observable\n            .just(1)\n            .publish()\n            .autoConnect()\n            .test()\n            .assertResult(10);\n\n        } finally {\n            RxJavaPlugins.reset();\n        }\n\n        Observable\n        .just(1)\n        .publish()\n        .autoConnect()\n        .test()\n        .assertResult(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/plugins/RxJavaPluginsTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1243,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void overrideConnectableFlowable() {\n        try {\n            RxJavaPlugins.setOnConnectableFlowableAssembly(new Function<ConnectableFlowable, ConnectableFlowable>() {\n                @Override\n                public ConnectableFlowable apply(ConnectableFlowable co) throws Exception {\n                    return new ConnectableFlowable() {\n\n                        @Override\n                        public void connect(Consumer connection) {\n\n                        }\n\n                        @Override\n                        public void reset() {\n                            \r\n                        }\n\n                        @SuppressWarnings(\"unchecked\")\n                        @Override\n                        protected void subscribeActual(Subscriber subscriber) {\n                            subscriber.onSubscribe(new ScalarSubscription(subscriber, 10));\n                        }\n                    };\n                }\n            });\n\n            Flowable\n            .just(1)\n            .publish()\n            .autoConnect()\n            .test()\n            .assertResult(10);\n\n        } finally {\n            RxJavaPlugins.reset();\n        }\n\n        Flowable\n        .just(1)\n        .publish()\n        .autoConnect()\n        .test()\n        .assertResult(1);\n    }\n","date":"2019-08-16 20:51:17","endLine":1335,"groupId":"4927","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"overrideConnectableFlowable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/cd3799ff46a7acb5222ebeda0875ed21bcc99f.src","preCode":"    public void overrideConnectableFlowable() {\n        try {\n            RxJavaPlugins.setOnConnectableFlowableAssembly(new Function<ConnectableFlowable, ConnectableFlowable>() {\n                @Override\n                public ConnectableFlowable apply(ConnectableFlowable co) throws Exception {\n                    return new ConnectableFlowable() {\n\n                        @Override\n                        public void connect(Consumer connection) {\n\n                        }\n\n                        @Override\n                        public void reset() {\n                            \r\n                        }\n\n                        @SuppressWarnings(\"unchecked\")\n                        @Override\n                        protected void subscribeActual(Subscriber subscriber) {\n                            subscriber.onSubscribe(new ScalarSubscription(subscriber, 10));\n                        }\n                    };\n                }\n            });\n\n            Flowable\n            .just(1)\n            .publish()\n            .autoConnect()\n            .test()\n            .assertResult(10);\n\n        } finally {\n            RxJavaPlugins.reset();\n        }\n\n        Flowable\n        .just(1)\n        .publish()\n        .autoConnect()\n        .test()\n        .assertResult(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/plugins/RxJavaPluginsTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1292,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void overrideConnectableObservable() {\n        try {\n            RxJavaPlugins.setOnConnectableObservableAssembly(new Function<ConnectableObservable, ConnectableObservable>() {\n                @Override\n                public ConnectableObservable apply(ConnectableObservable co) throws Exception {\n                    return new ConnectableObservable() {\n\n                        @Override\n                        public void connect(Consumer connection) {\n\n                        }\n\n                        @Override\n                        public void reset() {\n                            \r\n                        }\n\n                        @SuppressWarnings(\"unchecked\")\n                        @Override\n                        protected void subscribeActual(Observer observer) {\n                            observer.onSubscribe(Disposable.empty());\n                            observer.onNext(10);\n                            observer.onComplete();\n                        }\n                    };\n                }\n            });\n\n            Observable\n            .just(1)\n            .publish()\n            .autoConnect()\n            .test()\n            .assertResult(10);\n\n        } finally {\n            RxJavaPlugins.reset();\n        }\n\n        Observable\n        .just(1)\n        .publish()\n        .autoConnect()\n        .test()\n        .assertResult(1);\n    }\n","date":"2019-12-20 02:39:40","endLine":1289,"groupId":"10698","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"overrideConnectableObservable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/09/0ff6b7669c6d3c4176f67e14edde57f5e96291.src","preCode":"    public void overrideConnectableObservable() {\n        try {\n            RxJavaPlugins.setOnConnectableObservableAssembly(new Function<ConnectableObservable, ConnectableObservable>() {\n                @Override\n                public ConnectableObservable apply(ConnectableObservable co) throws Exception {\n                    return new ConnectableObservable() {\n\n                        @Override\n                        public void connect(Consumer connection) {\n\n                        }\n\n                        @Override\n                        public void reset() {\n                            \r\n                        }\n\n                        @SuppressWarnings(\"unchecked\")\n                        @Override\n                        protected void subscribeActual(Observer observer) {\n                            observer.onSubscribe(Disposables.empty());\n                            observer.onNext(10);\n                            observer.onComplete();\n                        }\n                    };\n                }\n            });\n\n            Observable\n            .just(1)\n            .publish()\n            .autoConnect()\n            .test()\n            .assertResult(10);\n\n        } finally {\n            RxJavaPlugins.reset();\n        }\n\n        Observable\n        .just(1)\n        .publish()\n        .autoConnect()\n        .test()\n        .assertResult(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/plugins/RxJavaPluginsTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1244,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void overrideConnectableFlowable() {\n        try {\n            RxJavaPlugins.setOnConnectableFlowableAssembly(new Function<ConnectableFlowable, ConnectableFlowable>() {\n                @Override\n                public ConnectableFlowable apply(ConnectableFlowable co) throws Exception {\n                    return new ConnectableFlowable() {\n\n                        @Override\n                        public void connect(Consumer connection) {\n\n                        }\n\n                        @Override\n                        public void reset() {\n                            \r\n                        }\n\n                        @SuppressWarnings(\"unchecked\")\n                        @Override\n                        protected void subscribeActual(Subscriber subscriber) {\n                            subscriber.onSubscribe(new ScalarSubscription(subscriber, 10));\n                        }\n                    };\n                }\n            });\n\n            Flowable\n            .just(1)\n            .publish()\n            .autoConnect()\n            .test()\n            .assertResult(10);\n\n        } finally {\n            RxJavaPlugins.reset();\n        }\n\n        Flowable\n        .just(1)\n        .publish()\n        .autoConnect()\n        .test()\n        .assertResult(1);\n    }\n","date":"2019-08-16 20:51:17","endLine":1335,"groupId":"10698","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"overrideConnectableFlowable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/cd3799ff46a7acb5222ebeda0875ed21bcc99f.src","preCode":"    public void overrideConnectableFlowable() {\n        try {\n            RxJavaPlugins.setOnConnectableFlowableAssembly(new Function<ConnectableFlowable, ConnectableFlowable>() {\n                @Override\n                public ConnectableFlowable apply(ConnectableFlowable co) throws Exception {\n                    return new ConnectableFlowable() {\n\n                        @Override\n                        public void connect(Consumer connection) {\n\n                        }\n\n                        @Override\n                        public void reset() {\n                            \r\n                        }\n\n                        @SuppressWarnings(\"unchecked\")\n                        @Override\n                        protected void subscribeActual(Subscriber subscriber) {\n                            subscriber.onSubscribe(new ScalarSubscription(subscriber, 10));\n                        }\n                    };\n                }\n            });\n\n            Flowable\n            .just(1)\n            .publish()\n            .autoConnect()\n            .test()\n            .assertResult(10);\n\n        } finally {\n            RxJavaPlugins.reset();\n        }\n\n        Flowable\n        .just(1)\n        .publish()\n        .autoConnect()\n        .test()\n        .assertResult(1);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/plugins/RxJavaPluginsTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1292,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
