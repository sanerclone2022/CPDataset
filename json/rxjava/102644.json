[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void completePassThru() {\n        Observable<Notification<Integer>> o = Observable.empty();\n        Observable<Integer> dematerialize = o.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Observer<Integer> observer = TestHelper.mockObserver();\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(observer);\n        dematerialize.subscribe(to);\n\n        System.out.println(to.errors());\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(0)).onNext(any(Integer.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":151,"groupId":"4851","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"completePassThru","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/84/a6b06b0616faa3f3c800896997b26a8c67d326.src","preCode":"    public void completePassThru() {\n        Observable<Notification<Integer>> o = Observable.empty();\n        Observable<Integer> dematerialize = o.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Observer<Integer> observer = TestHelper.mockObserver();\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(observer);\n        dematerialize.subscribe(to);\n\n        System.out.println(to.errors());\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(0)).onNext(any(Integer.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void completePassThru() {\n        Flowable<Notification<Integer>> flowable = Flowable.empty();\n        Flowable<Integer> dematerialize = flowable.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(subscriber);\n        dematerialize.subscribe(ts);\n\n        System.out.println(ts.errors());\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(0)).onNext(any(Integer.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":152,"groupId":"12643","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"completePassThru","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/75/a05cbd23ca64fb3fe24b9971559a95ec17ee9e.src","preCode":"    public void completePassThru() {\n        Flowable<Notification<Integer>> flowable = Flowable.empty();\n        Flowable<Integer> dematerialize = flowable.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(subscriber);\n        dematerialize.subscribe(ts);\n\n        System.out.println(ts.errors());\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(0)).onNext(any(Integer.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void completePassThru() {\n        Observable<Notification<Integer>> o = Observable.empty();\n        Observable<Integer> dematerialize = o.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Observer<Integer> observer = TestHelper.mockObserver();\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(observer);\n        dematerialize.subscribe(to);\n\n        System.out.println(to.errors());\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(0)).onNext(any(Integer.class));\n    }\n","date":"2019-08-16 20:51:17","endLine":151,"groupId":"4851","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"completePassThru","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/84/a6b06b0616faa3f3c800896997b26a8c67d326.src","preCode":"    public void completePassThru() {\n        Observable<Notification<Integer>> o = Observable.empty();\n        Observable<Integer> dematerialize = o.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Observer<Integer> observer = TestHelper.mockObserver();\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(observer);\n        dematerialize.subscribe(to);\n\n        System.out.println(to.errors());\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(0)).onNext(any(Integer.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void completePassThru() {\n        Flowable<Notification<Integer>> flowable = Flowable.empty();\n        Flowable<Integer> dematerialize = flowable.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(subscriber);\n        dematerialize.subscribe(ts);\n\n        System.out.println(ts.errors());\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(0)).onNext(any(Integer.class));\n    }\n","date":"2019-12-22 18:39:23","endLine":152,"groupId":"12643","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"completePassThru","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/578db5291fe3bd204b9c48327d2208f4c69373.src","preCode":"    public void completePassThru() {\n        Flowable<Notification<Integer>> flowable = Flowable.empty();\n        Flowable<Integer> dematerialize = flowable.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>(subscriber);\n        dematerialize.subscribe(ts);\n\n        System.out.println(ts.errors());\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(0)).onNext(any(Integer.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void completePassThru() {\n        Observable<Notification<Integer>> o = Observable.empty();\n        Observable<Integer> dematerialize = o.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Observer<Integer> observer = TestHelper.mockObserver();\n\n        TestObserverEx<Integer> to = new TestObserverEx<>(observer);\n        dematerialize.subscribe(to);\n\n        System.out.println(to.errors());\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(0)).onNext(any(Integer.class));\n    }\n","date":"2019-12-22 18:59:44","endLine":151,"groupId":"102644","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"completePassThru","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8c/7b6017ab445ef49c6172d66f3dbd992d234de2.src","preCode":"    public void completePassThru() {\n        Observable<Notification<Integer>> o = Observable.empty();\n        Observable<Integer> dematerialize = o.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Observer<Integer> observer = TestHelper.mockObserver();\n\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(observer);\n        dematerialize.subscribe(to);\n\n        System.out.println(to.errors());\n\n        verify(observer, never()).onError(any(Throwable.class));\n        verify(observer, times(1)).onComplete();\n        verify(observer, times(0)).onNext(any(Integer.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void completePassThru() {\n        Flowable<Notification<Integer>> flowable = Flowable.empty();\n        Flowable<Integer> dematerialize = flowable.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(subscriber);\n        dematerialize.subscribe(ts);\n\n        System.out.println(ts.errors());\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(0)).onNext(any(Integer.class));\n    }\n","date":"2019-12-22 18:39:23","endLine":152,"groupId":"102644","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"completePassThru","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d4/578db5291fe3bd204b9c48327d2208f4c69373.src","preCode":"    public void completePassThru() {\n        Flowable<Notification<Integer>> flowable = Flowable.empty();\n        Flowable<Integer> dematerialize = flowable.dematerialize(Functions.<Notification<Integer>>identity());\n\n        Subscriber<Integer> subscriber = TestHelper.mockSubscriber();\n\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<>(subscriber);\n        dematerialize.subscribe(ts);\n\n        System.out.println(ts.errors());\n\n        verify(subscriber, never()).onError(any(Throwable.class));\n        verify(subscriber, times(1)).onComplete();\n        verify(subscriber, times(0)).onNext(any(Integer.class));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableDematerializeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
