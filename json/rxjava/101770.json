[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    protected void subscribeActual(CompletableObserver observer) {\n        R resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        CompletableSource source;\n\n        try {\n            source = ObjectHelper.requireNonNull(completableFunction.apply(resource), \"The completableFunction returned a null CompletableSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<R>(observer, resource, disposer, eager));\n    }\n","date":"2019-08-16 20:51:17","endLine":84,"groupId":"3609","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(CompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ab/29ce4ae8e5afd906344e7925279766fc302729.src","preCode":"    protected void subscribeActual(CompletableObserver observer) {\n        R resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        CompletableSource source;\n\n        try {\n            source = ObjectHelper.requireNonNull(completableFunction.apply(resource), \"The completableFunction returned a null CompletableSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<R>(observer, resource, disposer, eager));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableUsing.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        D resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        MaybeSource<? extends T> source;\n\n        try {\n            source = ObjectHelper.requireNonNull(sourceSupplier.apply(resource), \"The sourceSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<T, D>(observer, resource, resourceDisposer, eager));\n    }\n","date":"2019-08-16 20:51:17","endLine":95,"groupId":"3609","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(MaybeObserver<?superT>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/8c4dda2333eba85f11760494ecd71808bc300d.src","preCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        D resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        MaybeSource<? extends T> source;\n\n        try {\n            source = ObjectHelper.requireNonNull(sourceSupplier.apply(resource), \"The sourceSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<T, D>(observer, resource, resourceDisposer, eager));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeUsing.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    protected void subscribeActual(CompletableObserver observer) {\n        R resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        CompletableSource source;\n\n        try {\n            source = Objects.requireNonNull(completableFunction.apply(resource), \"The completableFunction returned a null CompletableSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<R>(observer, resource, disposer, eager));\n    }\n","date":"2019-12-18 03:06:44","endLine":84,"groupId":"3609","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(CompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7a/4e99b3325d5644c0f00a878945f00a20da36bf.src","preCode":"    protected void subscribeActual(CompletableObserver observer) {\n        R resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        CompletableSource source;\n\n        try {\n            source = ObjectHelper.requireNonNull(completableFunction.apply(resource), \"The completableFunction returned a null CompletableSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<R>(observer, resource, disposer, eager));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableUsing.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        D resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        MaybeSource<? extends T> source;\n\n        try {\n            source = Objects.requireNonNull(sourceSupplier.apply(resource), \"The sourceSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<T, D>(observer, resource, resourceDisposer, eager));\n    }\n","date":"2019-12-18 03:06:44","endLine":95,"groupId":"3609","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(MaybeObserver<?superT>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/490d6f40f419398fd3c0d3200950fb46c787c2.src","preCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        D resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        MaybeSource<? extends T> source;\n\n        try {\n            source = ObjectHelper.requireNonNull(sourceSupplier.apply(resource), \"The sourceSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<T, D>(observer, resource, resourceDisposer, eager));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeUsing.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-12-28 03:01:34","commitOrder":3,"curCode":"    protected void subscribeActual(CompletableObserver observer) {\n        R resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        CompletableSource source;\n\n        try {\n            source = Objects.requireNonNull(completableFunction.apply(resource), \"The completableFunction returned a null CompletableSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<>(observer, resource, disposer, eager));\n    }\n","date":"2019-12-28 03:01:34","endLine":84,"groupId":"101770","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribeActual","params":"(CompletableObserverobserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/34/76a65b254555c49aa023cbf8c36172adcf11f2.src","preCode":"    protected void subscribeActual(CompletableObserver observer) {\n        R resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        CompletableSource source;\n\n        try {\n            source = Objects.requireNonNull(completableFunction.apply(resource), \"The completableFunction returned a null CompletableSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    disposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<R>(observer, resource, disposer, eager));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/completable/CompletableUsing.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2019-12-18 03:06:44","commitOrder":3,"curCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        D resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        MaybeSource<? extends T> source;\n\n        try {\n            source = Objects.requireNonNull(sourceSupplier.apply(resource), \"The sourceSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<T, D>(observer, resource, resourceDisposer, eager));\n    }\n","date":"2019-12-18 03:06:44","endLine":95,"groupId":"101770","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribeActual","params":"(MaybeObserver<?superT>observer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/490d6f40f419398fd3c0d3200950fb46c787c2.src","preCode":"    protected void subscribeActual(MaybeObserver<? super T> observer) {\n        D resource;\n\n        try {\n            resource = resourceSupplier.get();\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            EmptyDisposable.error(ex, observer);\n            return;\n        }\n\n        MaybeSource<? extends T> source;\n\n        try {\n            source = Objects.requireNonNull(sourceSupplier.apply(resource), \"The sourceSupplier returned a null MaybeSource\");\n        } catch (Throwable ex) {\n            Exceptions.throwIfFatal(ex);\n            if (eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    EmptyDisposable.error(new CompositeException(ex, exc), observer);\n                    return;\n                }\n            }\n\n            EmptyDisposable.error(ex, observer);\n\n            if (!eager) {\n                try {\n                    resourceDisposer.accept(resource);\n                } catch (Throwable exc) {\n                    Exceptions.throwIfFatal(exc);\n                    RxJavaPlugins.onError(exc);\n                }\n            }\n            return;\n        }\n\n        source.subscribe(new UsingObserver<T, D>(observer, resource, resourceDisposer, eager));\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/maybe/MaybeUsing.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"79f8e6dde6446b1aa33c146eaedbb958086daf56","commitMessage":"@@@3.x: Fix diamonds.  spelling.  unnecessary code (#6804)\n\n","date":"2019-12-28 03:01:34","modifiedFileCount":"463","status":"M","submitter":"David Karnok"}]
