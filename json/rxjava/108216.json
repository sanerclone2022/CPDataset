[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void singleDocRefersToSingleTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Single\"), \"Single\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 6 || !m.javadoc.substring(idx - 6, idx + 8).equals(\"SingleObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Observer but not using Observable\\r\\n at io.reactivex.\")\n                                .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Publisher but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Flowable but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Maybe\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Maybe\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Maybe but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" MaybeSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"MaybeSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Maybe (Maybe.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Observable but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                aOrAn(e, m, \"Single\");\n                missingClosingDD(e, m, \"Single\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Single\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":599,"groupId":"8314","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"singleDocRefersToSingleTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e8/219df148b979f62f3a4c2f1f9a2ecdbc35f104.src","preCode":"    public void singleDocRefersToSingleTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Single\"), \"Single\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 6 || !m.javadoc.substring(idx - 6, idx + 8).equals(\"SingleObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Observer but not using Observable\\r\\n at io.reactivex.\")\n                                .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Publisher but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Flowable but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Maybe\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Maybe\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Maybe but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" MaybeSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"MaybeSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Maybe (Maybe.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Observable but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                aOrAn(e, m, \"Single\");\n                missingClosingDD(e, m, \"Single\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Single\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocWording.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void completableDocRefersToCompletableTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Completable\"), \"Completable\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.\")\n                            .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 11 || !m.javadoc.substring(idx - 11, idx + 8).equals(\"CompletableObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observer but not using Observable\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Publisher but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Flowable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Flowable but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Single\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Single\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Single\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Single but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"SingleSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"SingleSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*SingleSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Observable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observable but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*ObservableSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                aOrAn(e, m, \"Completable\");\n                missingClosingDD(e, m, \"Completable\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Completable\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":787,"groupId":"2833","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"completableDocRefersToCompletableTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e8/219df148b979f62f3a4c2f1f9a2ecdbc35f104.src","preCode":"    public void completableDocRefersToCompletableTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Completable\"), \"Completable\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.\")\n                            .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 11 || !m.javadoc.substring(idx - 11, idx + 8).equals(\"CompletableObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observer but not using Observable\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Publisher but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Flowable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Flowable but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Single\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Single\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Single\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Single but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"SingleSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"SingleSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*SingleSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Observable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observable but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*ObservableSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                aOrAn(e, m, \"Completable\");\n                missingClosingDD(e, m, \"Completable\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Completable\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocWording.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":602,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-26 20:33:30","codes":[{"authorDate":"2019-12-26 20:33:30","commitOrder":2,"curCode":"    public void singleDocRefersToSingleTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Single\"), \"Single\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 6 || !m.javadoc.substring(idx - 6, idx + 8).equals(\"SingleObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Maybe\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Maybe\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Maybe but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" MaybeSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"MaybeSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Maybe.method(Maybe.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                aOrAn(e, m, \"Single\");\n                missingClosingDD(e, m, \"Single\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Single\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","date":"2019-12-26 20:33:30","endLine":599,"groupId":"8314","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"singleDocRefersToSingleTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4a/4baaf8ae6c917c33ba0fe535a16469a8ae5d53.src","preCode":"    public void singleDocRefersToSingleTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Single\"), \"Single\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 6 || !m.javadoc.substring(idx - 6, idx + 8).equals(\"SingleObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Observer but not using Observable\\r\\n at io.reactivex.\")\n                                .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Publisher but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Flowable but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Maybe\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Maybe\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Maybe but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" MaybeSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"MaybeSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Maybe (Maybe.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Observable but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.\")\n                            .append(\"Single (Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                aOrAn(e, m, \"Single\");\n                missingClosingDD(e, m, \"Single\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Single\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocWording.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"M"},{"authorDate":"2019-12-26 20:33:30","commitOrder":2,"curCode":"    public void completableDocRefersToCompletableTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Completable\"), \"Completable\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 11 || !m.javadoc.substring(idx - 11, idx + 8).equals(\"CompletableObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Flowable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Single\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Single\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Single\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Single but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"SingleSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"SingleSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*SingleSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Observable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*ObservableSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                aOrAn(e, m, \"Completable\");\n                missingClosingDD(e, m, \"Completable\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Completable\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","date":"2019-12-26 20:33:30","endLine":787,"groupId":"2833","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"completableDocRefersToCompletableTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4a/4baaf8ae6c917c33ba0fe535a16469a8ae5d53.src","preCode":"    public void completableDocRefersToCompletableTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Completable\"), \"Completable\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.\")\n                            .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.\")\n                            .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 11 || !m.javadoc.substring(idx - 11, idx + 8).equals(\"CompletableObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observer but not using Observable\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Publisher but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Flowable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Flowable but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Single\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Single\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Single\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Single but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"SingleSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"SingleSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*SingleSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Observable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observable but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*ObservableSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.\")\n                                .append(\"Completable (Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                aOrAn(e, m, \"Completable\");\n                missingClosingDD(e, m, \"Completable\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Completable\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocWording.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":602,"status":"M"}],"commitId":"af17c6e268d0e2fe4675feb46c19a29227cb135b","commitMessage":"@@@3.x: [Java 8] Add Observable operators + cleanup (#6797)\n\n","date":"2019-12-26 20:33:30","modifiedFileCount":"19","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-01 21:33:28","codes":[{"authorDate":"2019-12-26 20:33:30","commitOrder":3,"curCode":"    public void singleDocRefersToSingleTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Single\"), \"Single\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 6 || !m.javadoc.substring(idx - 6, idx + 8).equals(\"SingleObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Maybe\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Maybe\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Maybe but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" MaybeSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"MaybeSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Maybe.method(Maybe.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                aOrAn(e, m, \"Single\");\n                missingClosingDD(e, m, \"Single\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Single\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","date":"2019-12-26 20:33:30","endLine":599,"groupId":"8314","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"singleDocRefersToSingleTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4a/4baaf8ae6c917c33ba0fe535a16469a8ae5d53.src","preCode":"    public void singleDocRefersToSingleTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Single\"), \"Single\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 6 || !m.javadoc.substring(idx - 6, idx + 8).equals(\"SingleObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Maybe\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Maybe\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Maybe but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" MaybeSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"MaybeSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Maybe.method(Maybe.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                aOrAn(e, m, \"Single\");\n                missingClosingDD(e, m, \"Single\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Single\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocWording.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"N"},{"authorDate":"2020-01-01 21:33:28","commitOrder":3,"curCode":"    public void completableDocRefersToCompletableTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Completable\"), \"Completable\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 11 || !m.javadoc.substring(idx - 11, idx + 8).equals(\"CompletableObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Flowable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Single\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Single\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Single\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Single but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"SingleSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"SingleSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*SingleSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Observable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*ObservableSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                checkAtReturnAndSignatureMatch(\"Completable\", m, e, \"Flowable\", \"Observable\", \"Maybe\", \"Single\", \"Completable\");\n\n                aOrAn(e, m, \"Completable\");\n                missingClosingDD(e, m, \"Completable\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Completable\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","date":"2020-01-01 21:33:28","endLine":801,"groupId":"2833","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"completableDocRefersToCompletableTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e5/746cc69b6c761afc15ca16911a9b4a8a8f4170.src","preCode":"    public void completableDocRefersToCompletableTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Completable\"), \"Completable\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 11 || !m.javadoc.substring(idx - 11, idx + 8).equals(\"CompletableObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Flowable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Single\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Single\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Single\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Single but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"SingleSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"SingleSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*SingleSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Observable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*ObservableSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                aOrAn(e, m, \"Completable\");\n                missingClosingDD(e, m, \"Completable\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Completable\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocWording.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"M"}],"commitId":"ecfb6b741d411de9d060b1c4b1fcd90ff7530854","commitMessage":"@@@3.x: Improve Javadocs of Completable and some others (#6809)\n\n","date":"2020-01-01 21:33:28","modifiedFileCount":"10","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-16 16:08:32","codes":[{"authorDate":"2020-01-16 16:08:32","commitOrder":4,"curCode":"    public void singleDocRefersToSingleTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Single\"), \"Single\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 6 || !m.javadoc.substring(idx - 6, idx + 8).equals(\"SingleObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Maybe\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Maybe\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Maybe but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" MaybeSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"MaybeSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Maybe.method(Maybe.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                checkAtReturnAndSignatureMatch(\"Single\", m, e, \"Flowable\", \"Observable\", \"Maybe\", \"Single\", \"Completable\", \"Disposable\", \"Iterable\", \"Stream\", \"Future\", \"CompletionStage\");\n\n                aOrAn(e, m, \"Single\");\n                missingClosingDD(e, m, \"Single\", \"io.reactivex.rxjava3.core\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Single\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","date":"2020-01-16 16:08:32","endLine":787,"groupId":"108216","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"singleDocRefersToSingleTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d3/51e7809d5b59059b680f87abc715846d067b61.src","preCode":"    public void singleDocRefersToSingleTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Single\"), \"Single\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 6 || !m.javadoc.substring(idx - 6, idx + 8).equals(\"SingleObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Single doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Maybe\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Maybe\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Maybe but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" MaybeSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"MaybeSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Maybe.method(Maybe.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Single doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Single.method(Single.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                aOrAn(e, m, \"Single\");\n                missingClosingDD(e, m, \"Single\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Single\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocWording.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"M"},{"authorDate":"2020-01-16 16:08:32","commitOrder":4,"curCode":"    public void completableDocRefersToCompletableTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Completable\"), \"Completable\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 11 || !m.javadoc.substring(idx - 11, idx + 8).equals(\"CompletableObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Flowable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Single\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Single\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Single\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Single but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"SingleSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"SingleSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*SingleSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Observable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*ObservableSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                checkAtReturnAndSignatureMatch(\"Completable\", m, e, \"Flowable\", \"Observable\", \"Maybe\", \"Single\", \"Completable\", \"Disposable\", \"Iterable\", \"Stream\", \"Future\", \"CompletionStage\");\n\n                aOrAn(e, m, \"Completable\");\n                missingClosingDD(e, m, \"Completable\", \"io.reactivex.rxjava3.core\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Completable\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","date":"2020-01-16 16:08:32","endLine":978,"groupId":"108216","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"completableDocRefersToCompletableTypes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d3/51e7809d5b59059b680f87abc715846d067b61.src","preCode":"    public void completableDocRefersToCompletableTypes() throws Exception {\n        List<RxMethod> list = BaseTypeParser.parse(TestHelper.findSource(\"Completable\"), \"Completable\");\n\n        assertFalse(list.isEmpty());\n\n        StringBuilder e = new StringBuilder();\n\n        for (RxMethod m : list) {\n            int jdx;\n            if (m.javadoc != null) {\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"onNext\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"ObservableSource\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions onNext but no Flowable/Observable in signature\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Subscriber\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")\n                                && !m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"TestSubscriber\")) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscriber but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Subscription\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")\n                                && !m.signature.contains(\"Publisher\")\n                        ) {\n                            e.append(\"java.lang.RuntimeException: Completable doc mentions Subscription but not using Flowable\\r\\n at io.reactivex.rxjava3.core.\")\n                            .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Observer\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")\n                                && !m.signature.contains(\"Observable\")\n                                && !m.signature.contains(\"TestObserver\")) {\n\n                            if (idx < 11 || !m.javadoc.substring(idx - 11, idx + 8).equals(\"CompletableObserver\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observer but not using Observable\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Publisher\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Publisher\")) {\n                            if (idx == 0 || !m.javadoc.substring(idx - 1, idx + 9).equals(\"(Publisher\")) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Publisher but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Flowable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Flowable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Flowable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Flowable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"Single\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Single\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Single\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Single but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"SingleSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"SingleSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*SingleSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions SingleSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\" Observable\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"Observable\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*Observable\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions Observable but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n                jdx = 0;\n                for (;;) {\n                    int idx = m.javadoc.indexOf(\"ObservableSource\", jdx);\n                    if (idx >= 0) {\n                        if (!m.signature.contains(\"ObservableSource\")) {\n                            Pattern p = Pattern.compile(\"@see\\\\s+#[A-Za-z0-9 _.,()]*ObservableSource\");\n                            if (!p.matcher(m.javadoc).find()) {\n                                e.append(\"java.lang.RuntimeException: Completable doc mentions ObservableSource but not in the signature\\r\\n at io.reactivex.rxjava3.core.\")\n                                .append(\"Completable.method(Completable.java:\").append(m.javadocLine + lineNumber(m.javadoc, idx) - 1).append(\")\\r\\n\\r\\n\");\n                            }\n                        }\n                        jdx = idx + 6;\n                    } else {\n                        break;\n                    }\n                }\n\n                checkAtReturnAndSignatureMatch(\"Completable\", m, e, \"Flowable\", \"Observable\", \"Maybe\", \"Single\", \"Completable\");\n\n                aOrAn(e, m, \"Completable\");\n                missingClosingDD(e, m, \"Completable\");\n                backpressureMentionedWithoutAnnotation(e, m, \"Completable\");\n            }\n        }\n\n        if (e.length() != 0) {\n            System.out.println(e);\n\n            fail(e.toString());\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocWording.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":790,"status":"M"}],"commitId":"021d07b4c602a8c86605f1e218aa81466b5f36b8","commitMessage":"@@@3.x: Simplify @return sentences in Flowable JavaDocs (#6847)\n\n* 3.x: Simplify @return sentences in Flowable\n\n* Clear Completable\n\n* Clear Single\n\n* Clean Maybe\n\n* Clean Observable\n","date":"2020-01-16 16:08:32","modifiedFileCount":"8","status":"M","submitter":"David Karnok"}]
