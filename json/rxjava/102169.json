[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public boolean win(int index) {\n            int w = winner.get();\n            if (w == 0) {\n                if (winner.compareAndSet(0, index)) {\n                    AmbInnerObserver<T>[] a = observers;\n                    int n = a.length;\n                    for (int i = 0; i < n; i++) {\n                        if (i + 1 != index) {\n                            a[i].dispose();\n                        }\n                    }\n                    return true;\n                }\n                return false;\n            }\n            return w == index;\n        }\n","date":"2019-08-16 20:51:17","endLine":121,"groupId":"7495","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"win","params":"(intindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ad/b85e3d712948409c0b1919c7c11fba7407dbe2.src","preCode":"        public boolean win(int index) {\n            int w = winner.get();\n            if (w == 0) {\n                if (winner.compareAndSet(0, index)) {\n                    AmbInnerObserver<T>[] a = observers;\n                    int n = a.length;\n                    for (int i = 0; i < n; i++) {\n                        if (i + 1 != index) {\n                            a[i].dispose();\n                        }\n                    }\n                    return true;\n                }\n                return false;\n            }\n            return w == index;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableAmb.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"        public boolean win(int index) {\n            int w = winner.get();\n            if (w == 0) {\n                if (winner.compareAndSet(0, index)) {\n                    AmbInnerSubscriber<T>[] a = subscribers;\n                    int n = a.length;\n                    for (int i = 0; i < n; i++) {\n                        if (i + 1 != index) {\n                            a[i].cancel();\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n","date":"2019-08-16 20:51:17","endLine":136,"groupId":"7495","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"win","params":"(intindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/54/6beb0faea64664d94252720fcd7fea6e3aa604.src","preCode":"        public boolean win(int index) {\n            int w = winner.get();\n            if (w == 0) {\n                if (winner.compareAndSet(0, index)) {\n                    AmbInnerSubscriber<T>[] a = subscribers;\n                    int n = a.length;\n                    for (int i = 0; i < n; i++) {\n                        if (i + 1 != index) {\n                            a[i].cancel();\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableAmb.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2020-02-12 23:26:52","commitOrder":2,"curCode":"        public boolean win(int index) {\n            int w = winner.get();\n            if (w == 0) {\n                if (winner.compareAndSet(0, index)) {\n                    AmbInnerObserver<T>[] a = observers;\n                    int n = a.length;\n                    for (int i = 0; i < n; i++) {\n                        if (i + 1 != index) {\n                            a[i].dispose();\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n","date":"2020-02-12 23:26:52","endLine":120,"groupId":"102169","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"win","params":"(intindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ff/ab7526521d0011803212c727ef823b997c939e.src","preCode":"        public boolean win(int index) {\n            int w = winner.get();\n            if (w == 0) {\n                if (winner.compareAndSet(0, index)) {\n                    AmbInnerObserver<T>[] a = observers;\n                    int n = a.length;\n                    for (int i = 0; i < n; i++) {\n                        if (i + 1 != index) {\n                            a[i].dispose();\n                        }\n                    }\n                    return true;\n                }\n                return false;\n            }\n            return w == index;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/observable/ObservableAmb.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"        public boolean win(int index) {\n            int w = winner.get();\n            if (w == 0) {\n                if (winner.compareAndSet(0, index)) {\n                    AmbInnerSubscriber<T>[] a = subscribers;\n                    int n = a.length;\n                    for (int i = 0; i < n; i++) {\n                        if (i + 1 != index) {\n                            a[i].cancel();\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n","date":"2019-08-16 20:51:17","endLine":136,"groupId":"102169","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"win","params":"(intindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/54/6beb0faea64664d94252720fcd7fea6e3aa604.src","preCode":"        public boolean win(int index) {\n            int w = winner.get();\n            if (w == 0) {\n                if (winner.compareAndSet(0, index)) {\n                    AmbInnerSubscriber<T>[] a = subscribers;\n                    int n = a.length;\n                    for (int i = 0; i < n; i++) {\n                        if (i + 1 != index) {\n                            a[i].cancel();\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableAmb.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"b3ad0752de398f4536bb88a7b1c77b0b9fbecb87","commitMessage":"@@@3.x: Add missing coverage.  fix unused/inconsistent ops (#6901)\n\n* 3.x: Add missing coverage.  fix unused/inconsistent ops\n\n* More coverage improvements and cleanup\n\n* Some more coverage\n\n* Observable coverage and cleanup\n\n* Improve Flowable internals and coverage\n\n* More Flowable operator coverage and fixes\n\n* Last set of coverage & cleanup for Flowable operators\n\n* Fix wrong use of j.u.Observable\n","date":"2020-02-12 23:26:52","modifiedFileCount":"219","status":"M","submitter":"David Karnok"}]
