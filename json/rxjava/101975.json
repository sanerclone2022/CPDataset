[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableConcatMap.subscribe(subscribers[i], mapper, prefetch, errorMode);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2019-08-16 20:51:17","endLine":71,"groupId":"5791","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superR>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5b/7d3ef5c46fd4e0a5e33da844a8772d82122ad1.src","preCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableConcatMap.subscribe(subscribers[i], mapper, prefetch, errorMode);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelConcatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void subscribe(Subscriber<? super C>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n        @SuppressWarnings(\"unchecked\")\n        Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n\n            C initialValue;\n\n            try {\n                initialValue = ObjectHelper.requireNonNull(initialCollection.get(), \"The initialSupplier returned a null value\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                reportError(subscribers, ex);\n                return;\n            }\n\n            parents[i] = new ParallelCollectSubscriber<T, C>(subscribers[i], initialValue, collector);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2019-08-16 20:51:17","endLine":73,"groupId":"12628","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superC>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d3/7bcfa1b306db16d67e58ad7917c805347deacb.src","preCode":"    public void subscribe(Subscriber<? super C>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n        @SuppressWarnings(\"unchecked\")\n        Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n\n            C initialValue;\n\n            try {\n                initialValue = ObjectHelper.requireNonNull(initialCollection.get(), \"The initialSupplier returned a null value\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                reportError(subscribers, ex);\n                return;\n            }\n\n            parents[i] = new ParallelCollectSubscriber<T, C>(subscribers[i], initialValue, collector);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelCollect.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-18 03:06:44","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableConcatMap.subscribe(subscribers[i], mapper, prefetch, errorMode);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2019-08-16 20:51:17","endLine":71,"groupId":"5791","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superR>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5b/7d3ef5c46fd4e0a5e33da844a8772d82122ad1.src","preCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableConcatMap.subscribe(subscribers[i], mapper, prefetch, errorMode);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelConcatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"},{"authorDate":"2019-12-18 03:06:44","commitOrder":2,"curCode":"    public void subscribe(Subscriber<? super C>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n        @SuppressWarnings(\"unchecked\")\n        Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n\n            C initialValue;\n\n            try {\n                initialValue = Objects.requireNonNull(initialCollection.get(), \"The initialSupplier returned a null value\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                reportError(subscribers, ex);\n                return;\n            }\n\n            parents[i] = new ParallelCollectSubscriber<T, C>(subscribers[i], initialValue, collector);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2019-12-18 03:06:44","endLine":74,"groupId":"5791","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superC>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/e1/da1b76b75f2a3913245e948a3ab41a879b26d0.src","preCode":"    public void subscribe(Subscriber<? super C>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n        @SuppressWarnings(\"unchecked\")\n        Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n\n            C initialValue;\n\n            try {\n                initialValue = ObjectHelper.requireNonNull(initialCollection.get(), \"The initialSupplier returned a null value\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                reportError(subscribers, ex);\n                return;\n            }\n\n            parents[i] = new ParallelCollectSubscriber<T, C>(subscribers[i], initialValue, collector);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelCollect.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"6ba932c9a3752c6d85d65bd2292c3a47cab64fd6","commitMessage":"@@@Replace ObjectHelper.requireNonNull with Objects.requireNonNull (#6771)\n\n","date":"2019-12-18 03:06:44","modifiedFileCount":"199","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-27 05:37:39","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":3,"curCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableConcatMap.subscribe(subscribers[i], mapper, prefetch, errorMode);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2019-08-16 20:51:17","endLine":71,"groupId":"5791","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superR>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/5b/7d3ef5c46fd4e0a5e33da844a8772d82122ad1.src","preCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableConcatMap.subscribe(subscribers[i], mapper, prefetch, errorMode);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelConcatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"},{"authorDate":"2019-12-27 05:37:39","commitOrder":3,"curCode":"    public void subscribe(Subscriber<? super C>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n        @SuppressWarnings(\"unchecked\")\n        Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n\n            C initialValue;\n\n            try {\n                initialValue = Objects.requireNonNull(initialCollection.get(), \"The initialSupplier returned a null value\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                reportError(subscribers, ex);\n                return;\n            }\n\n            parents[i] = new ParallelCollectSubscriber<>(subscribers[i], initialValue, collector);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2019-12-27 05:37:39","endLine":74,"groupId":"5791","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superC>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/29/f9d9167491da54212447a56aae9be03165688d.src","preCode":"    public void subscribe(Subscriber<? super C>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n        @SuppressWarnings(\"unchecked\")\n        Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n\n            C initialValue;\n\n            try {\n                initialValue = Objects.requireNonNull(initialCollection.get(), \"The initialSupplier returned a null value\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                reportError(subscribers, ex);\n                return;\n            }\n\n            parents[i] = new ParallelCollectSubscriber<T, C>(subscribers[i], initialValue, collector);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelCollect.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"3d00eb188bad1d49aa058e896ad9d1b5026eba7d","commitMessage":"@@@3.x: [Java 8] Add ParallelFlowable operators + cleanup (#6798)\n\n","date":"2019-12-27 05:37:39","modifiedFileCount":"22","status":"M","submitter":"David Karnok"},{"authorTime":"2021-02-25 00:40:46","codes":[{"authorDate":"2021-02-25 00:40:46","commitOrder":4,"curCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        subscribers = RxJavaPlugins.onSubscribe(this, subscribers);\n\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableConcatMap.subscribe(subscribers[i], mapper, prefetch, errorMode);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2021-02-25 00:40:46","endLine":75,"groupId":"101975","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superR>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/500812a28d52c36a9982d1d9cf93845a031f63.src","preCode":"    public void subscribe(Subscriber<? super R>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n\n        @SuppressWarnings(\"unchecked\")\n        final Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n            parents[i] = FlowableConcatMap.subscribe(subscribers[i], mapper, prefetch, errorMode);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelConcatMap.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2021-02-25 00:40:46","commitOrder":4,"curCode":"    public void subscribe(Subscriber<? super C>[] subscribers) {\n        subscribers = RxJavaPlugins.onSubscribe(this, subscribers);\n\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n        @SuppressWarnings(\"unchecked\")\n        Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n\n            C initialValue;\n\n            try {\n                initialValue = Objects.requireNonNull(initialCollection.get(), \"The initialSupplier returned a null value\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                reportError(subscribers, ex);\n                return;\n            }\n\n            parents[i] = new ParallelCollectSubscriber<>(subscribers[i], initialValue, collector);\n        }\n\n        source.subscribe(parents);\n    }\n","date":"2021-02-25 00:40:46","endLine":76,"groupId":"101975","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"subscribe","params":"(Subscriber<?superC>[]subscribers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/89/5fc5cf866ff2b63dfcfd303f74a966e7d460b3.src","preCode":"    public void subscribe(Subscriber<? super C>[] subscribers) {\n        if (!validate(subscribers)) {\n            return;\n        }\n\n        int n = subscribers.length;\n        @SuppressWarnings(\"unchecked\")\n        Subscriber<T>[] parents = new Subscriber[n];\n\n        for (int i = 0; i < n; i++) {\n\n            C initialValue;\n\n            try {\n                initialValue = Objects.requireNonNull(initialCollection.get(), \"The initialSupplier returned a null value\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                reportError(subscribers, ex);\n                return;\n            }\n\n            parents[i] = new ParallelCollectSubscriber<>(subscribers[i], initialValue, collector);\n        }\n\n        source.subscribe(parents);\n    }\n","realPath":"src/main/java/io/reactivex/rxjava3/internal/operators/parallel/ParallelCollect.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"22c5e0bfe0ca9a68cd726d23fb696fe56a059a84","commitMessage":"@@@3.x: Add onSubscribe hook to ParallelFlowable operators (#7191)\n\n","date":"2021-02-25 00:40:46","modifiedFileCount":"17","status":"M","submitter":"David Karnok"}]
