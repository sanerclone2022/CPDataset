[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<String>();\n        Observable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedObservable<String, String>>() {\n\n            @Override\n            public void accept(GroupedObservable<String, String> groupedObservable) {\n                key[0] = groupedObservable.getKey();\n                groupedObservable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","date":"2019-08-16 20:51:17","endLine":1370,"groupId":"1873","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByWithNullKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<String>();\n        Observable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedObservable<String, String>>() {\n\n            @Override\n            public void accept(GroupedObservable<String, String> groupedObservable) {\n                key[0] = groupedObservable.getKey();\n                groupedObservable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1345,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<String>();\n        Flowable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedFlowable<String, String>>() {\n\n            @Override\n            public void accept(GroupedFlowable<String, String> groupedFlowable) {\n                key[0] = groupedFlowable.getKey();\n                groupedFlowable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","date":"2019-08-16 20:51:17","endLine":1384,"groupId":"1873","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByWithNullKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/8b/cc07c7de67b31ecd0c21610091775c9a7e35c1.src","preCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<String>();\n        Flowable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedFlowable<String, String>>() {\n\n            @Override\n            public void accept(GroupedFlowable<String, String> groupedFlowable) {\n                key[0] = groupedFlowable.getKey();\n                groupedFlowable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1359,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<String>();\n        Observable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedObservable<String, String>>() {\n\n            @Override\n            public void accept(GroupedObservable<String, String> groupedObservable) {\n                key[0] = groupedObservable.getKey();\n                groupedObservable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","date":"2019-08-16 20:51:17","endLine":1370,"groupId":"1873","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByWithNullKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a7/ac22a95ac39f4b87ec1e2671912f7c8e97711b.src","preCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<String>();\n        Observable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedObservable<String, String>>() {\n\n            @Override\n            public void accept(GroupedObservable<String, String> groupedObservable) {\n                key[0] = groupedObservable.getKey();\n                groupedObservable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1345,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<>();\n        Flowable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedFlowable<String, String>>() {\n\n            @Override\n            public void accept(GroupedFlowable<String, String> groupedFlowable) {\n                key[0] = groupedFlowable.getKey();\n                groupedFlowable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","date":"2019-12-22 18:39:23","endLine":1388,"groupId":"1873","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByWithNullKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<String>();\n        Flowable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedFlowable<String, String>>() {\n\n            @Override\n            public void accept(GroupedFlowable<String, String> groupedFlowable) {\n                key[0] = groupedFlowable.getKey();\n                groupedFlowable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1363,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<>();\n        Observable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedObservable<String, String>>() {\n\n            @Override\n            public void accept(GroupedObservable<String, String> groupedObservable) {\n                key[0] = groupedObservable.getKey();\n                groupedObservable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","date":"2019-12-22 18:59:44","endLine":1372,"groupId":"102917","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"groupByWithNullKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/d3f2d6432c67ffdd0df5bbb6960b138ae6f15a.src","preCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<String>();\n        Observable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedObservable<String, String>>() {\n\n            @Override\n            public void accept(GroupedObservable<String, String> groupedObservable) {\n                key[0] = groupedObservable.getKey();\n                groupedObservable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1347,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<>();\n        Flowable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedFlowable<String, String>>() {\n\n            @Override\n            public void accept(GroupedFlowable<String, String> groupedFlowable) {\n                key[0] = groupedFlowable.getKey();\n                groupedFlowable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","date":"2019-12-22 18:39:23","endLine":1388,"groupId":"102917","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"groupByWithNullKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void groupByWithNullKey() {\n        final String[] key = new String[]{\"uninitialized\"};\n        final List<String> values = new ArrayList<>();\n        Flowable.just(\"a\", \"b\", \"c\").groupBy(new Function<String, String>() {\n\n            @Override\n            public String apply(String value) {\n                return null;\n            }\n        }).subscribe(new Consumer<GroupedFlowable<String, String>>() {\n\n            @Override\n            public void accept(GroupedFlowable<String, String> groupedFlowable) {\n                key[0] = groupedFlowable.getKey();\n                groupedFlowable.subscribe(new Consumer<String>() {\n\n                    @Override\n                    public void accept(String s) {\n                        values.add(s);\n                    }\n                });\n            }\n        });\n        assertNull(key[0]);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), values);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1363,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
