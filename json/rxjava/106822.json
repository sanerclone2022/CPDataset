[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void exactBackpressure() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = pp.window(1, 1, TimeUnit.SECONDS, scheduler)\n        .test(0L);\n\n        scheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        ts.assertFailure(MissingBackpressureException.class);\n    }\n","date":"2019-08-16 20:51:17","endLine":447,"groupId":"1913","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"exactBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/57800827f1ad81149d84cdad67f5bc75040ffb.src","preCode":"    public void exactBackpressure() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = pp.window(1, 1, TimeUnit.SECONDS, scheduler)\n        .test(0L);\n\n        scheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        ts.assertFailure(MissingBackpressureException.class);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void overlapBackpressure2() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestScheduler scheduler = new TestScheduler();\n\n            PublishProcessor<Integer> pp = PublishProcessor.create();\n\n            TestSubscriber<Flowable<Integer>> ts = pp.window(2, 1, TimeUnit.SECONDS, scheduler)\n            .test(1L);\n\n            scheduler.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            ts.assertError(MissingBackpressureException.class);\n\n            TestHelper.assertError(errors, 0, MissingBackpressureException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":526,"groupId":"1913","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"overlapBackpressure2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/57800827f1ad81149d84cdad67f5bc75040ffb.src","preCode":"    public void overlapBackpressure2() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestScheduler scheduler = new TestScheduler();\n\n            PublishProcessor<Integer> pp = PublishProcessor.create();\n\n            TestSubscriber<Flowable<Integer>> ts = pp.window(2, 1, TimeUnit.SECONDS, scheduler)\n            .test(1L);\n\n            scheduler.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            ts.assertError(MissingBackpressureException.class);\n\n            TestHelper.assertError(errors, 0, MissingBackpressureException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-16 18:00:42","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void exactBackpressure() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = pp.window(1, 1, TimeUnit.SECONDS, scheduler)\n        .test(0L);\n\n        scheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        ts.assertFailure(MissingBackpressureException.class);\n    }\n","date":"2019-08-16 20:51:17","endLine":447,"groupId":"1913","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"exactBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/57800827f1ad81149d84cdad67f5bc75040ffb.src","preCode":"    public void exactBackpressure() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = pp.window(1, 1, TimeUnit.SECONDS, scheduler)\n        .test(0L);\n\n        scheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        ts.assertFailure(MissingBackpressureException.class);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"N"},{"authorDate":"2019-12-16 18:00:42","commitOrder":2,"curCode":"    public void overlapBackpressure2() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestScheduler scheduler = new TestScheduler();\n\n            PublishProcessor<Integer> pp = PublishProcessor.create();\n\n            final TestSubscriber<Integer> tsInner = new TestSubscriber<Integer>();\n\n            TestSubscriber<Flowable<Integer>> ts = pp.window(2, 1, TimeUnit.SECONDS, scheduler)\n            .doOnNext(new Consumer<Flowable<Integer>>() {\n                @Override\n                public void accept(Flowable<Integer> w) throws Throwable {\n                    w.subscribe(tsInner);\n                }\n            }) \r\n            .test(1L);\n\n            scheduler.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            ts.assertError(MissingBackpressureException.class);\n\n            tsInner.assertError(MissingBackpressureException.class);\n\n            assertTrue(errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-16 18:00:42","endLine":538,"groupId":"4172","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"overlapBackpressure2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/eb/72dab5f7bd5769d05288e214c71808ca5ef836.src","preCode":"    public void overlapBackpressure2() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestScheduler scheduler = new TestScheduler();\n\n            PublishProcessor<Integer> pp = PublishProcessor.create();\n\n            TestSubscriber<Flowable<Integer>> ts = pp.window(2, 1, TimeUnit.SECONDS, scheduler)\n            .test(1L);\n\n            scheduler.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            ts.assertError(MissingBackpressureException.class);\n\n            TestHelper.assertError(errors, 0, MissingBackpressureException.class);\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"}],"commitId":"df7f1cdf90413bb6463ba95928c5253868705a52","commitMessage":"@@@3.x: Fix Flowable.window (size.  time) cancellation and abandonment (#6758)\n\n","date":"2019-12-16 18:00:42","modifiedFileCount":"5","status":"M","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":3,"curCode":"    public void exactBackpressure() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = pp.window(1, 1, TimeUnit.SECONDS, scheduler)\n        .test(0L);\n\n        scheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        ts.assertFailure(MissingBackpressureException.class);\n    }\n","date":"2019-08-16 20:51:17","endLine":447,"groupId":"106822","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"exactBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c3/57800827f1ad81149d84cdad67f5bc75040ffb.src","preCode":"    public void exactBackpressure() {\n        TestScheduler scheduler = new TestScheduler();\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        TestSubscriber<Flowable<Integer>> ts = pp.window(1, 1, TimeUnit.SECONDS, scheduler)\n        .test(0L);\n\n        scheduler.advanceTimeBy(1, TimeUnit.SECONDS);\n\n        ts.assertFailure(MissingBackpressureException.class);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void overlapBackpressure2() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestScheduler scheduler = new TestScheduler();\n\n            PublishProcessor<Integer> pp = PublishProcessor.create();\n\n            final TestSubscriber<Integer> tsInner = new TestSubscriber<>();\n\n            TestSubscriber<Flowable<Integer>> ts = pp.window(2, 1, TimeUnit.SECONDS, scheduler)\n            .doOnNext(new Consumer<Flowable<Integer>>() {\n                @Override\n                public void accept(Flowable<Integer> w) throws Throwable {\n                    w.subscribe(tsInner);\n                }\n            }) \r\n            .test(1L);\n\n            scheduler.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            ts.assertError(MissingBackpressureException.class);\n\n            tsInner.assertError(MissingBackpressureException.class);\n\n            assertTrue(errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","date":"2019-12-22 18:39:23","endLine":538,"groupId":"106822","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"overlapBackpressure2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/86/da1bb09ce8c03bc9e971248d8c89b3dccf5d39.src","preCode":"    public void overlapBackpressure2() {\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n            TestScheduler scheduler = new TestScheduler();\n\n            PublishProcessor<Integer> pp = PublishProcessor.create();\n\n            final TestSubscriber<Integer> tsInner = new TestSubscriber<Integer>();\n\n            TestSubscriber<Flowable<Integer>> ts = pp.window(2, 1, TimeUnit.SECONDS, scheduler)\n            .doOnNext(new Consumer<Flowable<Integer>>() {\n                @Override\n                public void accept(Flowable<Integer> w) throws Throwable {\n                    w.subscribe(tsInner);\n                }\n            }) \r\n            .test(1L);\n\n            scheduler.advanceTimeBy(2, TimeUnit.SECONDS);\n\n            ts.assertError(MissingBackpressureException.class);\n\n            tsInner.assertError(MissingBackpressureException.class);\n\n            assertTrue(errors.isEmpty());\n        } finally {\n            RxJavaPlugins.reset();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableWindowWithTimeTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"}]
