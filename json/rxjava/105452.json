[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<String>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n        TestObserver<String> to = new TestObserver<String>(observer);\n\n        final Observable<String> concat = Observable.concat(Observable.unsafeCreate(w1), Observable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(to);\n            \r\n            callOnce.await();\n            \r\n            to.dispose();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, never()).onNext(\"five\");\n        inOrder.verify(observer, never()).onNext(\"six\");\n        inOrder.verify(observer, never()).onComplete();\n\n    }\n","date":"2019-08-16 20:51:17","endLine":426,"groupId":"11854","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"concatUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6f/436a56ccf266c9cc57c65783686ad7824a74fd.src","preCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<String>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n        TestObserver<String> to = new TestObserver<String>(observer);\n\n        final Observable<String> concat = Observable.concat(Observable.unsafeCreate(w1), Observable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(to);\n            \r\n            callOnce.await();\n            \r\n            to.dispose();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, never()).onNext(\"five\");\n        inOrder.verify(observer, never()).onNext(\"six\");\n        inOrder.verify(observer, never()).onComplete();\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<String>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<String> ts = new TestSubscriber<String>(subscriber, 0L);\n\n        final Flowable<String> concat = Flowable.concat(Flowable.unsafeCreate(w1), Flowable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(ts);\n            \r\n            callOnce.await();\n            \r\n            ts.cancel();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, never()).onNext(\"five\");\n        inOrder.verify(subscriber, never()).onNext(\"six\");\n        inOrder.verify(subscriber, never()).onComplete();\n\n    }\n","date":"2019-08-16 20:51:17","endLine":438,"groupId":"11854","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"concatUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/36/8f5cd043ac8f418600f4d33396a8d5cfa0943d.src","preCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<String>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<String> ts = new TestSubscriber<String>(subscriber, 0L);\n\n        final Flowable<String> concat = Flowable.concat(Flowable.unsafeCreate(w1), Flowable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(ts);\n            \r\n            callOnce.await();\n            \r\n            ts.cancel();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, never()).onNext(\"five\");\n        inOrder.verify(subscriber, never()).onNext(\"six\");\n        inOrder.verify(subscriber, never()).onComplete();\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<String>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n        TestObserver<String> to = new TestObserver<String>(observer);\n\n        final Observable<String> concat = Observable.concat(Observable.unsafeCreate(w1), Observable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(to);\n            \r\n            callOnce.await();\n            \r\n            to.dispose();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, never()).onNext(\"five\");\n        inOrder.verify(observer, never()).onNext(\"six\");\n        inOrder.verify(observer, never()).onComplete();\n\n    }\n","date":"2019-08-16 20:51:17","endLine":426,"groupId":"11854","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"concatUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/6f/436a56ccf266c9cc57c65783686ad7824a74fd.src","preCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<String>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n        TestObserver<String> to = new TestObserver<String>(observer);\n\n        final Observable<String> concat = Observable.concat(Observable.unsafeCreate(w1), Observable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(to);\n            \r\n            callOnce.await();\n            \r\n            to.dispose();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, never()).onNext(\"five\");\n        inOrder.verify(observer, never()).onNext(\"six\");\n        inOrder.verify(observer, never()).onComplete();\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<String> ts = new TestSubscriber<>(subscriber, 0L);\n\n        final Flowable<String> concat = Flowable.concat(Flowable.unsafeCreate(w1), Flowable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(ts);\n            \r\n            callOnce.await();\n            \r\n            ts.cancel();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, never()).onNext(\"five\");\n        inOrder.verify(subscriber, never()).onNext(\"six\");\n        inOrder.verify(subscriber, never()).onComplete();\n\n    }\n","date":"2019-12-22 18:39:23","endLine":438,"groupId":"11854","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"concatUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/451d6097833e4984eb0cf4dd726ac9ebc97cfa.src","preCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<String>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<String> ts = new TestSubscriber<String>(subscriber, 0L);\n\n        final Flowable<String> concat = Flowable.concat(Flowable.unsafeCreate(w1), Flowable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(ts);\n            \r\n            callOnce.await();\n            \r\n            ts.cancel();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, never()).onNext(\"five\");\n        inOrder.verify(subscriber, never()).onNext(\"six\");\n        inOrder.verify(subscriber, never()).onComplete();\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n        TestObserver<String> to = new TestObserver<>(observer);\n\n        final Observable<String> concat = Observable.concat(Observable.unsafeCreate(w1), Observable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(to);\n            \r\n            callOnce.await();\n            \r\n            to.dispose();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, never()).onNext(\"five\");\n        inOrder.verify(observer, never()).onNext(\"six\");\n        inOrder.verify(observer, never()).onComplete();\n\n    }\n","date":"2019-12-22 18:59:44","endLine":426,"groupId":"105452","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"concatUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/c5/b00fdf7c961a4606a8134779a8f75268955a19.src","preCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<String>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<String>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Observer<String> observer = TestHelper.mockObserver();\n        TestObserver<String> to = new TestObserver<String>(observer);\n\n        final Observable<String> concat = Observable.concat(Observable.unsafeCreate(w1), Observable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(to);\n            \r\n            callOnce.await();\n            \r\n            to.dispose();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(observer);\n        inOrder.verify(observer, times(1)).onNext(\"one\");\n        inOrder.verify(observer, times(1)).onNext(\"two\");\n        inOrder.verify(observer, times(1)).onNext(\"three\");\n        inOrder.verify(observer, times(1)).onNext(\"four\");\n        inOrder.verify(observer, never()).onNext(\"five\");\n        inOrder.verify(observer, never()).onNext(\"six\");\n        inOrder.verify(observer, never()).onComplete();\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<String> ts = new TestSubscriber<>(subscriber, 0L);\n\n        final Flowable<String> concat = Flowable.concat(Flowable.unsafeCreate(w1), Flowable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(ts);\n            \r\n            callOnce.await();\n            \r\n            ts.cancel();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, never()).onNext(\"five\");\n        inOrder.verify(subscriber, never()).onNext(\"six\");\n        inOrder.verify(subscriber, never()).onComplete();\n\n    }\n","date":"2019-12-22 18:39:23","endLine":438,"groupId":"105452","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"concatUnsubscribe","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/67/451d6097833e4984eb0cf4dd726ac9ebc97cfa.src","preCode":"    public void concatUnsubscribe() {\n        final CountDownLatch callOnce = new CountDownLatch(1);\n        final CountDownLatch okToContinue = new CountDownLatch(1);\n        final TestObservable<String> w1 = new TestObservable<>(\"one\", \"two\", \"three\");\n        final TestObservable<String> w2 = new TestObservable<>(callOnce, okToContinue, \"four\", \"five\", \"six\");\n\n        Subscriber<String> subscriber = TestHelper.mockSubscriber();\n        TestSubscriber<String> ts = new TestSubscriber<>(subscriber, 0L);\n\n        final Flowable<String> concat = Flowable.concat(Flowable.unsafeCreate(w1), Flowable.unsafeCreate(w2));\n\n        try {\n            \r\n            concat.subscribe(ts);\n            \r\n            callOnce.await();\n            \r\n            ts.cancel();\n            \r\n            okToContinue.countDown();\n            w1.t.join();\n            w2.t.join();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n\n        InOrder inOrder = inOrder(subscriber);\n        inOrder.verify(subscriber, times(1)).onNext(\"one\");\n        inOrder.verify(subscriber, times(1)).onNext(\"two\");\n        inOrder.verify(subscriber, times(1)).onNext(\"three\");\n        inOrder.verify(subscriber, times(1)).onNext(\"four\");\n        inOrder.verify(subscriber, never()).onNext(\"five\");\n        inOrder.verify(subscriber, never()).onNext(\"six\");\n        inOrder.verify(subscriber, never()).onComplete();\n\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableConcatTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
