[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void bufferIntoCustomCollection() {\n        Observable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<Integer>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","date":"2019-08-16 20:51:17","endLine":799,"groupId":"6983","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bufferIntoCustomCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/03/c437dad9f65153ba2d8f488de8f7c0769eb7ca.src","preCode":"    public void bufferIntoCustomCollection() {\n        Observable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<Integer>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":789,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void bufferSkipIntoCustomCollection() {\n        Flowable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, 3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<Integer>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","date":"2019-08-16 20:51:17","endLine":1281,"groupId":"6983","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bufferSkipIntoCustomCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/bc/d53605fc50d241ecae45123032ca60ee111d91.src","preCode":"    public void bufferSkipIntoCustomCollection() {\n        Flowable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, 3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<Integer>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1271,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void bufferIntoCustomCollection() {\n        Observable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<Integer>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","date":"2019-08-16 20:51:17","endLine":799,"groupId":"6983","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bufferIntoCustomCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/03/c437dad9f65153ba2d8f488de8f7c0769eb7ca.src","preCode":"    public void bufferIntoCustomCollection() {\n        Observable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<Integer>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":789,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void bufferSkipIntoCustomCollection() {\n        Flowable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, 3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","date":"2019-12-22 18:39:23","endLine":1281,"groupId":"6983","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bufferSkipIntoCustomCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/70/7d98e0d480af17afac461a72aa34116095d9a5.src","preCode":"    public void bufferSkipIntoCustomCollection() {\n        Flowable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, 3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<Integer>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1271,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void bufferIntoCustomCollection() {\n        Observable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","date":"2019-12-22 18:59:44","endLine":799,"groupId":"103176","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"bufferIntoCustomCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ee/ee099b0da4a3dd2fba7157f378ce8829d642fa.src","preCode":"    public void bufferIntoCustomCollection() {\n        Observable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<Integer>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":789,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void bufferSkipIntoCustomCollection() {\n        Flowable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, 3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","date":"2019-12-22 18:39:23","endLine":1281,"groupId":"103176","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bufferSkipIntoCustomCollection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/70/7d98e0d480af17afac461a72aa34116095d9a5.src","preCode":"    public void bufferSkipIntoCustomCollection() {\n        Flowable.just(1, 1, 2, 2, 3, 3, 4, 4)\n        .buffer(3, 3, new Supplier<Collection<Integer>>() {\n            @Override\n            public Collection<Integer> get() throws Exception {\n                return new HashSet<>();\n            }\n        })\n        .test()\n        .assertResult(set(1, 2), set(2, 3), set(4));\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableBufferTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1271,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
