[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    private Observable<Long> synchronousInterval() {\n        return Observable.unsafeCreate(new ObservableSource<Long>() {\n            @Override\n            public void subscribe(Observer<? super Long> observer) {\n                final AtomicBoolean cancel = new AtomicBoolean();\n                observer.onSubscribe(Disposables.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        cancel.set(true);\n                    }\n                }));\n                for (;;) {\n                    if (cancel.get()) {\n                        break;\n                    }\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                    }\n                    observer.onNext(1L);\n                }\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":331,"groupId":"2242","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"synchronousInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/62/747c480a90d6b4b716b7ce66cfb96d52316ec7.src","preCode":"    private Observable<Long> synchronousInterval() {\n        return Observable.unsafeCreate(new ObservableSource<Long>() {\n            @Override\n            public void subscribe(Observer<? super Long> observer) {\n                final AtomicBoolean cancel = new AtomicBoolean();\n                observer.onSubscribe(Disposables.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        cancel.set(true);\n                    }\n                }));\n                for (;;) {\n                    if (cancel.get()) {\n                        break;\n                    }\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                    }\n                    observer.onNext(1L);\n                }\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    private Flowable<Long> synchronousInterval() {\n        return Flowable.unsafeCreate(new Publisher<Long>() {\n            @Override\n            public void subscribe(Subscriber<? super Long> subscriber) {\n                final AtomicBoolean cancel = new AtomicBoolean();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        cancel.set(true);\n                    }\n\n                });\n                for (;;) {\n                    if (cancel.get()) {\n                        break;\n                    }\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                    }\n                    subscriber.onNext(1L);\n                }\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":345,"groupId":"11994","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"synchronousInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/b38ff272c5ac364c7d2bea65b54206088a6700.src","preCode":"    private Flowable<Long> synchronousInterval() {\n        return Flowable.unsafeCreate(new Publisher<Long>() {\n            @Override\n            public void subscribe(Subscriber<? super Long> subscriber) {\n                final AtomicBoolean cancel = new AtomicBoolean();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        cancel.set(true);\n                    }\n\n                });\n                for (;;) {\n                    if (cancel.get()) {\n                        break;\n                    }\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                    }\n                    subscriber.onNext(1L);\n                }\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    private Observable<Long> synchronousInterval() {\n        return Observable.unsafeCreate(new ObservableSource<Long>() {\n            @Override\n            public void subscribe(Observer<? super Long> observer) {\n                final AtomicBoolean cancel = new AtomicBoolean();\n                observer.onSubscribe(Disposable.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        cancel.set(true);\n                    }\n                }));\n                for (;;) {\n                    if (cancel.get()) {\n                        break;\n                    }\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                    }\n                    observer.onNext(1L);\n                }\n            }\n        });\n    }\n","date":"2019-12-20 02:39:40","endLine":331,"groupId":"103279","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"synchronousInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7e/862e1ad2edf42294c2f2a6d770afc42623724a.src","preCode":"    private Observable<Long> synchronousInterval() {\n        return Observable.unsafeCreate(new ObservableSource<Long>() {\n            @Override\n            public void subscribe(Observer<? super Long> observer) {\n                final AtomicBoolean cancel = new AtomicBoolean();\n                observer.onSubscribe(Disposables.fromRunnable(new Runnable() {\n                    @Override\n                    public void run() {\n                        cancel.set(true);\n                    }\n                }));\n                for (;;) {\n                    if (cancel.get()) {\n                        break;\n                    }\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                    }\n                    observer.onNext(1L);\n                }\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    private Flowable<Long> synchronousInterval() {\n        return Flowable.unsafeCreate(new Publisher<Long>() {\n            @Override\n            public void subscribe(Subscriber<? super Long> subscriber) {\n                final AtomicBoolean cancel = new AtomicBoolean();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        cancel.set(true);\n                    }\n\n                });\n                for (;;) {\n                    if (cancel.get()) {\n                        break;\n                    }\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                    }\n                    subscriber.onNext(1L);\n                }\n            }\n        });\n    }\n","date":"2019-08-16 20:51:17","endLine":345,"groupId":"103279","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"synchronousInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/85/b38ff272c5ac364c7d2bea65b54206088a6700.src","preCode":"    private Flowable<Long> synchronousInterval() {\n        return Flowable.unsafeCreate(new Publisher<Long>() {\n            @Override\n            public void subscribe(Subscriber<? super Long> subscriber) {\n                final AtomicBoolean cancel = new AtomicBoolean();\n                subscriber.onSubscribe(new Subscription() {\n                    @Override\n                    public void request(long n) {\n\n                    }\n\n                    @Override\n                    public void cancel() {\n                        cancel.set(true);\n                    }\n\n                });\n                for (;;) {\n                    if (cancel.get()) {\n                        break;\n                    }\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                    }\n                    subscriber.onNext(1L);\n                }\n            }\n        });\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableRefCountTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"N"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"}]
