[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue1900() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":831,"groupId":"7403","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"issue1900","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/377c742c77d0f71be68a43c5e61734117ad6c6.src","preCode":"    public void issue1900() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":793,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.unsafeCreate(new ObservableSource<String>() {\n\n            @Override\n            public void subscribe(Observer<? super String> o) {\n                o.onSubscribe(Disposables.empty());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    o.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                o.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":876,"groupId":"7403","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"issue1900SourceNotSupportingBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/377c742c77d0f71be68a43c5e61734117ad6c6.src","preCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.unsafeCreate(new ObservableSource<String>() {\n\n            @Override\n            public void subscribe(Observer<? super String> o) {\n                o.onSubscribe(Disposables.empty());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    o.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                o.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-20 02:39:40","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void issue1900() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-08-16 20:51:17","endLine":831,"groupId":"7403","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"issue1900","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/26/377c742c77d0f71be68a43c5e61734117ad6c6.src","preCode":"    public void issue1900() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":793,"status":"N"},{"authorDate":"2019-12-20 02:39:40","commitOrder":2,"curCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.unsafeCreate(new ObservableSource<String>() {\n\n            @Override\n            public void subscribe(Observer<? super String> o) {\n                o.onSubscribe(Disposable.empty());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    o.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                o.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-20 02:39:40","endLine":876,"groupId":"7403","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"issue1900SourceNotSupportingBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/82/d96dc5d7b83880f95273c37765c05c13afd27a.src","preCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.unsafeCreate(new ObservableSource<String>() {\n\n            @Override\n            public void subscribe(Observer<? super String> o) {\n                o.onSubscribe(Disposables.empty());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    o.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                o.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"M"}],"commitId":"166c529eb165b473c9bff11e8fedbde6c471b005","commitMessage":"@@@Migrate Disposables static factories to Disposable interface (#6781)\n\n","date":"2019-12-20 02:39:40","modifiedFileCount":"202","status":"M","submitter":"Jake Wharton"},{"authorTime":"2019-12-22 18:59:44","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void issue1900() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:59:44","endLine":831,"groupId":"102382","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"issue1900","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/1ee0a7901d9076402271666fcf35b8e91064d5.src","preCode":"    public void issue1900() throws InterruptedException {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.range(0, NUM_MSG)\n                .map(new Function<Integer, String>() {\n                    @Override\n                    public String apply(Integer t1) {\n                        return \"msg: \" + count.incrementAndGet();\n                    }\n                });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":793,"status":"M"},{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.unsafeCreate(new ObservableSource<String>() {\n\n            @Override\n            public void subscribe(Observer<? super String> o) {\n                o.onSubscribe(Disposable.empty());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    o.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                o.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","date":"2019-12-22 18:59:44","endLine":876,"groupId":"102382","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"issue1900SourceNotSupportingBackpressure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/1ee0a7901d9076402271666fcf35b8e91064d5.src","preCode":"    public void issue1900SourceNotSupportingBackpressure() {\n        Observer<String> observer = TestHelper.mockObserver();\n        final int NUM_MSG = 1034;\n        final AtomicInteger count = new AtomicInteger();\n\n        Observable<String> origin = Observable.unsafeCreate(new ObservableSource<String>() {\n\n            @Override\n            public void subscribe(Observer<? super String> o) {\n                o.onSubscribe(Disposable.empty());\n                for (int i = 0; i < NUM_MSG; i++) {\n                    o.onNext(\"msg:\" + count.incrementAndGet());\n                }\n                o.onComplete();\n            }\n        });\n\n        origin.retry()\n        .groupBy(new Function<String, String>() {\n            @Override\n            public String apply(String t1) {\n                return t1;\n            }\n        })\n        .flatMap(new Function<GroupedObservable<String, String>, Observable<String>>() {\n            @Override\n            public Observable<String> apply(GroupedObservable<String, String> t1) {\n                return t1.take(1);\n            }\n        })\n        .subscribe(new TestObserver<String>(observer));\n\n        InOrder inOrder = inOrder(observer);\n        \r\n        inOrder.verify(observer, times(NUM_MSG)).onNext(any(java.lang.String.class));\n        \r\n        inOrder.verify(observer, never()).onError(any(Throwable.class));\n        \r\n        \r\n        \r\n        inOrder.verify(observer, times(1)).onComplete();\n        inOrder.verifyNoMoreInteractions();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableRetryTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"M"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
