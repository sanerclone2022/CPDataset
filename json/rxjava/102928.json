[{"authorTime":"2019-08-29 22:33:11","codes":[{"authorDate":"2019-08-29 22:33:11","commitOrder":1,"curCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedObservable<Integer, Integer>> groups = new ArrayList<GroupedObservable<Integer, Integer>>();\n\n        Observable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Observable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","date":"2019-08-29 22:33:11","endLine":1617,"groupId":"12179","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"abandonedGroupsNoDataloss","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/99/698d18c2dffa208ed9bd6447a7f2a3c6a5ac65.src","preCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedObservable<Integer, Integer>> groups = new ArrayList<GroupedObservable<Integer, Integer>>();\n\n        Observable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Observable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1591,"status":"B"},{"authorDate":"2019-08-29 22:33:11","commitOrder":1,"curCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedFlowable<Integer, Integer>> groups = new ArrayList<GroupedFlowable<Integer, Integer>>();\n\n        Flowable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Flowable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","date":"2019-08-29 22:33:11","endLine":2277,"groupId":"12179","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"abandonedGroupsNoDataloss","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/7f/eaab715c5a31bb39ac8c821bc1b1ae92e378b7.src","preCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedFlowable<Integer, Integer>> groups = new ArrayList<GroupedFlowable<Integer, Integer>>();\n\n        Flowable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Flowable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2251,"status":"B"}],"commitId":"9a36930bff81770c98b5babe58621fd8e49dba2d","commitMessage":"@@@3.x: Fix groupBy not canceling upstream due to group abandonment (#6642)\n\n* 3.x: Fix groupBy not canceling upstream due to group abandonment\n\n* Add codecov retry on connection refused\n\n* Retry connrefused\n\n* Connrefused not supported?\n","date":"2019-08-29 22:33:11","modifiedFileCount":"7","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-29 22:33:11","commitOrder":2,"curCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedObservable<Integer, Integer>> groups = new ArrayList<GroupedObservable<Integer, Integer>>();\n\n        Observable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Observable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","date":"2019-08-29 22:33:11","endLine":1617,"groupId":"12179","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"abandonedGroupsNoDataloss","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/99/698d18c2dffa208ed9bd6447a7f2a3c6a5ac65.src","preCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedObservable<Integer, Integer>> groups = new ArrayList<GroupedObservable<Integer, Integer>>();\n\n        Observable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Observable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1591,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedFlowable<Integer, Integer>> groups = new ArrayList<>();\n\n        Flowable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Flowable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":2303,"groupId":"12179","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"abandonedGroupsNoDataloss","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedFlowable<Integer, Integer>> groups = new ArrayList<GroupedFlowable<Integer, Integer>>();\n\n        Flowable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Flowable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2277,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedObservable<Integer, Integer>> groups = new ArrayList<>();\n\n        Observable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Observable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","date":"2019-12-22 18:59:44","endLine":1617,"groupId":"102928","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"abandonedGroupsNoDataloss","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/28/d3f2d6432c67ffdd0df5bbb6960b138ae6f15a.src","preCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedObservable<Integer, Integer>> groups = new ArrayList<GroupedObservable<Integer, Integer>>();\n\n        Observable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedObservable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedObservable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Observable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":1591,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedFlowable<Integer, Integer>> groups = new ArrayList<>();\n\n        Flowable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Flowable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","date":"2019-12-22 18:39:23","endLine":2303,"groupId":"102928","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"abandonedGroupsNoDataloss","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/a1/4372b9599f314326197c82e870337e2518f70d.src","preCode":"    public void abandonedGroupsNoDataloss() {\n        final List<GroupedFlowable<Integer, Integer>> groups = new ArrayList<>();\n\n        Flowable.range(1, 1000)\n        .groupBy(new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer v) throws Throwable {\n                return v % 10;\n            }\n        })\n        .doOnNext(new Consumer<GroupedFlowable<Integer, Integer>>() {\n            @Override\n            public void accept(GroupedFlowable<Integer, Integer> v) throws Throwable {\n                groups.add(v);\n            }\n        })\n        .test()\n        .assertValueCount(1000)\n        .assertComplete()\n        .assertNoErrors();\n\n        Flowable.concat(groups)\n        .test()\n        .assertValueCount(1000)\n        .assertNoErrors()\n        .assertComplete();\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":2277,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
