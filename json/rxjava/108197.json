[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    static final void scanFor(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k < 0 || k > idx) {\n                    \r\n                    e.append(\"java.lang.RuntimeException: missing \").append(inDoc).append(\" section\\r\\n\")\n                    ;\n                    int lc = lineNumber(sourceCode, idx);\n\n                    e.append(\" at io.reactivex.\").append(baseClassName)\n                    .append(\" (\").append(baseClassName).append(\".java:\")\n                    .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":106,"groupId":"6310","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"scanFor","params":"(StringBuildersourceCode@Stringannotation@StringinDoc@StringBuildere@StringbaseClassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2f/16d05c14617889fdcd00bc40db5d9c7855c304.src","preCode":"    static final void scanFor(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k < 0 || k > idx) {\n                    \r\n                    e.append(\"java.lang.RuntimeException: missing \").append(inDoc).append(\" section\\r\\n\")\n                    ;\n                    int lc = lineNumber(sourceCode, idx);\n\n                    e.append(\" at io.reactivex.\").append(baseClassName)\n                    .append(\" (\").append(baseClassName).append(\".java:\")\n                    .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocForAnnotations.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    static final void scanForBadMethod(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k >= 0 && k <= idx) {\n\n                    int ll = sourceCode.indexOf(\"You specify\", k);\n                    int lm = sourceCode.indexOf(\"This operator\", k);\n                    if ((ll < 0 || ll > idx) && (lm < 0 || lm > idx)) {\n\n                        int n = sourceCode.indexOf(\"{@code \", k);\n                        int endDD = sourceCode.indexOf(\"</dd>\", k);\n                        \r\n\n                        if (n < idx && n < endDD) {\n                            int m = sourceCode.indexOf(\"}\", n);\n\n                            if (m < idx) {\n                                String mname = sourceCode.substring(n + 7, m);\n\n                                int q = sourceCode.indexOf(\"@SuppressWarnings({\", idx);\n\n                                int o = sourceCode.indexOf(\"{\", idx);\n\n                                if (q + 18 == o) {\n                                    o = sourceCode.indexOf(\"{\", q + 20);\n                                }\n\n                                if (o >= 0) {\n\n                                    int p = sourceCode.indexOf(\" \" + mname + \"(\", idx);\n\n                                    if (p < 0 || p > o) {\n                                        \r\n                                        e.append(\"java.lang.RuntimeException: wrong method name in description of \").append(inDoc).append(\" '\").append(mname).append(\"'\\r\\n\")\n                                        ;\n                                        int lc = lineNumber(sourceCode, idx);\n\n                                        e.append(\" at io.reactivex.\").append(baseClassName)\n                                        .append(\" (\").append(baseClassName).append(\".java:\")\n                                        .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                                    }\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":174,"groupId":"8082","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"scanForBadMethod","params":"(StringBuildersourceCode@Stringannotation@StringinDoc@StringBuildere@StringbaseClassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2f/16d05c14617889fdcd00bc40db5d9c7855c304.src","preCode":"    static final void scanForBadMethod(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k >= 0 && k <= idx) {\n\n                    int ll = sourceCode.indexOf(\"You specify\", k);\n                    int lm = sourceCode.indexOf(\"This operator\", k);\n                    if ((ll < 0 || ll > idx) && (lm < 0 || lm > idx)) {\n\n                        int n = sourceCode.indexOf(\"{@code \", k);\n                        int endDD = sourceCode.indexOf(\"</dd>\", k);\n                        \r\n\n                        if (n < idx && n < endDD) {\n                            int m = sourceCode.indexOf(\"}\", n);\n\n                            if (m < idx) {\n                                String mname = sourceCode.substring(n + 7, m);\n\n                                int q = sourceCode.indexOf(\"@SuppressWarnings({\", idx);\n\n                                int o = sourceCode.indexOf(\"{\", idx);\n\n                                if (q + 18 == o) {\n                                    o = sourceCode.indexOf(\"{\", q + 20);\n                                }\n\n                                if (o >= 0) {\n\n                                    int p = sourceCode.indexOf(\" \" + mname + \"(\", idx);\n\n                                    if (p < 0 || p > o) {\n                                        \r\n                                        e.append(\"java.lang.RuntimeException: wrong method name in description of \").append(inDoc).append(\" '\").append(mname).append(\"'\\r\\n\")\n                                        ;\n                                        int lc = lineNumber(sourceCode, idx);\n\n                                        e.append(\" at io.reactivex.\").append(baseClassName)\n                                        .append(\" (\").append(baseClassName).append(\".java:\")\n                                        .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                                    }\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocForAnnotations.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-29 01:05:30","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    static final void scanFor(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k < 0 || k > idx) {\n                    \r\n                    e.append(\"java.lang.RuntimeException: missing \").append(inDoc).append(\" section\\r\\n\")\n                    ;\n                    int lc = lineNumber(sourceCode, idx);\n\n                    e.append(\" at io.reactivex.\").append(baseClassName)\n                    .append(\" (\").append(baseClassName).append(\".java:\")\n                    .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":106,"groupId":"6310","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"scanFor","params":"(StringBuildersourceCode@Stringannotation@StringinDoc@StringBuildere@StringbaseClassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2f/16d05c14617889fdcd00bc40db5d9c7855c304.src","preCode":"    static final void scanFor(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k < 0 || k > idx) {\n                    \r\n                    e.append(\"java.lang.RuntimeException: missing \").append(inDoc).append(\" section\\r\\n\")\n                    ;\n                    int lc = lineNumber(sourceCode, idx);\n\n                    e.append(\" at io.reactivex.\").append(baseClassName)\n                    .append(\" (\").append(baseClassName).append(\".java:\")\n                    .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocForAnnotations.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2019-12-29 01:05:30","commitOrder":2,"curCode":"    static final void scanForBadMethod(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k >= 0 && k <= idx) {\n\n                    int ll = sourceCode.indexOf(\"You specify\", k);\n                    int lm = sourceCode.indexOf(\"This operator\", k);\n                    if ((ll < 0 || ll > idx) && (lm < 0 || lm > idx)) {\n\n                        int n = sourceCode.indexOf(\"{@code \", k);\n                        int endDD = sourceCode.indexOf(\"</dd>\", k);\n                        \r\n\n                        if (n < idx && n < endDD) {\n                            int m = sourceCode.indexOf(\"}\", n);\n\n                            if (m < idx) {\n                                String mname = sourceCode.substring(n + 7, m);\n\n                                int q = sourceCode.indexOf(\"@SuppressWarnings({\", idx);\n\n                                int o = sourceCode.indexOf(\"{\", idx);\n\n                                if (q + 18 == o) {\n                                    o = sourceCode.indexOf(\"{\", q + 20);\n                                }\n\n                                if (o >= 0) {\n\n                                    int p = sourceCode.indexOf(\" \" + mname + \"(\", idx);\n\n                                    if (p < 0 || p > o) {\n                                        \r\n                                        e.append(\"java.lang.RuntimeException: wrong method name in description of \").append(inDoc).append(\" '\").append(mname).append(\"'\\r\\n\")\n                                        ;\n                                        int lc = lineNumber(sourceCode, idx);\n\n                                        e.append(\" at io.reactivex.rxjava3.core.\").append(baseClassName)\n                                        .append(\".method(\").append(baseClassName).append(\".java:\")\n                                        .append(lc).append(\")\").append(\"\\r\\n\");\n                                    }\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","date":"2019-12-29 01:05:30","endLine":174,"groupId":"8082","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"scanForBadMethod","params":"(StringBuildersourceCode@Stringannotation@StringinDoc@StringBuildere@StringbaseClassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/14/112951268caa96be12d09e7ecbb4c290df661e.src","preCode":"    static final void scanForBadMethod(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k >= 0 && k <= idx) {\n\n                    int ll = sourceCode.indexOf(\"You specify\", k);\n                    int lm = sourceCode.indexOf(\"This operator\", k);\n                    if ((ll < 0 || ll > idx) && (lm < 0 || lm > idx)) {\n\n                        int n = sourceCode.indexOf(\"{@code \", k);\n                        int endDD = sourceCode.indexOf(\"</dd>\", k);\n                        \r\n\n                        if (n < idx && n < endDD) {\n                            int m = sourceCode.indexOf(\"}\", n);\n\n                            if (m < idx) {\n                                String mname = sourceCode.substring(n + 7, m);\n\n                                int q = sourceCode.indexOf(\"@SuppressWarnings({\", idx);\n\n                                int o = sourceCode.indexOf(\"{\", idx);\n\n                                if (q + 18 == o) {\n                                    o = sourceCode.indexOf(\"{\", q + 20);\n                                }\n\n                                if (o >= 0) {\n\n                                    int p = sourceCode.indexOf(\" \" + mname + \"(\", idx);\n\n                                    if (p < 0 || p > o) {\n                                        \r\n                                        e.append(\"java.lang.RuntimeException: wrong method name in description of \").append(inDoc).append(\" '\").append(mname).append(\"'\\r\\n\")\n                                        ;\n                                        int lc = lineNumber(sourceCode, idx);\n\n                                        e.append(\" at io.reactivex.\").append(baseClassName)\n                                        .append(\" (\").append(baseClassName).append(\".java:\")\n                                        .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                                    }\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocForAnnotations.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"34f381ceec3fa0b5fc0a03c76161dc1cde2f09bc","commitMessage":"@@@3.x: [Java 8] Add flattenStreamAsX to Maybe/Single (#6805)\n\n* 3.x: [Java 8] Add flattenStreamAsX to Maybe/Single\n\n* Add RS TCK tests for flattenStreamAsFlowable\n","date":"2019-12-29 01:05:30","modifiedFileCount":"5","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-07 05:38:06","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":3,"curCode":"    static final void scanFor(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k < 0 || k > idx) {\n                    \r\n                    e.append(\"java.lang.RuntimeException: missing \").append(inDoc).append(\" section\\r\\n\")\n                    ;\n                    int lc = lineNumber(sourceCode, idx);\n\n                    e.append(\" at io.reactivex.\").append(baseClassName)\n                    .append(\" (\").append(baseClassName).append(\".java:\")\n                    .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","date":"2019-08-16 20:51:17","endLine":106,"groupId":"6310","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"scanFor","params":"(StringBuildersourceCode@Stringannotation@StringinDoc@StringBuildere@StringbaseClassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/2f/16d05c14617889fdcd00bc40db5d9c7855c304.src","preCode":"    static final void scanFor(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k < 0 || k > idx) {\n                    \r\n                    e.append(\"java.lang.RuntimeException: missing \").append(inDoc).append(\" section\\r\\n\")\n                    ;\n                    int lc = lineNumber(sourceCode, idx);\n\n                    e.append(\" at io.reactivex.\").append(baseClassName)\n                    .append(\" (\").append(baseClassName).append(\".java:\")\n                    .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocForAnnotations.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2020-01-07 05:38:06","commitOrder":3,"curCode":"    static final void scanForBadMethod(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k >= 0 && k <= idx) {\n\n                    int ll = sourceCode.indexOf(\"You specify\", k);\n                    if (ll < 0) {\n                        ll = sourceCode.indexOf(\"you specify\", k);\n                    }\n                    int lm = sourceCode.indexOf(\"This operator\", k);\n                    if (lm < 0) {\n                        lm = sourceCode.indexOf(\"this operator\", k);\n                    }\n                    if ((ll < 0 || ll > idx) && (lm < 0 || lm > idx)) {\n\n                        int n = sourceCode.indexOf(\"{@code \", k);\n                        int endDD = sourceCode.indexOf(\"</dd>\", k);\n                        \r\n\n                        if (n < idx && n < endDD) {\n                            int m = sourceCode.indexOf(\"}\", n);\n\n                            if (m < idx) {\n                                String mname = sourceCode.substring(n + 7, m);\n\n                                if (!\"Scheduler\".equals(mname)) {\n\n                                    int q = sourceCode.indexOf(\"@SuppressWarnings({\", idx);\n\n                                    int o = sourceCode.indexOf(\"{\", idx);\n\n                                    if (q + 18 == o) {\n                                        o = sourceCode.indexOf(\"{\", q + 20);\n                                    }\n\n                                    if (o >= 0) {\n\n                                        int p = sourceCode.indexOf(\" \" + mname + \"(\", idx);\n\n                                        if (p < 0 || p > o) {\n                                            \r\n                                            e.append(\"java.lang.RuntimeException: wrong method name in description of \").append(inDoc).append(\" '\").append(mname).append(\"'\\r\\n\")\n                                            ;\n                                            int lc = lineNumber(sourceCode, idx);\n\n                                            e.append(\" at io.reactivex.rxjava3.core.\").append(baseClassName)\n                                            .append(\".method(\").append(baseClassName).append(\".java:\")\n                                            .append(lc).append(\")\").append(\"\\r\\n\");\n                                        }\n                                    }\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","date":"2020-01-07 05:38:06","endLine":183,"groupId":"6313","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"scanForBadMethod","params":"(StringBuildersourceCode@Stringannotation@StringinDoc@StringBuildere@StringbaseClassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9a/63ea2b0d555a4dd1f89212b57733e21807e940.src","preCode":"    static final void scanForBadMethod(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k >= 0 && k <= idx) {\n\n                    int ll = sourceCode.indexOf(\"You specify\", k);\n                    int lm = sourceCode.indexOf(\"This operator\", k);\n                    if ((ll < 0 || ll > idx) && (lm < 0 || lm > idx)) {\n\n                        int n = sourceCode.indexOf(\"{@code \", k);\n                        int endDD = sourceCode.indexOf(\"</dd>\", k);\n                        \r\n\n                        if (n < idx && n < endDD) {\n                            int m = sourceCode.indexOf(\"}\", n);\n\n                            if (m < idx) {\n                                String mname = sourceCode.substring(n + 7, m);\n\n                                int q = sourceCode.indexOf(\"@SuppressWarnings({\", idx);\n\n                                int o = sourceCode.indexOf(\"{\", idx);\n\n                                if (q + 18 == o) {\n                                    o = sourceCode.indexOf(\"{\", q + 20);\n                                }\n\n                                if (o >= 0) {\n\n                                    int p = sourceCode.indexOf(\" \" + mname + \"(\", idx);\n\n                                    if (p < 0 || p > o) {\n                                        \r\n                                        e.append(\"java.lang.RuntimeException: wrong method name in description of \").append(inDoc).append(\" '\").append(mname).append(\"'\\r\\n\")\n                                        ;\n                                        int lc = lineNumber(sourceCode, idx);\n\n                                        e.append(\" at io.reactivex.rxjava3.core.\").append(baseClassName)\n                                        .append(\".method(\").append(baseClassName).append(\".java:\")\n                                        .append(lc).append(\")\").append(\"\\r\\n\");\n                                    }\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocForAnnotations.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"4c8d49bba90faa83bb799319c785446aa75a8705","commitMessage":"@@@3.x: Improve Javadocs of Single (#6812)\n\n","date":"2020-01-07 05:38:06","modifiedFileCount":"4","status":"M","submitter":"David Karnok"},{"authorTime":"2020-01-07 05:38:06","codes":[{"authorDate":"2021-07-17 18:53:55","commitOrder":4,"curCode":"    static final void scanFor(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k < 0 || k > idx) {\n                    \r\n                    e.append(\"java.lang.RuntimeException: missing \").append(inDoc).append(\" section\\r\\n\")\n                    ;\n                    int lc = lineNumber(sourceCode, idx);\n\n                    e.append(\" at io.reactivex.rxjava3.core.\").append(baseClassName)\n                    .append(\" (\").append(baseClassName).append(\".java:\")\n                    .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","date":"2021-07-17 18:53:55","endLine":106,"groupId":"108197","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"scanFor","params":"(StringBuildersourceCode@Stringannotation@StringinDoc@StringBuildere@StringbaseClassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1c/683783d67cf215748a7d8ac6b94593c8ae5933.src","preCode":"    static final void scanFor(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k < 0 || k > idx) {\n                    \r\n                    e.append(\"java.lang.RuntimeException: missing \").append(inDoc).append(\" section\\r\\n\")\n                    ;\n                    int lc = lineNumber(sourceCode, idx);\n\n                    e.append(\" at io.reactivex.\").append(baseClassName)\n                    .append(\" (\").append(baseClassName).append(\".java:\")\n                    .append(lc).append(\")\").append(\"\\r\\n\\r\\n\");\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocForAnnotations.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-01-07 05:38:06","commitOrder":4,"curCode":"    static final void scanForBadMethod(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k >= 0 && k <= idx) {\n\n                    int ll = sourceCode.indexOf(\"You specify\", k);\n                    if (ll < 0) {\n                        ll = sourceCode.indexOf(\"you specify\", k);\n                    }\n                    int lm = sourceCode.indexOf(\"This operator\", k);\n                    if (lm < 0) {\n                        lm = sourceCode.indexOf(\"this operator\", k);\n                    }\n                    if ((ll < 0 || ll > idx) && (lm < 0 || lm > idx)) {\n\n                        int n = sourceCode.indexOf(\"{@code \", k);\n                        int endDD = sourceCode.indexOf(\"</dd>\", k);\n                        \r\n\n                        if (n < idx && n < endDD) {\n                            int m = sourceCode.indexOf(\"}\", n);\n\n                            if (m < idx) {\n                                String mname = sourceCode.substring(n + 7, m);\n\n                                if (!\"Scheduler\".equals(mname)) {\n\n                                    int q = sourceCode.indexOf(\"@SuppressWarnings({\", idx);\n\n                                    int o = sourceCode.indexOf(\"{\", idx);\n\n                                    if (q + 18 == o) {\n                                        o = sourceCode.indexOf(\"{\", q + 20);\n                                    }\n\n                                    if (o >= 0) {\n\n                                        int p = sourceCode.indexOf(\" \" + mname + \"(\", idx);\n\n                                        if (p < 0 || p > o) {\n                                            \r\n                                            e.append(\"java.lang.RuntimeException: wrong method name in description of \").append(inDoc).append(\" '\").append(mname).append(\"'\\r\\n\")\n                                            ;\n                                            int lc = lineNumber(sourceCode, idx);\n\n                                            e.append(\" at io.reactivex.rxjava3.core.\").append(baseClassName)\n                                            .append(\".method(\").append(baseClassName).append(\".java:\")\n                                            .append(lc).append(\")\").append(\"\\r\\n\");\n                                        }\n                                    }\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","date":"2020-01-07 05:38:06","endLine":183,"groupId":"108197","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"scanForBadMethod","params":"(StringBuildersourceCode@Stringannotation@StringinDoc@StringBuildere@StringbaseClassName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/9a/63ea2b0d555a4dd1f89212b57733e21807e940.src","preCode":"    static final void scanForBadMethod(StringBuilder sourceCode, String annotation, String inDoc,\n            StringBuilder e, String baseClassName) {\n        int index = 0;\n        for (;;) {\n            int idx = sourceCode.indexOf(annotation, index);\n\n            if (idx < 0) {\n                break;\n            }\n\n            int j = sourceCode.lastIndexOf(\"/**\", idx);\n\n            \r\n            \r\n            if (j > index) {\n                int k = sourceCode.indexOf(inDoc, j);\n\n                if (k >= 0 && k <= idx) {\n\n                    int ll = sourceCode.indexOf(\"You specify\", k);\n                    if (ll < 0) {\n                        ll = sourceCode.indexOf(\"you specify\", k);\n                    }\n                    int lm = sourceCode.indexOf(\"This operator\", k);\n                    if (lm < 0) {\n                        lm = sourceCode.indexOf(\"this operator\", k);\n                    }\n                    if ((ll < 0 || ll > idx) && (lm < 0 || lm > idx)) {\n\n                        int n = sourceCode.indexOf(\"{@code \", k);\n                        int endDD = sourceCode.indexOf(\"</dd>\", k);\n                        \r\n\n                        if (n < idx && n < endDD) {\n                            int m = sourceCode.indexOf(\"}\", n);\n\n                            if (m < idx) {\n                                String mname = sourceCode.substring(n + 7, m);\n\n                                if (!\"Scheduler\".equals(mname)) {\n\n                                    int q = sourceCode.indexOf(\"@SuppressWarnings({\", idx);\n\n                                    int o = sourceCode.indexOf(\"{\", idx);\n\n                                    if (q + 18 == o) {\n                                        o = sourceCode.indexOf(\"{\", q + 20);\n                                    }\n\n                                    if (o >= 0) {\n\n                                        int p = sourceCode.indexOf(\" \" + mname + \"(\", idx);\n\n                                        if (p < 0 || p > o) {\n                                            \r\n                                            e.append(\"java.lang.RuntimeException: wrong method name in description of \").append(inDoc).append(\" '\").append(mname).append(\"'\\r\\n\")\n                                            ;\n                                            int lc = lineNumber(sourceCode, idx);\n\n                                            e.append(\" at io.reactivex.rxjava3.core.\").append(baseClassName)\n                                            .append(\".method(\").append(baseClassName).append(\".java:\")\n                                            .append(lc).append(\")\").append(\"\\r\\n\");\n                                        }\n                                    }\n                                }\n                            }\n\n                        }\n\n                    }\n                }\n            }\n\n            index = idx + annotation.length();\n        }\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/validators/JavadocForAnnotations.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"}],"commitId":"66fd701417563fd21c24c177447c332191931dc4","commitMessage":"@@@3.x: Add subscribe with disposable container (#7298)\n\n","date":"2021-07-17 18:53:55","modifiedFileCount":"9","status":"M","submitter":"David Karnok"}]
