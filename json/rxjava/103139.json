[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void fusionRejected() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ASYNC);\n\n        Observable.fromIterable(Arrays.asList(1, 2, 3))\n        .subscribe(to);\n\n        to.assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3);\n    }\n","date":"2019-08-16 20:51:17","endLine":313,"groupId":"11467","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fusionRejected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/4c/d33b78e9de051c712ef9011628dbd691a4202b.src","preCode":"    public void fusionRejected() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ASYNC);\n\n        Observable.fromIterable(Arrays.asList(1, 2, 3))\n        .subscribe(to);\n\n        to.assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void fusionRejected() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>().setInitialFusionMode(QueueFuseable.ASYNC);\n\n        Flowable.fromIterable(Arrays.asList(1, 2, 3))\n        .subscribe(ts);\n\n        ts.assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3);\n    }\n","date":"2019-08-16 20:51:17","endLine":879,"groupId":"8542","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fusionRejected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1b/21baf6106b8abe78bf9b65054cde663a6c844f.src","preCode":"    public void fusionRejected() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>().setInitialFusionMode(QueueFuseable.ASYNC);\n\n        Flowable.fromIterable(Arrays.asList(1, 2, 3))\n        .subscribe(ts);\n\n        ts.assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":2,"curCode":"    public void fusionRejected() {\n        TestObserverEx<Integer> to = new TestObserverEx<>(QueueFuseable.ASYNC);\n\n        Observable.fromIterable(Arrays.asList(1, 2, 3))\n        .subscribe(to);\n\n        to.assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3);\n    }\n","date":"2019-12-22 18:59:44","endLine":313,"groupId":"103139","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fusionRejected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/d7/44472b66006b3a9a00b1fba6e1a8fbfae8dc12.src","preCode":"    public void fusionRejected() {\n        TestObserverEx<Integer> to = new TestObserverEx<Integer>(QueueFuseable.ASYNC);\n\n        Observable.fromIterable(Arrays.asList(1, 2, 3))\n        .subscribe(to);\n\n        to.assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"},{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void fusionRejected() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>().setInitialFusionMode(QueueFuseable.ASYNC);\n\n        Flowable.fromIterable(Arrays.asList(1, 2, 3))\n        .subscribe(ts);\n\n        ts.assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3);\n    }\n","date":"2019-08-16 20:51:17","endLine":879,"groupId":"103139","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fusionRejected","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/1b/21baf6106b8abe78bf9b65054cde663a6c844f.src","preCode":"    public void fusionRejected() {\n        TestSubscriberEx<Integer> ts = new TestSubscriberEx<Integer>().setInitialFusionMode(QueueFuseable.ASYNC);\n\n        Flowable.fromIterable(Arrays.asList(1, 2, 3))\n        .subscribe(ts);\n\n        ts.assertFusionMode(QueueFuseable.NONE)\n        .assertResult(1, 2, 3);\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableFromIterableTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
