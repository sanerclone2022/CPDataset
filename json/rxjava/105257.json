[{"authorTime":"2019-08-16 20:51:17","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void takeUntilWithPublishedStream() {\n        Observable<Integer> xs = Observable.range(0, Flowable.bufferSize() * 2);\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        ConnectableObservable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(to);\n        xsp.connect();\n        System.out.println(to.values());\n    }\n","date":"2019-08-16 20:51:17","endLine":188,"groupId":"6166","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"takeUntilWithPublishedStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/f0140e5de8fe5399071cc09e7e171d010d689c.src","preCode":"    public void takeUntilWithPublishedStream() {\n        Observable<Integer> xs = Observable.range(0, Flowable.bufferSize() * 2);\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        ConnectableObservable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(to);\n        xsp.connect();\n        System.out.println(to.values());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"},{"authorDate":"2019-08-16 20:51:17","commitOrder":1,"curCode":"    public void takeUntilWithPublishedStream() {\n        Flowable<Integer> xs = Flowable.range(0, Flowable.bufferSize() * 2);\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ConnectableFlowable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(ts);\n        xsp.connect();\n        System.out.println(ts.values());\n    }\n","date":"2019-08-16 20:51:17","endLine":190,"groupId":"11314","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"takeUntilWithPublishedStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/0e/cba3926fbcf7b2764c9247a412564b573a29e2.src","preCode":"    public void takeUntilWithPublishedStream() {\n        Flowable<Integer> xs = Flowable.range(0, Flowable.bufferSize() * 2);\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ConnectableFlowable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(ts);\n        xsp.connect();\n        System.out.println(ts.values());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"B"}],"commitId":"a1693ecc9215027a7a3eae75272979ebb4d79a27","commitMessage":"@@@3.x: Refactor to io.reactivex.rxjava3.** (#6621)\n\n* 3.x: Refactor to io.reactivex.rxjava3.**\n\n* fix javadoc cleanup gradle\n\n* javadoc gradle again\n\n* Fix package location in text\n","date":"2019-08-16 20:51:17","modifiedFileCount":"0","status":"B","submitter":"David Karnok"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-08-16 20:51:17","commitOrder":2,"curCode":"    public void takeUntilWithPublishedStream() {\n        Observable<Integer> xs = Observable.range(0, Flowable.bufferSize() * 2);\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        ConnectableObservable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(to);\n        xsp.connect();\n        System.out.println(to.values());\n    }\n","date":"2019-08-16 20:51:17","endLine":188,"groupId":"6166","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"takeUntilWithPublishedStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/38/f0140e5de8fe5399071cc09e7e171d010d689c.src","preCode":"    public void takeUntilWithPublishedStream() {\n        Observable<Integer> xs = Observable.range(0, Flowable.bufferSize() * 2);\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        ConnectableObservable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(to);\n        xsp.connect();\n        System.out.println(to.values());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"},{"authorDate":"2019-12-22 18:39:23","commitOrder":2,"curCode":"    public void takeUntilWithPublishedStream() {\n        Flowable<Integer> xs = Flowable.range(0, Flowable.bufferSize() * 2);\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        ConnectableFlowable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(ts);\n        xsp.connect();\n        System.out.println(ts.values());\n    }\n","date":"2019-12-22 18:39:23","endLine":190,"groupId":"6166","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"takeUntilWithPublishedStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/7c88da0970993e17039e0d66dc301b746e7fd0.src","preCode":"    public void takeUntilWithPublishedStream() {\n        Flowable<Integer> xs = Flowable.range(0, Flowable.bufferSize() * 2);\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        ConnectableFlowable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(ts);\n        xsp.connect();\n        System.out.println(ts.values());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"e162d664d86639b97c214054aca346fc2ba37e33","commitMessage":"@@@diamond operators in unit tests.  flowable package (#6787)\n\n","date":"2019-12-22 18:39:23","modifiedFileCount":"111","status":"M","submitter":"Dmitry Volkov"},{"authorTime":"2019-12-22 18:39:23","codes":[{"authorDate":"2019-12-22 18:59:44","commitOrder":3,"curCode":"    public void takeUntilWithPublishedStream() {\n        Observable<Integer> xs = Observable.range(0, Flowable.bufferSize() * 2);\n        TestObserver<Integer> to = new TestObserver<>();\n        ConnectableObservable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(to);\n        xsp.connect();\n        System.out.println(to.values());\n    }\n","date":"2019-12-22 18:59:44","endLine":188,"groupId":"105257","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"takeUntilWithPublishedStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/16/cb03d00e72ebea8aaf23169601c3b0c6740c5f.src","preCode":"    public void takeUntilWithPublishedStream() {\n        Observable<Integer> xs = Observable.range(0, Flowable.bufferSize() * 2);\n        TestObserver<Integer> to = new TestObserver<Integer>();\n        ConnectableObservable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(to);\n        xsp.connect();\n        System.out.println(to.values());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/observable/ObservablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2019-12-22 18:39:23","commitOrder":3,"curCode":"    public void takeUntilWithPublishedStream() {\n        Flowable<Integer> xs = Flowable.range(0, Flowable.bufferSize() * 2);\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        ConnectableFlowable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(ts);\n        xsp.connect();\n        System.out.println(ts.values());\n    }\n","date":"2019-12-22 18:39:23","endLine":190,"groupId":"105257","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"takeUntilWithPublishedStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-rxjava-10-0.7/blobInfo/CC_OUT/blobs/ec/7c88da0970993e17039e0d66dc301b746e7fd0.src","preCode":"    public void takeUntilWithPublishedStream() {\n        Flowable<Integer> xs = Flowable.range(0, Flowable.bufferSize() * 2);\n        TestSubscriber<Integer> ts = new TestSubscriber<>();\n        ConnectableFlowable<Integer> xsp = xs.publish();\n        xsp.takeUntil(xsp.skipWhile(new Predicate<Integer>() {\n\n            @Override\n            public boolean test(Integer i) {\n                return i <= 3;\n            }\n\n        })).subscribe(ts);\n        xsp.connect();\n        System.out.println(ts.values());\n    }\n","realPath":"src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowablePublishTest.java","repoName":"rxjava","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"N"}],"commitId":"d6d698213b6c4091f4d5a0fb47f0922d0d0618e3","commitMessage":"@@@diamond operators in unit tests.  observable package (#6786)\n\n","date":"2019-12-22 18:59:44","modifiedFileCount":"95","status":"M","submitter":"Dmitry Volkov"}]
