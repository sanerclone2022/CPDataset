[{"authorTime":"2006-07-20 20:50:34","codes":[{"authorDate":"2006-07-20 20:50:34","commitOrder":1,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() \r\n                                || tldAttrs[j].isDeferredValue()) { \r\n                            Class expectedType = String.class;\n                            try {\n                                String typeStr = tldAttrs[j].getTypeName();\n                                if (tldAttrs[j].isFragment()) {\n                                    expectedType = JspFragment.class;\n                                } else if (typeStr != null) {\n                                    expectedType = JspUtil.toClass(typeStr,\n                                            loader);\n                                }\n                                jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                        false);\n                            } catch (ClassNotFoundException e) {\n                                err.jspError(n,\n                                        \"jsp.error.unknown_attribute_type\",\n                                        tldAttrs[j].getName(), tldAttrs[j]\n                                                .getTypeName());\n                            }\n                        } else {\n                            \r\n                            \r\n                            if (isExpression(n, attrs.getValue(i))) {\n                                err\n                                        .jspError(\n                                                n,\n                                                \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-07-20 20:50:34","endLine":1040,"groupId":"16762","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@HashtabletagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/00/e1f76c610bf1264c1a7fae2106fe8cf242dda7.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() \r\n                                || tldAttrs[j].isDeferredValue()) { \r\n                            Class expectedType = String.class;\n                            try {\n                                String typeStr = tldAttrs[j].getTypeName();\n                                if (tldAttrs[j].isFragment()) {\n                                    expectedType = JspFragment.class;\n                                } else if (typeStr != null) {\n                                    expectedType = JspUtil.toClass(typeStr,\n                                            loader);\n                                }\n                                jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                        false);\n                            } catch (ClassNotFoundException e) {\n                                err.jspError(n,\n                                        \"jsp.error.unknown_attribute_type\",\n                                        tldAttrs[j].getName(), tldAttrs[j]\n                                                .getTypeName());\n                            }\n                        } else {\n                            \r\n                            \r\n                            if (isExpression(n, attrs.getValue(i))) {\n                                err\n                                        .jspError(\n                                                n,\n                                                \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":961,"status":"B"},{"authorDate":"2006-07-20 20:50:34","commitOrder":1,"curCode":"        private boolean isExpression(Node n, String value) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-07-20 20:50:34","endLine":1200,"groupId":"6641","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/00/e1f76c610bf1264c1a7fae2106fe8cf242dda7.src","preCode":"        private boolean isExpression(Node n, String value) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1193,"status":"B"}],"commitId":"eae54419c6e196933998f63358367040edaa4a8c","commitMessage":"@@@Phase 1: Setting eol and mime types\n@echo off\nif \"%OS%\" == \"Windows_NT\" setlocal\n\nif \"%1\" == \"\" (\nset SCRIPT_NAME=%~f0\n) else (\nset SCRIPT_NAME=%~f1\n)\n\nfor /D %%i in (*) do (\ncd %%i\nsvn propset svn:eol-style native *.java\nsvn propset svn:eol-style native *.properties\nsvn propset svn:eol-style native *.xml\nsvn propset svn:eol-style native *.xsd\nsvn propset svn:eol-style native *.xsl\nsvn propset svn:eol-style native *.dtd\nsvn propset svn:eol-style native *.tld\nsvn propset svn:eol-style native *.html\nsvn propset svn:eol-style native *.txt\nsvn propset svn:eol-style native *.jsp\nsvn propset svn:eol-style native *.jspx\nsvn propset svn:eol-style native *.jspf\nsvn propset svn:eol-style native *.sh\nsvn propset svn:eol-style native *.bat\nsvn propset svn:eol-style native *.svg\nsvn propset svn:mime-type image/gif *.gif\nsvn propset svn:mime-type image/jpeg *.jpg\nsvn propset svn:mime-type image/bmp *.bmp\nsvn propset svn:mime-type application/pdf *.pdf\nsvn propset svn:mime-type application/pdf *.pdf\nsvn propset svn:mime-type image/x-icon *.ico\n\ncall %SCRIPT_NAME% %SCRIPT_NAME%\ncd ..\n)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@423920 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-07-20 20:50:34","modifiedFileCount":"858","status":"B","submitter":"Mladen Turk"},{"authorTime":"2006-10-27 07:19:13","codes":[{"authorDate":"2006-07-20 20:50:34","commitOrder":2,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() \r\n                                || tldAttrs[j].isDeferredValue()) { \r\n                            Class expectedType = String.class;\n                            try {\n                                String typeStr = tldAttrs[j].getTypeName();\n                                if (tldAttrs[j].isFragment()) {\n                                    expectedType = JspFragment.class;\n                                } else if (typeStr != null) {\n                                    expectedType = JspUtil.toClass(typeStr,\n                                            loader);\n                                }\n                                jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                        false);\n                            } catch (ClassNotFoundException e) {\n                                err.jspError(n,\n                                        \"jsp.error.unknown_attribute_type\",\n                                        tldAttrs[j].getName(), tldAttrs[j]\n                                                .getTypeName());\n                            }\n                        } else {\n                            \r\n                            \r\n                            if (isExpression(n, attrs.getValue(i))) {\n                                err\n                                        .jspError(\n                                                n,\n                                                \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-07-20 20:50:34","endLine":1040,"groupId":"16762","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@HashtabletagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/00/e1f76c610bf1264c1a7fae2106fe8cf242dda7.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() \r\n                                || tldAttrs[j].isDeferredValue()) { \r\n                            Class expectedType = String.class;\n                            try {\n                                String typeStr = tldAttrs[j].getTypeName();\n                                if (tldAttrs[j].isFragment()) {\n                                    expectedType = JspFragment.class;\n                                } else if (typeStr != null) {\n                                    expectedType = JspUtil.toClass(typeStr,\n                                            loader);\n                                }\n                                jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                        false);\n                            } catch (ClassNotFoundException e) {\n                                err.jspError(n,\n                                        \"jsp.error.unknown_attribute_type\",\n                                        tldAttrs[j].getName(), tldAttrs[j]\n                                                .getTypeName());\n                            }\n                        } else {\n                            \r\n                            \r\n                            if (isExpression(n, attrs.getValue(i))) {\n                                err\n                                        .jspError(\n                                                n,\n                                                \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":961,"status":"N"},{"authorDate":"2006-10-27 07:19:13","commitOrder":2,"curCode":"        private boolean isExpression(Node n, String value) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-10-27 07:19:13","endLine":1205,"groupId":"6641","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/69/6b206c917b685f4e2ef395bc0fda629d86df2f.src","preCode":"        private boolean isExpression(Node n, String value) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1196,"status":"M"}],"commitId":"8834a477de4371b5a39129369c4631f1af2a0917","commitMessage":"@@@- Some deferred expressions handling fixes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@468186 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-10-27 07:19:13","modifiedFileCount":"3","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-10-31 22:27:22","codes":[{"authorDate":"2006-10-31 22:27:22","commitOrder":3,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() \r\n                                || tldAttrs[j].isDeferredValue()) { \r\n                            Class expectedType = String.class;\n                            try {\n                                String typeStr = tldAttrs[j].getTypeName();\n                                if (tldAttrs[j].isFragment()) {\n                                    expectedType = JspFragment.class;\n                                } else if (typeStr != null) {\n                                    expectedType = JspUtil.toClass(typeStr,\n                                            loader);\n                                }\n                                jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                        false);\n                            } catch (ClassNotFoundException e) {\n                                err.jspError(n,\n                                        \"jsp.error.unknown_attribute_type\",\n                                        tldAttrs[j].getName(), tldAttrs[j]\n                                                .getTypeName());\n                            }\n                        } else {\n                            \r\n                            \r\n                            if (isExpression(n, attrs.getValue(i), \n                                    !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\"))) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-10-31 22:27:22","endLine":1044,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@HashtabletagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/17f6cd46c56ef4f13830a07bf424935d92b81d.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() \r\n                                || tldAttrs[j].isDeferredValue()) { \r\n                            Class expectedType = String.class;\n                            try {\n                                String typeStr = tldAttrs[j].getTypeName();\n                                if (tldAttrs[j].isFragment()) {\n                                    expectedType = JspFragment.class;\n                                } else if (typeStr != null) {\n                                    expectedType = JspUtil.toClass(typeStr,\n                                            loader);\n                                }\n                                jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                        false);\n                            } catch (ClassNotFoundException e) {\n                                err.jspError(n,\n                                        \"jsp.error.unknown_attribute_type\",\n                                        tldAttrs[j].getName(), tldAttrs[j]\n                                                .getTypeName());\n                            }\n                        } else {\n                            \r\n                            \r\n                            if (isExpression(n, attrs.getValue(i))) {\n                                err .jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":967,"status":"M"},{"authorDate":"2006-10-31 22:27:22","commitOrder":3,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-10-31 22:27:22","endLine":1206,"groupId":"6641","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/17f6cd46c56ef4f13830a07bf424935d92b81d.src","preCode":"        private boolean isExpression(Node n, String value) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"M"}],"commitId":"315694b534c0bac68e5d9b4ffe6bc7f88eecf897","commitMessage":"@@@- Taglibs have their own version number.  so isExpression gets an adjustment allowing not checking for deferred\n  expressions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@469498 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-10-31 22:27:22","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-10-31 22:27:22","codes":[{"authorDate":"2006-11-01 09:20:18","commitOrder":4,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean el = true;\n                        boolean deferredValue = false;\n                        if (!tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\") \n                                && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            el = false;\n                            if (!pageInfo.isELIgnored() && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                deferredValue = true;\n                            }\n                        }\n                        if ((el && tldAttrs[j].canBeRequestTime())\n                                || (deferredValue && tldAttrs[j].isDeferredMethod()) \r\n                                || (deferredValue && tldAttrs[j].isDeferredValue())) { \r\n                            Class expectedType = String.class;\n                            try {\n                                String typeStr = tldAttrs[j].getTypeName();\n                                if (tldAttrs[j].isFragment()) {\n                                    expectedType = JspFragment.class;\n                                } else if (typeStr != null) {\n                                    expectedType = JspUtil.toClass(typeStr,\n                                            loader);\n                                }\n                                jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                        false);\n                            } catch (ClassNotFoundException e) {\n                                err.jspError(n,\n                                        \"jsp.error.unknown_attribute_type\",\n                                        tldAttrs[j].getName(), tldAttrs[j]\n                                                .getTypeName());\n                            }\n                        } else {\n                            \r\n                            \r\n                            if (isExpression(n, attrs.getValue(i), \n                                    !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\"))) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-11-01 09:20:18","endLine":1055,"groupId":"6634","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@HashtabletagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9a/67341b09ffd90f8268f3c8954350d7a897f051.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() \r\n                                || tldAttrs[j].isDeferredValue()) { \r\n                            Class expectedType = String.class;\n                            try {\n                                String typeStr = tldAttrs[j].getTypeName();\n                                if (tldAttrs[j].isFragment()) {\n                                    expectedType = JspFragment.class;\n                                } else if (typeStr != null) {\n                                    expectedType = JspUtil.toClass(typeStr,\n                                            loader);\n                                }\n                                jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                        false);\n                            } catch (ClassNotFoundException e) {\n                                err.jspError(n,\n                                        \"jsp.error.unknown_attribute_type\",\n                                        tldAttrs[j].getName(), tldAttrs[j]\n                                                .getTypeName());\n                            }\n                        } else {\n                            \r\n                            \r\n                            if (isExpression(n, attrs.getValue(i), \n                                    !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\"))) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":969,"status":"M"},{"authorDate":"2006-10-31 22:27:22","commitOrder":4,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-10-31 22:27:22","endLine":1206,"groupId":"6641","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/17f6cd46c56ef4f13830a07bf424935d92b81d.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"N"}],"commitId":"d54d6f3c5277f3564e31987b3ee54f674e97a88b","commitMessage":"@@@- Adjust the tests for deferred expressions evaluation.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@469739 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-11-01 09:20:18","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-10-31 22:27:22","codes":[{"authorDate":"2006-11-02 22:30:39","commitOrder":5,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        \r\n\r\n\r\n\r\n\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    \n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    \n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && (tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue())) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-11-02 22:30:39","endLine":1140,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@HashtabletagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/38/357c099f70e2c2cecf7917da9f4e5bd09eef6a.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean el = true;\n                        boolean deferredValue = false;\n                        if (!tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\") \n                                && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            el = false;\n                            if (!pageInfo.isELIgnored() && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                deferredValue = true;\n                            }\n                        }\n                        if ((el && tldAttrs[j].canBeRequestTime())\n                                || (deferredValue && tldAttrs[j].isDeferredMethod()) \r\n                                || (deferredValue && tldAttrs[j].isDeferredValue())) { \r\n                            Class expectedType = String.class;\n                            try {\n                                String typeStr = tldAttrs[j].getTypeName();\n                                if (tldAttrs[j].isFragment()) {\n                                    expectedType = JspFragment.class;\n                                } else if (typeStr != null) {\n                                    expectedType = JspUtil.toClass(typeStr,\n                                            loader);\n                                }\n                                jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                        false);\n                            } catch (ClassNotFoundException e) {\n                                err.jspError(n,\n                                        \"jsp.error.unknown_attribute_type\",\n                                        tldAttrs[j].getName(), tldAttrs[j]\n                                                .getTypeName());\n                            }\n                        } else {\n                            \r\n                            \r\n                            if (isExpression(n, attrs.getValue(i), \n                                    !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\"))) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1011,"status":"M"},{"authorDate":"2006-10-31 22:27:22","commitOrder":5,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-10-31 22:27:22","endLine":1206,"groupId":"6641","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/17f6cd46c56ef4f13830a07bf424935d92b81d.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"N"}],"commitId":"77ec01f3f6a15c8da5ba333d1b1ed31f67a20df6","commitMessage":"@@@- Redo the checkXmlAttributes method.  as I could not sneak in the type checking for litterals that are passed to\n  methods (or values.  right ?). Unfortunately.  some translation time (rather than runtime) errors are needed for these.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@470373 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-11-02 22:30:39","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-10-31 22:27:22","codes":[{"authorDate":"2006-11-03 06:56:45","commitOrder":6,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && (tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue())) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-11-03 06:56:45","endLine":1162,"groupId":"11621","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@HashtabletagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f1/de40851e9c6c591a176181624d9253ec919119.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        \r\n\r\n\r\n\r\n\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    \n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    \n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && (tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue())) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1012,"status":"M"},{"authorDate":"2006-10-31 22:27:22","commitOrder":6,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-10-31 22:27:22","endLine":1206,"groupId":"6641","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/17f6cd46c56ef4f13830a07bf424935d92b81d.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"N"}],"commitId":"51c5030a8a60dbfc489a8b1c0a711e00c3eabd21","commitMessage":"@@@- Add translation time type checks for String.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@470584 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-11-03 06:56:45","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-10-31 22:27:22","codes":[{"authorDate":"2006-11-04 10:11:17","commitOrder":7,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && (tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue())) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-11-04 10:11:17","endLine":1159,"groupId":"11621","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/74/ad7e5d8172670380284dda8d1fb815e1acf3b2.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && (tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue())) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1009,"status":"M"},{"authorDate":"2006-10-31 22:27:22","commitOrder":7,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-10-31 22:27:22","endLine":1206,"groupId":"6641","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/17f6cd46c56ef4f13830a07bf424935d92b81d.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"N"}],"commitId":"4d3fffe70980a88c39abd7b9747f9197875bf40a","commitMessage":"@@@- Expose the EL type through the Root node to be able to determine the EL type for JspAttribute.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@471096 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-11-04 10:11:17","modifiedFileCount":"3","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-10-31 22:27:22","codes":[{"authorDate":"2006-11-07 18:45:01","commitOrder":8,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-11-07 18:45:01","endLine":1159,"groupId":"1892","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ff/53186c5ca82050d68968e7f634fdc5b0106597.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && (tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue())) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1009,"status":"M"},{"authorDate":"2006-10-31 22:27:22","commitOrder":8,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-10-31 22:27:22","endLine":1206,"groupId":"6641","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/17f6cd46c56ef4f13830a07bf424935d92b81d.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"N"}],"commitId":"f7ca96df28a7e4d77a2702e724da64c0d4443e57","commitMessage":"@@@- 40913: Fix the second test when an expression is used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@472057 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-11-07 18:45:01","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-10-31 22:27:22","codes":[{"authorDate":"2006-11-30 05:10:40","commitOrder":9,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-11-30 05:10:40","endLine":1159,"groupId":"1892","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/21/c111df817526a837cd91a416ace6276afa61b0.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1009,"status":"M"},{"authorDate":"2006-10-31 22:27:22","commitOrder":9,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-10-31 22:27:22","endLine":1206,"groupId":"6641","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/17f6cd46c56ef4f13830a07bf424935d92b81d.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"N"}],"commitId":"b55f2d865c5f40a7777f3f1534489996cbf3c585","commitMessage":"@@@- Use a separate method for checking primitives. I'll keep the check for now since I have the impression it's tested.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@480713 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-11-30 05:10:40","modifiedFileCount":"2","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-10-31 22:27:22","codes":[{"authorDate":"2006-12-05 09:02:06","commitOrder":10,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                                || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2006-12-05 09:02:06","endLine":1161,"groupId":"1892","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/83/e0ac44c13652cffd62ae7c991cc1879c567064.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\");\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1010,"status":"M"},{"authorDate":"2006-10-31 22:27:22","commitOrder":10,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","date":"2006-10-31 22:27:22","endLine":1206,"groupId":"6641","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/17f6cd46c56ef4f13830a07bf424935d92b81d.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"N"}],"commitId":"a4c1b0b3466e9246995504c29cf7e3f1da7f8146","commitMessage":"@@@- Add 1.2 as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@482434 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-12-05 09:02:06","modifiedFileCount":"2","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2007-01-05 01:03:05","codes":[{"authorDate":"2007-01-05 01:03:05","commitOrder":11,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || (elExpression  && !pageInfo.isELIgnored());\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2007-01-05 01:03:05","endLine":1183,"groupId":"1892","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c0/b88b82f174a535cb1978dad1c0d94251022d6b.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        boolean checkDeferred = !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                                || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n                        boolean deferred = false;\n                        boolean deferredValueIsLiteral = false;\n                        boolean expression = isExpression(n, attrs.getValue(i), checkDeferred);\n                        if (checkDeferred && attrs.getValue(i).indexOf(\"#{\") != -1) {\n                            deferred = true;\n                            if (pageInfo.isELIgnored()) {\n                                deferredValueIsLiteral = true;\n                            }\n                        }\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1010,"status":"M"},{"authorDate":"2007-01-05 01:03:05","commitOrder":11,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2007-01-05 01:03:05","endLine":1374,"groupId":"1889","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c0/b88b82f174a535cb1978dad1c0d94251022d6b.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            if ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\"))\n                    || (value.indexOf(\"${\") != -1 && !pageInfo.isELIgnored())\n                    || (checkDeferred && value.indexOf(\"#{\") != -1 && !pageInfo.isELIgnored()\n                            && !pageInfo.isDeferredSyntaxAllowedAsLiteral()))\n                return true;\n            else\n                return false;\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"M"}],"commitId":"50cf0ff9445b85f155feb3d6f1fa976ca97074f5","commitMessage":"@@@- More accurate validation of EL. Needs testing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@492639 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-01-05 01:03:05","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2007-01-05 01:03:05","codes":[{"authorDate":"2007-01-23 04:49:02","commitOrder":12,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2007-01-23 04:49:02","endLine":1184,"groupId":"1892","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/5c/e835e84b3932284dbae906cddb1900b7398c1b.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || (elExpression  && !pageInfo.isELIgnored());\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1010,"status":"M"},{"authorDate":"2007-01-05 01:03:05","commitOrder":12,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2007-01-05 01:03:05","endLine":1374,"groupId":"1889","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c0/b88b82f174a535cb1978dad1c0d94251022d6b.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"N"}],"commitId":"a74181e4b96eabec20fd18b37e12ebf477929eb0","commitMessage":"@@@- isELEnabled may return true for a variety of reasons.  so the actual value should be checked.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@498793 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-01-23 04:49:02","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2007-01-05 01:03:05","codes":[{"authorDate":"2007-01-23 23:12:15","commitOrder":13,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    if (deferred || elExpression) {\n                                        \n                                        validateFunctions(el, n);\n                                        jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i), attrs\n                                                        .getLocalName(i),\n                                                attrs.getValue(i), false, el, false);\n                                        ELContextImpl ctx = new ELContextImpl();\n                                        ctx.setFunctionMapper(getFunctionMapper(el));\n                                        try {\n                                            jspAttrs[i].validateEL(this.pageInfo\n                                                    .getExpressionFactory(), ctx);\n                                        } catch (ELException e) {\n                                            this.err.jspError(n.getStart(),\n                                                    \"jsp.error.invalid.expression\", attrs.getValue(i), e\n                                                            .toString());\n                                        }\n\n                                    } else {\n                                        jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i),\n                                                attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                                false);\n                                    }\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2007-01-23 23:12:15","endLine":1204,"groupId":"1892","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/819f1afacf7046df02d9834c9a08ee8678378c.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), expectedType, n,\n                                            false);\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1010,"status":"M"},{"authorDate":"2007-01-05 01:03:05","commitOrder":13,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2007-01-05 01:03:05","endLine":1374,"groupId":"1889","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c0/b88b82f174a535cb1978dad1c0d94251022d6b.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"N"}],"commitId":"c45690b02fff7a865f237b5a9eb36ec42d8a648e","commitMessage":"@@@- Tags have specific version numbers.  so the regular getJspAttribute method shouldn't be used. Another benefit is\n  that it avoids parsing EL twice.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@499048 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-01-23 23:12:15","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2007-01-05 01:03:05","codes":[{"authorDate":"2007-02-01 07:31:39","commitOrder":14,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    if (elExpression) {\n                                        \r\n                                        validateFunctions(el, n);\n                                        jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i), \n                                                attrs.getLocalName(i),\n                                                attrs.getValue(i), false, el, false);\n                                        ELContextImpl ctx = new ELContextImpl();\n                                        ctx.setFunctionMapper(getFunctionMapper(el));\n                                        try {\n                                            jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                        } catch (ELException e) {\n                                            this.err.jspError(n.getStart(),\n                                                    \"jsp.error.invalid.expression\", \n                                                    attrs.getValue(i), e.toString());\n                                        }\n                                    } else {\n                                        \r\n                                        jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i),\n                                                attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                                false);\n                                    }\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2007-02-01 07:31:39","endLine":1203,"groupId":"1892","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fc/1a90288c986cdb479c5fe8e5891a9eb9c2384e.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    if (deferred || elExpression) {\n                                        \n                                        validateFunctions(el, n);\n                                        jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i), attrs\n                                                        .getLocalName(i),\n                                                attrs.getValue(i), false, el, false);\n                                        ELContextImpl ctx = new ELContextImpl();\n                                        ctx.setFunctionMapper(getFunctionMapper(el));\n                                        try {\n                                            jspAttrs[i].validateEL(this.pageInfo\n                                                    .getExpressionFactory(), ctx);\n                                        } catch (ELException e) {\n                                            this.err.jspError(n.getStart(),\n                                                    \"jsp.error.invalid.expression\", attrs.getValue(i), e\n                                                            .toString());\n                                        }\n\n                                    } else {\n                                        jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i),\n                                                attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                                false);\n                                    }\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1010,"status":"M"},{"authorDate":"2007-01-05 01:03:05","commitOrder":14,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2007-01-05 01:03:05","endLine":1374,"groupId":"1889","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c0/b88b82f174a535cb1978dad1c0d94251022d6b.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"N"}],"commitId":"dfac8de2e6f94d5a091cad18f8252564d5fa7a16","commitMessage":"@@@- No functional change: deferred is always true when elExpression is true.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@502042 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-02-01 07:31:39","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2007-01-05 01:03:05","codes":[{"authorDate":"2007-04-18 09:30:25","commitOrder":15,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    if (elExpression) {\n                                        \r\n                                        validateFunctions(el, n);\n                                        jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i), \n                                                attrs.getLocalName(i),\n                                                attrs.getValue(i), false, el, false);\n                                        ELContextImpl ctx = new ELContextImpl();\n                                        ctx.setFunctionMapper(getFunctionMapper(el));\n                                        try {\n                                            jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                        } catch (ELException e) {\n                                            this.err.jspError(n.getStart(),\n                                                    \"jsp.error.invalid.expression\", \n                                                    attrs.getValue(i), e.toString());\n                                        }\n                                    } else {\n                                        \r\n                                        jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i),\n                                                attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                                false);\n                                    }\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2007-04-18 09:30:25","endLine":1203,"groupId":"1892","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/da/81d473cae88c98a69f0af2b88ce36933d15a0d.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    if (elExpression) {\n                                        \r\n                                        validateFunctions(el, n);\n                                        jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i), \n                                                attrs.getLocalName(i),\n                                                attrs.getValue(i), false, el, false);\n                                        ELContextImpl ctx = new ELContextImpl();\n                                        ctx.setFunctionMapper(getFunctionMapper(el));\n                                        try {\n                                            jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                        } catch (ELException e) {\n                                            this.err.jspError(n.getStart(),\n                                                    \"jsp.error.invalid.expression\", \n                                                    attrs.getValue(i), e.toString());\n                                        }\n                                    } else {\n                                        \r\n                                        jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i),\n                                                attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                                false);\n                                    }\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (jspAttrs[i].isExpression()) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1010,"status":"M"},{"authorDate":"2007-01-05 01:03:05","commitOrder":15,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2007-01-05 01:03:05","endLine":1374,"groupId":"1889","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c0/b88b82f174a535cb1978dad1c0d94251022d6b.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"N"}],"commitId":"ce4cd2ed7eb94a8f9c1fa1ee6b66a1073b469a11","commitMessage":"@@@Revert previous fix for 41869 and apply Remy's suggested fix.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@529822 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-04-18 09:30:25","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2007-01-05 01:03:05","codes":[{"authorDate":"2008-05-14 05:19:07","commitOrder":16,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2008-05-14 05:19:07","endLine":1177,"groupId":"1892","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/3b/630463b3049a46b5871ae086c363992bbab904.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                Class expectedType = String.class;\n                                try {\n                                    String typeStr = tldAttrs[j].getTypeName();\n                                    if (tldAttrs[j].isFragment()) {\n                                        expectedType = JspFragment.class;\n                                    } else if (typeStr != null) {\n                                        expectedType = JspUtil.toClass(typeStr,\n                                                loader);\n                                    }\n                                    if (elExpression) {\n                                        \r\n                                        validateFunctions(el, n);\n                                        jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i), \n                                                attrs.getLocalName(i),\n                                                attrs.getValue(i), false, el, false);\n                                        ELContextImpl ctx = new ELContextImpl();\n                                        ctx.setFunctionMapper(getFunctionMapper(el));\n                                        try {\n                                            jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                        } catch (ELException e) {\n                                            this.err.jspError(n.getStart(),\n                                                    \"jsp.error.invalid.expression\", \n                                                    attrs.getValue(i), e.toString());\n                                        }\n                                    } else {\n                                        \r\n                                        jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                                attrs.getQName(i), attrs.getURI(i),\n                                                attrs.getLocalName(i), attrs\n                                                .getValue(i), expectedType, n,\n                                                false);\n                                    }\n                                } catch (ClassNotFoundException e) {\n                                    err.jspError\n                                        (n, \"jsp.error.unknown_attribute_type\",\n                                         tldAttrs[j].getName(), tldAttrs[j].getTypeName());\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), java.lang.Object.class,\n                                n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1000,"status":"M"},{"authorDate":"2007-01-05 01:03:05","commitOrder":16,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2007-01-05 01:03:05","endLine":1374,"groupId":"1889","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c0/b88b82f174a535cb1978dad1c0d94251022d6b.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"N"}],"commitId":"a49943387886bc1338c662a2ff25acc5c7df3b6a","commitMessage":"@@@Code clean-up. Remove unused code.  parameters.  etc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@656018 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-05-14 05:19:07","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2007-01-05 01:03:05","codes":[{"authorDate":"2009-12-23 05:17:41","commitOrder":17,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttrs[j].getName());\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2009-12-23 05:17:41","endLine":1246,"groupId":"16345","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f9/035e80b82ac3fe25f9859de5d8a821730737c8.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1061,"status":"M"},{"authorDate":"2007-01-05 01:03:05","commitOrder":17,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2007-01-05 01:03:05","endLine":1374,"groupId":"1889","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c0/b88b82f174a535cb1978dad1c0d94251022d6b.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"N"}],"commitId":"04fbe97f5e21d3ca9cc0f07325b2823eb8717f7a","commitMessage":"@@@Fix regression (JSP TCK failure) with fix for bug 47453\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@893321 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-12-23 05:17:41","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2007-01-05 01:03:05","codes":[{"authorDate":"2009-12-31 06:20:30","commitOrder":18,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttrs[j].getName());\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2009-12-31 06:20:30","endLine":1249,"groupId":"14046","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f0/7e67e7a9e80cbdc844dc89deded8f13216402b.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttrs[j].getName());\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        ELSupport.checkType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1064,"status":"M"},{"authorDate":"2007-01-05 01:03:05","commitOrder":18,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2007-01-05 01:03:05","endLine":1374,"groupId":"1889","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c0/b88b82f174a535cb1978dad1c0d94251022d6b.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1351,"status":"N"}],"commitId":"9a2ae02474ebdd29990f034e05f8ebcd1789552d","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=43819\nImplement ExpressionFactory.newInstance() and ensure that Jasper does not refer to org.apache.el directly\nJSP 2.1 TCK passes with these changes applied\nBased on a patch by Christoph Beck\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@894720 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-12-31 06:20:30","modifiedFileCount":"5","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-07 10:43:12","codes":[{"authorDate":"2010-03-07 10:43:12","commitOrder":19,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i), pageInfo\n                            .isDeferredSyntaxAllowedAsLiteral());\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n                            \n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttr.getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2010-03-07 10:43:12","endLine":1242,"groupId":"15030","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0f/0220c6ac9ff467cad17885f150d93246f9d372.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            boolean checkDeferred = !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                && !(tagInfo.getTagLibrary().getRequiredVersion().equals(\"2.0\")\n                        || tagInfo.getTagLibrary().getRequiredVersion().equals(\"1.2\"));\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                boolean deferredValueIsLiteral = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression) {\n                    el = ELParser.parse(attrs.getValue(i));\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                elExpression = true;\n                            } else if (checkDeferred && ((ELNode.Root) node).getType() == '#') {\n                                elExpression = true;\n                                deferred = true;\n                                if (pageInfo.isELIgnored()) {\n                                    deferredValueIsLiteral = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression \n                    || (elExpression  && (!pageInfo.isELIgnored() || (!\"true\".equalsIgnoreCase(pageInfo.getIsELIgnored()) && checkDeferred && deferred)));\n                \n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n                        \n                        if (tldAttrs[j].canBeRequestTime()\n                                || tldAttrs[j].isDeferredMethod() || tldAttrs[j].isDeferredValue()) { \r\n                            \n                            if (!expression) {\n                                \n                                if (deferredValueIsLiteral && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) {\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                String expectedType = null;\n                                if (tldAttrs[j].isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttrs[j].getMethodSignature();\n                                    if (m != null) {\n                                        int rti = m.trim().indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttrs[j].getName());\n                                    }\n                                }\n                                if (tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttrs[j].getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttrs[j].getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttrs[j].getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n                                \n                                if (deferred && !tldAttrs[j].isDeferredMethod() && !tldAttrs[j].isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                if (!deferred && !tldAttrs[j].canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttrs[j].getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttrs[j],\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttrs[j].getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttrs[j],\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1060,"status":"M"},{"authorDate":"2010-03-07 10:43:12","commitOrder":19,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2010-03-07 10:43:12","endLine":1424,"groupId":"925","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0f/0220c6ac9ff467cad17885f150d93246f9d372.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1400,"status":"M"}],"commitId":"de0e6e1e1df5106a514f9d1c1df672b9d63c2bd5","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48668\nFix remaining issues in BZ48668\nThe idea behind this change is to make ELParser aware about isDeferredAsLiteral option.\nBefore this change ELParser was used to parse an attribute regardless of isELIgnored or isDeferredSyntaxAllowedAsLiteral values. With this change we do not use ELParser when isELIgnored is true and ELParser does not parse '#{' in expressions when isDeferredSyntaxAllowedAsLiteral is true.\nIt simplified the code in many places.\nAlso.  servlet specification version from web.xml and JSP specification version from TLD file are now taken into account when determining the default values for isELIgnored and isDeferredSyntaxAllowedAsLiteral. As far as I understand the code.  previously only isELIgnored was determined by the servlet specification version.\n\nTstParser.java.  bug48668a.jsp:\nI reenabled the tests that now pass with these changes applied.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@919914 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-07 10:43:12","modifiedFileCount":"5","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2010-03-07 10:43:12","codes":[{"authorDate":"2010-03-08 02:45:50","commitOrder":20,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n                            \n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttr.getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2010-03-08 02:45:50","endLine":1247,"groupId":"15030","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/84/89e55c037a4009bfe204072e6a7862c6371ba5.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i), pageInfo\n                            .isDeferredSyntaxAllowedAsLiteral());\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n                            \n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttr.getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1060,"status":"M"},{"authorDate":"2010-03-07 10:43:12","commitOrder":20,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2010-03-07 10:43:12","endLine":1424,"groupId":"925","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0f/0220c6ac9ff467cad17885f150d93246f9d372.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1400,"status":"N"}],"commitId":"86ebe825f8e681a48665da32680f11d955c102d7","commitMessage":"@@@Both TLD and web.xml determine if deferred EL syntax is treated as EL or as a literal\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@920055 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-08 02:45:50","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-07 10:43:12","codes":[{"authorDate":"2010-03-08 04:54:01","commitOrder":21,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean elIgnored =\n                    pageInfo.isELIgnored() ||\n                    libraryVersion < 2.0;\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !elIgnored) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n                            \n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttr.getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2010-03-08 04:54:01","endLine":1250,"groupId":"15030","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fd/6b24519cce06a10919495e204349d4f5e73f36.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n                            \n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttr.getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1060,"status":"M"},{"authorDate":"2010-03-07 10:43:12","commitOrder":21,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2010-03-07 10:43:12","endLine":1424,"groupId":"925","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0f/0220c6ac9ff467cad17885f150d93246f9d372.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1400,"status":"N"}],"commitId":"300c3ae0da2602604e84f33ea86302126ca27fa3","commitMessage":"@@@isELIgnored depends on library version and web.xml declaration\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@920110 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-08 04:54:01","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-07 10:43:12","codes":[{"authorDate":"2010-03-09 09:28:14","commitOrder":22,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n                            \n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttr.getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2010-03-09 09:28:14","endLine":1247,"groupId":"15030","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/84/89e55c037a4009bfe204072e6a7862c6371ba5.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean elIgnored =\n                    pageInfo.isELIgnored() ||\n                    libraryVersion < 2.0;\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !elIgnored) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n                            \n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttr.getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1060,"status":"M"},{"authorDate":"2010-03-07 10:43:12","commitOrder":22,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2010-03-07 10:43:12","endLine":1424,"groupId":"925","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0f/0220c6ac9ff467cad17885f150d93246f9d372.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1400,"status":"N"}],"commitId":"3050aeb6b215f4fc1972ec5ed0a74fdc0351374d","commitMessage":"@@@Revert r920110\nCompatibility with JSP 1.2 tag libraries had to be covered by JSP 2.0 specification. \nsee \"Backwards Compatibility with JSP 1.2\" in the Preface part of JSP 2.0 specification. \nand there is no provision for this feature.\nDiscussed in the Re: r920055 thread on dev@\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@920608 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-09 09:28:14","modifiedFileCount":"1","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2010-03-07 10:43:12","codes":[{"authorDate":"2010-06-15 05:23:23","commitOrder":23,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n                            \n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2010-06-15 05:23:23","endLine":1262,"groupId":"2013","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/04/5c7f073b11302a3b6e217cfc5895990b579541.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n                \n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n                            \n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    try {\n                                        EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                    } catch (Exception e) {\n                                        err.jspError\n                                            (n, \"jsp.error.coerce_to_type\",\n                                             tldAttr.getName(), expectedType, attrs.getValue(i));\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                \n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i), \n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\", \n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n                            \n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1061,"status":"M"},{"authorDate":"2010-03-07 10:43:12","commitOrder":23,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2010-03-07 10:43:12","endLine":1424,"groupId":"925","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0f/0220c6ac9ff467cad17885f150d93246f9d372.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1400,"status":"N"}],"commitId":"df31f1ff5c68e3ba3279b8d2e5235ef9f315533f","commitMessage":"@@@Fix problem with JSF convertors - restore behaviour prior to r894720 that only checks a subsets of types for validity\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@954650 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-06-15 05:23:23","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-07 10:43:12","codes":[{"authorDate":"2012-03-31 03:32:01","commitOrder":24,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2012-03-31 03:32:01","endLine":1270,"groupId":"2013","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/48/73fe219ce2ff328f6e29959137ee2bcb676374.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            EXPRESSION_FACTORY.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1069,"status":"M"},{"authorDate":"2010-03-07 10:43:12","commitOrder":24,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2010-03-07 10:43:12","endLine":1424,"groupId":"925","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0f/0220c6ac9ff467cad17885f150d93246f9d372.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1400,"status":"N"}],"commitId":"8354f4517c28a511d062afca8b0227dac452ac9f","commitMessage":"@@@Remove static references to ExpressionFactory. These should be per web application.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1307579 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-03-31 03:32:01","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-03-07 10:43:12","codes":[{"authorDate":"2012-09-04 05:52:26","commitOrder":25,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2012-09-04 05:52:26","endLine":1269,"groupId":"2013","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0d/3a5ad6147a25c30dfaa0caa00dd2439389a929.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            if (tagInfo == null) {\n                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n            }\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1071,"status":"M"},{"authorDate":"2010-03-07 10:43:12","commitOrder":25,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2010-03-07 10:43:12","endLine":1424,"groupId":"925","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0f/0220c6ac9ff467cad17885f150d93246f9d372.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n            \n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral() \n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1400,"status":"N"}],"commitId":"7c018980950d39b12959adf37ff5175a4fc02bc5","commitMessage":"@@@Clean-up\n- fix false positive NPE warnings by removing redundant tests and suppressing remaining warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1380380 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-04 05:52:26","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-06-18 15:57:32","codes":[{"authorDate":"2012-09-04 05:52:26","commitOrder":26,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2012-09-04 05:52:26","endLine":1269,"groupId":"2013","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0d/3a5ad6147a25c30dfaa0caa00dd2439389a929.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1071,"status":"N"},{"authorDate":"2013-06-18 15:57:32","commitOrder":26,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2013-06-18 15:57:32","endLine":1451,"groupId":"925","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/dea62fb927cb3af65547952fb304efd7fc3ba2.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1425,"status":"M"}],"commitId":"3e2ceeec6575a1fe284dfd5bcf88be7735c54bc1","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55073\nSmall performance improvement\nPatch provided by Adrian Nistor\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1494056 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-18 15:57:32","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-06-18 15:57:32","codes":[{"authorDate":"2013-07-17 22:14:28","commitOrder":27,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl(\n                                            expressionFactory);\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2013-07-17 22:14:28","endLine":1271,"groupId":"2013","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fb/d3955b553d344252ce4cee6ea9dc4da9032250.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl();\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1072,"status":"M"},{"authorDate":"2013-06-18 15:57:32","commitOrder":27,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2013-06-18 15:57:32","endLine":1451,"groupId":"925","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/dea62fb927cb3af65547952fb304efd7fc3ba2.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1425,"status":"N"}],"commitId":"e556786a358467dc7ed63436dbdb75a68c569606","commitMessage":"@@@Add the two new resolver types (stream and static) to Jasper in the correct order and modify JasperELResolver so the correct resolvers are skipped.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1504148 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-07-17 22:14:28","modifiedFileCount":"15","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-06-18 15:57:32","codes":[{"authorDate":"2014-04-16 19:14:32","commitOrder":28,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String attributeValue;\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                    if (elExpression) {\n                        attributeValue = attrs.getValue(i);\n                    } else {\n                        \r\n                        attributeValue = ((ELNode.Text) el.iterator().next()).getText();\n                    }\n                } else {\n                    attributeValue = attrs.getValue(i);\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        attributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attributeValue, false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl(\n                                            expressionFactory);\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attributeValue, n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    attributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                attributeValue, n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2014-04-16 19:14:32","endLine":1280,"groupId":"2013","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/4ab65d12715988dcd9dc5eb46c5c18c09ef952.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attrs.getValue(i), expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i), attrs\n                                                .getLocalName(i),\n                                        attrs.getValue(i), false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attrs.getValue(i), false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl(\n                                            expressionFactory);\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i), attrs\n                                            .getValue(i), n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i), attrs\n                                            .getLocalName(i),\n                                    attrs.getValue(i), false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attrs\n                                    .getValue(i));\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i), attrs\n                                        .getValue(i), n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1073,"status":"M"},{"authorDate":"2013-06-18 15:57:32","commitOrder":28,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2013-06-18 15:57:32","endLine":1451,"groupId":"925","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/dea62fb927cb3af65547952fb304efd7fc3ba2.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1425,"status":"N"}],"commitId":"c35249bd765c14c3507b5a8d00ef3c4d4c69b05e","commitMessage":"@@@Further fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=56334\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1587865 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-16 19:14:32","modifiedFileCount":"6","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2013-06-18 15:57:32","codes":[{"authorDate":"2014-04-28 19:27:25","commitOrder":29,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String attributeValue;\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                    if (elExpression) {\n                        attributeValue = attrs.getValue(i);\n                    } else {\n                        \r\n                        attributeValue = ((ELNode.Text) el.iterator().next()).getText();\n                    }\n                } else {\n                    attributeValue = attrs.getValue(i);\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        attributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attributeValue, false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl(\n                                            expressionFactory);\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attributeValue, e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attributeValue, n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    attributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                attributeValue, n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2014-04-28 19:27:25","endLine":1280,"groupId":"2013","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/96/b30a4b7843573b2d5371fdc84157b56db5abe1.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String attributeValue;\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                    if (elExpression) {\n                        attributeValue = attrs.getValue(i);\n                    } else {\n                        \r\n                        attributeValue = ((ELNode.Text) el.iterator().next()).getText();\n                    }\n                } else {\n                    attributeValue = attrs.getValue(i);\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attrs.getValue(i));\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        attributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attributeValue, false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl(\n                                            expressionFactory);\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attrs.getValue(i), e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attributeValue, n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    attributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                attributeValue, n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1073,"status":"M"},{"authorDate":"2013-06-18 15:57:32","commitOrder":29,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2013-06-18 15:57:32","endLine":1451,"groupId":"925","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/dea62fb927cb3af65547952fb304efd7fc3ba2.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1425,"status":"N"}],"commitId":"8a70af88825a7423f8e9d693f5a35783c234587a","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56334\nReviewing r1587887:\ns/ attrs.getValue(i) / attributeValue / in the messages as well. \nso that the actual expression text that is processed is printed in the message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1590604 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-28 19:27:25","modifiedFileCount":"1","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2013-06-18 15:57:32","codes":[{"authorDate":"2014-04-29 07:35:36","commitOrder":30,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String xmlAttributeValue = attrs.getValue(i);\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(xmlAttributeValue,\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                \r\n                \r\n                String textAttributeValue;\n                if (!elExpression && el != null) {\n                    \r\n                    textAttributeValue = ((ELNode.Text) el.iterator().next()).getText();\n                } else {\n                    textAttributeValue = xmlAttributeValue;\n                }\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(textAttributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, textAttributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        textAttributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                \r\n                                jspAttrs[i] = getJspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        xmlAttributeValue, n, el, false);\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    textAttributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    textAttributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                xmlAttributeValue, n, el, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2014-04-29 07:35:36","endLine":1266,"groupId":"12230","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/8a/5d751d4ed677b190136b2cd7045a706121b49c.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String attributeValue;\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(attrs.getValue(i),\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                    if (elExpression) {\n                        attributeValue = attrs.getValue(i);\n                    } else {\n                        \r\n                        attributeValue = ((ELNode.Text) el.iterator().next()).getText();\n                    }\n                } else {\n                    attributeValue = attrs.getValue(i);\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(attributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, attributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        attributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                if (elExpression) {\n                                    \r\n                                    validateFunctions(el, n);\n                                    jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attributeValue, false, el, false);\n                                    ELContextImpl ctx = new ELContextImpl(\n                                            expressionFactory);\n                                    ctx.setFunctionMapper(getFunctionMapper(el));\n                                    try {\n                                        jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);\n                                    } catch (ELException e) {\n                                        this.err.jspError(n.getStart(),\n                                                \"jsp.error.invalid.expression\",\n                                                attributeValue, e.toString());\n                                    }\n                                } else {\n                                    \r\n                                    jspAttrs[i] = getJspAttribute(tldAttr,\n                                            attrs.getQName(i), attrs.getURI(i),\n                                            attrs.getLocalName(i),\n                                            attributeValue, n, false);\n                                }\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    attributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i), attributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                attributeValue, n, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1074,"status":"M"},{"authorDate":"2013-06-18 15:57:32","commitOrder":30,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2013-06-18 15:57:32","endLine":1451,"groupId":"925","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/dea62fb927cb3af65547952fb304efd7fc3ba2.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1425,"status":"N"}],"commitId":"a69c40bdd25ab757fb5f0f689a55453a20f8eea6","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56334\nAdditional tests and fixes\nIncludes the following:\n\n1. Allow '\\' in xmlns attributes of UninterpretedTag. A test added.\n\n(Java escaping was missing. Xml-escaping is still missing. I think it is unlikely that anybody would use such values for xmlns attributes)\n\n2. Fix interaction between Validator.ValidateVisitor.checkXmlAttributes(CustomTag ..) and getJspAttribute().\n\n- EL expression was parsed twice in both methods. Now I am passing the already parsed EL.\n- getJspAttribute() has EL validation code.  so reduce duplication\n- When calling getJspAttribute() you have to pass original attrs.getValue(i).  not the textual value.\n\n3. Fix Validator.ValidateVisitor.XmlEscapeNonELVisitor\n- It was not EL-escaping its text. Tests added.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1590842 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-29 07:35:36","modifiedFileCount":"4","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2013-06-18 15:57:32","codes":[{"authorDate":"2014-05-16 20:07:08","commitOrder":31,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String xmlAttributeValue = attrs.getValue(i);\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(xmlAttributeValue,\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                \r\n                \r\n                String textAttributeValue = \"\";\n                if (!elExpression && el != null) {\n                    \r\n                   if(el.iterator().hasNext()) {\n                      textAttributeValue = ((ELNode.Text) el.iterator().next()).getText();\n                   }\n                } else {\n                    textAttributeValue = xmlAttributeValue;\n                }\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(textAttributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, textAttributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        textAttributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                \r\n                                jspAttrs[i] = getJspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        xmlAttributeValue, n, el, false);\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    textAttributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    textAttributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                xmlAttributeValue, n, el, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2014-05-16 20:07:08","endLine":1267,"groupId":"12230","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/83/f2a95989b30332cac78f74435c0a2eca63e38a.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String xmlAttributeValue = attrs.getValue(i);\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(xmlAttributeValue,\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                \r\n                \r\n                String textAttributeValue;\n                if (!elExpression && el != null) {\n                    \r\n                    textAttributeValue = ((ELNode.Text) el.iterator().next()).getText();\n                } else {\n                    textAttributeValue = xmlAttributeValue;\n                }\n\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(textAttributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, textAttributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        textAttributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                \r\n                                jspAttrs[i] = getJspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        xmlAttributeValue, n, el, false);\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    textAttributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    textAttributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                xmlAttributeValue, n, el, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1074,"status":"M"},{"authorDate":"2013-06-18 15:57:32","commitOrder":31,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2013-06-18 15:57:32","endLine":1451,"groupId":"925","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/dea62fb927cb3af65547952fb304efd7fc3ba2.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1425,"status":"N"}],"commitId":"2d760238325016f1c19eee5fb17dd87c118bade1","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56529\nFixed NoSuchElementException while handling attributes with empty string value in custom tags. Patch provided by Hariprasad Manchi.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1595171 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-16 20:07:08","modifiedFileCount":"1","status":"M","submitter":"Violeta Georgieva Georgieva"},{"authorTime":"2013-06-18 15:57:32","codes":[{"authorDate":"2014-05-17 02:31:33","commitOrder":32,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String xmlAttributeValue = attrs.getValue(i);\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(xmlAttributeValue,\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                \r\n                \r\n                String textAttributeValue;\n                if (!elExpression && el != null) {\n                    \r\n                    Iterator<ELNode> it = el.iterator();\n                    if (it.hasNext()) {\n                        textAttributeValue = ((ELNode.Text) it.next())\n                                .getText();\n                    } else {\n                        textAttributeValue = \"\";\n                    }\n                } else {\n                    textAttributeValue = xmlAttributeValue;\n                }\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(textAttributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, textAttributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        textAttributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                \r\n                                jspAttrs[i] = getJspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        xmlAttributeValue, n, el, false);\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    textAttributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    textAttributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                xmlAttributeValue, n, el, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2014-05-17 02:31:33","endLine":1271,"groupId":"8606","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/894cfe27414460f6f2b28b2e5ff01e7ada8e84.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String xmlAttributeValue = attrs.getValue(i);\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(xmlAttributeValue,\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                \r\n                \r\n                String textAttributeValue = \"\";\n                if (!elExpression && el != null) {\n                    \r\n                   if(el.iterator().hasNext()) {\n                      textAttributeValue = ((ELNode.Text) el.iterator().next()).getText();\n                   }\n                } else {\n                    textAttributeValue = xmlAttributeValue;\n                }\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(textAttributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, textAttributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        textAttributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                \r\n                                jspAttrs[i] = getJspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        xmlAttributeValue, n, el, false);\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    textAttributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    textAttributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                xmlAttributeValue, n, el, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1074,"status":"M"},{"authorDate":"2013-06-18 15:57:32","commitOrder":32,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2013-06-18 15:57:32","endLine":1451,"groupId":"925","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/dea62fb927cb3af65547952fb304efd7fc3ba2.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1425,"status":"N"}],"commitId":"4e244f34c139af8fa859d6d81571ca73c2d33eed","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56529\nReview of r1595174:\n1. Call iterator() once. It creates an object.  so it is better do not waste such calls.\n2. Style issues:\n- \"\" does not make sense as 'generic' default for textAttributeValue. It makes sense for this specific case only.\n- 3 spaces indent -> 4 spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1595289 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-17 02:31:33","modifiedFileCount":"1","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2013-06-18 15:57:32","codes":[{"authorDate":"2014-11-28 05:16:40","commitOrder":33,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String xmlAttributeValue = attrs.getValue(i);\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(xmlAttributeValue,\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                if (elExpression) {\n                    \r\n                    \r\n                    pageInfo.setELUsed();\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                \r\n                \r\n                String textAttributeValue;\n                if (!elExpression && el != null) {\n                    \r\n                    Iterator<ELNode> it = el.iterator();\n                    if (it.hasNext()) {\n                        textAttributeValue = ((ELNode.Text) it.next())\n                                .getText();\n                    } else {\n                        textAttributeValue = \"\";\n                    }\n                } else {\n                    textAttributeValue = xmlAttributeValue;\n                }\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(textAttributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, textAttributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        textAttributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                \r\n                                jspAttrs[i] = getJspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        xmlAttributeValue, n, el, false);\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    textAttributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    textAttributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                xmlAttributeValue, n, el, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2014-11-28 05:16:40","endLine":1281,"groupId":"8606","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a7/4fc47783cc7009a65435fb7be9edddaeac10d8.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String xmlAttributeValue = attrs.getValue(i);\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(xmlAttributeValue,\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                \r\n                \r\n                String textAttributeValue;\n                if (!elExpression && el != null) {\n                    \r\n                    Iterator<ELNode> it = el.iterator();\n                    if (it.hasNext()) {\n                        textAttributeValue = ((ELNode.Text) it.next())\n                                .getText();\n                    } else {\n                        textAttributeValue = \"\";\n                    }\n                } else {\n                    textAttributeValue = xmlAttributeValue;\n                }\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(textAttributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, textAttributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        textAttributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                \r\n                                jspAttrs[i] = getJspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        xmlAttributeValue, n, el, false);\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    textAttributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    textAttributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                xmlAttributeValue, n, el, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1078,"status":"M"},{"authorDate":"2013-06-18 15:57:32","commitOrder":33,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2013-06-18 15:57:32","endLine":1451,"groupId":"925","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/dea62fb927cb3af65547952fb304efd7fc3ba2.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1425,"status":"N"}],"commitId":"c79369cdd0224223dd92fb784a15acabaa510047","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57142\nPage imports need to be visible to EL\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1642233 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-11-28 05:16:40","modifiedFileCount":"4","status":"M","submitter":"Mark Thomas"},{"authorTime":"2013-06-18 15:57:32","codes":[{"authorDate":"2014-12-11 04:20:08","commitOrder":34,"curCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String xmlAttributeValue = attrs.getValue(i);\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(xmlAttributeValue,\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                \r\n                \r\n                String textAttributeValue;\n                if (!elExpression && el != null) {\n                    \r\n                    Iterator<ELNode> it = el.iterator();\n                    if (it.hasNext()) {\n                        textAttributeValue = ((ELNode.Text) it.next())\n                                .getText();\n                    } else {\n                        textAttributeValue = \"\";\n                    }\n                } else {\n                    textAttributeValue = xmlAttributeValue;\n                }\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(textAttributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, textAttributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        textAttributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                \r\n                                jspAttrs[i] = getJspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        xmlAttributeValue, n, el, false);\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    textAttributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    textAttributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                xmlAttributeValue, n, el, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","date":"2014-12-11 04:20:08","endLine":1271,"groupId":"10504","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"checkXmlAttributes","params":"(Node.CustomTagn@Node.JspAttribute[]jspAttrs@Hashtable<String@Object>tagDataAttrs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6b/bc900c7802f78293c8d94eef20a78f081696a7.src","preCode":"        private void checkXmlAttributes(Node.CustomTag n,\n                Node.JspAttribute[] jspAttrs, Hashtable<String, Object> tagDataAttrs)\n                throws JasperException {\n\n            TagInfo tagInfo = n.getTagInfo();\n            TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n            Attributes attrs = n.getAttributes();\n\n            for (int i = 0; attrs != null && i < attrs.getLength(); i++) {\n                boolean found = false;\n\n                boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"%=\"))\n                        || (!n.getRoot().isXmlSyntax() && attrs.getValue(i).startsWith(\"<%=\")));\n                boolean elExpression = false;\n                boolean deferred = false;\n                double libraryVersion = Double.parseDouble(\n                        tagInfo.getTagLibrary().getRequiredVersion());\n                boolean deferredSyntaxAllowedAsLiteral =\n                    pageInfo.isDeferredSyntaxAllowedAsLiteral() ||\n                    libraryVersion < 2.1;\n\n                String xmlAttributeValue = attrs.getValue(i);\n\n                ELNode.Nodes el = null;\n                if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                    el = ELParser.parse(xmlAttributeValue,\n                            deferredSyntaxAllowedAsLiteral);\n                    Iterator<ELNode> nodes = el.iterator();\n                    while (nodes.hasNext()) {\n                        ELNode node = nodes.next();\n                        if (node instanceof ELNode.Root) {\n                            if (((ELNode.Root) node).getType() == '$') {\n                                if (elExpression && deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                            } else if (((ELNode.Root) node).getType() == '#') {\n                                if (elExpression && !deferred) {\n                                    err.jspError(n,\n                                            \"jsp.error.attribute.deferredmix\");\n                                }\n                                elExpression = true;\n                                deferred = true;\n                            }\n                        }\n                    }\n                }\n\n                if (elExpression) {\n                    \r\n                    \r\n                    pageInfo.setELUsed();\n                }\n\n                boolean expression = runtimeExpression || elExpression;\n\n                \r\n                \r\n                String textAttributeValue;\n                if (!elExpression && el != null) {\n                    \r\n                    Iterator<ELNode> it = el.iterator();\n                    if (it.hasNext()) {\n                        textAttributeValue = ((ELNode.Text) it.next())\n                                .getText();\n                    } else {\n                        textAttributeValue = \"\";\n                    }\n                } else {\n                    textAttributeValue = xmlAttributeValue;\n                }\n                for (int j = 0; tldAttrs != null && j < tldAttrs.length; j++) {\n                    if (attrs.getLocalName(i).equals(tldAttrs[j].getName())\n                            && (attrs.getURI(i) == null\n                                    || attrs.getURI(i).length() == 0 || attrs\n                                    .getURI(i).equals(n.getURI()))) {\n\n                        TagAttributeInfo tldAttr = tldAttrs[j];\n                        if (tldAttr.canBeRequestTime()\n                                || tldAttr.isDeferredMethod() || tldAttr.isDeferredValue()) { \r\n\n                            if (!expression) {\n\n                                String expectedType = null;\n                                if (tldAttr.isDeferredMethod()) {\n                                    \r\n                                    \r\n                                    String m = tldAttr.getMethodSignature();\n                                    if (m != null) {\n                                        m = m.trim();\n                                        int rti = m.indexOf(' ');\n                                        if (rti > 0) {\n                                            expectedType = m.substring(0, rti).trim();\n                                        }\n                                    } else {\n                                        expectedType = \"java.lang.Object\";\n                                    }\n                                    if (\"void\".equals(expectedType)) {\n                                        \r\n                                        \r\n                                        \r\n                                        err.jspError(n,\n                                                \"jsp.error.literal_with_void\",\n                                                tldAttr.getName());\n                                    }\n                                }\n                                if (tldAttr.isDeferredValue()) {\n                                    \r\n                                    \r\n                                    expectedType = tldAttr.getExpectedTypeName();\n                                }\n                                if (expectedType != null) {\n                                    Class<?> expectedClass = String.class;\n                                    try {\n                                        expectedClass = JspUtil.toClass(expectedType, loader);\n                                    } catch (ClassNotFoundException e) {\n                                        err.jspError\n                                            (n, \"jsp.error.unknown_attribute_type\",\n                                             tldAttr.getName(), expectedType);\n                                    }\n                                    \r\n                                    if (String.class.equals(expectedClass) ||\n                                            expectedClass == Long.TYPE ||\n                                            expectedClass == Double.TYPE ||\n                                            expectedClass == Byte.TYPE ||\n                                            expectedClass == Short.TYPE ||\n                                            expectedClass == Integer.TYPE ||\n                                            expectedClass == Float.TYPE ||\n                                            Number.class.isAssignableFrom(expectedClass) ||\n                                            Character.class.equals(expectedClass) ||\n                                            Character.TYPE == expectedClass ||\n                                            Boolean.class.equals(expectedClass) ||\n                                            Boolean.TYPE == expectedClass ||\n                                            expectedClass.isEnum()) {\n                                        try {\n                                            expressionFactory.coerceToType(textAttributeValue, expectedClass);\n                                        } catch (Exception e) {\n                                            err.jspError\n                                                (n, \"jsp.error.coerce_to_type\",\n                                                 tldAttr.getName(), expectedType, textAttributeValue);\n                                        }\n                                    }\n                                }\n\n                                jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        textAttributeValue, false, null, false);\n                            } else {\n\n                                if (deferred && !tldAttr.isDeferredMethod() && !tldAttr.isDeferredValue()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n                                if (!deferred && !tldAttr.canBeRequestTime()) {\n                                    \r\n                                    err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                            tldAttr.getName());\n                                }\n\n                                \r\n                                jspAttrs[i] = getJspAttribute(tldAttr,\n                                        attrs.getQName(i), attrs.getURI(i),\n                                        attrs.getLocalName(i),\n                                        xmlAttributeValue, n, el, false);\n                            }\n\n                        } else {\n                            \r\n                            \r\n                            if (expression) {\n                                err.jspError(n, \"jsp.error.attribute.custom.non_rt_with_expr\",\n                                                tldAttr.getName());\n                            }\n                            jspAttrs[i] = new Node.JspAttribute(tldAttr,\n                                    attrs.getQName(i), attrs.getURI(i),\n                                    attrs.getLocalName(i),\n                                    textAttributeValue, false, null, false);\n                        }\n                        if (expression) {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    TagData.REQUEST_TIME_VALUE);\n                        } else {\n                            tagDataAttrs.put(attrs.getQName(i),\n                                    textAttributeValue);\n                        }\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    if (tagInfo.hasDynamicAttributes()) {\n                        jspAttrs[i] = getJspAttribute(null, attrs.getQName(i),\n                                attrs.getURI(i), attrs.getLocalName(i),\n                                xmlAttributeValue, n, el, true);\n                    } else {\n                        err.jspError(n, \"jsp.error.bad_attribute\", attrs\n                                .getQName(i), n.getLocalName());\n                    }\n                }\n            }\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1074,"status":"M"},{"authorDate":"2013-06-18 15:57:32","commitOrder":34,"curCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","date":"2013-06-18 15:57:32","endLine":1451,"groupId":"10504","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"isExpression","params":"(Noden@Stringvalue@booleancheckDeferred)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/dea62fb927cb3af65547952fb304efd7fc3ba2.src","preCode":"        private boolean isExpression(Node n, String value, boolean checkDeferred) {\n\n            boolean runtimeExpression = ((n.getRoot().isXmlSyntax() && value.startsWith(\"%=\"))\n                    || (!n.getRoot().isXmlSyntax() && value.startsWith(\"<%=\")));\n            boolean elExpression = false;\n\n            if (!runtimeExpression && !pageInfo.isELIgnored()) {\n                Iterator<ELNode> nodes = ELParser.parse(value,\n                        pageInfo.isDeferredSyntaxAllowedAsLiteral()).iterator();\n                while (nodes.hasNext()) {\n                    ELNode node = nodes.next();\n                    if (node instanceof ELNode.Root) {\n                        if (((ELNode.Root) node).getType() == '$') {\n                            elExpression = true;\n                            break;\n                        } else if (checkDeferred && !pageInfo.isDeferredSyntaxAllowedAsLiteral()\n                                && ((ELNode.Root) node).getType() == '#') {\n                            elExpression = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return runtimeExpression || elExpression;\n\n        }\n","realPath":"java/org/apache/jasper/compiler/Validator.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1425,"status":"N"}],"commitId":"acff2eb02a90357c14674947a4625adbaea0c807","commitMessage":"@@@Revert original fix for BZ 57142 that attempted to:\n- determine if the page might use EL\n- if it did.  create the ELContext (that would be required anyway) and set the\n  necessary imports on the ImportHandler when the page loads\n\nThis alternative implementation:\n- Generates a list of package and class imports at compilation time\n- Which are then used when the ELContext is created\n\nThe main advantage of this approach is that the ELContext is only generated if it is definitely going to be used rather than if it might be used. There are also some minor optimisations regarding the timing of the String processing to differentiate between package and class imports.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1644516 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-12-11 04:20:08","modifiedFileCount":"4","status":"M","submitter":"Mark Thomas"}]
