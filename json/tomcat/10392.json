[{"authorTime":"2014-03-10 19:27:11","codes":[{"authorDate":"2012-09-24 03:12:44","commitOrder":12,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2012-09-24 03:12:44","endLine":579,"groupId":"444","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/7a74f6ec434b80dcb62abf18fb88548de949d3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"NB"},{"authorDate":"2014-03-10 19:27:11","commitOrder":12,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new Nio2Channel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNio2Channel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            if (sslContext != null) {\n                ((SecureNio2Channel) channel).setSocket(socketWrapper);\n            }\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            \r\n            \r\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2014-03-10 19:27:11","endLine":508,"groupId":"11835","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/56/65ec5880de12f32d84ede52d48de18d5cabc22.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new Nio2Channel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNio2Channel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            if (sslContext != null) {\n                ((SecureNio2Channel) channel).setSocket(socketWrapper);\n            }\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            \r\n            \r\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":452,"status":"B"}],"commitId":"27ac1263bf25a6af9175afe772416e39b1f51f6a","commitMessage":"@@@Add experimental NIO2 connector. Based on code developed by Nabil Benothman.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1575905 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-10 19:27:11","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2014-03-11 00:22:07","codes":[{"authorDate":"2012-09-24 03:12:44","commitOrder":13,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2012-09-24 03:12:44","endLine":579,"groupId":"444","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/7a74f6ec434b80dcb62abf18fb88548de949d3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"N"},{"authorDate":"2014-03-11 00:22:07","commitOrder":13,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new Nio2Channel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNio2Channel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            channel.setSocket(socketWrapper);\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            \r\n            \r\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2014-03-11 00:22:07","endLine":511,"groupId":"11835","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/31/9c4ca9cd693ed394fcbeffdef3f6e04cd5ffee.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new Nio2Channel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNio2Channel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            if (sslContext != null) {\n                ((SecureNio2Channel) channel).setSocket(socketWrapper);\n            }\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            \r\n            \r\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"M"}],"commitId":"6b44dd99441a47955b6b18abc9d5346e16778a49","commitMessage":"@@@Add code to do a clean close of all current connections.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1575994 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-11 00:22:07","modifiedFileCount":"5","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2014-03-15 07:13:00","codes":[{"authorDate":"2012-09-24 03:12:44","commitOrder":14,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2012-09-24 03:12:44","endLine":579,"groupId":"444","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/7a74f6ec434b80dcb62abf18fb88548de949d3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"N"},{"authorDate":"2014-03-15 07:13:00","commitOrder":14,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new Nio2Channel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if (channel instanceof SecureNio2Channel) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n                channel.reset();\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            channel.setSocket(socketWrapper);\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            \r\n            \r\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2014-03-15 07:13:00","endLine":510,"groupId":"11835","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/5e/ed52210be0006224bb49cdf66f0ef8b66b950d.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new Nio2Channel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNio2Channel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            channel.setSocket(socketWrapper);\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            \r\n            \r\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"M"}],"commitId":"b93291dd8f4858ba54fda208bfbff8d2e101d470","commitMessage":"@@@Implement the read/write pending contract in the SSL channel (not doing so would likely still trigger the exception.  but would add corruption).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1577757 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-15 07:13:00","modifiedFileCount":"2","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2014-03-15 19:19:50","codes":[{"authorDate":"2012-09-24 03:12:44","commitOrder":15,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2012-09-24 03:12:44","endLine":579,"groupId":"444","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/7a74f6ec434b80dcb62abf18fb88548de949d3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"N"},{"authorDate":"2014-03-15 19:19:50","commitOrder":15,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new Nio2Channel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if (channel instanceof SecureNio2Channel) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n                channel.reset();\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            channel.setSocket(socketWrapper);\n            if (sslContext != null) {\n                \r\n                processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            } else {\n                \r\n                awaitBytes(socketWrapper);\n            }\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2014-03-15 19:19:50","endLine":514,"groupId":"11835","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/c6/42e1870d2c6fb3fdfe146bb2c7ae262bc6d087.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new Nio2Channel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if (channel instanceof SecureNio2Channel) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n                channel.reset();\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            channel.setSocket(socketWrapper);\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            \r\n            \r\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"M"}],"commitId":"5c357900eb76befeff7a46556498e2945dc5df11","commitMessage":"@@@- Cleanup and prefer non direct buffers for SSL by default (32KB of direct buffers per connection looks a bit too much).\n- Give up on the SSL test for now.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1577831 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-15 19:19:50","modifiedFileCount":"4","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2014-04-04 18:10:28","codes":[{"authorDate":"2012-09-24 03:12:44","commitOrder":16,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2012-09-24 03:12:44","endLine":579,"groupId":"444","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/7a74f6ec434b80dcb62abf18fb88548de949d3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"N"},{"authorDate":"2014-04-04 18:10:28","commitOrder":16,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    NioBufferHandler bufhandler = new NioBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            if (sslContext != null) {\n                \r\n                processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            } else {\n                \r\n                awaitBytes(socketWrapper);\n            }\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2014-04-04 18:10:28","endLine":546,"groupId":"9751","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/14/aaa7c2914bb1ac7ffe532b84a7e21191a10c7d.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(socket, engine, bufhandler, this);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new Nio2Channel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if (channel instanceof SecureNio2Channel) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n                channel.reset();\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            channel.setSocket(socketWrapper);\n            if (sslContext != null) {\n                \r\n                processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            } else {\n                \r\n                awaitBytes(socketWrapper);\n            }\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"}],"commitId":"501dfa46576d1ae0a29f1ebe1b080e49aa0beaa6","commitMessage":"@@@Code cleanups and i18n in NIO2.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1584593 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-04 18:10:28","modifiedFileCount":"6","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2014-11-11 00:45:20","codes":[{"authorDate":"2012-09-24 03:12:44","commitOrder":17,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2012-09-24 03:12:44","endLine":579,"groupId":"444","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/7a74f6ec434b80dcb62abf18fb88548de949d3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"N"},{"authorDate":"2014-11-11 00:45:20","commitOrder":17,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    NioBufferHandler bufhandler = new NioBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel, this);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            if (sslContext != null) {\n                \r\n                processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            } else {\n                \r\n                awaitBytes(socketWrapper);\n            }\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2014-11-11 00:45:20","endLine":538,"groupId":"6623","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/33/d31e68b5b8e3e475c0d4eae36ed6d403fb5045.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    NioBufferHandler bufhandler = new NioBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            if (sslContext != null) {\n                \r\n                processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            } else {\n                \r\n                awaitBytes(socketWrapper);\n            }\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":483,"status":"M"}],"commitId":"5af72c3095110aa116fe0b68df4dfd033330aa29","commitMessage":"@@@Add the Endpoint to the SocketWrapper\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1637919 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-11-11 00:45:20","modifiedFileCount":"4","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2015-01-15 17:21:17","codes":[{"authorDate":"2015-01-15 17:21:17","commitOrder":18,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-01-15 17:21:17","endLine":548,"groupId":"444","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/58/afe096675518f03d4372eb6d4d8a83f83c6d9e.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                                                                       Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                                                                       socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    NioBufferHandler bufhandler = new NioBufferHandler(socketProperties.getAppReadBufSize(),\n                                                                       socketProperties.getAppWriteBufSize(),\n                                                                       socketProperties.getDirectBuffer());\n\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"M"},{"authorDate":"2015-01-15 17:21:17","commitOrder":18,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel, this);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            if (sslContext != null) {\n                \r\n                processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            } else {\n                \r\n                awaitBytes(socketWrapper);\n            }\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-01-15 17:21:17","endLine":523,"groupId":"6623","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/da/cd547678fca642fd3d1b9bf60f4abfdce4d4dc.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    NioBufferHandler bufhandler = new NioBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    NioBufferHandler bufhandler = new NioBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel, this);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            if (sslContext != null) {\n                \r\n                processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            } else {\n                \r\n                awaitBytes(socketWrapper);\n            }\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":468,"status":"M"}],"commitId":"9718447a0342866373fec40498e960040d58b738","commitMessage":"@@@InputBuffer refactoring. All compiles but not yet tested.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1652003 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-15 17:21:17","modifiedFileCount":"9","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-01-17 01:32:18","codes":[{"authorDate":"2015-01-15 17:21:17","commitOrder":19,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-01-15 17:21:17","endLine":548,"groupId":"444","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/58/afe096675518f03d4372eb6d4d8a83f83c6d9e.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"N"},{"authorDate":"2015-01-17 01:32:18","commitOrder":19,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel, this);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-01-17 01:32:18","endLine":517,"groupId":"6623","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/89/18c479217b331a02304ec439114350aede357d.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel, this);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            if (sslContext != null) {\n                \r\n                processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n            } else {\n                \r\n                awaitBytes(socketWrapper);\n            }\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"M"}],"commitId":"bbc3c71307e7770dadcc160eddcea019b97b7590","commitMessage":"@@@- Initially after accept.  do regular processing rather than awaitBytes.  since awaitBytes is not as light as it used to be and the bytes could be there. Maybe it could be configurable.\n- Don't always fork a new thread after awaitBytes. If it didn't complete inline then it is supposed to be useless.\n- This however caused problems with write notifications. Although I do understand the changes that were made.  a notification should not be recursive.  so use a new thread in that case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1652468 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-17 01:32:18","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2015-02-23 19:20:20","codes":[{"authorDate":"2015-01-15 17:21:17","commitOrder":20,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-01-15 17:21:17","endLine":548,"groupId":"444","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/58/afe096675518f03d4372eb6d4d8a83f83c6d9e.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"N"},{"authorDate":"2015-02-23 19:20:20","commitOrder":20,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel, this);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-02-23 19:20:20","endLine":532,"groupId":"6623","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/18/b44ac7b7b6306330f2da1f9fc1d8b5469ee628.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel, this);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":480,"status":"M"}],"commitId":"05d21e679549f2f169483c739e57eb8a4d65d021","commitMessage":"@@@Make initial setting of timeouts consistent across the connectors.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1661641 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-02-23 19:20:20","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-03-11 06:35:19","codes":[{"authorDate":"2015-01-15 17:21:17","commitOrder":21,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-01-15 17:21:17","endLine":548,"groupId":"444","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/58/afe096675518f03d4372eb6d4d8a83f83c6d9e.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"N"},{"authorDate":"2015-03-11 06:35:19","commitOrder":21,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-03-11 06:35:19","endLine":521,"groupId":"10880","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e8/1f9c421abc4ac2934b936cb9f9eb960267b0c5.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = (useCaches) ? socketWrapperCache.pop() : null;\n            if (socketWrapper == null) {\n                socketWrapper = new Nio2SocketWrapper(channel, this);\n            }\n            channel.reset(socket, socketWrapper);\n            socketWrapper.reset(channel, getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":471,"status":"M"}],"commitId":"0148f64962d7f0ccab97e8e3112d33fa343f5b1a","commitMessage":"@@@Stop re-using the SocketWrapper\nWith the introduction of upgrade and non-blocking.  I/O can occur on non-container threads. This makes it near impossible to track whether a SocketWrapper (== connection) is still referenced or not.  making re-use a risky proposition.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1665736 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-11 06:35:19","modifiedFileCount":"4","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-04-09 21:23:53","codes":[{"authorDate":"2015-04-09 21:23:53","commitOrder":22,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-09 21:23:53","endLine":498,"groupId":"444","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d5/9efaf1728cc9252d2dd9adef9b4a5133d51a84.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"},{"authorDate":"2015-04-09 21:23:53","commitOrder":22,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-09 21:23:53","endLine":468,"groupId":"0","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/10/7664cec67ac54c98ebef50acb1db94c52a6f8e.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (sslContext != null) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"82c4cf9a9f5551377675524a8846ffbf820ecb91","commitMessage":"@@@Pull up the common JSSE code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1672342 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-09 21:23:53","modifiedFileCount":"3","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-04-09 21:23:53","codes":[{"authorDate":"2015-04-10 02:17:24","commitOrder":23,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool, this);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-10 02:17:24","endLine":498,"groupId":"444","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/cd/e4176b2165d59c7390e28ce5248087cd3299f5.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"},{"authorDate":"2015-04-09 21:23:53","commitOrder":23,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-09 21:23:53","endLine":468,"groupId":"0","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/10/7664cec67ac54c98ebef50acb1db94c52a6f8e.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"N"}],"commitId":"96bf06d58b1f01b9a6ba05e9e84256f1121a4187","commitMessage":"@@@SNI Refactoring. I'm doing this in small steps as I tried to do it a single go and got something wrong that broke secure connections.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1672437 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-10 02:17:24","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-04-09 21:23:53","codes":[{"authorDate":"2015-04-10 02:58:39","commitOrder":24,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-10 02:58:39","endLine":485,"groupId":"11992","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/22/9b5fecd82a21b0ba03a44b24b04810667abd7c.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if ( channel == null ) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appbufsize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appbufsize,socketProperties.getAppReadBufSize()),\n                            Math.max(appbufsize,socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNioChannel(socket, engine, bufhandler, selectorPool, this);\n                } else {\n                    \r\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                if ( channel instanceof SecureNioChannel ) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNioChannel)channel).reset(engine);\n                } else {\n                    channel.reset();\n                }\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"},{"authorDate":"2015-04-09 21:23:53","commitOrder":24,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-09 21:23:53","endLine":468,"groupId":"0","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/10/7664cec67ac54c98ebef50acb1db94c52a6f8e.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"N"}],"commitId":"519d25725f3ef431c42c9b73d04aba3930a86a6d","commitMessage":"@@@More SNI refactoring. Should be ready to start peeking at the input stream now.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1672452 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-10 02:58:39","modifiedFileCount":"3","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-04-13 21:53:52","codes":[{"authorDate":"2015-04-10 02:58:39","commitOrder":25,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-10 02:58:39","endLine":485,"groupId":"11992","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/22/9b5fecd82a21b0ba03a44b24b04810667abd7c.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"N"},{"authorDate":"2015-04-13 21:53:52","commitOrder":25,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-13 21:53:52","endLine":456,"groupId":"13461","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f6/e4d53e68239704109ca7b97439e07118e53dca.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                \r\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    int appBufferSize = engine.getSession().getApplicationBufferSize();\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            Math.max(appBufferSize, socketProperties.getAppReadBufSize()),\n                            Math.max(appBufferSize, socketProperties.getAppWriteBufSize()),\n                            socketProperties.getDirectBuffer());\n                    channel = new SecureNio2Channel(engine, bufhandler, this);\n                } else {\n                    SocketBufferHandler bufhandler = new SocketBufferHandler(\n                            socketProperties.getAppReadBufSize(),\n                            socketProperties.getAppWriteBufSize(),\n                            socketProperties.getDirectBuffer());\n                    channel = new Nio2Channel(bufhandler);\n                }\n            } else {\n                if (isSSLEnabled()) {\n                    SSLEngine engine = createSSLEngine();\n                    ((SecureNio2Channel) channel).setSSLEngine(engine);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"238c2a767c61bd2e7e34a735acd2296322a91372","commitMessage":"@@@SNI support for NIO2\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1673191 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-13 21:53:52","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-05-22 01:11:49","codes":[{"authorDate":"2015-04-10 02:58:39","commitOrder":26,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-10 02:58:39","endLine":485,"groupId":"11992","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/22/9b5fecd82a21b0ba03a44b24b04810667abd7c.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"N"},{"authorDate":"2015-05-22 01:11:49","commitOrder":26,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-05-22 01:11:49","endLine":377,"groupId":"13461","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e6/336c5db1e820c8045d036d47921bae14c3909a.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = (useCaches) ? nioChannels.pop() : null;\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"}],"commitId":"9f703711277044e1c9be60a9fcee4c548d647e27","commitMessage":"@@@Drop useCaches from NIO2 and fix issue in doc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1680928 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-22 01:11:49","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2015-07-21 21:18:30","codes":[{"authorDate":"2015-04-10 02:58:39","commitOrder":27,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-10 02:58:39","endLine":485,"groupId":"11992","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/22/9b5fecd82a21b0ba03a44b24b04810667abd7c.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"N"},{"authorDate":"2015-07-21 21:18:30","commitOrder":27,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            return processSocket0(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","date":"2015-07-21 21:18:30","endLine":372,"groupId":"13461","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/38/0f7d71bded5b5016cf8f488ee60def470af2db.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        \r\n        try {\n            socketProperties.setProperties(socket);\n\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            processSocket(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"}],"commitId":"7c69025661bce3d6a54918dd55d9a36a8b778d5a","commitMessage":"@@@Continue cleaning up the accept algorithm.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1692107 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-21 21:18:30","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2015-12-14 21:50:25","codes":[{"authorDate":"2015-04-10 02:58:39","commitOrder":28,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2015-04-10 02:58:39","endLine":485,"groupId":"11992","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/22/9b5fecd82a21b0ba03a44b24b04810667abd7c.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"N"},{"authorDate":"2015-12-14 21:50:25","commitOrder":28,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            return processSocket0(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","date":"2015-12-14 21:50:25","endLine":364,"groupId":"13461","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/49/2c12b8d067fb422e8f0c1729a1924d352a30be.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            return processSocket0(socketWrapper, SocketStatus.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"cdf5e4020634aeb273d5edc24e3340d34dec458b","commitMessage":"@@@Rename SocketStatus to SocketEvent. It has needed a better name since creation and the connector refactoring is a good point to do it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1719912 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-14 21:50:25","modifiedFileCount":"22","status":"M","submitter":"Mark Thomas"},{"authorTime":"2015-12-14 21:50:25","codes":[{"authorDate":"2016-05-04 21:26:05","commitOrder":29,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2016-05-04 21:26:05","endLine":424,"groupId":"11992","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/2e6dfa2f28e7501a15c3468f1cfa75c286a2e3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(t);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"M"},{"authorDate":"2015-12-14 21:50:25","commitOrder":29,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            return processSocket0(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","date":"2015-12-14 21:50:25","endLine":364,"groupId":"13461","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/49/2c12b8d067fb422e8f0c1729a1924d352a30be.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            return processSocket0(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"N"}],"commitId":"c3a535e0af70834cff602105a4f0976ce30b25fa","commitMessage":"@@@Fix copy/paste error and throw correct exception\nThis closes #29\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1742276 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-05-04 21:26:05","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-06-02 05:17:18","codes":[{"authorDate":"2016-05-04 21:26:05","commitOrder":30,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2016-05-04 21:26:05","endLine":424,"groupId":"11992","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/2e6dfa2f28e7501a15c3468f1cfa75c286a2e3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"},{"authorDate":"2016-06-02 05:17:18","commitOrder":30,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","date":"2016-06-02 05:17:18","endLine":368,"groupId":"13461","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a4/f7d72b5caca4fa727ec169faf82be100764153.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            return processSocket0(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"a05d705c8e17333e97fe64cd6d6d7753383ac5cf","commitMessage":"@@@Merge duplicate methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1746496 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-06-02 05:17:18","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-10-31 23:29:27","codes":[{"authorDate":"2016-05-04 21:26:05","commitOrder":31,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2016-05-04 21:26:05","endLine":424,"groupId":"11992","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/2e6dfa2f28e7501a15c3468f1cfa75c286a2e3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"},{"authorDate":"2016-10-31 23:29:27","commitOrder":31,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","date":"2016-10-31 23:29:27","endLine":354,"groupId":"13461","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0d/24e3e77c4f1010bbf4b42955d7fe6fba4c8ecc.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getSoTimeout());\n            socketWrapper.setWriteTimeout(getSoTimeout());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"712bcbcf6ace924fae6aa5694ff6d7eb852561e1","commitMessage":"@@@Follow up to r1767250: rename soTimeout to connectionTimeout in ProcotolHandler and Endpoint\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1767307 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-10-31 23:29:27","modifiedFileCount":"9","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-12-18 00:25:36","codes":[{"authorDate":"2016-05-04 21:26:05","commitOrder":32,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2016-05-04 21:26:05","endLine":424,"groupId":"11992","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/2e6dfa2f28e7501a15c3468f1cfa75c286a2e3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"},{"authorDate":"2016-12-18 00:25:36","commitOrder":32,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","date":"2016-12-18 00:25:36","endLine":313,"groupId":"5802","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/dd/edf77ce55b25d5859c798352ef04e9f38ec745.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setWriteTimeout(getSocketProperties().getSoTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"}],"commitId":"ed91995123e6f4d33fbf3e5ef9f17873b6e6bfbc","commitMessage":"@@@Don't set read/write timeouts multiple times.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1774793 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-12-18 00:25:36","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2018-11-08 19:29:45","codes":[{"authorDate":"2016-05-04 21:26:05","commitOrder":33,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2016-05-04 21:26:05","endLine":424,"groupId":"11992","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/2e6dfa2f28e7501a15c3468f1cfa75c286a2e3.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"N"},{"authorDate":"2018-11-08 19:29:45","commitOrder":33,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","date":"2018-11-08 19:29:45","endLine":341,"groupId":"5802","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/5f/256147b262c29b372b1a59d0cc53e423f7377a.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, true);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"}],"commitId":"a2873a0819775e7e2f7c06b8892f5246ab40828d","commitMessage":"@@@Remove dedicated NIO2 acceptor thread.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1846131 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-11-08 19:29:45","modifiedFileCount":"2","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2018-12-11 04:01:37","codes":[{"authorDate":"2018-12-11 04:01:37","commitOrder":34,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2018-12-11 04:01:37","endLine":417,"groupId":"11992","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b2/264a958b3f39822cda1527f545cdac5f2112e4.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(\"\",t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"},{"authorDate":"2018-12-11 04:01:37","commitOrder":34,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","date":"2018-12-11 04:01:37","endLine":340,"groupId":"5802","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/24/e58f527ddeb63cd036253ba09ec62f978d599c.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(\"\",t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"}],"commitId":"cd64a31b4556f9cce30322367a45d6fabcc6f575","commitMessage":"@@@Add i18n for util/net package.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848627 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-12-11 04:01:37","modifiedFileCount":"5","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2019-04-17 17:08:48","codes":[{"authorDate":"2019-04-17 17:08:48","commitOrder":35,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2019-04-17 17:08:48","endLine":438,"groupId":"11992","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2e/3646a8b43dafa80c8978348758af7d459aada2.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"},{"authorDate":"2019-04-17 17:08:48","commitOrder":35,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","date":"2019-04-17 17:08:48","endLine":347,"groupId":"5802","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6d/3e5d0786e685ea9f901a80cec1d0f78527ddcb.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = nioChannels.pop();\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"}],"commitId":"2045d619a317af1cef2774402839e2ba15ef40cb","commitMessage":"@@@Avoid using object caches when disabled\n\nThe special size value 0 allows disabling them.  as is documented. In\naddition to the structure creation.  using a SynchronizedStack when they\nhave zero size still causes connector wide synchronization.","date":"2019-04-17 17:08:48","modifiedFileCount":"4","status":"M","submitter":"remm"},{"authorTime":"2019-04-17 17:08:48","codes":[{"authorDate":"2019-05-13 20:40:36","commitOrder":36,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            poller.register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2019-05-13 20:40:36","endLine":426,"groupId":"9579","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/08/31273d641b4e08e2f5c92a9fbe520a388c39f0.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            getPoller0().register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"M"},{"authorDate":"2019-04-17 17:08:48","commitOrder":36,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","date":"2019-04-17 17:08:48","endLine":347,"groupId":"5802","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6d/3e5d0786e685ea9f901a80cec1d0f78527ddcb.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"e813ae0d9329ebf4b95c02043c39c676edb47d3c","commitMessage":"@@@Remove poller thread count from NIO connector\n\nSimplify code when possible. As the poller is set for the connector. \nonlythe NioChannel and NioSocketWrapper have a dynamic association. I\nwill close PR163.","date":"2019-05-13 20:40:36","modifiedFileCount":"4","status":"M","submitter":"remm"},{"authorTime":"2019-04-17 17:08:48","codes":[{"authorDate":"2019-05-16 01:51:48","commitOrder":37,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            channel.setSocketWrapper(socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","date":"2019-05-16 01:51:48","endLine":438,"groupId":"9579","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/56/33c9273eaa556021ec983b8aacfda7b418810c.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            poller.register(channel);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"},{"authorDate":"2019-04-17 17:08:48","commitOrder":37,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","date":"2019-04-17 17:08:48","endLine":347,"groupId":"5802","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6d/3e5d0786e685ea9f901a80cec1d0f78527ddcb.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"7b7442d87e08f0bd1134e7872e7cd15bf3509b64","commitMessage":"@@@Remove bad looking fields access\n\ngetSelectorPool public -> protected.  since it's only used in the socket\nwrapper. Move NIO socket wrapper init to setSocketOptions since the\npoller is now known.","date":"2019-05-16 01:51:48","modifiedFileCount":"2","status":"M","submitter":"remm"},{"authorTime":"2019-04-17 17:08:48","codes":[{"authorDate":"2019-05-16 17:28:36","commitOrder":38,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            channel.setSocketWrapper(socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2019-05-16 17:28:36","endLine":438,"groupId":"9579","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/36/7705908b73aa3e65c9f9de8ddb7b61e2ce53ae.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            channel.setSocketWrapper(socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            \r\n            return false;\n        }\n        return true;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"},{"authorDate":"2019-04-17 17:08:48","commitOrder":38,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","date":"2019-04-17 17:08:48","endLine":347,"groupId":"5802","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6d/3e5d0786e685ea9f901a80cec1d0f78527ddcb.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"c6cf74737c62399010f9abead54b8ec5a6f104a3","commitMessage":"@@@More close fixes\n\nFix a NIO2 problem where sockets were discarded on close.  now it\nprocesses a STOP instead (NIO does that in one case). Also use the\nreturn value of processSocket when it is using the executor. Three\nsockets are not getting closed in\ncatalina.authenticator.TestSSOnonLoginAndBasicAuthenticator for some\nunknown reason (a read is pending.  but the completion handler is never\ncalled on shutdown - it should get a AsynchronousCloseException).\nFix the 3 unclosed sockets for NIO.  apparently caused by using the key\nattachment being null. Redo cancelledKey without it and simplify.","date":"2019-05-16 17:28:36","modifiedFileCount":"3","status":"M","submitter":"remm"},{"authorTime":"2019-04-17 17:08:48","codes":[{"authorDate":"2019-10-02 23:53:25","commitOrder":39,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            } else {\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2019-10-02 23:53:25","endLine":437,"groupId":"1378","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/99/d8896c77c30e015252e89287baf6e771dc2c15.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(socket, bufhandler);\n                }\n            } else {\n                channel.setIOChannel(socket);\n                channel.reset();\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            channel.setSocketWrapper(socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2019-04-17 17:08:48","commitOrder":39,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","date":"2019-04-17 17:08:48","endLine":347,"groupId":"5802","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6d/3e5d0786e685ea9f901a80cec1d0f78527ddcb.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"2e47b58fb3667f56a5d7332ffb6fd3c7ce13b8a0","commitMessage":"@@@Minor NIO refactoring to align with NIO2\n\nNIO2 uses the reset() method instead of setter in a weird order.  this\nlooks better to me.","date":"2019-10-02 23:53:25","modifiedFileCount":"3","status":"M","submitter":"remm"},{"authorTime":"2019-04-17 17:08:48","codes":[{"authorDate":"2019-10-04 00:15:09","commitOrder":40,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            } else {\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2019-10-04 00:15:09","endLine":437,"groupId":"16206","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/15/0bcf5711e47632fbeb1ed6dc00d22ddf5d9793.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            } else {\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2019-04-17 17:08:48","commitOrder":40,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","date":"2019-04-17 17:08:48","endLine":347,"groupId":"5802","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6d/3e5d0786e685ea9f901a80cec1d0f78527ddcb.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"7bbc448bb71906038ae61cd2fc8e89631a15823b","commitMessage":"@@@Remove unused code","date":"2019-10-04 00:15:09","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-10-30 02:04:13","codes":[{"authorDate":"2019-10-30 02:04:13","commitOrder":41,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            } else {\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            connections.put(socketWrapper, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2019-10-30 02:04:13","endLine":438,"groupId":"865","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/a8262714e2e8e1b1e7f6f0add514481020085a.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            } else {\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2019-10-30 02:04:13","commitOrder":41,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            connections.put(socketWrapper, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","date":"2019-10-30 02:04:13","endLine":337,"groupId":"9660","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1a/c7025f43d0ee87e7f1037bc43abdf660c5d2f3.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"49d37dffb486f5c15a22d14fe858b3d7b12a0d66","commitMessage":"@@@Move connection tracking to the endpoint\n\nIt requires far fewer operations as the socket wrapper simply references\nthe processor. A map then tracks the wrappers on open/close.  instead of\ndoing multiple operations on each socket processing.\npublic Set<SocketWrapperBase<S>> getOpenSockets(); has a modified return\ntype. This is not mandatory but more convenient. If it is likely to\ncause problems.  it can be changed back.","date":"2019-10-30 02:04:13","modifiedFileCount":"6","status":"M","submitter":"remm"},{"authorTime":"2019-11-06 18:01:43","codes":[{"authorDate":"2019-11-06 18:01:43","commitOrder":42,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            } else {\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            connections.put(channel, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2019-11-06 18:01:43","endLine":438,"groupId":"865","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0c/b33f6857707d55934e7bf7d235acf049a0b751.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            } else {\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            connections.put(socketWrapper, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2019-11-06 18:01:43","commitOrder":42,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            connections.put(channel, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","date":"2019-11-06 18:01:43","endLine":337,"groupId":"9660","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/b875706da6d21cb880f89d8cfeb9c78eba4390.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            connections.put(socketWrapper, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"49450836423be8ed1d1e3b6a46757f983ede9414","commitMessage":"@@@Remove connections map from APR endpoint\n\nThe connections map from AbstractEndpoint can be used by APR as well. \nafter refactoring using a key on the socket. Once (if) APR is removed. \nthis can go back to using the socket wrapper as a key (and value).\nAbstractEndpoint.getConnections becomes more costly but it is only used\non pause or destroy.\nAlso make sure close attempts a full cleanup using a finally to remove\nfrom the connection map and call doClose.","date":"2019-11-06 18:01:43","modifiedFileCount":"5","status":"M","submitter":"remm"},{"authorTime":"2019-11-07 18:10:41","codes":[{"authorDate":"2019-11-07 18:10:41","commitOrder":43,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioChannel channel = null;\n        boolean success = false;\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            connections.put(channel, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            success = true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        } finally {\n            if (!success && channel != null) {\n                connections.remove(channel);\n                channel.free();\n            }\n        }\n        \r\n        return success;\n    }\n","date":"2019-11-07 18:10:41","endLine":443,"groupId":"6991","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/5b9006d72eb82997baf1b081edf57e4dc0b863.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            } else {\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            connections.put(channel, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2019-11-07 18:10:41","commitOrder":43,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2Channel channel = null;\n        boolean success = false;\n        try {\n            socketProperties.setProperties(socket);\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            connections.put(channel, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            success = processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n        } finally {\n            if (!success && channel != null) {\n                connections.remove(channel);\n                channel.free();\n            }\n        }\n        \r\n        return success;\n    }\n","date":"2019-11-07 18:10:41","endLine":343,"groupId":"9660","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/58/79fa9c3d87928e4336744809c78a5262e218fe.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        try {\n            socketProperties.setProperties(socket);\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            connections.put(channel, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"),t);\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"5f4d5b357f4388149845fa96d87930d6f664e252","commitMessage":"@@@Better cleanup in setSocketOptions\n\nSince the connections map is updated here.  the socket must be removed\nfrom it if things go wrong before the wrapper processing begins. Also\ncall free() on the channel (and then discard it) since this wouldn't be\ndone anywhere and could leak direct memory in some cases.","date":"2019-11-07 18:10:41","modifiedFileCount":"2","status":"M","submitter":"remm"},{"authorTime":"2019-11-20 06:18:57","codes":[{"authorDate":"2019-11-20 06:18:57","commitOrder":44,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioSocketWrapper socketWrapper = null;\n        try {\n            \r\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            \r\n            socket.configureBlocking(false);\n            socketProperties.setProperties(socket.socket());\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2019-11-20 06:18:57","endLine":442,"groupId":"15094","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/75/01647a5bd069548f0701107888034c6ff4183e.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioChannel channel = null;\n        boolean success = false;\n        \r\n        try {\n            \r\n            socket.configureBlocking(false);\n            Socket sock = socket.socket();\n            socketProperties.setProperties(sock);\n\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper socketWrapper = new NioSocketWrapper(channel, this);\n            connections.put(channel, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            success = true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n        } finally {\n            if (!success && channel != null) {\n                connections.remove(channel);\n                channel.free();\n            }\n        }\n        \r\n        return success;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"},{"authorDate":"2019-11-20 06:18:57","commitOrder":44,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2SocketWrapper socketWrapper = null;\n        try {\n            \r\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper newWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            socketProperties.setProperties(socket);\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2019-11-20 06:18:57","endLine":346,"groupId":"6819","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ff/5303b3512bb78852ba781d96e9a2b10b27ba03.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2Channel channel = null;\n        boolean success = false;\n        try {\n            socketProperties.setProperties(socket);\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper socketWrapper = new Nio2SocketWrapper(channel, this);\n            connections.put(channel, socketWrapper);\n            channel.reset(socket, socketWrapper);\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            success = processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n        } finally {\n            if (!success && channel != null) {\n                connections.remove(channel);\n                channel.free();\n            }\n        }\n        \r\n        return success;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"a8388e72ec1fe27d55d7b5a2b3aa01032ebb18d5","commitMessage":"@@@Refactor endpoint close/destroySocket API\n\nThese APIs exist mostly for APR.  but is actually useful for cleanup for\nerrors which occur during setSocketOptions.\nThe API is refactored to the following behavior which likely corresponds\nto what was originally intended:\n- closeSocket: close the socket through the wrapper using the connection\nto look it up in the map\n- destroySocket: low level close when no wrapper exists.  this happens\nwhen accepting while the connector is not started.  or setSocketOptions\nhas an unexpected error before the wrapper is created\nFor NIOx.  ensure that setSocketOptions errors call destorySocket if an\nerror occurs before the wrapper is associated with the connection\n(closeSocket will do nothing in that case).\nFor APR.  refactor to use the wrapper close in all cases (except the use\nin the acceptor.  like for the other connectors).  the poller will then\ncall the low level destroy once that close is done.","date":"2019-11-20 06:18:57","modifiedFileCount":"5","status":"M","submitter":"remm"},{"authorTime":"2019-11-20 06:18:57","codes":[{"authorDate":"2020-01-14 22:34:36","commitOrder":45,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioSocketWrapper socketWrapper = null;\n        try {\n            \r\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            \r\n            socket.configureBlocking(false);\n            socketProperties.setProperties(socket.socket());\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2020-01-14 22:34:36","endLine":410,"groupId":"15094","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6a/2a5db0275c4752e7c36229cd2c4146537109b8.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioSocketWrapper socketWrapper = null;\n        try {\n            \r\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, selectorPool, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            \r\n            socket.configureBlocking(false);\n            socketProperties.setProperties(socket.socket());\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"M"},{"authorDate":"2019-11-20 06:18:57","commitOrder":45,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2SocketWrapper socketWrapper = null;\n        try {\n            \r\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper newWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            socketProperties.setProperties(socket);\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2019-11-20 06:18:57","endLine":346,"groupId":"6819","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ff/5303b3512bb78852ba781d96e9a2b10b27ba03.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2SocketWrapper socketWrapper = null;\n        try {\n            \r\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper newWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            socketProperties.setProperties(socket);\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"N"}],"commitId":"135c080c087fc223b614c27c27c9cc798b0ee597","commitMessage":"@@@Remove NIO blocking selector\n\nWith relevant calls and object cleanups.","date":"2020-01-14 22:34:36","modifiedFileCount":"4","status":"M","submitter":"remm"},{"authorTime":"2020-06-26 23:12:34","codes":[{"authorDate":"2020-06-26 23:12:34","commitOrder":46,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioSocketWrapper socketWrapper = null;\n        try {\n            \r\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            \r\n            socket.configureBlocking(false);\n            socketProperties.setProperties(socket.socket());\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2020-06-26 23:12:34","endLine":384,"groupId":"15094","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9b/ff87422ab44cee52a98e4785a20b70d2ec9472.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioSocketWrapper socketWrapper = null;\n        try {\n            \r\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            \r\n            socket.configureBlocking(false);\n            socketProperties.setProperties(socket.socket());\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"},{"authorDate":"2020-06-26 23:12:34","commitOrder":46,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2SocketWrapper socketWrapper = null;\n        try {\n            \r\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper newWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            socketProperties.setProperties(socket);\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2020-06-26 23:12:34","endLine":333,"groupId":"6819","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2e/3a5af5b235e74cf0d75ca0fbc78edeb2c1510f.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2SocketWrapper socketWrapper = null;\n        try {\n            \r\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper newWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            socketProperties.setProperties(socket);\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            socketWrapper.setSecure(isSSLEnabled());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"977d440678168f15388f4ae510d997267e98eb4c","commitMessage":"@@@socketWrapper.secure is no longer used\n\nIt is used in 7.0.x to trigger additional debug logging.","date":"2020-06-26 23:12:34","modifiedFileCount":"4","status":"M","submitter":"Mark Thomas"},{"authorTime":"2020-06-26 23:12:34","codes":[{"authorDate":"2020-11-20 22:22:14","commitOrder":47,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioSocketWrapper socketWrapper = null;\n        try {\n            \r\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            \r\n            socket.configureBlocking(false);\n            socketProperties.setProperties(socket.socket());\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            poller.register(socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2020-11-20 22:22:14","endLine":385,"groupId":"15094","id":71,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2a/f6dce4c00c666e7d3a002f9da8cb48e0a4cb01.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioSocketWrapper socketWrapper = null;\n        try {\n            \r\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            \r\n            socket.configureBlocking(false);\n            socketProperties.setProperties(socket.socket());\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            poller.register(channel, socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"},{"authorDate":"2020-06-26 23:12:34","commitOrder":47,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2SocketWrapper socketWrapper = null;\n        try {\n            \r\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper newWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            socketProperties.setProperties(socket);\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2020-06-26 23:12:34","endLine":333,"groupId":"6819","id":72,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2e/3a5af5b235e74cf0d75ca0fbc78edeb2c1510f.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2SocketWrapper socketWrapper = null;\n        try {\n            \r\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper newWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            socketProperties.setProperties(socket);\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"e02480700374ae8147fb4b9a1d24b96e7fa23041","commitMessage":"@@@Change PollerEvent to reference the socket wrapper\n\nThis forces going through it rather than keep around a NioChannel.  and\nis safer.\nInspired by 45aeed655771308d5185d9dbab8e29a73d87509b","date":"2020-11-20 22:22:14","modifiedFileCount":"1","status":"M","submitter":"remm"},{"authorTime":"2020-06-26 23:12:34","codes":[{"authorDate":"2020-12-23 18:45:58","commitOrder":48,"curCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioSocketWrapper socketWrapper = null;\n        try {\n            \r\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            \r\n            socket.configureBlocking(false);\n            if (getUnixDomainSocketPath() == null) {\n                socketProperties.setProperties(socket.socket());\n            }\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            poller.register(socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2020-12-23 18:45:58","endLine":468,"groupId":"10392","id":73,"instanceNumber":1,"isCurCommit":0,"methodName":"setSocketOptions","params":"(SocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a1/743a4a0726fe2d277b5b7346691d4617a363f7.src","preCode":"    protected boolean setSocketOptions(SocketChannel socket) {\n        NioSocketWrapper socketWrapper = null;\n        try {\n            \r\n            NioChannel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNioChannel(bufhandler, this);\n                } else {\n                    channel = new NioChannel(bufhandler);\n                }\n            }\n            NioSocketWrapper newWrapper = new NioSocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            \r\n            socket.configureBlocking(false);\n            socketProperties.setProperties(socket.socket());\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());\n            poller.register(socketWrapper);\n            return true;\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            try {\n                log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            } catch (Throwable tt) {\n                ExceptionUtils.handleThrowable(tt);\n            }\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/NioEndpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"},{"authorDate":"2020-06-26 23:12:34","commitOrder":48,"curCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2SocketWrapper socketWrapper = null;\n        try {\n            \r\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper newWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            socketProperties.setProperties(socket);\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","date":"2020-06-26 23:12:34","endLine":333,"groupId":"10392","id":74,"instanceNumber":2,"isCurCommit":0,"methodName":"setSocketOptions","params":"(AsynchronousSocketChannelsocket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/2e/3a5af5b235e74cf0d75ca0fbc78edeb2c1510f.src","preCode":"    protected boolean setSocketOptions(AsynchronousSocketChannel socket) {\n        Nio2SocketWrapper socketWrapper = null;\n        try {\n            \r\n            Nio2Channel channel = null;\n            if (nioChannels != null) {\n                channel = nioChannels.pop();\n            }\n            if (channel == null) {\n                SocketBufferHandler bufhandler = new SocketBufferHandler(\n                        socketProperties.getAppReadBufSize(),\n                        socketProperties.getAppWriteBufSize(),\n                        socketProperties.getDirectBuffer());\n                if (isSSLEnabled()) {\n                    channel = new SecureNio2Channel(bufhandler, this);\n                } else {\n                    channel = new Nio2Channel(bufhandler);\n                }\n            }\n            Nio2SocketWrapper newWrapper = new Nio2SocketWrapper(channel, this);\n            channel.reset(socket, newWrapper);\n            connections.put(socket, newWrapper);\n            socketWrapper = newWrapper;\n\n            \r\n            socketProperties.setProperties(socket);\n\n            socketWrapper.setReadTimeout(getConnectionTimeout());\n            socketWrapper.setWriteTimeout(getConnectionTimeout());\n            socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());\n            \r\n            return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            log.error(sm.getString(\"endpoint.socketOptionsError\"), t);\n            if (socketWrapper == null) {\n                destroySocket(socket);\n            }\n        }\n        \r\n        return false;\n    }\n","realPath":"java/org/apache/tomcat/util/net/Nio2Endpoint.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"884b997f5a9a7da9f696d00574d3b727afbfae8c","commitMessage":"@@@Add support for Unix domain sockets for NIO\n\nThis requires Java 16 or later.  and NIO (NIO2 did not get the feature).\nThis does not remove the socket on shutdown.  not sure what the best\nbehavior is there. The socket is closed and Java doesn't do anything\nabout that. This uses a bit of reflection.  maybe the\nunixDomainSocketPath attribute can be added to avoid that.  if the\nfeature is actually popular.\nWhen using the feature.  the JMX and thread names are slightly adjusted. \nand using the port attribute is optional.\nBased on a PR submitted by Graham Leggett\nhttps://github.com/apache/tomcat/pull/382","date":"2020-12-23 18:45:58","modifiedFileCount":"6","status":"M","submitter":"remm"}]
