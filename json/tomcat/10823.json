[{"authorTime":"2006-04-14 05:51:35","codes":[{"authorDate":"2006-04-14 05:51:35","commitOrder":1,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = 0;\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2006-04-14 05:51:35","endLine":739,"groupId":"14203","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1a/5088e5bed01abea4675dee80a6e2db863a99aa.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = 0;\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"B"},{"authorDate":"2006-04-14 05:51:35","commitOrder":1,"curCode":"    public void setAttribute(String name, Object value) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValid())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if ((unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2006-04-14 05:51:35","endLine":1338,"groupId":"5658","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1a/5088e5bed01abea4675dee80a6e2db863a99aa.src","preCode":"    public void setAttribute(String name, Object value) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValid())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if ((unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1228,"status":"B"}],"commitId":"a072883bc59691a1efd78e9863bb7ef9b90b81e9","commitMessage":"@@@- Port patches.\n- verifyIfValid in Session.access seems useless.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@393953 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-04-14 05:51:35","modifiedFileCount":"4","status":"B","submitter":"Remy Maucherat"},{"authorTime":"2006-04-15 05:30:28","codes":[{"authorDate":"2006-04-14 05:51:35","commitOrder":2,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = 0;\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2006-04-14 05:51:35","endLine":739,"groupId":"14203","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1a/5088e5bed01abea4675dee80a6e2db863a99aa.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = 0;\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"N"},{"authorDate":"2006-04-15 05:30:28","commitOrder":2,"curCode":"    public void setAttribute(String name, Object value) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if ((unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2006-04-15 05:30:28","endLine":1338,"groupId":"5658","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/19/d7506b32283ee0537b779532a78af78f98aef4.src","preCode":"    public void setAttribute(String name, Object value) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValid())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if ((unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1228,"status":"M"}],"commitId":"e029bbae4da36ed24c22f051493933158f19fe6d","commitMessage":"@@@- Port patches.\n- Change to session: it doesn't make sense to me that getAttribute is a good place to\n  synchronously make a check for session expiration (of course.  with accessCount.  this is\n  not going to happen anyway.  but still).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@394202 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-04-15 05:30:28","modifiedFileCount":"4","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-04-15 05:30:28","codes":[{"authorDate":"2006-06-29 19:37:30","commitOrder":3,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = null;\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2006-06-29 19:37:30","endLine":750,"groupId":"2033","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/66/de704f73aa8c6a735e625778b1861a146191cd.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = 0;\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"M"},{"authorDate":"2006-04-15 05:30:28","commitOrder":3,"curCode":"    public void setAttribute(String name, Object value) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if ((unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2006-04-15 05:30:28","endLine":1338,"groupId":"5658","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/19/d7506b32283ee0537b779532a78af78f98aef4.src","preCode":"    public void setAttribute(String name, Object value) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if ((unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1228,"status":"N"}],"commitId":"5638661fd2a06b148f041147be8726c03be529a9","commitMessage":"@@@- Redo the session activity check (which prevents expiring a session if there is an extremely\n  long request and a short timeout) as optional.  and using an atomic integer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@418016 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-06-29 19:37:30","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2006-08-23 00:52:29","codes":[{"authorDate":"2006-06-29 19:37:30","commitOrder":4,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = null;\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2006-06-29 19:37:30","endLine":750,"groupId":"2033","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/66/de704f73aa8c6a735e625778b1861a146191cd.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = null;\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"N"},{"authorDate":"2006-08-23 00:52:29","commitOrder":4,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2006-08-23 00:52:29","endLine":1378,"groupId":"11839","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/27/443a2e74763db0702f85ed7cbf4873e0e362e6.src","preCode":"    public void setAttribute(String name, Object value) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if ((unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1266,"status":"M"}],"commitId":"34f45b3705441b18d2f9ca8bd46ea94d52708df6","commitMessage":"@@@Prepare for cluster integration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@433689 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-08-23 00:52:29","modifiedFileCount":"2","status":"M","submitter":"Filip Hanik"},{"authorTime":"2006-08-23 00:52:29","codes":[{"authorDate":"2006-10-18 18:13:28","commitOrder":5,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2006-10-18 18:13:28","endLine":754,"groupId":"14203","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fc/ec6ee9a21a285714e9c3e4d3dc8111ba78acde.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            accessCount = null;\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"M"},{"authorDate":"2006-08-23 00:52:29","commitOrder":5,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2006-08-23 00:52:29","endLine":1378,"groupId":"11839","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/27/443a2e74763db0702f85ed7cbf4873e0e362e6.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1266,"status":"N"}],"commitId":"9c6f1b7af968648eaa8f69312521d0fcc42ccaa2","commitMessage":"@@@- Fix NPE on isValid for an expired session when activity check is enabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@465195 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-10-18 18:13:28","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2008-11-14 16:54:58","codes":[{"authorDate":"2006-10-18 18:13:28","commitOrder":6,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2006-10-18 18:13:28","endLine":754,"groupId":"14203","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fc/ec6ee9a21a285714e9c3e4d3dc8111ba78acde.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"N"},{"authorDate":"2008-11-14 16:54:58","commitOrder":6,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\",\n                              name, value));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2008-11-14 16:54:58","endLine":1415,"groupId":"11839","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/5a/640f3604a0b2fb46a680260f675c3f6ec6875f.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\"));\n\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1303,"status":"M"}],"commitId":"7f79e4d9642d5f6ba238eeb2e0d79b54eace9e6c","commitMessage":"@@@When throwing Non-serializable exception.  mark which argument was non-serializable to help tracing the cause when developing.\nNeeds localization to other local properties files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@713953 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-11-14 16:54:58","modifiedFileCount":"1","status":"M","submitter":"Mladen Turk"},{"authorTime":"2008-11-14 21:49:14","codes":[{"authorDate":"2006-10-18 18:13:28","commitOrder":7,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2006-10-18 18:13:28","endLine":754,"groupId":"14203","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/fc/ec6ee9a21a285714e9c3e4d3dc8111ba78acde.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"N"},{"authorDate":"2008-11-14 21:49:14","commitOrder":7,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2008-11-14 21:49:14","endLine":1414,"groupId":"11839","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f4/66e5e896f2ae36463dc22550da0572bc863faa.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\",\n                              name, value));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1303,"status":"M"}],"commitId":"eae637b53b009be81d5f924b5e85538b0d063b9a","commitMessage":"@@@\nDo not throw attribute value.\nPatch provided by Tomaz Cerar cerar at parsek.com\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@714002 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-11-14 21:49:14","modifiedFileCount":"1","status":"M","submitter":"Mladen Turk"},{"authorTime":"2008-12-27 03:00:35","codes":[{"authorDate":"2008-12-27 03:00:35","commitOrder":8,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            \r\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2008-12-27 03:00:35","endLine":789,"groupId":"13541","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/5a67f91ca48aaa68ccbcb7ddf1de0979327c46.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            ;\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":701,"status":"M"},{"authorDate":"2008-12-27 03:00:35","commitOrder":8,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2008-12-27 03:00:35","endLine":1416,"groupId":"11839","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/5a67f91ca48aaa68ccbcb7ddf1de0979327c46.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    ;\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"M"}],"commitId":"83b275aff953124e848859972add32814882f769","commitMessage":"@@@o.a.c.session generics changes\nDeprecate methods that implement deprecated methods\nFix assorted Eclipse warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729523 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-12-27 03:00:35","modifiedFileCount":"8","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-12-27 03:00:35","codes":[{"authorDate":"2009-07-08 00:33:02","commitOrder":9,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            \r\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                if (gp.getLoginContext() != null) {\n                    try {\n                        gp.getLoginContext().logout();\n                    } catch (LoginException e) {\n                        manager.getContainer().getLogger().error(\n                                sm.getString(\"standardSession.jaaslogoutfail\"),\n                                e);\n                    }\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2009-07-08 00:33:02","endLine":787,"groupId":"13541","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/e9/858fa29ccde2c14c09ee9dd9fcc189c9f98050.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            \r\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":685,"status":"M"},{"authorDate":"2008-12-27 03:00:35","commitOrder":9,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2008-12-27 03:00:35","endLine":1416,"groupId":"11839","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/5a67f91ca48aaa68ccbcb7ddf1de0979327c46.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"N"}],"commitId":"80f8ec6f2a28c826d50e197709cfca189ebe166b","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=39231\nThe JAAS contract for LoginModule says we have to call logout(). This won't always work (eg if there is no session) but is a reasonable effort.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@791900 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-07-08 00:33:02","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-12-27 03:00:35","codes":[{"authorDate":"2009-07-09 16:35:39","commitOrder":10,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            \r\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2009-07-09 16:35:39","endLine":784,"groupId":"13541","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/ad/fc4e9d4f38f1998ae131994a3a4c268d3430e9.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            \r\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                if (gp.getLoginContext() != null) {\n                    try {\n                        gp.getLoginContext().logout();\n                    } catch (LoginException e) {\n                        manager.getContainer().getLogger().error(\n                                sm.getString(\"standardSession.jaaslogoutfail\"),\n                                e);\n                    }\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"M"},{"authorDate":"2008-12-27 03:00:35","commitOrder":10,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2008-12-27 03:00:35","endLine":1416,"groupId":"11839","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/5a67f91ca48aaa68ccbcb7ddf1de0979327c46.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"N"}],"commitId":"72e5e8978c610de7b703c826940dacaa7e75c8ff","commitMessage":"@@@Reduce coupling between StandardSession and JAAS as per Filip's suggestion\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@792446 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-07-09 16:35:39","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-12-27 03:00:35","codes":[{"authorDate":"2009-07-15 01:22:47","commitOrder":11,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            \r\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2009-07-15 01:22:47","endLine":789,"groupId":"13541","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/72/f5aff80eae401f1102219d0da1b1105a3b3abc.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring)\n            return;\n\n        synchronized (this) {\n\n            if (manager == null)\n                return;\n\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            \r\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"M"},{"authorDate":"2008-12-27 03:00:35","commitOrder":11,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2008-12-27 03:00:35","endLine":1416,"groupId":"11839","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/5a67f91ca48aaa68ccbcb7ddf1de0979327c46.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"N"}],"commitId":"6f3e56e04fa8ed62750ed4dc361460c3d6b04675","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=40380\nCorrect synchronisation of expire()\nShould now only run one per session\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@793981 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-07-15 01:22:47","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-12-27 03:00:35","codes":[{"authorDate":"2010-01-13 06:36:15","commitOrder":12,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                Thread.currentThread().setContextClassLoader(\n                        context.getLoader().getClassLoader());\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    Thread.currentThread().setContextClassLoader(oldTccl);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2010-01-13 06:36:15","endLine":807,"groupId":"8571","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/19/f061272a15e8e34ea74b4f506040e13bba5ae8.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            Object listeners[] = context.getApplicationLifecycleListeners();\n            if (notify && (listeners != null)) {\n                HttpSessionEvent event =\n                    new HttpSessionEvent(getSession());\n                for (int i = 0; i < listeners.length; i++) {\n                    int j = (listeners.length - 1) - i;\n                    if (!(listeners[j] instanceof HttpSessionListener))\n                        continue;\n                    HttpSessionListener listener =\n                        (HttpSessionListener) listeners[j];\n                    try {\n                        fireContainerEvent(context,\n                                           \"beforeSessionDestroyed\",\n                                           listener);\n                        listener.sessionDestroyed(event);\n                        fireContainerEvent(context,\n                                           \"afterSessionDestroyed\",\n                                           listener);\n                    } catch (Throwable t) {\n                        try {\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Exception e) {\n                            \r\n                        }\n                        manager.getContainer().getLogger().error\n                            (sm.getString(\"standardSession.sessionEvent\"), t);\n                    }\n                }\n            }\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"M"},{"authorDate":"2008-12-27 03:00:35","commitOrder":12,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2008-12-27 03:00:35","endLine":1416,"groupId":"11839","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/5a67f91ca48aaa68ccbcb7ddf1de0979327c46.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"N"}],"commitId":"413c5bc4abf5854ade42a518ea6e15db59bc34a5","commitMessage":"@@@Improved fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=47774\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898555 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-01-13 06:36:15","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-12-27 03:00:35","codes":[{"authorDate":"2010-01-15 05:33:58","commitOrder":13,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2010-01-15 05:33:58","endLine":819,"groupId":"8571","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/52/36e27fbde7682560e7084b57f5e86e426dce0d.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                Thread.currentThread().setContextClassLoader(\n                        context.getLoader().getClassLoader());\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    Thread.currentThread().setContextClassLoader(oldTccl);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"M"},{"authorDate":"2008-12-27 03:00:35","commitOrder":13,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2008-12-27 03:00:35","endLine":1416,"groupId":"11839","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/5a67f91ca48aaa68ccbcb7ddf1de0979327c46.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"N"}],"commitId":"cf05c25164b05b5735f26ce53fc5c9b93656335c","commitMessage":"@@@Fix TCK failures with security manager due to fix for bug 47774\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@899420 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-01-15 05:33:58","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2008-12-27 03:00:35","codes":[{"authorDate":"2010-04-15 17:19:02","commitOrder":14,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                long numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = (int) (((average * (numExpired-1)) + timeAlive)/numExpired);\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2010-04-15 17:19:02","endLine":834,"groupId":"8571","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d3/9fce4293ad5247f7dc1b275093b22c9c7b84ee.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                int numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = ((average * (numExpired-1)) + timeAlive)/numExpired;\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":699,"status":"M"},{"authorDate":"2008-12-27 03:00:35","commitOrder":14,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2008-12-27 03:00:35","endLine":1416,"groupId":"11839","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/13/5a67f91ca48aaa68ccbcb7ddf1de0979327c46.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1305,"status":"N"}],"commitId":"a905ebc00b3f06e5f88257a21254a04f04c24ecb","commitMessage":"@@@sessionCounter and expiredSessions declares as long instead of int.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@934337 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-04-15 17:19:02","modifiedFileCount":"3","status":"M","submitter":"Keiichi Fujino"},{"authorTime":"2010-07-08 08:05:38","codes":[{"authorDate":"2010-04-15 17:19:02","commitOrder":15,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                long numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = (int) (((average * (numExpired-1)) + timeAlive)/numExpired);\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2010-04-15 17:19:02","endLine":834,"groupId":"8571","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/d3/9fce4293ad5247f7dc1b275093b22c9c7b84ee.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                long numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = (int) (((average * (numExpired-1)) + timeAlive)/numExpired);\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":699,"status":"N"},{"authorDate":"2010-07-08 08:05:38","commitOrder":15,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2010-07-08 08:05:38","endLine":1490,"groupId":"11839","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9e/1c61e94455268778886bfbb63c755b658f7801.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException\n                (sm.getString(\"standardSession.setAttribute.ise\"));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1379,"status":"M"}],"commitId":"ac2d95c7efe7a093fcfe1e73567ef1700d1d2a97","commitMessage":"@@@Include session ID in error message logged when trying to set an attribute on an invalid session.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@961541 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-07-08 08:05:38","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-09-28 06:01:45","codes":[{"authorDate":"2010-09-28 06:01:45","commitOrder":16,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                long numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = (int) (((average * (numExpired-1)) + timeAlive)/numExpired);\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2010-09-28 06:01:45","endLine":859,"groupId":"183","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f0/c8deaab8e0feb92d07e4ee4699c69e39a31620.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                long numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = (int) (((average * (numExpired-1)) + timeAlive)/numExpired);\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":723,"status":"M"},{"authorDate":"2010-09-28 06:01:45","commitOrder":16,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2010-09-28 06:01:45","endLine":1495,"groupId":"11140","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f0/c8deaab8e0feb92d07e4ee4699c69e39a31620.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1382,"status":"M"}],"commitId":"92f81b19e6255baf01dcef2a7e4ec69d05dc8282","commitMessage":"@@@Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48644\nSome Throwables must always be re-thrown\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1001923 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-09-28 06:01:45","modifiedFileCount":"22","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-09-28 06:01:45","codes":[{"authorDate":"2010-11-18 07:24:25","commitOrder":17,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2010-11-18 07:24:25","endLine":868,"groupId":"183","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/4b/e7050df5098671c322b27f7bd9726eccd4bf9a.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n\r\n\r\n\n            long timeNow = System.currentTimeMillis();\n            int timeAlive = (int) ((timeNow - creationTime)/1000);\n            synchronized (manager) {\n                if (timeAlive > manager.getSessionMaxAliveTime()) {\n                    manager.setSessionMaxAliveTime(timeAlive);\n                }\n                long numExpired = manager.getExpiredSessions();\n                numExpired++;\n                manager.setExpiredSessions(numExpired);\n                int average = manager.getSessionAverageAliveTime();\n                average = (int) (((average * (numExpired-1)) + timeAlive)/numExpired);\n                manager.setSessionAverageAliveTime(average);\n            }\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":750,"status":"M"},{"authorDate":"2010-09-28 06:01:45","commitOrder":17,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2010-09-28 06:01:45","endLine":1495,"groupId":"11140","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f0/c8deaab8e0feb92d07e4ee4699c69e39a31620.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1382,"status":"N"}],"commitId":"accee40bb52c7841a4314c8303674a0f4ea2dac5","commitMessage":"@@@Refactor the calculation of session manager statistics to the session manager as suggested by kkolinko\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1036281 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-18 07:24:25","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2010-09-28 06:01:45","codes":[{"authorDate":"2010-11-19 03:59:11","commitOrder":18,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2010-11-19 03:59:11","endLine":868,"groupId":"183","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9f/96c61b80efd7a909b0256a70217f578828319f.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":750,"status":"M"},{"authorDate":"2010-09-28 06:01:45","commitOrder":18,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2010-09-28 06:01:45","endLine":1495,"groupId":"11140","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f0/c8deaab8e0feb92d07e4ee4699c69e39a31620.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1382,"status":"N"}],"commitId":"58bbb1832e0ec29903e1ea4c5918139c2a149971","commitMessage":"@@@Fix expiration statistics broken by r1036281\nAdd session creation and expiration rate statistics based on the 100 most recently created/expired sessions\nModify average session alive time to also use 100 most recently expired sessions\nUpdate benchmarks - new statistics add overhead but not significant in overall processing chain\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1036595 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-19 03:59:11","modifiedFileCount":"6","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2011-09-18 17:20:00","codes":[{"authorDate":"2010-11-19 03:59:11","commitOrder":19,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2010-11-19 03:59:11","endLine":868,"groupId":"183","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/9f/96c61b80efd7a909b0256a70217f578828319f.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n        \n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n            \n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":750,"status":"N"},{"authorDate":"2011-09-18 17:20:00","commitOrder":19,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2011-09-18 17:20:00","endLine":1547,"groupId":"11140","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/aa/6ac6f0abdbc383ea4b9dac8200010ae5fe77df.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !(value instanceof Serializable))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t); \n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n        \n        if ( !notify ) return;\n        \n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1434,"status":"M"}],"commitId":"037088640a95f33c9701a25187be32d9460f5322","commitMessage":"@@@Allow to overwrite check for distributability\nof session attributes by session implementations.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1172233 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-09-18 17:20:00","modifiedFileCount":"1","status":"M","submitter":"Rainer Jung"},{"authorTime":"2012-02-01 22:07:44","codes":[{"authorDate":"2012-02-01 22:07:44","commitOrder":20,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                    listener);\n                            listener.sessionDestroyed(event);\n                            context.fireContainerEvent(\"afterSessionDestroyed\",\n                                    listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                context.fireContainerEvent(\n                                        \"afterSessionDestroyed\", listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2012-02-01 22:07:44","endLine":850,"groupId":"8505","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/57/b6873ab33d2bbd82d4235817edfbeaf2b76225.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            fireContainerEvent(context,\n                                               \"beforeSessionDestroyed\",\n                                               listener);\n                            listener.sessionDestroyed(event);\n                            fireContainerEvent(context,\n                                               \"afterSessionDestroyed\",\n                                               listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                fireContainerEvent(context,\n                                                   \"afterSessionDestroyed\",\n                                                   listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":735,"status":"M"},{"authorDate":"2012-02-01 22:07:44","commitOrder":20,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2012-02-01 22:07:44","endLine":1510,"groupId":"11140","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/57/b6873ab33d2bbd82d4235817edfbeaf2b76225.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeReplaced\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeReplaced\",\n                                       listener);\n                } else {\n                    fireContainerEvent(context,\n                                       \"beforeSessionAttributeAdded\",\n                                       listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    fireContainerEvent(context,\n                                       \"afterSessionAttributeAdded\",\n                                       listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeReplaced\",\n                                           listener);\n                    } else {\n                        fireContainerEvent(context,\n                                           \"afterSessionAttributeAdded\",\n                                           listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1403,"status":"M"}],"commitId":"1fb8bd32a971c5d8e100aa50815859349ed7d67a","commitMessage":"@@@Deprecate unnecessary code that references StandardContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1239135 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-01 22:07:44","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-02-01 22:07:44","codes":[{"authorDate":"2012-02-06 22:48:18","commitOrder":21,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                    listener);\n                            listener.sessionDestroyed(event);\n                            context.fireContainerEvent(\"afterSessionDestroyed\",\n                                    listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                context.fireContainerEvent(\n                                        \"afterSessionDestroyed\", listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2012-02-06 22:48:18","endLine":849,"groupId":"8505","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f1/bc35950cc397d55ca51b817efff5b90f13123d.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                    listener);\n                            listener.sessionDestroyed(event);\n                            context.fireContainerEvent(\"afterSessionDestroyed\",\n                                    listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                context.fireContainerEvent(\n                                        \"afterSessionDestroyed\", listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof GenericPrincipal) {\n                GenericPrincipal gp = (GenericPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"},{"authorDate":"2012-02-01 22:07:44","commitOrder":21,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2012-02-01 22:07:44","endLine":1510,"groupId":"11140","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/57/b6873ab33d2bbd82d4235817edfbeaf2b76225.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1403,"status":"N"}],"commitId":"276b58536c5c1e54b21052cd272d07604d213cb9","commitMessage":"@@@Remove two more package dependencies\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1241027 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-06 22:48:18","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-02-01 22:07:44","codes":[{"authorDate":"2012-06-13 00:58:38","commitOrder":22,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContainer().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2012-06-13 00:58:38","endLine":851,"groupId":"8505","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b6/6333c7b01ce7bd33ff892283570e3631cde3bb.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                Object listeners[] = context.getApplicationLifecycleListeners();\n                if (notify && (listeners != null)) {\n                    HttpSessionEvent event =\n                        new HttpSessionEvent(getSession());\n                    for (int i = 0; i < listeners.length; i++) {\n                        int j = (listeners.length - 1) - i;\n                        if (!(listeners[j] instanceof HttpSessionListener))\n                            continue;\n                        HttpSessionListener listener =\n                            (HttpSessionListener) listeners[j];\n                        try {\n                            context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                    listener);\n                            listener.sessionDestroyed(event);\n                            context.fireContainerEvent(\"afterSessionDestroyed\",\n                                    listener);\n                        } catch (Throwable t) {\n                            ExceptionUtils.handleThrowable(t);\n                            try {\n                                context.fireContainerEvent(\n                                        \"afterSessionDestroyed\", listener);\n                            } catch (Exception e) {\n                                \r\n                            }\n                            manager.getContainer().getLogger().error\n                                (sm.getString(\"standardSession.sessionEvent\"), t);\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"},{"authorDate":"2012-02-01 22:07:44","commitOrder":22,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2012-02-01 22:07:44","endLine":1510,"groupId":"11140","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/57/b6873ab33d2bbd82d4235817edfbeaf2b76225.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1403,"status":"N"}],"commitId":"62c2a65c8b1ce35bda0e1e631712a715025fcb34","commitMessage":"@@@Review of Context.getApplicationLifecycleListeners() calls:\nDo less work if there are no listeners or 'notify' flag is false.\nI do not expect much effect from this change.  because implementation of Context.getApplicationLifecycleListeners() in StandardContext is lightweight: it returns a field value. Note that by default it returns an empty array.  not null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1349439 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-13 00:58:38","modifiedFileCount":"2","status":"M","submitter":"Konstantin Kolinko"},{"authorTime":"2012-07-05 05:24:28","codes":[{"authorDate":"2012-07-05 05:24:28","commitOrder":23,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2012-07-05 05:24:28","endLine":851,"groupId":"5459","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/22fd2733c4073c39b8428aebc3f73c71f9f7a4.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = (Context) manager.getContainer();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContainer().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContainer().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"},{"authorDate":"2012-07-05 05:24:28","commitOrder":23,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2012-07-05 05:24:28","endLine":1511,"groupId":"11140","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/22fd2733c4073c39b8428aebc3f73c71f9f7a4.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = (Context) manager.getContainer();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContainer().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1404,"status":"M"}],"commitId":"34f8d16d6986fe9f6163e1425b4beba38cb75b38","commitMessage":"@@@Switch from deprecated Manager.getContainer() to Manager.getContext()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1357415 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-07-05 05:24:28","modifiedFileCount":"12","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-05 05:24:28","codes":[{"authorDate":"2013-09-05 23:42:48","commitOrder":24,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (!isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2013-09-05 23:42:48","endLine":897,"groupId":"5459","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/53/2c33a7571c5f2ec30eab732e829f18d045e38a.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        if (expiring || !isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n            setValid(false);\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"M"},{"authorDate":"2012-07-05 05:24:28","commitOrder":24,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2012-07-05 05:24:28","endLine":1511,"groupId":"11140","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/22fd2733c4073c39b8428aebc3f73c71f9f7a4.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1404,"status":"N"}],"commitId":"262c06961eaa4ca07fc4f696382a0633cb175321","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55521\nEnsure that session.expire() doesn't return until the session has been invalidated.\nEnsure that the return valid of session.isValid() is consistent the current state.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1520349 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-09-05 23:42:48","modifiedFileCount":"2","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-05 05:24:28","codes":[{"authorDate":"2014-01-22 22:39:51","commitOrder":25,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (!isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = bindThread(context);\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                unbindThread(context, oldContextClassLoader);\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2014-01-22 22:39:51","endLine":879,"groupId":"0","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/69/f1c0d82e29da6a3a0bbffede4ea141bd5ce24d.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (!isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldTccl = null;\n            if (context.getLoader() != null &&\n                    context.getLoader().getClassLoader() != null) {\n                oldTccl = Thread.currentThread().getContextClassLoader();\n                if (Globals.IS_SECURITY_ENABLED) {\n                    PrivilegedAction<Void> pa = new PrivilegedSetTccl(\n                            context.getLoader().getClassLoader());\n                    AccessController.doPrivileged(pa);\n                } else {\n                    Thread.currentThread().setContextClassLoader(\n                            context.getLoader().getClassLoader());\n                }\n            }\n            try {\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                if (oldTccl != null) {\n                    if (Globals.IS_SECURITY_ENABLED) {\n                        PrivilegedAction<Void> pa =\n                            new PrivilegedSetTccl(oldTccl);\n                        AccessController.doPrivileged(pa);\n                    } else {\n                        Thread.currentThread().setContextClassLoader(oldTccl);\n                    }\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":779,"status":"M"},{"authorDate":"2012-07-05 05:24:28","commitOrder":25,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2012-07-05 05:24:28","endLine":1511,"groupId":"11140","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/22fd2733c4073c39b8428aebc3f73c71f9f7a4.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1404,"status":"N"}],"commitId":"b4578e21d7166db9a7b109d95c110e30ad402d7c","commitMessage":"@@@- Drop the code from SSO (I didn't know StandardSession.expire was already setting the context CL.\n- Add bind/unbind to StandardSession.expire instead (and only do it if the classloader actually changes).\n- See later if the bind/unbind code can be moved to StandardContext.  but all uses seem slightly different.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1560363 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-22 22:39:51","modifiedFileCount":"3","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2012-07-05 05:24:28","codes":[{"authorDate":"2014-01-23 20:18:14","commitOrder":26,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (!isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2014-01-23 20:18:14","endLine":878,"groupId":"3511","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/3d/f6c72d185d3700114c9a3941951bf027416742.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (!isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = bindThread(context);\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                unbindThread(context, oldContextClassLoader);\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"M"},{"authorDate":"2012-07-05 05:24:28","commitOrder":26,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2012-07-05 05:24:28","endLine":1511,"groupId":"11140","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/22fd2733c4073c39b8428aebc3f73c71f9f7a4.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1404,"status":"N"}],"commitId":"deb3a0f177396188d30e9f65ec381e570e722a76","commitMessage":"@@@Migrate to Context bind()/unbind()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1560660 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-23 20:18:14","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-05 05:24:28","codes":[{"authorDate":"2014-04-05 05:19:58","commitOrder":27,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","date":"2014-04-05 05:19:58","endLine":902,"groupId":"3511","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a8/025cc4f5593b52f10cee5f9f461a7b29f1e98c.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            if (!isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"M"},{"authorDate":"2012-07-05 05:24:28","commitOrder":27,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2012-07-05 05:24:28","endLine":1511,"groupId":"11140","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/22fd2733c4073c39b8428aebc3f73c71f9f7a4.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1404,"status":"N"}],"commitId":"8c53cd705a4ae79b5e44249b3d4e2a78286592cb","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56339\nAvoid an infinite loop if an application calls session.invalidate() from the session destroyed event for that session.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1584915 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-05 05:19:58","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2012-07-05 05:24:28","codes":[{"authorDate":"2014-05-17 02:27:25","commitOrder":28,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","date":"2014-05-17 02:27:25","endLine":908,"groupId":"3511","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/02/bbb565427908461796838ffdb87deb4b470ee0.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                if (notify) {\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            for (int i = 0; i < keys.length; i++)\n                removeAttributeInternal(keys[i], notify);\n\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"M"},{"authorDate":"2012-07-05 05:24:28","commitOrder":28,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2012-07-05 05:24:28","endLine":1511,"groupId":"11140","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/1e/22fd2733c4073c39b8428aebc3f73c71f9f7a4.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1404,"status":"N"}],"commitId":"1a8a56d3c5ff003de4665888f00cc38f12b1e6a4","commitMessage":"@@@Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56536\nEnsure that HttpSessionBindingListener.valueUnbound() uses the correct class loader when the <code>SingleSignOn</code> valve is used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1595285 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-17 02:27:25","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2016-01-16 01:40:18","codes":[{"authorDate":"2014-05-17 02:27:25","commitOrder":29,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","date":"2014-05-17 02:27:25","endLine":908,"groupId":"3511","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/02/bbb565427908461796838ffdb87deb4b470ee0.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"N"},{"authorDate":"2016-01-16 01:40:18","commitOrder":29,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n        if ((manager != null) && manager.getDistributable() &&\n                !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\n                    \"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2016-01-16 01:40:18","endLine":1564,"groupId":"11140","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/6f/fba7af2bab7933a374d3230b009182a07894e4.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal())\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        if ((manager != null) && manager.getDistributable() &&\n          !isAttributeDistributable(name, value))\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.iae\", name));\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1455,"status":"M"}],"commitId":"2ab4a1b54f6301f038a309e8ea7f4692b7dd5a8b","commitMessage":"@@@Refactoring\nMake the session attribute distribution / filtering more consistent across the various Manager and Session implementation.\nDifferentiate between\n- whether or not it is possible for an attribute to be distributed - Session.isAttributeDistributable()\n- whether or not the Manager wants and attribute to be distributed - Manager.willAttributeDistribute\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1724863 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-16 01:40:18","modifiedFileCount":"9","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-01-20 07:27:17","codes":[{"authorDate":"2014-05-17 02:27:25","commitOrder":30,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","date":"2014-05-17 02:27:25","endLine":908,"groupId":"3511","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/02/bbb565427908461796838ffdb87deb4b470ee0.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"N"},{"authorDate":"2016-01-20 07:27:17","commitOrder":30,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n        if ((manager != null) && manager.getContext().getDistributable() &&\n                !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\n                    \"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","date":"2016-01-20 07:27:17","endLine":1556,"groupId":"11140","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/18/b23937fdaf81ce6ccfefcec6d9049ab712c572.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n        if ((manager != null) && manager.getDistributable() &&\n                !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\n                    \"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1447,"status":"M"}],"commitId":"8bc6fa5140ea23e97922ff07b345b92450da3618","commitMessage":"@@@Use distributable and sessionTimeout from Context rather than values copied to Manager since the Context values (should) always take precedence and overwrite anything set on the Manager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725651 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-20 07:27:17","modifiedFileCount":"4","status":"M","submitter":"Mark Thomas"},{"authorTime":"2018-02-26 17:48:14","codes":[{"authorDate":"2014-05-17 02:27:25","commitOrder":31,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","date":"2014-05-17 02:27:25","endLine":908,"groupId":"3511","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/02/bbb565427908461796838ffdb87deb4b470ee0.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"N"},{"authorDate":"2018-02-26 17:48:14","commitOrder":31,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n        if ((manager != null) && manager.getContext().getDistributable() &&\n                !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound instanceof HttpSessionBindingListener) && (unbound != value)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound(\n                        new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","date":"2018-02-26 17:48:14","endLine":1500,"groupId":"0","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/41/70723f5a53cf13615981719d5c9d81e907222f.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null)\n            throw new IllegalArgumentException\n                (sm.getString(\"standardSession.setAttribute.namenull\"));\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(sm.getString(\n                    \"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n        if ((manager != null) && manager.getContext().getDistributable() &&\n                !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\n                    \"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound != null) && (unbound != value) &&\n            (unbound instanceof HttpSessionBindingListener)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound\n                    (new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if ( !notify ) return;\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null)\n            return;\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener))\n                continue;\n            HttpSessionAttributeListener listener =\n                (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\",\n                            listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\",\n                            listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent\n                            (getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                            listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\n                                \"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\",\n                                listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error\n                    (sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1397,"status":"M"}],"commitId":"1cb5b2b56ad0e76ca0182fe8b5ceb20130b70bd1","commitMessage":"@@@Code clean-up.\nNo functional change.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1825349 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-02-26 17:48:14","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2018-02-26 18:00:12","codes":[{"authorDate":"2014-05-17 02:27:25","commitOrder":32,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","date":"2014-05-17 02:27:25","endLine":908,"groupId":"3511","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/02/bbb565427908461796838ffdb87deb4b470ee0.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"N"},{"authorDate":"2018-02-26 18:00:12","commitOrder":32,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n        if ((manager != null) && manager.getContext().getDistributable() &&\n                !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    }\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","date":"2018-02-26 18:00:12","endLine":1510,"groupId":"9286","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/68/5c5a169a90af30ca0d472aa618ae8e421bc67e.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n        if ((manager != null) && manager.getContext().getDistributable() &&\n                !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && (unbound instanceof HttpSessionBindingListener) && (unbound != value)) {\n            try {\n                ((HttpSessionBindingListener) unbound).valueUnbound(\n                        new HttpSessionBindingEvent(getSession(), name));\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.bindingEvent\"), t);\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                    }\n                    listener.attributeReplaced(event);\n                    context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1397,"status":"M"}],"commitId":"1bf4d7d49781f49e336b253781a79fbf05548530","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=43866\nAdd additional attributes to the Manager to provide control over which listeners are called when an attribute is added to the session when it has already been added under the same name. This is to aid clustering scenarios where setAttribute() is often called to signal that the attribute value has been mutated and needs to be replicated but it may not be required.  or even desired.  for the the associated listeners to be triggered. The default behaviour has not been changed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1825351 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-02-26 18:00:12","modifiedFileCount":"3","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-05-18 22:43:52","codes":[{"authorDate":"2014-05-17 02:27:25","commitOrder":33,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","date":"2014-05-17 02:27:25","endLine":908,"groupId":"3511","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/02/bbb565427908461796838ffdb87deb4b470ee0.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"N"},{"authorDate":"2019-05-18 22:43:52","commitOrder":33,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n\n        Context context = manager.getContext();\n\n        if (context.getDistributable() && !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    }\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","date":"2019-05-18 23:00:14","endLine":1510,"groupId":"7048","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/77/532121b5cd1e2a2818797f48003a114af4ce5c.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n        if ((manager != null) && manager.getContext().getDistributable() &&\n                !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Context context = manager.getContext();\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    }\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1397,"status":"M"}],"commitId":"f488fb08f8204126da79fd9d333c04d1ad936567","commitMessage":"@@@Refactor to avoid unnecessary null checks. Identified by Coverity Scan.\n","date":"2019-05-18 23:00:14","modifiedFileCount":"4","status":"M","submitter":"Mark Thomas"},{"authorTime":"2019-05-18 22:43:52","codes":[{"authorDate":"2020-03-26 18:29:47","commitOrder":34,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (activityCheck) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","date":"2020-03-26 18:29:47","endLine":855,"groupId":"3511","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0e/8402a45e08e55d06d8714f400142702f49a057.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (ACTIVITY_CHECK) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":747,"status":"M"},{"authorDate":"2019-05-18 22:43:52","commitOrder":34,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n\n        Context context = manager.getContext();\n\n        if (context.getDistributable() && !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    }\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","date":"2019-05-18 23:00:14","endLine":1510,"groupId":"7048","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/77/532121b5cd1e2a2818797f48003a114af4ce5c.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n\n        Context context = manager.getContext();\n\n        if (context.getDistributable() && !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    }\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1397,"status":"N"}],"commitId":"b79e56c7739d8151ad6b0d1d34da3404bc46da34","commitMessage":"@@@Remove two system properties used for configuration\n\nAgain two rarely used properties (well.  not for the TCK).  both in the\nsession package:\n- org.apache.catalina.session.StandardSession.ACTIVITY_CHECK is replaced\nby the Manager.sessionActivityCheck attribute\n- org.apache.catalina.session.StandardSession.LAST_ACCESS_AT_START is\nreplaced by the Manager.sessionLastAccessAtStart attribute","date":"2020-03-26 18:29:47","modifiedFileCount":"5","status":"M","submitter":"remm"},{"authorTime":"2020-04-23 05:49:33","codes":[{"authorDate":"2020-04-23 05:49:33","commitOrder":35,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (activityCheck) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (String key : keys) {\n                    removeAttributeInternal(key, notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","date":"2020-05-04 15:18:37","endLine":855,"groupId":"3511","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/08/8a20409d7d8ce814d4e16725da862a3c659bd8.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (activityCheck) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (int i = 0; i < keys.length; i++) {\n                    removeAttributeInternal(keys[i], notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":747,"status":"M"},{"authorDate":"2020-04-23 05:49:33","commitOrder":35,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n\n        Context context = manager.getContext();\n\n        if (context.getDistributable() && !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (Object o : listeners) {\n            if (!(o instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) o;\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    }\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","date":"2020-05-04 15:18:37","endLine":1501,"groupId":"9286","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/08/8a20409d7d8ce814d4e16725da862a3c659bd8.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n\n        Context context = manager.getContext();\n\n        if (context.getDistributable() && !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (int i = 0; i < listeners.length; i++) {\n            if (!(listeners[i] instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) listeners[i];\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    }\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1388,"status":"M"}],"commitId":"af4ecdfe038f1b4bf3e8ce880385b6e095956912","commitMessage":"@@@Replace indexed for loops and iterator while with foreach\n","date":"2020-05-04 15:18:37","modifiedFileCount":"197","status":"M","submitter":"Lars Grefer"},{"authorTime":"2020-04-23 05:49:33","codes":[{"authorDate":"2021-05-26 18:09:29","commitOrder":36,"curCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid) {\n            return;\n        }\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid) {\n                return;\n            }\n\n            if (manager == null) {\n                return;\n            }\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener)) {\n                                continue;\n                            }\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (activityCheck) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (String key : keys) {\n                    removeAttributeInternal(key, notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","date":"2021-05-26 18:09:29","endLine":859,"groupId":"10823","id":71,"instanceNumber":1,"isCurCommit":1,"methodName":"expire","params":"(booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/0c/418651d5d85775c3e60861969c6a3a3878679a.src","preCode":"    public void expire(boolean notify) {\n\n        \r\n        \r\n        \r\n        if (!isValid)\n            return;\n\n        synchronized (this) {\n            \r\n            \r\n            \r\n            \r\n            if (expiring || !isValid)\n                return;\n\n            if (manager == null)\n                return;\n\n            \r\n            expiring = true;\n\n            \r\n            \r\n            Context context = manager.getContext();\n\n            \r\n            \r\n            \r\n            if (notify) {\n                ClassLoader oldContextClassLoader = null;\n                try {\n                    oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                    Object listeners[] = context.getApplicationLifecycleListeners();\n                    if (listeners != null && listeners.length > 0) {\n                        HttpSessionEvent event =\n                            new HttpSessionEvent(getSession());\n                        for (int i = 0; i < listeners.length; i++) {\n                            int j = (listeners.length - 1) - i;\n                            if (!(listeners[j] instanceof HttpSessionListener))\n                                continue;\n                            HttpSessionListener listener =\n                                (HttpSessionListener) listeners[j];\n                            try {\n                                context.fireContainerEvent(\"beforeSessionDestroyed\",\n                                        listener);\n                                listener.sessionDestroyed(event);\n                                context.fireContainerEvent(\"afterSessionDestroyed\",\n                                        listener);\n                            } catch (Throwable t) {\n                                ExceptionUtils.handleThrowable(t);\n                                try {\n                                    context.fireContainerEvent(\n                                            \"afterSessionDestroyed\", listener);\n                                } catch (Exception e) {\n                                    \r\n                                }\n                                manager.getContext().getLogger().error\n                                    (sm.getString(\"standardSession.sessionEvent\"), t);\n                            }\n                        }\n                    }\n                } finally {\n                    context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n                }\n            }\n\n            if (activityCheck) {\n                accessCount.set(0);\n            }\n\n            \r\n            manager.remove(this, true);\n\n            \r\n            if (notify) {\n                fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n            }\n\n            \r\n            if (principal instanceof TomcatPrincipal) {\n                TomcatPrincipal gp = (TomcatPrincipal) principal;\n                try {\n                    gp.logout();\n                } catch (Exception e) {\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.logoutfail\"),\n                            e);\n                }\n            }\n\n            \r\n            setValid(false);\n            expiring = false;\n\n            \r\n            String keys[] = keys();\n            ClassLoader oldContextClassLoader = null;\n            try {\n                oldContextClassLoader = context.bind(Globals.IS_SECURITY_ENABLED, null);\n                for (String key : keys) {\n                    removeAttributeInternal(key, notify);\n                }\n            } finally {\n                context.unbind(Globals.IS_SECURITY_ENABLED, oldContextClassLoader);\n            }\n        }\n\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":747,"status":"M"},{"authorDate":"2020-04-23 05:49:33","commitOrder":36,"curCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n\n        Context context = manager.getContext();\n\n        if (context.getDistributable() && !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (Object o : listeners) {\n            if (!(o instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) o;\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    }\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","date":"2020-05-04 15:18:37","endLine":1501,"groupId":"10823","id":72,"instanceNumber":2,"isCurCommit":0,"methodName":"setAttribute","params":"(Stringname@Objectvalue@booleannotify)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/08/8a20409d7d8ce814d4e16725da862a3c659bd8.src","preCode":"    public void setAttribute(String name, Object value, boolean notify) {\n\n        \r\n        if (name == null) {\n            throw new IllegalArgumentException(\n                    sm.getString(\"standardSession.setAttribute.namenull\"));\n        }\n\n        \r\n        if (value == null) {\n            removeAttribute(name);\n            return;\n        }\n\n        \r\n        if (!isValidInternal()) {\n            throw new IllegalStateException(\n                    sm.getString(\"standardSession.setAttribute.ise\", getIdInternal()));\n        }\n\n        Context context = manager.getContext();\n\n        if (context.getDistributable() && !isAttributeDistributable(name, value) && !exclude(name, value)) {\n            throw new IllegalArgumentException(sm.getString(\"standardSession.setAttribute.iae\", name));\n        }\n        \r\n        HttpSessionBindingEvent event = null;\n\n        \r\n        if (notify && value instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            Object oldValue = attributes.get(name);\n            if (value != oldValue || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                event = new HttpSessionBindingEvent(getSession(), name, value);\n                try {\n                    ((HttpSessionBindingListener) value).valueBound(event);\n                } catch (Throwable t){\n                    manager.getContext().getLogger().error(\n                            sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        \r\n        Object unbound = attributes.put(name, value);\n\n        \r\n        if (notify && unbound instanceof HttpSessionBindingListener) {\n            \r\n            \r\n            if (unbound != value || manager.getNotifyBindingListenerOnUnchangedValue()) {\n                try {\n                    ((HttpSessionBindingListener) unbound).valueUnbound\n                        (new HttpSessionBindingEvent(getSession(), name));\n                } catch (Throwable t) {\n                    ExceptionUtils.handleThrowable(t);\n                    manager.getContext().getLogger().error\n                        (sm.getString(\"standardSession.bindingEvent\"), t);\n                }\n            }\n        }\n\n        if (!notify) {\n            return;\n        }\n\n        \r\n        Object listeners[] = context.getApplicationEventListeners();\n        if (listeners == null) {\n            return;\n        }\n        for (Object o : listeners) {\n            if (!(o instanceof HttpSessionAttributeListener)) {\n                continue;\n            }\n            HttpSessionAttributeListener listener = (HttpSessionAttributeListener) o;\n            try {\n                if (unbound != null) {\n                    if (unbound != value || manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                        context.fireContainerEvent(\"beforeSessionAttributeReplaced\", listener);\n                        if (event == null) {\n                            event = new HttpSessionBindingEvent(getSession(), name, unbound);\n                        }\n                        listener.attributeReplaced(event);\n                        context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                    }\n                } else {\n                    context.fireContainerEvent(\"beforeSessionAttributeAdded\", listener);\n                    if (event == null) {\n                        event = new HttpSessionBindingEvent(getSession(), name, value);\n                    }\n                    listener.attributeAdded(event);\n                    context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                }\n            } catch (Throwable t) {\n                ExceptionUtils.handleThrowable(t);\n                try {\n                    if (unbound != null) {\n                        if (unbound != value ||\n                                manager.getNotifyAttributeListenerOnUnchangedValue()) {\n                            context.fireContainerEvent(\"afterSessionAttributeReplaced\", listener);\n                        }\n                    } else {\n                        context.fireContainerEvent(\"afterSessionAttributeAdded\", listener);\n                    }\n                } catch (Exception e) {\n                    \r\n                }\n                manager.getContext().getLogger().error(\n                        sm.getString(\"standardSession.attributeEvent\"), t);\n            }\n        }\n    }\n","realPath":"java/org/apache/catalina/session/StandardSession.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":1388,"status":"N"}],"commitId":"6a667943c5da6b5d61ac6bec1d7c9de061e3217c","commitMessage":"@@@Code clean-up. Add braces for clarity.\n\nClean-up commit primarily to trigger CI build to test buildbot renaming","date":"2021-05-26 18:09:29","modifiedFileCount":"44","status":"M","submitter":"Mark Thomas"}]
