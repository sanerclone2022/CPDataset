[{"authorTime":"2013-08-19 22:54:15","codes":[{"authorDate":"2013-09-04 01:47:24","commitOrder":2,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(500), \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2013-09-04 01:47:24","endLine":115,"groupId":"1216","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b4/e0188a66131ce77ccf8e1492bdcf1b20ec91a7.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(500), \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2013-08-19 22:54:15","commitOrder":2,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2013-08-19 22:54:15","endLine":362,"groupId":"1216","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/22/bf246c2eeccfc6c93123fa3e561dc620c7fb40.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"NB"}],"commitId":"6d6c9a59ec978b428fbeda614b38cc2d6c6fb745","commitMessage":"@@@Add state checks to non-blocking reads that match those for non-blocking writes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1519766 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-09-04 01:47:24","modifiedFileCount":"3","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2014-10-30 03:45:02","codes":[{"authorDate":"2013-09-04 01:47:24","commitOrder":3,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(500), \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2013-09-04 01:47:24","endLine":115,"groupId":"1216","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/b4/e0188a66131ce77ccf8e1492bdcf1b20ec91a7.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(500), \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2014-10-30 03:45:02","commitOrder":3,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2014-10-30 03:45:02","endLine":389,"groupId":"1216","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/3f/47769044a474423ee356c78d5589e72a835761.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"d183dfbbe20804a7523cafa957461da1b9afd8a6","commitMessage":"@@@Avoid using /tmp as a docBase where it is not necessary\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1635279 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-10-30 03:45:02","modifiedFileCount":"1","status":"M","submitter":"Mark Emlyn David Thomas"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2016-08-31 00:41:12","commitOrder":4,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(500), \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":112,"groupId":"1770","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(500), \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":4,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"12547","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMapping(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"M"}],"commitId":"1ab3266d53d7b273d431154229385e216662f34a","commitMessage":"@@@\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1758423 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-08-31 00:41:12","modifiedFileCount":"100","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2018-01-04 04:03:15","commitOrder":5,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(500), \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2018-01-04 04:03:15","endLine":118,"groupId":"1770","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/31/a73b40749014e9f2fdbdf0488a59c6fbf946f8.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        StandardContext ctx = (StandardContext) tomcat.addContext(\"\",\n                System.getProperty(\"java.io.tmpdir\"));\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(500), \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":5,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"12547","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"}],"commitId":"1b6b496dadc2891b5428316dfbc8936a31f65c72","commitMessage":"@@@Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61932\nAllow a call to AsyncContext.dispatch() to terminate non-blocking I/O.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1820003 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2018-01-04 04:03:15","modifiedFileCount":"2","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2019-02-18 22:09:37","commitOrder":6,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 1000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2019-02-18 22:09:37","endLine":131,"groupId":"1272","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady@booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/31/42eff7606e390bb523c989dafc1988a5d0b469.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(500), \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":6,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"12547","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"}],"commitId":"fc6b66f4b22bd0cf56e1f1e4c82446904711031c","commitMessage":"@@@Add test for 63182.  which is probably valid.  skip for NIO2\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1853802 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-02-18 22:09:37","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2019-02-19 22:58:00","commitOrder":7,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2019-02-19 22:58:00","endLine":124,"groupId":"1272","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady@booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/f4/738ec104157dcd5d2e424fd095208b7425f3c1.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 1000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":7,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"12547","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"}],"commitId":"b64f8a45637b35efed6856da02218178c7ddb157","commitMessage":"@@@63182: Avoid extra notifications when using non container threads on read causing thread safety problems. Tentative fix.  but the pattern is clearly causing a thread safety problem there. Also move ContainerMarkerThread.  but leave the old location around for compatibility.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1853886 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-02-19 22:58:00","modifiedFileCount":"3","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2019-02-20 18:48:18","commitOrder":8,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n    }\n","date":"2019-02-20 18:48:18","endLine":126,"groupId":"1272","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady@booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/45/275533fb15501a30d7fc76f16f8ac2a24b41fc.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":8,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"12547","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"}],"commitId":"33d0d065b3915652c03f2cfaa57fbfb78c51e7ae","commitMessage":"@@@Improve test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1853948 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-02-20 18:48:18","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2019-02-20 19:50:55","commitOrder":9,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        if (async) {\n            Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n        } else {\n            Assert.assertEquals(5 * 8, servlet.listener.body.length());\n        }\n    }\n","date":"2019-02-20 19:50:55","endLine":130,"groupId":"1272","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady@booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/26/6737d6212ccdc339cde4260cc7e487b0a81adb.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":9,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"12547","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"}],"commitId":"d2713775ed637c0b579e7d99120d97d18283ecde","commitMessage":"@@@Fix test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1853951 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-02-20 19:50:55","modifiedFileCount":"2","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2019-02-22 00:37:20","commitOrder":10,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        if (async) {\n            Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n            TestAsyncReadListener listener = (TestAsyncReadListener) servlet.listener;\n            Assert.assertEquals(listener.notReadyCount, listener.containerThreadCount);\n            Assert.assertEquals(listener.isReadyCount, listener.nonContainerThreadCount);\n        } else {\n            Assert.assertEquals(5 * 8, servlet.listener.body.length());\n        }\n    }\n","date":"2019-02-22 00:37:20","endLine":133,"groupId":"1272","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady@booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/dc/280b176aa876fe3905fa8c681a394d5f1785ab.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        if (async) {\n            Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n        } else {\n            Assert.assertEquals(5 * 8, servlet.listener.body.length());\n        }\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":10,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"12547","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"}],"commitId":"33161af9713e5a49880476049c63c218e9878852","commitMessage":"@@@Refactor to redo fix for 63182. The root cause is that the pending flag is released once processing start.  and concurrent unsynced access from non container threads can cause awaitBytes to happen concurrently.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1854066 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-02-22 00:37:20","modifiedFileCount":"11","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2019-02-22 02:27:54","commitOrder":11,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        if (async) {\n            Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n            TestAsyncReadListener listener = (TestAsyncReadListener) servlet.listener;\n            Assert.assertTrue(Math.abs(listener.containerThreadCount - listener.notReadyCount)  <= 1);\n            Assert.assertEquals(listener.isReadyCount, listener.nonContainerThreadCount);\n        } else {\n            Assert.assertEquals(5 * 8, servlet.listener.body.length());\n        }\n    }\n","date":"2019-02-22 02:27:54","endLine":133,"groupId":"1272","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady@booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/60/d894a4415271be0e45de0af3d66d251c794fb0.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        if (async) {\n            Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n            TestAsyncReadListener listener = (TestAsyncReadListener) servlet.listener;\n            Assert.assertEquals(listener.notReadyCount, listener.containerThreadCount);\n            Assert.assertEquals(listener.isReadyCount, listener.nonContainerThreadCount);\n        } else {\n            Assert.assertEquals(5 * 8, servlet.listener.body.length());\n        }\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":11,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"12547","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"}],"commitId":"ca2ddc0eed8a9df8904e85b84c65bfd08633a555","commitMessage":"@@@It is unclear if the two need to be strictly equal.  so relax check.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1854075 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2019-02-22 02:27:54","modifiedFileCount":"1","status":"M","submitter":"Remy Maucherat"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2019-03-01 00:49:42","commitOrder":12,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        if (async) {\n            Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n            TestAsyncReadListener listener = (TestAsyncReadListener) servlet.listener;\n            Assert.assertTrue(Math.abs(listener.containerThreadCount.get() - listener.notReadyCount.get())  <= 1);\n            Assert.assertEquals(listener.isReadyCount.get(), listener.nonContainerThreadCount.get());\n        } else {\n            Assert.assertEquals(5 * 8, servlet.listener.body.length());\n        }\n    }\n","date":"2019-03-01 00:49:42","endLine":138,"groupId":"1272","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady@booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/87/25623ab767eab21ff627a5db1f5d98ee1b158c.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        if (async) {\n            Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n            TestAsyncReadListener listener = (TestAsyncReadListener) servlet.listener;\n            Assert.assertTrue(Math.abs(listener.containerThreadCount - listener.notReadyCount)  <= 1);\n            Assert.assertEquals(listener.isReadyCount, listener.nonContainerThreadCount);\n        } else {\n            Assert.assertEquals(5 * 8, servlet.listener.body.length());\n        }\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":12,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"12547","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"}],"commitId":"bc3c0724a558ba2014b91e452779f1f388f3fe7b","commitMessage":"@@@Fix SpotBugs warnings\n\nint -> AtomicInteger to address atomicity issues\nRefactoring to address Serialization issues","date":"2019-03-01 00:49:42","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"},{"authorTime":"2016-08-31 00:41:12","codes":[{"authorDate":"2021-03-23 00:16:44","commitOrder":13,"curCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> reqHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), reqHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        if (async) {\n            Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n            TestAsyncReadListener listener = (TestAsyncReadListener) servlet.listener;\n            Assert.assertTrue(Math.abs(listener.containerThreadCount.get() - listener.notReadyCount.get())  <= 1);\n            Assert.assertEquals(listener.isReadyCount.get(), listener.nonContainerThreadCount.get());\n        } else {\n            Assert.assertEquals(5 * 8, servlet.listener.body.length());\n        }\n    }\n","date":"2021-03-23 03:31:57","endLine":143,"groupId":"101739","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNonBlockingRead","params":"(booleanignoreIsReady@booleanasync)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/a4/eaddc0ebf1433c5dd469dfcea8d9887e3230bb.src","preCode":"    private void doTestNonBlockingRead(boolean ignoreIsReady, boolean async) throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadServlet servlet = new NBReadServlet(ignoreIsReady, async);\n        String servletName = NBReadServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(true, new DataWriter(async ? 0 : 500, async ? 2000000 : 5),\n                \"http://localhost:\" + getPort() + \"/\", new ByteChunk(), resHeaders, null);\n\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n        if (async) {\n            Assert.assertEquals(2000000 * 8, servlet.listener.body.length());\n            TestAsyncReadListener listener = (TestAsyncReadListener) servlet.listener;\n            Assert.assertTrue(Math.abs(listener.containerThreadCount.get() - listener.notReadyCount.get())  <= 1);\n            Assert.assertEquals(listener.isReadyCount.get(), listener.nonContainerThreadCount.get());\n        } else {\n            Assert.assertEquals(5 * 8, servlet.listener.body.length());\n        }\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2016-08-31 00:41:12","commitOrder":13,"curCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","date":"2016-08-31 00:41:12","endLine":395,"groupId":"101739","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testBug55438NonBlockingReadWriteEmptyRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-tomcat-10-0.7/blobInfo/CC_OUT/blobs/af/33a9e9146019bf1372ac0d68a6e164a1d69e47.src","preCode":"    public void testBug55438NonBlockingReadWriteEmptyRead() throws Exception {\n        Tomcat tomcat = getTomcatInstance();\n\n        \r\n        Context ctx = tomcat.addContext(\"\", null);\n\n        NBReadWriteServlet servlet = new NBReadWriteServlet();\n        String servletName = NBReadWriteServlet.class.getName();\n        Tomcat.addServlet(ctx, servletName, servlet);\n        ctx.addServletMappingDecoded(\"/\", servletName);\n\n        tomcat.start();\n\n        Map<String, List<String>> resHeaders = new HashMap<>();\n        int rc = postUrl(false, new BytesStreamer() {\n            @Override\n            public byte[] next() {\n                return new byte[] {};\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n\n            @Override\n            public int available() {\n                return 0;\n            }\n        }, \"http://localhost:\" +\n                getPort() + \"/\", new ByteChunk(), resHeaders, null);\n        Assert.assertEquals(HttpServletResponse.SC_OK, rc);\n    }\n","realPath":"test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java","repoName":"tomcat","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"}],"commitId":"174fa5679b401bfbff11392dac01a6f662ddf700","commitMessage":"@@@Better variable name. These are request headers.  not response headers.","date":"2021-03-23 03:31:57","modifiedFileCount":"1","status":"M","submitter":"Mark Thomas"}]
